// Call Graph
digraph {
	rankdir=TB
	node [shape=box]
	subgraph cluster_pytorch {
		node [color=white style=filled]
		label=pytorch
		color=lightgrey style=filled
		pytorch
	}
	subgraph "cluster_Built-in (builtins)" {
		node [color=white style=filled]
		label="Built-in (builtins)"
		color=lightgrey style=filled
		"Built-in (builtins)"
	}
	subgraph "cluster_Standard Library" {
		node [color=white style=filled]
		label="Standard Library"
		color=lightgrey style=filled
		"Standard Library"
	}
	"Standard Library" -> "Built-in (_weakref)"
	"Standard Library" -> "self._long_break_matcher.sub"
	"Standard Library" -> TokenInfo
	"Standard Library" -> "s.opengroup"
	"Standard Library" -> "ret.reverse"
	"Standard Library" -> get
	"Standard Library" -> mapping_get
	"Standard Library" -> "self._pop_action_class"
	"Standard Library" -> "self.items"
	"Standard Library" -> "dict.pop"
	"Standard Library" -> "self.data.isascii"
	"Standard Library" -> "self.print_usage"
	"Standard Library" -> "simple_value.replace"
	"Standard Library" -> "self.scanner.scanner"
	"Standard Library" -> "enc.startswith"
	"Standard Library" -> "self.data.pop"
	"Standard Library" -> "member.__init__"
	"Standard Library" -> "lines.append"
	"Standard Library" -> h_append
	"Standard Library" -> get_metavar
	"Standard Library" -> "Built-in (builtins)"
	pytorch -> "Standard Library"
	"Standard Library" -> union
	"Standard Library" -> "invocations.append"
	"Standard Library" -> "self.fget"
	"Standard Library" -> "interesting.discard"
	"Standard Library" -> "field_names.replace"
	"Standard Library" -> "self._Section"
	"Standard Library" -> "text.split"
	"Standard Library" -> "dist.dump_option_dicts"
	"Standard Library" -> "chunk.rfind"
	"Standard Library" -> "self.data.ljust"
	"Standard Library" -> "self._add_action"
	"Standard Library" -> "self._fallback.npgettext"
	"Standard Library" -> dict_delitem
	"Standard Library" -> "s.closegroup"
	"Standard Library" -> "last_values.append"
	"Standard Library" -> "indent.startswith"
	pytorch -> "Built-in"
	"Standard Library" -> "names.replace"
	"Standard Library" -> "self.data.rfind"
	"Standard Library" -> "self._choices_actions.append"
	"Standard Library" -> "self._has_negative_number_optionals.append"
	"Standard Library" -> "pattern.translate"
	"Standard Library" -> "k.strip"
	"Standard Library" -> "classdict.setdefault"
	"Standard Library" -> "result.append"
	"Standard Library" -> add_group
	"Standard Library" -> "self.data.rsplit"
	"Standard Library" -> "parser.print_help"
	"Standard Library" -> "self.data.capitalize"
	"Standard Library" -> "_deepcopy_dispatch.get"
	"Standard Library" -> "Built-in (_tokenize)"
	"Standard Library" -> Untokenizer
	"Standard Library" -> "mo.group"
	"Standard Library" -> "Built-in (_thread)"
	"Standard Library" -> "tarobj.close"
	"Standard Library" -> "self._call"
	"Standard Library" -> self_get
	"Standard Library" -> "new_arg_strings.extend"
	"Standard Library" -> type_func
	"Standard Library" -> "self._dedent"
	"Standard Library" -> "sup.__init__"
	"Standard Library" -> "tarobj.extractall"
	"Standard Library" -> "self._root_section.format_help"
	"Standard Library" -> "self._get_option_tuples"
	"Standard Library" -> "nargs_pattern.replace"
	"Standard Library" -> "entry.is_dir"
	"Standard Library" -> "_parser.SubPattern"
	"Standard Library" -> fw
	"Standard Library" -> parsers_class
	"Standard Library" -> "self.convert_arg_line_to_args"
	"Standard Library" -> "self._name_.split"
	"Standard Library" -> "option_string.split"
	"Standard Library" -> "match.group"
	"Standard Library" -> "line.append"
	"Standard Library" -> "self.data.islower"
	"Standard Library" -> func
	"Standard Library" -> "long_option_strings.append"
	"Standard Library" -> "self.update"
	"Standard Library" -> "self.error"
	"Standard Library" -> "self._group_actions.append"
	"Standard Library" -> "help.strip"
	"Standard Library" -> "classdict.pop"
	"Standard Library" -> "inserts.pop"
	"Standard Library" -> ignore
	"Standard Library" -> stat_func
	"Standard Library" -> "registry.keys"
	"Standard Library" -> "parser.parse_args"
	"Standard Library" -> "match.groups"
	"Standard Library" -> "self.data.isdigit"
	"Standard Library" -> "v.split"
	"Standard Library" -> "action.help.strip"
	"Standard Library" -> make_key
	"Standard Library" -> "parts.append"
	"Standard Library" -> "self.__map.clear"
	"Standard Library" -> "failed_member.append"
	"Standard Library" -> "self._mutually_exclusive_groups.append"
	"Standard Library" -> "self._split_lines"
	"Standard Library" -> rstrip
	"Standard Library" -> "text.translate"
	"Standard Library" -> "zf.write"
	"Standard Library" -> "self._positionals._add_action"
	"Standard Library" -> "self.__map.pop"
	"Standard Library" -> "v.strip"
	"Standard Library" -> "kwds.values"
	"Standard Library" -> "inserts.get"
	"Standard Library" -> "enumeration._member_map_.items"
	"Standard Library" -> "ret.append"
	"Standard Library" -> "self.data.copy"
	"Standard Library" -> "redirect.__set_name__"
	"Standard Library" -> "blank_re.match"
	"Standard Library" -> "qualname.endswith"
	"Standard Library" -> match
	"Standard Library" -> "pieces.append"
	"Standard Library" -> "entry.stat"
	"Standard Library" -> "pathext_source.split"
	"Standard Library" -> "self._parser_class"
	"Standard Library" -> "a.__index__"
	"Standard Library" -> "self.name.split"
	"Standard Library" -> "self.wrap"
	"Standard Library" -> "cls._member_map_.values"
	"Standard Library" -> klass
	"Standard Library" -> _dict
	"Standard Library" -> "text.splitlines"
	"Standard Library" -> "member_names.append"
	"Standard Library" -> "self._split_chunks"
	"Standard Library" -> "Standard Library"
	"Standard Library" -> "value.bit_length"
	"Standard Library" -> "str.__new__"
	"Standard Library" -> "t.install"
	"Standard Library" -> "args_file.read"
	"Standard Library" -> _heapreplace
	"Standard Library" -> "lines.extend"
	"Standard Library" -> "name.append"
	"Standard Library" -> "nargs_errors.get"
	"Standard Library" -> "self.data.casefold"
	"Standard Library" -> "single_quoted.add"
	"Standard Library" -> "metacls._find_new_"
	"Standard Library" -> "kwargs.pop"
	"Standard Library" -> "p.append"
	"Standard Library" -> "abcs.remove"
	"Standard Library" -> "self.__class__.__missing__"
	"Standard Library" -> "item.startswith"
	"Standard Library" -> "text.strip"
	"Standard Library" -> action_class
	"Standard Library" -> "last_line.strip"
	"Standard Library" -> "srcentry.is_symlink"
	"Standard Library" -> "self.values"
	"Standard Library" -> "self._option_string_actions.pop"
	"Standard Library" -> "items.append"
	"Standard Library" -> "self._get_optional_actions"
	"Standard Library" -> "globals.setdefault"
	"Standard Library" -> "margin.startswith"
	"Standard Library" -> "result.sort"
	"Standard Library" -> patsearch
	"Standard Library" -> "x.items"
	"Standard Library" -> "zip.close"
	"Standard Library" -> "line.decode"
	"Standard Library" -> "self._check_conflict"
	"Standard Library" -> "self._iter_member_"
	"Standard Library" -> "t.gettext"
	"Standard Library" -> "self.formatter._dedent"
	"Standard Library" -> "new.update"
	"Standard Library" -> "_parser.expand_template"
	"Standard Library" -> etype
	"Standard Library" -> "simple_enum._member_map_.keys"
	"Standard Library" -> "members.sort"
	"Standard Library" -> "self._get_default_metavar_for_optional"
	"Standard Library" -> "self._fallback.ngettext"
	"Standard Library" -> "found.sort"
	"Standard Library" -> "self._join_parts"
	"Standard Library" -> "cls._member_map_.items"
	"Standard Library" -> fsrc_read
	"Standard Library" -> "self.tokens.append"
	"Standard Library" -> NullTranslations
	"Standard Library" -> "s.strip"
	"Standard Library" -> "self.formatter._indent"
	"Standard Library" -> "b_item.decode"
	"Standard Library" -> "enum_member.__init__"
	"Standard Library" -> "self.data.isupper"
	"Standard Library" -> "self.wordsep_simple_re.split"
	"Standard Library" -> "self._module._filters_mutated"
	"Standard Library" -> "self.func"
	"Standard Library" -> "action_conflicts.get"
	"Standard Library" -> update
	"Standard Library" -> "dist.run_commands"
	"Standard Library" -> copy_function
	"Standard Library" -> "zip.infolist"
	"Standard Library" -> "_parser.State"
	"Standard Library" -> "extras.extend"
	"Standard Library" -> "tar.add"
	"Standard Library" -> "self._defaults.update"
	"Standard Library" -> "self.data.zfill"
	"Standard Library" -> tuple_new
	"Standard Library" -> "loc.find"
	"Standard Library" -> "srcentry.is_dir"
	"Standard Library" -> "self.data.swapcase"
	"Standard Library" -> "option_string.startswith"
	"Standard Library" -> "chunks.reverse"
	"Standard Library" -> "classdict.update"
	"Standard Library" -> "params.get"
	"Standard Library" -> "seen_actions.add"
	"Standard Library" -> "self.data.clear"
	"Standard Library" -> "action_header.endswith"
	"Standard Library" -> "self.data.reverse"
	"Standard Library" -> "cache.get"
	"Standard Library" -> "self.parse_known_intermixed_args"
	"Standard Library" -> "extras.append"
	"Standard Library" -> "self.data.index"
	"Standard Library" -> "out.encode"
	"Standard Library" -> "self._indent"
	"Standard Library" -> get_subactions
	"Standard Library" -> "indents.append"
	"Standard Library" -> "str.__format__"
	"Standard Library" -> "_translations.setdefault"
	"Standard Library" -> "ext.lower"
	"Standard Library" -> "self._add_container_actions"
	"Standard Library" -> "state.copy"
	"Standard Library" -> ArgumentTypeError
	"Standard Library" -> "cls._get_mixins_"
	"Standard Library" -> "logger.debug"
	"Standard Library" -> "mod.match"
	"Standard Library" -> "failed.append"
	"Standard Library" -> "self._metavar_formatter"
	"Standard Library" -> "enum_class._member_map_.items"
	"Standard Library" -> WarningMessage
	"Standard Library" -> "self.__update"
	"Standard Library" -> "self.data.isspace"
	"Standard Library" -> "metacls._check_for_existing_members_"
	"Standard Library" -> "formats.sort"
	"Standard Library" -> "fdst.write"
	"Standard Library" -> "missing.append"
	"Standard Library" -> "self._format_action"
	"Standard Library" -> "_extension_registry.get"
	"Standard Library" -> "self.data.isdecimal"
	"Standard Library" -> "self._actions.remove"
	"Standard Library" -> "mro.append"
	"Standard Library" -> "self.__class__.__module__.split"
	"Standard Library" -> "self._subparsers._add_action"
	"Standard Library" -> "self._fill_text"
	"Standard Library" -> "path.rstrip"
	"Standard Library" -> "_parser.parse_template"
	"Standard Library" -> "onceregistry.get"
	"Standard Library" -> "formatter.add_usage"
	"Standard Library" -> "languages.append"
	"Standard Library" -> "path.insert"
	"Standard Library" -> "self._actions.append"
	"Standard Library" -> "checked_member_dict.keys"
	"Standard Library" -> endswith
	"Standard Library" -> "_extension_cache.clear"
	"Standard Library" -> "file.write"
	"Standard Library" -> "action.option_strings.remove"
	"Standard Library" -> dict_setitem
	"Standard Library" -> "cls._member_type_.__new__"
	"Standard Library" -> match_partial
	"Standard Library" -> "self._wrap_chunks"
	"Standard Library" -> "self.register"
	"Standard Library" -> "errors.append"
	"Standard Library" -> "fn.stat"
	"Standard Library" -> "Built-in (sys)"
	"Standard Library" -> "result.extend"
	"Standard Library" -> "m.group"
	"Standard Library" -> append
	"Standard Library" -> "nelangs.append"
	"Standard Library" -> "self._get_args"
	"Standard Library" -> "base.__dict__.get"
	"Standard Library" -> "enumeration.__members__.items"
	"Standard Library" -> "self.keywords.items"
	"Standard Library" -> "self.data.sort"
	"Standard Library" -> super_init
	"Standard Library" -> "self._get_formatter"
	"Standard Library" -> "self._format_args"
	"Standard Library" -> "_inverted_registry.get"
	"Standard Library" -> "self.data.split"
	"Standard Library" -> "kwargs.setdefault"
	"Standard Library" -> "Built-in (_collections)"
	"Standard Library" -> "self.placeholder.lstrip"
	"Standard Library" -> "w.fill"
	"Standard Library" -> "reversed_chunks.pop"
	"Standard Library" -> "self.data.extend"
	"Standard Library" -> "__all__.extend"
	"Standard Library" -> "self._get_handler"
	"Standard Library" -> "a.startswith"
	"Standard Library" -> "base.__init__"
	"Standard Library" -> "more_members.items"
	"Standard Library" -> "srcentry.stat"
	"Standard Library" -> "self.__class__.mro"
	"Standard Library" -> "m.update"
	"Standard Library" -> fdst_write
	"Standard Library" -> <unknown_function>
	"Standard Library" -> "self._iter_indented_subactions"
	"Standard Library" -> "enum_class._flag_mask_.bit_length"
	"Standard Library" -> "confl_optionals.append"
	"Standard Library" -> _OrderedDictValuesView
	"Standard Library" -> "self.formatter_class"
	"Standard Library" -> "_order_.replace"
	"Standard Library" -> "Third-Party Library (nt)"
	"Standard Library" -> "names.append"
	"Standard Library" -> "value.replace"
	"Standard Library" -> "self._container._add_action"
	"Standard Library" -> _OrderedDictItemsView
	"Standard Library" -> "self.data.format"
	"Standard Library" -> "t.npgettext"
	"Standard Library" -> "option_strings.append"
	"Standard Library" -> "self.exit"
	"Standard Library" -> "Built-in (_functools)"
	"Standard Library" -> "item.endswith"
	"Standard Library" -> "y.__dict__.update"
	"Standard Library" -> "cls.__new__"
	"Standard Library" -> user_function
	"Standard Library" -> new_member
	"Standard Library" -> "last_values.sort"
	"Standard Library" -> "name.endswith"
	"Standard Library" -> "failed.sort"
	"Standard Library" -> "metacls._find_data_repr_"
	"Standard Library" -> "__all__.append"
	"Standard Library" -> "self._container._remove_action"
	"Standard Library" -> _len
	"Standard Library" -> "self.data.append"
	"Standard Library" -> gnv
	"Standard Library" -> "w.wrap"
	"Standard Library" -> "dict.clear"
	"Standard Library" -> encode
	pytorch -> argv
	"Standard Library" -> "auto_valued.append"
	"Standard Library" -> "self._print_message"
	"Standard Library" -> "endprog.match"
	"Standard Library" -> "enum_class._member_type_"
	"Standard Library" -> "dest.replace"
	"Standard Library" -> "dist.parse_command_line"
	"Standard Library" -> key
	"Standard Library" -> "metacls.__prepare__"
	"Standard Library" -> "self._repr_iterable"
	"Standard Library" -> "self.add_argument_group"
	"Standard Library" -> "formatter.start_section"
	"Standard Library" -> "self.fdel"
	"Standard Library" -> "name.split"
	"Standard Library" -> "_leading_whitespace_re.findall"
	"Standard Library" -> "attrs.get"
	"Standard Library" -> "memo.get"
	"Standard Library" -> "num.bit_length"
	"Standard Library" -> Namespace
	"Standard Library" -> "c.upper"
	"Standard Library" -> "fp.read"
	"Standard Library" -> "formatter.end_section"
	"Standard Library" -> "Built-in"
	"Standard Library" -> "self.compat"
	"Standard Library" -> "self._split"
	"Standard Library" -> "self._whitespace_matcher.sub"
	"Standard Library" -> "group_map.get"
	"Standard Library" -> items
	"Standard Library" -> "errors.extend"
	"Standard Library" -> _zip
	"Standard Library" -> "self.data.isalnum"
	"Standard Library" -> getstate
	"Standard Library" -> "iterable.items"
	"Standard Library" -> "self.__getstate__"
	"Standard Library" -> "_translations.get"
	"Standard Library" -> lower
	"Standard Library" -> "attrs.items"
	"Standard Library" -> "message.format"
	"Standard Library" -> "self._read_args_from_files"
	"Standard Library" -> "metacls._get_mixins_"
	"Standard Library" -> "enum_class._value2member_map_.setdefault"
	"Standard Library" -> "base_chain.add"
	"Standard Library" -> "self._check_value"
	"Standard Library" -> base
	"Standard Library" -> toks_append
	"Standard Library" -> "zip.open"
	"Standard Library" -> "self._replace"
	"Standard Library" -> "self.__class__"
	"Standard Library" -> "self._fix_sentence_endings"
	"Standard Library" -> "checked_enum._member_map_.keys"
	"Standard Library" -> "self.__dict__.items"
	"Standard Library" -> "classdict.items"
	"Standard Library" -> "self.wordsep_re.split"
	"Standard Library" -> "_parser.parse"
	"Standard Library" -> "slots.copy"
	"Standard Library" -> "self._keep_positive"
	"Standard Library" -> "self.data.strip"
	"Standard Library" -> _OptionError
	"Standard Library" -> "action.dest.upper"
	"Standard Library" -> _ntuple_diskusage
	"Standard Library" -> "self.data.isalpha"
	"Standard Library" -> "self.data.replace"
	"Standard Library" -> "classdict.get"
	"Standard Library" -> "heap.append"
	"Standard Library" -> "item.split"
	"Standard Library" -> "new_arg_strings.append"
	"Standard Library" -> "self.data.find"
	"Standard Library" -> "duplicates.append"
	"Standard Library" -> "name.isidentifier"
	"Standard Library" -> "src.endswith"
	"Standard Library" -> _map
	"Standard Library" -> SpecialFileError
	"Standard Library" -> "self._get_kwargs"
	"Standard Library" -> "fn.is_symlink"
	"Standard Library" -> "self.data.rpartition"
	"Standard Library" -> "members.append"
	"Standard Library" -> "other.items"
	"Standard Library" -> "cls.__dict__.get"
	"Standard Library" -> "slots.pop"
	"Standard Library" -> "typ.__subclasses__"
	"Standard Library" -> "Built-in (_warnings)"
	"Standard Library" -> _CacheInfo
	"Standard Library" -> "self.copy"
	"Standard Library" -> "inst.__dict__.update"
	"Standard Library" -> "self._ChoicesPseudoAction"
	"Standard Library" -> v_repr
	"Standard Library" -> "self._get_optional_kwargs"
	"Standard Library" -> "text.expandtabs"
	"Standard Library" -> "self._fallback.add_fallback"
	"Standard Library" -> TextWrapper
	"Standard Library" -> _ArgumentGroup
	"Standard Library" -> "arg_string_pattern_parts.append"
	"Standard Library" -> "path.split"
	"Standard Library" -> "m.end"
	"Standard Library" -> _heapify
	"Standard Library" -> "object.__dir__"
	"Standard Library" -> "indents.pop"
	"Standard Library" -> "action.container._remove_action"
	"Standard Library" -> "self.data.removesuffix"
	"Standard Library" -> "self.data.join"
	"Standard Library" -> "result.add"
	"Standard Library" -> superinit
	"Standard Library" -> "heap.pop"
	"Standard Library" -> "interesting.add"
	"Standard Library" -> "self.fset"
	"Standard Library" -> "filename.endswith"
	"Standard Library" -> "action_conflicts.setdefault"
	"Standard Library" -> "c.update"
	"Standard Library" -> sw
	"Standard Library" -> setdefault
	"Standard Library" -> "first.startswith"
	"Standard Library" -> "result.add_fallback"
	"Standard Library" -> "endpats.get"
	"Standard Library" -> "dst.startswith"
	"Standard Library" -> "buffer.close"
	"Standard Library" -> "first_enum._generate_next_value_"
	"Standard Library" -> "required_actions.append"
	"Standard Library" -> "method.__get__"
	"Standard Library" -> "self._munge_whitespace"
	"Standard Library" -> "self.data.title"
	"Standard Library" -> "self._current_section.items.append"
	"Standard Library" -> "members.keys"
	"Standard Library" -> "cls._value2member_map_.setdefault"
	"Standard Library" -> obj
	"Standard Library" -> "parser.exit"
	"Standard Library" -> ArgumentError
	"Standard Library" -> "self._format_action_invocation"
	"Standard Library" -> "fsrc.fileno"
	"Standard Library" -> "self.most_common"
	"Standard Library" -> "self.data.lower"
	"Standard Library" -> "self._expand_help"
	"Standard Library" -> "actions.index"
	"Standard Library" -> "enum_class._new_member_"
	"Standard Library" -> "data_types.pop"
	"Standard Library" -> "formatter.add_arguments"
	"Standard Library" -> "self._optionals._add_action"
	"Standard Library" -> "entry.is_symlink"
	"Standard Library" -> hint
	"Standard Library" -> "cls._iter_member_by_value_"
	"Standard Library" -> "cookie_re.match"
	"Standard Library" -> get_invocation
	"Standard Library" -> "_UNPACK_FORMATS.items"
	"Standard Library" -> "base.__new__"
	"Standard Library" -> "self.data.endswith"
	"Standard Library" -> join
	"Standard Library" -> "self.dispatcher.dispatch"
	"Standard Library" -> "self.__class__.__new__"
	"Standard Library" -> "_localedirs.get"
	"Standard Library" -> "self.data.lstrip"
	"Standard Library" -> "gnv_last_values.append"
	"Standard Library" -> "pseudomatch.span"
	"Standard Library" -> "_cache.clear"
	"Standard Library" -> "metacls.__new__"
	"Standard Library" -> "self._catalog.get"
	"Standard Library" -> "dict.__eq__"
	"Standard Library" -> "tmsg.split"
	"Standard Library" -> SameFileError
	"Standard Library" -> "self.data.rindex"
	"Standard Library" -> category
	"Standard Library" -> "simple_member_dict.keys"
	"Standard Library" -> "self._get_help_string"
	"Standard Library" -> "object.__new__"
	"Standard Library" -> "optionals.append"
	"Standard Library" -> "repr_running.discard"
	"Standard Library" -> "conflicts.extend"
	"Standard Library" -> "parser._print_message"
	"Standard Library" -> "self.format_help"
	"Standard Library" -> "repr_running.add"
	"Standard Library" -> "f.read"
	"Standard Library" -> "self._make"
	"Standard Library" -> _MutuallyExclusiveGroup
	"Standard Library" -> "self._kwargs.items"
	"Standard Library" -> "parser.parse_known_args"
	"Standard Library" -> "arg_string.split"
	"Standard Library" -> "cur_line.append"
	"Standard Library" -> "self.data.istitle"
	"Standard Library" -> "c.__name__.lstrip"
	"Standard Library" -> Repr
	"Standard Library" -> "msg.match"
	"Standard Library" -> "endmatch.end"
	"Standard Library" -> "self.data.remove"
	"Standard Library" -> "items.extend"
	"Standard Library" -> "category.rpartition"
	"Standard Library" -> "self.__missing__"
	"Standard Library" -> replace
	"Standard Library" -> "self.parse_known_args"
	"Standard Library" -> "self._get_value"
	"Standard Library" -> "dest_option_string.lstrip"
	"Standard Library" -> "self._get_nargs_pattern"
	"Standard Library" -> "self.plural"
	"Standard Library" -> "self._parse_known_args"
	"Standard Library" -> "seen.add"
	"Standard Library" -> split
	"Standard Library" -> "missing_names.append"
	"Standard Library" -> "source.items"
	"Standard Library" -> _OrderedDictKeysView
	"Standard Library" -> "fdst.fileno"
	"Standard Library" -> "self.data.count"
	"Standard Library" -> match_argument
	"Standard Library" -> "checked_value.replace"
	"Standard Library" -> "self.data.translate"
	"Standard Library" -> "args.extend"
	"Standard Library" -> "cls.__dict__.items"
	"Standard Library" -> "triple_quoted.add"
	"Standard Library" -> _auto_null
	"Standard Library" -> "self._get_values"
	"Standard Library" -> "typename.split"
	"Standard Library" -> "group_actions.add"
	"Standard Library" -> "flag_mask.bit_length"
	"Standard Library" -> "val.split"
	"Standard Library" -> "self._get_positional_kwargs"
	"Standard Library" -> _EnumDict
	"Standard Library" -> "dict.fromkeys"
	"Standard Library" -> "Built-in (posix)"
	"Standard Library" -> "cache.clear"
	"Standard Library" -> "self.data.format_map"
	"Standard Library" -> "self._action_groups.append"
	"Standard Library" -> "registry.get"
	"Standard Library" -> mycmp
	"Standard Library" -> "self._registries.setdefault"
	"Standard Library" -> "self.data.removeprefix"
	"Standard Library" -> "self._fallback.pgettext"
	"Standard Library" -> "f_globals.get"
	"Standard Library" -> "self.data.rstrip"
	"Standard Library" -> "parser._get_formatter"
	"Standard Library" -> "abstract_bases.append"
	"Standard Library" -> reductor
	"Standard Library" -> "dist.parse_config_files"
	"Standard Library" -> "parser.add_argument"
	"Standard Library" -> "ignored_names.extend"
	"Standard Library" -> "self.dispatcher.register"
	"Standard Library" -> "self._get_versions"
	"Standard Library" -> "self.data.isidentifier"
	"Standard Library" -> "dispatch_cache.clear"
	"Standard Library" -> "_copy_dispatch.get"
	"Standard Library" -> UserDict
	"Standard Library" -> "line.strip"
	"Standard Library" -> "y.append"
	"Standard Library" -> "positionals.append"
	"Standard Library" -> "self.data.upper"
	"Standard Library" -> "arg_strings.append"
	"Standard Library" -> _GiveupOnFastCopy
	"Standard Library" -> "src.stat"
	"Standard Library" -> "buffer.seek"
	"Standard Library" -> "data_types.add"
	"Standard Library" -> "d.update"
	"Standard Library" -> "mcls._find_data_type_"
	"Standard Library" -> function
	"Standard Library" -> "self.add_argument"
	"Standard Library" -> "parts.extend"
	"Standard Library" -> "self._handle_long_word"
	"Standard Library" -> splitlines
	"Standard Library" -> _HashedSeq
	"Standard Library" -> auto
	"Standard Library" -> sizeof
	"Standard Library" -> "t.ngettext"
	"Standard Library" -> "chunks.pop"
	"Standard Library" -> "self.data.insert"
	"Standard Library" -> "found.append"
	"Standard Library" -> "registry.clear"
	"Standard Library" -> "kwargs.get"
	"Standard Library" -> _tuple
	"Standard Library" -> "self.data.splitlines"
	"Standard Library" -> "_c2py_ops.get"
	"Standard Library" -> "name.lower"
	"Standard Library" -> "self._fallback.gettext"
	"Standard Library" -> "self._generate_next_value"
	"Standard Library" -> "t.pgettext"
	"Standard Library" -> "self._parse_optional"
	"Standard Library" -> "args.append"
	"Standard Library" -> "msg.split"
	"Standard Library" -> "self.data.expandtabs"
	"Standard Library" -> "initial.isidentifier"
	"Standard Library" -> "self.data.partition"
	"Standard Library" -> bit_length
	"Standard Library" -> "logger.info"
	"Standard Library" -> "_option_strings.append"
	"Standard Library" -> "enum_class._unhashable_values_.append"
	"Standard Library" -> RegistryError
	"Standard Library" -> "name.startswith"
	"Standard Library" -> "tok_name.values"
	"Standard Library" -> "self._get_positional_actions"
	"Standard Library" -> "state.pop"
	"Standard Library" -> "self.data.startswith"
	"Standard Library" -> "slotstate.items"
	"Standard Library" -> "arg_strings.remove"
	"Standard Library" -> "self.data.isnumeric"
	"Standard Library" -> "self._registry_get"
	"Standard Library" -> "_compiler.compile"
	"Standard Library" -> "__dict__.update"
	"Standard Library" -> "self.data.center"
	"Standard Library" -> "checked_dict.keys"
	"Standard Library" -> conflict_handler
	"Standard Library" -> chmod_func
	"Standard Library" -> "kwds.items"
	"Standard Library" -> "Built-in (itertools)"
	"Standard Library" -> TokenError
	"Standard Library" -> "self.format_usage"
	"Standard Library" -> "_whitespace_only_re.sub"
	"Standard Library" -> "line.startswith"
	"Standard Library" -> "self._parse"
	"Standard Library" -> cls
	"Standard Library" -> class_
	"Standard Library" -> "format_string.format"
	"Standard Library" -> "attr.split"
	"Standard Library" -> "self.repr1"
	"Standard Library" -> "self.add_mutually_exclusive_group"
	"Standard Library" -> "arg.split"
	"Standard Library" -> "cmd.lower"
	"Standard Library" -> "_ARCHIVE_FORMATS.items"
	"Standard Library" -> "self._negative_number_matcher.match"
	"Standard Library" -> Link
	"Standard Library" -> _heappop
	"Standard Library" -> _proto_member
	"Standard Library" -> extend
	"Standard Library" -> "self._group_actions.remove"
	"Standard Library" -> "simple_dict.keys"
	"Standard Library" -> copier
	"Standard Library" -> "self.__cast"
	"Standard Library" -> getter
	"Standard Library" -> "self._value_.bit_count"
	"Standard Library" -> fsrc_readinto
	"Standard Library" -> "tar.close"
	"Standard Library" -> "self._add_item"
	"Standard Library" -> cache_len
	"Standard Library" -> isdigit
	"Standard Library" -> "ut.untokenize"
	"Standard Library" -> "action.format_usage"
	"Standard Library" -> "self._defaults.get"
	"Standard Library" -> "cls._missing_"
	"Standard Library" -> "_compile_repl.cache_clear"
	"Standard Library" -> cache_get
	"Standard Library" -> "self._make_unbound_method"
	"Standard Library" -> ReadError
	"Standard Library" -> "self.subtract"
	"Standard Library" -> "dst.endswith"
	"Standard Library" -> "self._get_default_metavar_for_positional"
	"Standard Library" -> "seen_non_default_actions.add"
	"Standard Library" -> "Built-in (pwd)"
	"Standard Library" -> "self.data.encode"
	"Standard Library" -> "formatter.add_text"
	"Standard Library" -> "msg_lines.append"
	"Standard Library" -> "cls._numeric_repr_"
	"Standard Library" -> "enum_class._member_names_.append"
	"Standard Library" -> "self.repr_instance"
	"Standard Library" -> action
	"Standard Library" -> "cls._value2member_map_.get"
	"Standard Library" -> "self.data.rjust"
	"Standard Library" -> "mcls._check_for_existing_members_"
	"Standard Library" -> "_compiler.isstring"
	"Standard Library" -> startswith
	"Standard Library" -> proxy
	"Standard Library" -> readline
	"Standard Library" -> Error
	"Standard Library" -> "self.add_whitespace"
	"Standard Library" -> "y.__setstate__"
	"Standard Library" -> strip
	"Standard Library" -> "action_tuples.append"
	"Standard Library" -> Counter
	"Standard Library" -> "formatter.format_help"
	"Standard Library" -> "self._last_values.append"
	"Standard Library" -> _Link
	"Standard Library" -> "cls._iter_member_"
	"Standard Library" -> "self.data.isprintable"
	"Standard Library" -> "cls._create_"
}
