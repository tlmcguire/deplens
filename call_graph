// Call Graph
digraph {
	rankdir=TB
	node [shape=box]
	"test_basic.py" -> "pytest.mark.skipif"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> sorted
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> sorted
	"test_basic.py" -> getattr
	"test_basic.py" -> getattr
	"test_basic.py" -> method_route
	"test_basic.py" -> client_method
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.get"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> <unknown_function>
	"test_basic.py" -> "app.route"
	"test_basic.py" -> open
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> <unknown_function>
	"test_basic.py" -> "app.route"
	"test_basic.py" -> open
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> sorted
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> sorted
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "client.head"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.delete"
	"test_basic.py" -> sorted
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> sorted
	"test_basic.py" -> "client.head"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.delete"
	"test_basic.py" -> sorted
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> sorted
	"test_basic.py" -> "client.head"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.delete"
	"test_basic.py" -> sorted
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "rv.data.decode"
	"test_basic.py" -> "app.url_map.add"
	"test_basic.py" -> Submount
	"test_basic.py" -> Rule
	"test_basic.py" -> Rule
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.url_map.add"
	"test_basic.py" -> Submount
	"test_basic.py" -> Rule
	"test_basic.py" -> Rule
	"test_basic.py" -> "app.endpoint"
	"test_basic.py" -> "app.endpoint"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "self.app"
	"test_basic.py" -> PrefixPathMiddleware
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.session.pop"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> expect_exception
	"test_basic.py" -> expect_exception
	"test_basic.py" -> "app.post"
	"test_basic.py" -> dict
	"test_basic.py" -> "app.get"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> parse_date
	"test_basic.py" -> "match.group"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> repr
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> replace
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> type
	"test_basic.py" -> type
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> str
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "rv.headers.get"
	"test_basic.py" -> run_test
	"test_basic.py" -> run_test
	"test_basic.py" -> run_test
	"test_basic.py" -> run_test
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.session.setdefault"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.session.clear"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "response.vary.add"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "response.vary.update"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> "rv.headers.get_all"
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> "app.get"
	"test_basic.py" -> "app.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.flash"
	"test_basic.py" -> "flask.flash"
	"test_basic.py" -> list
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> "flask.flash"
	"test_basic.py" -> "flask.flash"
	"test_basic.py" -> "flask.flash"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> list
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> len
	"test_basic.py" -> list
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> list
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> list
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> len
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "data.strip"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> type
	"test_basic.py" -> "called.append"
	"test_basic.py" -> TypeError
	"test_basic.py" -> type
	"test_basic.py" -> "called.append"
	"test_basic.py" -> TypeError
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "flask.abort"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.abort"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> KeyboardInterrupt
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> isinstance
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> MyException
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> isinstance
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> isinstance
	"test_basic.py" -> isinstance
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> ForbiddenSubclass
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.abort"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> Forbidden
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.abort"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "exc_info.errisinstance"
	"test_basic.py" -> "exc_info.value.get_description"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "flask.abort"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> str
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> encode
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.response_class"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> NotFound
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> encode
	"test_basic.py" -> "client.get"
	"test_basic.py" -> encode
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "rv.headers.getlist"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> str
	"test_basic.py" -> str
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> str
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> str
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.jsonify"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "app.json.response"
	"test_basic.py" -> "rv.data.strip"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.jsonify"
	"test_basic.py" -> "app.json.dumps"
	"test_basic.py" -> Data
	"test_basic.py" -> "app.json.loads"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "flask.jsonify"
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> RuntimeError
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.url_build_error_handlers.append"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.url_build_error_handlers.append"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "rv.data.strip"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> get
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> get
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> open
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> open
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> open
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> get
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> repr
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.warns"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "kwargs.get"
	"test_basic.py" -> "monkeypatch.setattr"
	"test_basic.py" -> "app.run"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "app.url_map.is_endpoint_expecting"
	"test_basic.py" -> "values.setdefault"
	"test_basic.py" -> "values.pop"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.Blueprint"
	"test_basic.py" -> "bp.route"
	"test_basic.py" -> "app.register_blueprint"
	"test_basic.py" -> dict
	"test_basic.py" -> "app.inject_url_defaults"
	"test_basic.py" -> dict
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "monkeypatch.setattr"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.g.get"
	"test_basic.py" -> "flask.g.get"
	"test_basic.py" -> "flask.g.get"
	"test_basic.py" -> sorted
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> View
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "monkeypatch.setattr"
	"test_basic.py" -> "app.run"
	"test_basic.py" -> "monkeypatch.setattr"
	"test_basic.py" -> "app.run"
	"test_basic.py" -> "monkeypatch.setattr"
	"test_basic.py" -> "app.run"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "app.app_context"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "r.set_cookie"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> "recwarn.pop"
	"test_basic.py" -> str
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> "gc.disable"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> weak
	"test_basic.py" -> weak
	"test_basic.py" -> "gc.enable"
	"pathlib.py" -> getattr
	"pathlib.py" -> getattr
	"pathlib.py" -> reversed
	"pathlib.py" -> "part.replace"
	"pathlib.py" -> "self.splitroot"
	"pathlib.py" -> reversed
	"pathlib.py" -> "rel.split"
	"pathlib.py" -> "parsed.append"
	"pathlib.py" -> "sys.intern"
	"pathlib.py" -> "parsed.append"
	"pathlib.py" -> "sys.intern"
	"pathlib.py" -> "part.replace"
	"pathlib.py" -> "self.splitroot"
	"pathlib.py" -> "parsed.append"
	"pathlib.py" -> "parsed.reverse"
	"pathlib.py" -> "self.casefold"
	"pathlib.py" -> "self.casefold"
	"pathlib.py" -> set
	"pathlib.py" -> "self._split_extended_path"
	"pathlib.py" -> "part.find"
	"pathlib.py" -> "part.find"
	"pathlib.py" -> len
	"pathlib.py" -> "part.lstrip"
	"pathlib.py" -> "s.lower"
	"pathlib.py" -> "p.lower"
	"pathlib.py" -> "s.startswith"
	"pathlib.py" -> "s.startswith"
	"pathlib.py" -> startswith
	"pathlib.py" -> rstrip
	"pathlib.py" -> partition
	"pathlib.py" -> partition
	"pathlib.py" -> "name.upper"
	"pathlib.py" -> len
	"pathlib.py" -> lstrip
	"pathlib.py" -> "path.as_posix"
	"pathlib.py" -> "rest.encode"
	"pathlib.py" -> encode
	"pathlib.py" -> "path.as_posix"
	"pathlib.py" -> "part.lstrip"
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> bytes
	"pathlib.py" -> _WindowsFlavour
	"pathlib.py" -> _PosixFlavour
	"pathlib.py" -> _TerminatingSelector
	"pathlib.py" -> ValueError
	"pathlib.py" -> cls
	"pathlib.py" -> hasattr
	"pathlib.py" -> <unknown_function>
	"pathlib.py" -> _TerminatingSelector
	"pathlib.py" -> type
	"pathlib.py" -> iter
	"pathlib.py" -> "self._select_from"
	"pathlib.py" -> "_Selector.__init__"
	"pathlib.py" -> "parent_path._make_child_relpath"
	"pathlib.py" -> <unknown_function>
	"pathlib.py" -> "self.successor._select_from"
	"pathlib.py" -> "flavour.compile_pattern"
	"pathlib.py" -> "_Selector.__init__"
	"pathlib.py" -> scandir
	"pathlib.py" -> list
	"pathlib.py" -> "entry.is_dir"
	"pathlib.py" -> "self.match"
	"pathlib.py" -> "parent_path._make_child_relpath"
	"pathlib.py" -> "self.successor._select_from"
	"pathlib.py" -> "_Selector.__init__"
	"pathlib.py" -> scandir
	"pathlib.py" -> list
	"pathlib.py" -> "entry.is_dir"
	"pathlib.py" -> "parent_path._make_child_relpath"
	"pathlib.py" -> "self._iterate_directories"
	"pathlib.py" -> set
	"pathlib.py" -> "self._iterate_directories"
	"pathlib.py" -> successor_select
	"pathlib.py" -> "yielded.add"
	"pathlib.py" -> "yielded.clear"
	"pathlib.py" -> type
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> isinstance
	"pathlib.py" -> tuple
	"pathlib.py" -> range
	"pathlib.py" -> "idx.indices"
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> IndexError
	"pathlib.py" -> len
	"pathlib.py" -> "self._pathcls._from_parsed_parts"
	"pathlib.py" -> format
	"pathlib.py" -> "cls._from_parts"
	"pathlib.py" -> tuple
	"pathlib.py" -> isinstance
	"pathlib.py" -> isinstance
	"pathlib.py" -> "parts.append"
	"pathlib.py" -> str
	"pathlib.py" -> TypeError
	"pathlib.py" -> type
	"pathlib.py" -> "cls._flavour.parse_parts"
	"pathlib.py" -> "object.__new__"
	"pathlib.py" -> "self._parse_args"
	"pathlib.py" -> "object.__new__"
	"pathlib.py" -> "cls._flavour.join"
	"pathlib.py" -> "cls._flavour.join"
	"pathlib.py" -> "self._parse_args"
	"pathlib.py" -> "self._flavour.join_parsed_parts"
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> "self._format_parsed_parts"
	"pathlib.py" -> str
	"pathlib.py" -> str
	"pathlib.py" -> format
	"pathlib.py" -> "self.as_posix"
	"pathlib.py" -> "self.is_absolute"
	"pathlib.py" -> ValueError
	"pathlib.py" -> "self._flavour.make_uri"
	"pathlib.py" -> "self._flavour.casefold_parts"
	"pathlib.py" -> isinstance
	"pathlib.py" -> hash
	"pathlib.py" -> tuple
	"pathlib.py" -> isinstance
	"pathlib.py" -> isinstance
	"pathlib.py" -> isinstance
	"pathlib.py" -> isinstance
	"pathlib.py" -> property
	"pathlib.py" -> property
	"pathlib.py" -> len
	"pathlib.py" -> "name.rfind"
	"pathlib.py" -> len
	"pathlib.py" -> "name.endswith"
	"pathlib.py" -> "name.lstrip"
	"pathlib.py" -> "name.split"
	"pathlib.py" -> "name.rfind"
	"pathlib.py" -> len
	"pathlib.py" -> ValueError
	"pathlib.py" -> "self._flavour.parse_parts"
	"pathlib.py" -> len
	"pathlib.py" -> ValueError
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> "self.with_name"
	"pathlib.py" -> ValueError
	"pathlib.py" -> "suffix.startswith"
	"pathlib.py" -> ValueError
	"pathlib.py" -> ValueError
	"pathlib.py" -> len
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> TypeError
	"pathlib.py" -> "self._parse_args"
	"pathlib.py" -> len
	"pathlib.py" -> cf
	"pathlib.py" -> cf
	"pathlib.py" -> "self._format_parsed_parts"
	"pathlib.py" -> ValueError
	"pathlib.py" -> format
	"pathlib.py" -> str
	"pathlib.py" -> str
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> "self.relative_to"
	"pathlib.py" -> tuple
	"pathlib.py" -> "self._make_child"
	"pathlib.py" -> "self._make_child"
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> len
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> _PathParents
	"pathlib.py" -> bool
	"pathlib.py" -> "self._flavour.is_reserved"
	"pathlib.py" -> cf
	"pathlib.py" -> "self._flavour.parse_parts"
	"pathlib.py" -> ValueError
	"pathlib.py" -> cf
	"pathlib.py" -> cf
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> zip
	"pathlib.py" -> reversed
	"pathlib.py" -> reversed
	"pathlib.py" -> "cls._from_parts"
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> cls
	"pathlib.py" -> cls
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "other_path.stat"
	"pathlib.py" -> "self.__class__"
	"pathlib.py" -> "self._make_child_relpath"
	"pathlib.py" -> "sys.audit"
	"pathlib.py" -> ValueError
	"pathlib.py" -> format
	"pathlib.py" -> "self._flavour.parse_parts"
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "pattern_parts.append"
	"pathlib.py" -> tuple
	"pathlib.py" -> "selector.select_from"
	"pathlib.py" -> "sys.audit"
	"pathlib.py" -> "self._flavour.parse_parts"
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "pattern_parts.append"
	"pathlib.py" -> tuple
	"pathlib.py" -> "selector.select_from"
	"pathlib.py" -> "self.is_absolute"
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> "self.cwd"
	"pathlib.py" -> getattr
	"pathlib.py" -> RuntimeError
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> "p.stat"
	"pathlib.py" -> "pwd.getpwuid"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "self.open"
	"pathlib.py" -> "f.read"
	"pathlib.py" -> "self.open"
	"pathlib.py" -> "f.read"
	"pathlib.py" -> memoryview
	"pathlib.py" -> "self.open"
	"pathlib.py" -> "f.write"
	"pathlib.py" -> isinstance
	"pathlib.py" -> TypeError
	"pathlib.py" -> "self.open"
	"pathlib.py" -> "f.write"
	"pathlib.py" -> hasattr
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> "self.parent.mkdir"
	"pathlib.py" -> "self.mkdir"
	"pathlib.py" -> "self.is_dir"
	"pathlib.py" -> "self.chmod"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.__class__"
	"pathlib.py" -> "self.__class__"
	"pathlib.py" -> hasattr
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> hasattr
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "self.__class__"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.exists"
	"pathlib.py" -> "self.is_dir"
	"pathlib.py" -> "self.parent.stat"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.parent.stat"
	"pathlib.py" -> "self.lstat"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> RuntimeError
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> NotImplementedError
	"operator.py" -> _abs
	"operator.py" -> "a.__index__"
	"operator.py" -> hasattr
	"operator.py" -> type
	"operator.py" -> TypeError
	"operator.py" -> enumerate
	"operator.py" -> ValueError
	"operator.py" -> isinstance
	"operator.py" -> type
	"operator.py" -> TypeError
	"operator.py" -> len
	"operator.py" -> type
	"operator.py" -> hint
	"operator.py" -> isinstance
	"operator.py" -> type
	"operator.py" -> TypeError
	"operator.py" -> ValueError
	"operator.py" -> obj
	"operator.py" -> isinstance
	"operator.py" -> TypeError
	"operator.py" -> "attr.split"
	"operator.py" -> getattr
	"operator.py" -> tuple
	"operator.py" -> map
	"operator.py" -> tuple
	"operator.py" -> getter
	"operator.py" -> "self._call"
	"operator.py" -> join
	"operator.py" -> map
	"operator.py" -> tuple
	"operator.py" -> "self._call"
	"operator.py" -> join
	"operator.py" -> map
	"operator.py" -> isinstance
	"operator.py" -> TypeError
	"operator.py" -> <unknown_function>
	"operator.py" -> getattr
	"operator.py" -> repr
	"operator.py" -> "args.extend"
	"operator.py" -> map
	"operator.py" -> "args.extend"
	"operator.py" -> "self._kwargs.items"
	"operator.py" -> join
	"operator.py" -> hasattr
	"operator.py" -> type
	"operator.py" -> TypeError
	"functools.py" -> getattr
	"functools.py" -> setattr
	"functools.py" -> update
	"functools.py" -> getattr
	"functools.py" -> getattr
	"functools.py" -> partial
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> type
	"functools.py" -> getattr
	"functools.py" -> getattr
	"functools.py" -> ValueError
	"functools.py" -> max
	"functools.py" -> setattr
	"functools.py" -> mycmp
	"functools.py" -> mycmp
	"functools.py" -> mycmp
	"functools.py" -> mycmp
	"functools.py" -> mycmp
	"functools.py" -> object
	"functools.py" -> iter
	"functools.py" -> next
	"functools.py" -> TypeError
	"functools.py" -> function
	"functools.py" -> callable
	"functools.py" -> TypeError
	"functools.py" -> hasattr
	"functools.py" -> super
	"functools.py" -> "self.func"
	"functools.py" -> type
	"functools.py" -> repr
	"functools.py" -> "args.extend"
	"functools.py" -> repr
	"functools.py" -> "args.extend"
	"functools.py" -> "self.keywords.items"
	"functools.py" -> type
	"functools.py" -> join
	"functools.py" -> join
	"functools.py" -> type
	"functools.py" -> isinstance
	"functools.py" -> TypeError
	"functools.py" -> len
	"functools.py" -> TypeError
	"functools.py" -> len
	"functools.py" -> callable
	"functools.py" -> isinstance
	"functools.py" -> isinstance
	"functools.py" -> isinstance
	"functools.py" -> TypeError
	"functools.py" -> tuple
	"functools.py" -> type
	"functools.py" -> dict
	"functools.py" -> callable
	"functools.py" -> hasattr
	"functools.py" -> TypeError
	"functools.py" -> format
	"functools.py" -> isinstance
	"functools.py" -> join
	"functools.py" -> map
	"functools.py" -> join
	"functools.py" -> format
	"functools.py" -> "self.keywords.items"
	"functools.py" -> "format_string.format"
	"functools.py" -> "self.func"
	"functools.py" -> getattr
	"functools.py" -> get
	"functools.py" -> partial
	"functools.py" -> "self._make_unbound_method"
	"functools.py" -> getattr
	"functools.py" -> classmethod
	"functools.py" -> isinstance
	"functools.py" -> hash
	"functools.py" -> object
	"functools.py" -> "kwds.items"
	"functools.py" -> tuple
	"functools.py" -> type
	"functools.py" -> tuple
	"functools.py" -> type
	"functools.py" -> "kwds.values"
	"functools.py" -> len
	"functools.py" -> type
	"functools.py" -> _HashedSeq
	"functools.py" -> isinstance
	"functools.py" -> callable
	"functools.py" -> isinstance
	"functools.py" -> TypeError
	"functools.py" -> object
	"functools.py" -> RLock
	"functools.py" -> user_function
	"functools.py" -> make_key
	"functools.py" -> cache_get
	"functools.py" -> user_function
	"functools.py" -> make_key
	"functools.py" -> cache_get
	"functools.py" -> user_function
	"functools.py" -> cache_len
	"functools.py" -> _CacheInfo
	"functools.py" -> cache_len
	"functools.py" -> "cache.clear"
	"functools.py" -> <unknown_function>
	"functools.py" -> RuntimeError
	"functools.py" -> "result.append"
	"functools.py" -> enumerate
	"functools.py" -> reversed
	"functools.py" -> hasattr
	"functools.py" -> len
	"functools.py" -> list
	"functools.py" -> list
	"functools.py" -> list
	"functools.py" -> issubclass
	"functools.py" -> any
	"functools.py" -> issubclass
	"functools.py" -> "abstract_bases.append"
	"functools.py" -> "abcs.remove"
	"functools.py" -> set
	"functools.py" -> hasattr
	"functools.py" -> isinstance
	"functools.py" -> issubclass
	"functools.py" -> set
	"functools.py" -> "typ.__subclasses__"
	"functools.py" -> issubclass
	"functools.py" -> "found.append"
	"functools.py" -> "mro.append"
	"functools.py" -> "found.sort"
	"functools.py" -> "mro.append"
	"functools.py" -> "registry.keys"
	"functools.py" -> issubclass
	"functools.py" -> RuntimeError
	"functools.py" -> format
	"functools.py" -> "registry.get"
	"functools.py" -> "dispatch_cache.clear"
	"functools.py" -> isinstance
	"functools.py" -> all
	"functools.py" -> isinstance
	"functools.py" -> TypeError
	"functools.py" -> getattr
	"functools.py" -> TypeError
	"functools.py" -> next
	"functools.py" -> iter
	"functools.py" -> items
	"functools.py" -> TypeError
	"functools.py" -> TypeError
	"functools.py" -> hasattr
	"functools.py" -> "dispatch_cache.clear"
	"functools.py" -> TypeError
	"functools.py" -> <unknown_function>
	"functools.py" -> getattr
	"functools.py" -> callable
	"functools.py" -> hasattr
	"functools.py" -> TypeError
	"functools.py" -> "self.dispatcher.register"
	"functools.py" -> "self.dispatcher.dispatch"
	"functools.py" -> <unknown_function>
	"functools.py" -> "method.__get__"
	"functools.py" -> getattr
	"functools.py" -> object
	"functools.py" -> RLock
	"functools.py" -> TypeError
	"functools.py" -> TypeError
	"functools.py" -> type
	"functools.py" -> TypeError
	"functools.py" -> "cache.get"
	"functools.py" -> "cache.get"
	"functools.py" -> "self.func"
	"functools.py" -> type
	"functools.py" -> TypeError
	"functools.py" -> classmethod
	"__init__.py" -> reversed
	"__init__.py" -> reversed
	"__init__.py" -> reversed
	"__init__.py" -> _Link
	"__init__.py" -> _proxy
	"__init__.py" -> "self.__update"
	"__init__.py" -> Link
	"__init__.py" -> proxy
	"__init__.py" -> dict_setitem
	"__init__.py" -> dict_delitem
	"__init__.py" -> "self.__map.pop"
	"__init__.py" -> "self.__map.clear"
	"__init__.py" -> "dict.clear"
	"__init__.py" -> KeyError
	"__init__.py" -> "dict.pop"
	"__init__.py" -> len
	"__init__.py" -> sizeof
	"__init__.py" -> sizeof
	"__init__.py" -> sizeof
	"__init__.py" -> sizeof
	"__init__.py" -> _OrderedDictKeysView
	"__init__.py" -> _OrderedDictItemsView
	"__init__.py" -> _OrderedDictValuesView
	"__init__.py" -> object
	"__init__.py" -> "dict.pop"
	"__init__.py" -> "self.__map.pop"
	"__init__.py" -> KeyError
	"__init__.py" -> list
	"__init__.py" -> "self.items"
	"__init__.py" -> "self.__getstate__"
	"__init__.py" -> isinstance
	"__init__.py" -> "state.copy"
	"__init__.py" -> "slots.copy"
	"__init__.py" -> vars
	"__init__.py" -> OrderedDict
	"__init__.py" -> "state.pop"
	"__init__.py" -> "slots.pop"
	"__init__.py" -> iter
	"__init__.py" -> "self.items"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> cls
	"__init__.py" -> isinstance
	"__init__.py" -> "dict.__eq__"
	"__init__.py" -> all
	"__init__.py" -> map
	"__init__.py" -> "dict.__eq__"
	"__init__.py" -> "self.update"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "new.update"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "new.update"
	"__init__.py" -> property
	"__init__.py" -> isinstance
	"__init__.py" -> "field_names.replace"
	"__init__.py" -> list
	"__init__.py" -> map
	"__init__.py" -> "_sys.intern"
	"__init__.py" -> str
	"__init__.py" -> set
	"__init__.py" -> enumerate
	"__init__.py" -> "name.isidentifier"
	"__init__.py" -> "name.startswith"
	"__init__.py" -> "seen.add"
	"__init__.py" -> type
	"__init__.py" -> TypeError
	"__init__.py" -> "name.isidentifier"
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> set
	"__init__.py" -> "name.startswith"
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> "seen.add"
	"__init__.py" -> tuple
	"__init__.py" -> len
	"__init__.py" -> len
	"__init__.py" -> TypeError
	"__init__.py" -> dict
	"__init__.py" -> reversed
	"__init__.py" -> list
	"__init__.py" -> zip
	"__init__.py" -> reversed
	"__init__.py" -> reversed
	"__init__.py" -> tuple
	"__init__.py" -> map
	"__init__.py" -> len
	"__init__.py" -> eval
	"__init__.py" -> tuple_new
	"__init__.py" -> _len
	"__init__.py" -> TypeError
	"__init__.py" -> len
	"__init__.py" -> "self._make"
	"__init__.py" -> _map
	"__init__.py" -> ValueError
	"__init__.py" -> list
	"__init__.py" -> _dict
	"__init__.py" -> _zip
	"__init__.py" -> _tuple
	"__init__.py" -> enumerate
	"__init__.py" -> "_sys.intern"
	"__init__.py" -> _tuplegetter
	"__init__.py" -> type
	"__init__.py" -> "f_globals.get"
	"__init__.py" -> "_sys._getframe"
	"__init__.py" -> mapping_get
	"__init__.py" -> super
	"__init__.py" -> "self.update"
	"__init__.py" -> sum
	"__init__.py" -> "self.values"
	"__init__.py" -> sorted
	"__init__.py" -> "self.items"
	"__init__.py" -> "self.items"
	"__init__.py" -> "_chain.from_iterable"
	"__init__.py" -> _starmap
	"__init__.py" -> "self.items"
	"__init__.py" -> NotImplementedError
	"__init__.py" -> isinstance
	"__init__.py" -> "iterable.items"
	"__init__.py" -> self_get
	"__init__.py" -> super
	"__init__.py" -> "self.update"
	"__init__.py" -> isinstance
	"__init__.py" -> "iterable.items"
	"__init__.py" -> self_get
	"__init__.py" -> self_get
	"__init__.py" -> "self.subtract"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> dict
	"__init__.py" -> super
	"__init__.py" -> dict
	"__init__.py" -> "self.most_common"
	"__init__.py" -> dict
	"__init__.py" -> isinstance
	"__init__.py" -> all
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> all
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> all
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> "other.items"
	"__init__.py" -> isinstance
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> "other.items"
	"__init__.py" -> isinstance
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> "other.items"
	"__init__.py" -> isinstance
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> "self.items"
	"__init__.py" -> "other.items"
	"__init__.py" -> "self._keep_positive"
	"__init__.py" -> "other.items"
	"__init__.py" -> "self._keep_positive"
	"__init__.py" -> "other.items"
	"__init__.py" -> "self._keep_positive"
	"__init__.py" -> "self.items"
	"__init__.py" -> "self._keep_positive"
	"__init__.py" -> list
	"__init__.py" -> KeyError
	"__init__.py" -> "self.__missing__"
	"__init__.py" -> len
	"__init__.py" -> union
	"__init__.py" -> set
	"__init__.py" -> reversed
	"__init__.py" -> "d.update"
	"__init__.py" -> "dict.fromkeys"
	"__init__.py" -> iter
	"__init__.py" -> any
	"__init__.py" -> any
	"__init__.py" -> map
	"__init__.py" -> cls
	"__init__.py" -> "dict.fromkeys"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "m.update"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> KeyError
	"__init__.py" -> KeyError
	"__init__.py" -> KeyError
	"__init__.py" -> isinstance
	"__init__.py" -> "self.copy"
	"__init__.py" -> isinstance
	"__init__.py" -> dict
	"__init__.py" -> reversed
	"__init__.py" -> "m.update"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.update"
	"__init__.py" -> "self.update"
	"__init__.py" -> len
	"__init__.py" -> hasattr
	"__init__.py" -> "self.__class__.__missing__"
	"__init__.py" -> KeyError
	"__init__.py" -> iter
	"__init__.py" -> repr
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__.__new__"
	"__init__.py" -> "inst.__dict__.update"
	"__init__.py" -> UserDict
	"__init__.py" -> "self.data.copy"
	"__init__.py" -> "c.update"
	"__init__.py" -> cls
	"__init__.py" -> type
	"__init__.py" -> type
	"__init__.py" -> isinstance
	"__init__.py" -> list
	"__init__.py" -> repr
	"__init__.py" -> "self.__cast"
	"__init__.py" -> "self.__cast"
	"__init__.py" -> "self.__cast"
	"__init__.py" -> "self.__cast"
	"__init__.py" -> "self.__cast"
	"__init__.py" -> isinstance
	"__init__.py" -> len
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> type
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> list
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> type
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> list
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> type
	"__init__.py" -> list
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__.__new__"
	"__init__.py" -> "inst.__dict__.update"
	"__init__.py" -> "self.data.append"
	"__init__.py" -> "self.data.insert"
	"__init__.py" -> "self.data.pop"
	"__init__.py" -> "self.data.remove"
	"__init__.py" -> "self.data.clear"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.count"
	"__init__.py" -> "self.data.index"
	"__init__.py" -> "self.data.reverse"
	"__init__.py" -> "self.data.sort"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.data.extend"
	"__init__.py" -> "self.data.extend"
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> str
	"__init__.py" -> str
	"__init__.py" -> repr
	"__init__.py" -> int
	"__init__.py" -> float
	"__init__.py" -> complex
	"__init__.py" -> hash
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> len
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> str
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> str
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> str
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.capitalize"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.casefold"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.center"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.data.count"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.removeprefix"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.removesuffix"
	"__init__.py" -> "self.data.encode"
	"__init__.py" -> "self.data.endswith"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.expandtabs"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.data.find"
	"__init__.py" -> "self.data.format"
	"__init__.py" -> "self.data.format_map"
	"__init__.py" -> "self.data.index"
	"__init__.py" -> "self.data.isalpha"
	"__init__.py" -> "self.data.isalnum"
	"__init__.py" -> "self.data.isascii"
	"__init__.py" -> "self.data.isdecimal"
	"__init__.py" -> "self.data.isdigit"
	"__init__.py" -> "self.data.isidentifier"
	"__init__.py" -> "self.data.islower"
	"__init__.py" -> "self.data.isnumeric"
	"__init__.py" -> "self.data.isprintable"
	"__init__.py" -> "self.data.isspace"
	"__init__.py" -> "self.data.istitle"
	"__init__.py" -> "self.data.isupper"
	"__init__.py" -> "self.data.join"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.ljust"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.lower"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.lstrip"
	"__init__.py" -> "self.data.partition"
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.replace"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.data.rfind"
	"__init__.py" -> "self.data.rindex"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.rjust"
	"__init__.py" -> "self.data.rpartition"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.rstrip"
	"__init__.py" -> "self.data.split"
	"__init__.py" -> "self.data.rsplit"
	"__init__.py" -> "self.data.splitlines"
	"__init__.py" -> "self.data.startswith"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.strip"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.swapcase"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.title"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.translate"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.upper"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.zfill"
	"weakref.py" -> TypeError
	"weakref.py" -> format
	"weakref.py" -> type
	"weakref.py" -> self_wr
	"weakref.py" -> callback
	"weakref.py" -> "ref.__new__"
	"weakref.py" -> ref
	"weakref.py" -> type
	"weakref.py" -> ref
	"weakref.py" -> super
	"weakref.py" -> "self._func_ref"
	"weakref.py" -> "self._meth_type"
	"weakref.py" -> isinstance
	"weakref.py" -> "ref.__eq__"
	"weakref.py" -> isinstance
	"weakref.py" -> "ref.__ne__"
	"weakref.py" -> ref
	"weakref.py" -> selfref
	"weakref.py" -> "self._pending_removals.append"
	"weakref.py" -> _atomic_removal
	"weakref.py" -> set
	"weakref.py" -> "self.update"
	"weakref.py" -> _atomic_removal
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> <unknown_function>
	"weakref.py" -> KeyError
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> len
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> <unknown_function>
	"weakref.py" -> id
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> KeyedRef
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> WeakValueDictionary
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> "self.__class__"
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> "self.data.values"
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> "self.data.values"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> "self.data.popitem"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> <unknown_function>
	"weakref.py" -> "self.data.pop"
	"weakref.py" -> KeyError
	"weakref.py" -> <unknown_function>
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> KeyedRef
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> hasattr
	"weakref.py" -> dict
	"weakref.py" -> "other.items"
	"weakref.py" -> KeyedRef
	"weakref.py" -> "kwargs.items"
	"weakref.py" -> KeyedRef
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> list
	"weakref.py" -> "self.data.values"
	"weakref.py" -> "self.update"
	"weakref.py" -> isinstance
	"weakref.py" -> "self.copy"
	"weakref.py" -> "c.update"
	"weakref.py" -> isinstance
	"weakref.py" -> "self.__class__"
	"weakref.py" -> "c.update"
	"weakref.py" -> "c.update"
	"weakref.py" -> "ref.__new__"
	"weakref.py" -> super
	"weakref.py" -> ref
	"weakref.py" -> selfref
	"weakref.py" -> "self._pending_removals.append"
	"weakref.py" -> set
	"weakref.py" -> "self.update"
	"weakref.py" -> ref
	"weakref.py" -> ref
	"weakref.py" -> "self._scrub_removals"
	"weakref.py" -> len
	"weakref.py" -> len
	"weakref.py" -> id
	"weakref.py" -> ref
	"weakref.py" -> WeakKeyDictionary
	"weakref.py" -> "self.data.items"
	"weakref.py" -> key
	"weakref.py" -> "self.__class__"
	"weakref.py" -> "self.data.items"
	"weakref.py" -> key
	"weakref.py" -> "self.data.get"
	"weakref.py" -> ref
	"weakref.py" -> ref
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> wr
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> list
	"weakref.py" -> "self.data.popitem"
	"weakref.py" -> key
	"weakref.py" -> "self.data.pop"
	"weakref.py" -> ref
	"weakref.py" -> "self.data.setdefault"
	"weakref.py" -> ref
	"weakref.py" -> hasattr
	"weakref.py" -> <unknown_function>
	"weakref.py" -> type
	"weakref.py" -> "dict.items"
	"weakref.py" -> ref
	"weakref.py" -> len
	"weakref.py" -> "self.update"
	"weakref.py" -> "self.update"
	"weakref.py" -> isinstance
	"weakref.py" -> "self.copy"
	"weakref.py" -> "c.update"
	"weakref.py" -> isinstance
	"weakref.py" -> "self.__class__"
	"weakref.py" -> "c.update"
	"weakref.py" -> "c.update"
	"weakref.py" -> "itertools.count"
	"weakref.py" -> "atexit.register"
	"weakref.py" -> "self._Info"
	"weakref.py" -> ref
	"weakref.py" -> next
	"weakref.py" -> "self._registry.pop"
	"weakref.py" -> "info.func"
	"weakref.py" -> "self._registry.get"
	"weakref.py" -> "info.weakref"
	"weakref.py" -> "self._registry.pop"
	"weakref.py" -> "self._registry.get"
	"weakref.py" -> "info.weakref"
	"weakref.py" -> "self._registry.get"
	"weakref.py" -> bool
	"weakref.py" -> "self._registry.get"
	"weakref.py" -> bool
	"weakref.py" -> "self._registry.get"
	"weakref.py" -> "info.weakref"
	"weakref.py" -> type
	"weakref.py" -> id
	"weakref.py" -> type
	"weakref.py" -> id
	"weakref.py" -> type
	"weakref.py" -> id
	"weakref.py" -> "cls._registry.items"
	"weakref.py" -> "L.sort"
	"weakref.py" -> "gc.isenabled"
	"weakref.py" -> "gc.disable"
	"weakref.py" -> "cls._select_for_exit"
	"weakref.py" -> "pending.pop"
	"weakref.py" -> f
	"weakref.py" -> "sys.excepthook"
	"weakref.py" -> "sys.exc_info"
	"weakref.py" -> "gc.enable"
	"reprlib.py" -> set
	"reprlib.py" -> id
	"reprlib.py" -> get_ident
	"reprlib.py" -> "repr_running.add"
	"reprlib.py" -> user_function
	"reprlib.py" -> "repr_running.discard"
	"reprlib.py" -> getattr
	"reprlib.py" -> getattr
	"reprlib.py" -> getattr
	"reprlib.py" -> getattr
	"reprlib.py" -> getattr
	"reprlib.py" -> "self.repr1"
	"reprlib.py" -> type
	"reprlib.py" -> "typename.split"
	"reprlib.py" -> join
	"reprlib.py" -> hasattr
	"reprlib.py" -> <unknown_function>
	"reprlib.py" -> getattr
	"reprlib.py" -> "self.repr_instance"
	"reprlib.py" -> len
	"reprlib.py" -> islice
	"reprlib.py" -> "pieces.append"
	"reprlib.py" -> join
	"reprlib.py" -> "self._repr_iterable"
	"reprlib.py" -> "self._repr_iterable"
	"reprlib.py" -> "self._repr_iterable"
	"reprlib.py" -> "self._repr_iterable"
	"reprlib.py" -> "self._repr_iterable"
	"reprlib.py" -> "self._repr_iterable"
	"reprlib.py" -> len
	"reprlib.py" -> islice
	"reprlib.py" -> "pieces.append"
	"reprlib.py" -> "pieces.append"
	"reprlib.py" -> join
	"reprlib.py" -> "builtins.repr"
	"reprlib.py" -> len
	"reprlib.py" -> max
	"reprlib.py" -> max
	"reprlib.py" -> "builtins.repr"
	"reprlib.py" -> len
	"reprlib.py" -> len
	"reprlib.py" -> "builtins.repr"
	"reprlib.py" -> len
	"reprlib.py" -> max
	"reprlib.py" -> max
	"reprlib.py" -> len
	"reprlib.py" -> "builtins.repr"
	"reprlib.py" -> id
	"reprlib.py" -> len
	"reprlib.py" -> max
	"reprlib.py" -> max
	"reprlib.py" -> len
	"reprlib.py" -> sorted
	"reprlib.py" -> list
	"reprlib.py" -> Repr
	"typing.py" -> type
	"typing.py" -> isinstance
	"typing.py" -> ForwardRef
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> type
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> len
	"typing.py" -> isinstance
	"typing.py" -> repr
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> repr
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> "parameters.append"
	"typing.py" -> hasattr
	"typing.py" -> "parameters.append"
	"typing.py" -> getattr
	"typing.py" -> "parameters.append"
	"typing.py" -> tuple
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> getattr
	"typing.py" -> "newargs.extend"
	"typing.py" -> "newargs.append"
	"typing.py" -> set
	"typing.py" -> len
	"typing.py" -> len
	"typing.py" -> "new_params.append"
	"typing.py" -> "all_params.remove"
	"typing.py" -> isinstance
	"typing.py" -> "params.extend"
	"typing.py" -> "params.append"
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> "params.extend"
	"typing.py" -> "params.append"
	"typing.py" -> tuple
	"typing.py" -> <unknown_function>
	"typing.py" -> "_cleanups.append"
	"typing.py" -> cached
	"typing.py" -> func
	"typing.py" -> frozenset
	"typing.py" -> isinstance
	"typing.py" -> "t._evaluate"
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> ForwardRef
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> "t.copy_with"
	"typing.py" -> TypeError
	"typing.py" -> AttributeError
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> "self._getitem"
	"typing.py" -> isinstance
	"typing.py" -> "self._getitem"
	"typing.py" -> TypeError
	"typing.py" -> super
	"typing.py" -> super
	"typing.py" -> TypeError
	"typing.py" -> super
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> _GenericAlias
	"typing.py" -> _GenericAlias
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> len
	"typing.py" -> len
	"typing.py" -> type
	"typing.py" -> _UnionGenericAlias
	"typing.py" -> _UnionGenericAlias
	"typing.py" -> type
	"typing.py" -> tuple
	"typing.py" -> list
	"typing.py" -> _LiteralGenericAlias
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> _ConcatenateGenericAlias
	"typing.py" -> _GenericAlias
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> compile
	"typing.py" -> SyntaxError
	"typing.py" -> getattr
	"typing.py" -> "sys.modules.get"
	"typing.py" -> eval
	"typing.py" -> isinstance
	"typing.py" -> hash
	"typing.py" -> isinstance
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> ValueError
	"typing.py" -> bool
	"typing.py" -> bool
	"typing.py" -> super
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> getattr
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> "params.index"
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> len
	"typing.py" -> enumerate
	"typing.py" -> isinstance
	"typing.py" -> getattr
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> min
	"typing.py" -> min
	"typing.py" -> TypeError
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> ParamSpecArgs
	"typing.py" -> ParamSpecKwargs
	"typing.py" -> super
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> TypeError
	"typing.py" -> "params.index"
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> "attr.startswith"
	"typing.py" -> "attr.endswith"
	"typing.py" -> TypeError
	"typing.py" -> "self.__origin__"
	"typing.py" -> "res.append"
	"typing.py" -> "bases.index"
	"typing.py" -> isinstance
	"typing.py" -> issubclass
	"typing.py" -> "res.append"
	"typing.py" -> tuple
	"typing.py" -> getattr
	"typing.py" -> AttributeError
	"typing.py" -> super
	"typing.py" -> setattr
	"typing.py" -> "self.__subclasscheck__"
	"typing.py" -> type
	"typing.py" -> TypeError
	"typing.py" -> list
	"typing.py" -> set
	"typing.py" -> super
	"typing.py" -> dir
	"typing.py" -> super
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> hash
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> "self._determine_new_args"
	"typing.py" -> "self.copy_with"
	"typing.py" -> getattr
	"typing.py" -> prepare
	"typing.py" -> len
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> dict
	"typing.py" -> zip
	"typing.py" -> tuple
	"typing.py" -> "self._make_substitution"
	"typing.py" -> isinstance
	"typing.py" -> "new_args.append"
	"typing.py" -> getattr
	"typing.py" -> substfunc
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> "subargs.extend"
	"typing.py" -> "subargs.append"
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> "new_args.extend"
	"typing.py" -> "new_args.extend"
	"typing.py" -> isinstance
	"typing.py" -> "new_args.append"
	"typing.py" -> tuple
	"typing.py" -> "self._make_substitution"
	"typing.py" -> "new_args.append"
	"typing.py" -> "self.__class__"
	"typing.py" -> join
	"typing.py" -> globals
	"typing.py" -> tuple
	"typing.py" -> len
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> super
	"typing.py" -> "bases.index"
	"typing.py" -> isinstance
	"typing.py" -> super
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> "self.copy_with"
	"typing.py" -> _GenericAlias
	"typing.py" -> isinstance
	"typing.py" -> issubclass
	"typing.py" -> isinstance
	"typing.py" -> issubclass
	"typing.py" -> super
	"typing.py" -> len
	"typing.py" -> super
	"typing.py" -> join
	"typing.py" -> len
	"typing.py" -> list
	"typing.py" -> _CallableGenericAlias
	"typing.py" -> isinstance
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> "self.__getitem_inner__"
	"typing.py" -> "self.copy_with"
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> "self.copy_with"
	"typing.py" -> isinstance
	"typing.py" -> len
	"typing.py" -> tuple
	"typing.py" -> "self.copy_with"
	"typing.py" -> tuple
	"typing.py" -> "self.copy_with"
	"typing.py" -> isinstance
	"typing.py" -> set
	"typing.py" -> set
	"typing.py" -> hash
	"typing.py" -> frozenset
	"typing.py" -> len
	"typing.py" -> type
	"typing.py" -> type
	"typing.py" -> super
	"typing.py" -> "self.__subclasscheck__"
	"typing.py" -> type
	"typing.py" -> issubclass
	"typing.py" -> super
	"typing.py" -> type
	"typing.py" -> isinstance
	"typing.py" -> set
	"typing.py" -> set
	"typing.py" -> hash
	"typing.py" -> frozenset
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> super
	"typing.py" -> _UnpackGenericAlias
	"typing.py" -> repr
	"typing.py" -> super
	"typing.py" -> len
	"typing.py" -> isinstance
	"typing.py" -> len
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> TypeError
	"typing.py" -> all
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> set
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> getattr
	"typing.py" -> prepare
	"typing.py" -> len
	"typing.py" -> zip
	"typing.py" -> isinstance
	"typing.py" -> "new_args.extend"
	"typing.py" -> "new_args.append"
	"typing.py" -> tuple
	"typing.py" -> _GenericAlias
	"typing.py" -> super
	"typing.py" -> type
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> set
	"typing.py" -> set
	"typing.py" -> join
	"typing.py" -> str
	"typing.py" -> join
	"typing.py" -> str
	"typing.py" -> TypeError
	"typing.py" -> tuple
	"typing.py" -> set
	"typing.py" -> getattr
	"typing.py" -> list
	"typing.py" -> "base.__dict__.keys"
	"typing.py" -> list
	"typing.py" -> "annotations.keys"
	"typing.py" -> "attr.startswith"
	"typing.py" -> "attrs.add"
	"typing.py" -> all
	"typing.py" -> callable
	"typing.py" -> getattr
	"typing.py" -> type
	"typing.py" -> TypeError
	"typing.py" -> "base.__dict__.get"
	"typing.py" -> "cls.__init__"
	"typing.py" -> "f_globals.get"
	"typing.py" -> "sys._getframe"
	"typing.py" -> getattr
	"typing.py" -> getattr
	"typing.py" -> TypeError
	"typing.py" -> getattr
	"typing.py" -> issubclass
	"typing.py" -> all
	"typing.py" -> hasattr
	"typing.py" -> callable
	"typing.py" -> getattr
	"typing.py" -> getattr
	"typing.py" -> super
	"typing.py" -> super
	"typing.py" -> "cls.__dict__.get"
	"typing.py" -> any
	"typing.py" -> "cls.__dict__.get"
	"typing.py" -> getattr
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> issubclass
	"typing.py" -> issubclass
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> super
	"typing.py" -> len
	"typing.py" -> _AnnotatedAlias
	"typing.py" -> format
	"typing.py" -> join
	"typing.py" -> repr
	"typing.py" -> isinstance
	"typing.py" -> hash
	"typing.py" -> super
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> tuple
	"typing.py" -> _AnnotatedAlias
	"typing.py" -> TypeError
	"typing.py" -> format
	"typing.py" -> issubclass
	"typing.py" -> TypeError
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> reversed
	"typing.py" -> getattr
	"typing.py" -> "sys.modules.get"
	"typing.py" -> "base.__dict__.get"
	"typing.py" -> isinstance
	"typing.py" -> dict
	"typing.py" -> vars
	"typing.py" -> "ann.items"
	"typing.py" -> type
	"typing.py" -> isinstance
	"typing.py" -> ForwardRef
	"typing.py" -> "hints.items"
	"typing.py" -> isinstance
	"typing.py" -> hasattr
	"typing.py" -> getattr
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> format
	"typing.py" -> dict
	"typing.py" -> "hints.items"
	"typing.py" -> type
	"typing.py" -> isinstance
	"typing.py" -> ForwardRef
	"typing.py" -> isinstance
	"typing.py" -> "hints.items"
	"typing.py" -> isinstance
	"typing.py" -> hasattr
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> "t.copy_with"
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> list
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> repr
	"typing.py" -> len
	"typing.py" -> AssertionError
	"typing.py" -> isinstance
	"typing.py" -> dir
	"typing.py" -> getattr
	"typing.py" -> hasattr
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> NotImplementedError
	"typing.py" -> getattr
	"typing.py" -> getattr
	"typing.py" -> list
	"typing.py" -> values
	"typing.py" -> "_overload_registry.clear"
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _CallableType
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _TupleType
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> frozenset
	"typing.py" -> frozenset
	"typing.py" -> TypeError
	"typing.py" -> tuple
	"typing.py" -> "ns.get"
	"typing.py" -> "default_names.append"
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> join
	"typing.py" -> classmethod
	"typing.py" -> AttributeError
	"typing.py" -> setattr
	"typing.py" -> "nm_tpl.__init_subclass__"
	"typing.py" -> "kwargs.items"
	"typing.py" -> TypeError
	"typing.py" -> "type.__new__"
	"typing.py" -> type
	"typing.py" -> TypeError
	"typing.py" -> any
	"typing.py" -> issubclass
	"typing.py" -> "type.__new__"
	"typing.py" -> "ns.get"
	"typing.py" -> "own_annotations.items"
	"typing.py" -> set
	"typing.py" -> set
	"typing.py" -> "annotations.update"
	"typing.py" -> "base.__dict__.get"
	"typing.py" -> "required_keys.update"
	"typing.py" -> "base.__dict__.get"
	"typing.py" -> "optional_keys.update"
	"typing.py" -> "base.__dict__.get"
	"typing.py" -> "annotations.update"
	"typing.py" -> "own_annotations.items"
	"typing.py" -> "required_keys.add"
	"typing.py" -> "optional_keys.add"
	"typing.py" -> "required_keys.add"
	"typing.py" -> "optional_keys.add"
	"typing.py" -> frozenset
	"typing.py" -> frozenset
	"typing.py" -> hasattr
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> dict
	"typing.py" -> _TypedDictMeta
	"typing.py" -> "type.__new__"
	"typing.py" -> _GenericAlias
	"typing.py" -> _GenericAlias
	"typing.py" -> "name.rpartition"
	"typing.py" -> TypeError
	"typing.py" -> super
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> print
	"typing.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> "_c.close"
	"types.py" -> type
	"types.py" -> type
	"types.py" -> _C
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> object
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> exec_body
	"types.py" -> meta
	"types.py" -> list
	"types.py" -> enumerate
	"types.py" -> isinstance
	"types.py" -> hasattr
	"types.py" -> "base.__mro_entries__"
	"types.py" -> isinstance
	"types.py" -> TypeError
	"types.py" -> len
	"types.py" -> tuple
	"types.py" -> dict
	"types.py" -> "kwds.pop"
	"types.py" -> type
	"types.py" -> isinstance
	"types.py" -> hasattr
	"types.py" -> "meta.__prepare__"
	"types.py" -> type
	"types.py" -> issubclass
	"types.py" -> issubclass
	"types.py" -> TypeError
	"types.py" -> bool
	"types.py" -> getattr
	"types.py" -> AttributeError
	"types.py" -> AttributeError
	"types.py" -> "self.fget"
	"types.py" -> AttributeError
	"types.py" -> "self.fset"
	"types.py" -> AttributeError
	"types.py" -> "self.fdel"
	"types.py" -> <unknown_function>
	"types.py" -> type
	"types.py" -> <unknown_function>
	"types.py" -> type
	"types.py" -> <unknown_function>
	"types.py" -> type
	"types.py" -> getattr
	"types.py" -> getattr
	"types.py" -> "self.__wrapped.send"
	"types.py" -> "self.__wrapped.throw"
	"types.py" -> "self.__wrapped.close"
	"types.py" -> next
	"types.py" -> callable
	"types.py" -> TypeError
	"types.py" -> getattr
	"types.py" -> "co.replace"
	"types.py" -> func
	"types.py" -> isinstance
	"types.py" -> isinstance
	"types.py" -> _GeneratorWrapper
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> globals
	"__init__.py" -> "_cache.clear"
	"__init__.py" -> "_compile_repl.cache_clear"
	"__init__.py" -> chr
	"__init__.py" -> isinstance
	"__init__.py" -> "pattern.translate"
	"__init__.py" -> str
	"__init__.py" -> encode
	"__init__.py" -> "pattern.translate"
	"__init__.py" -> type
	"__init__.py" -> "_compiler.compile"
	"__init__.py" -> type
	"__init__.py" -> "_compiler.compile"
	"__init__.py" -> isinstance
	"__init__.py" -> type
	"__init__.py" -> isinstance
	"__init__.py" -> ValueError
	"__init__.py" -> "_compiler.isstring"
	"__init__.py" -> TypeError
	"__init__.py" -> "_compiler.compile"
	"__init__.py" -> len
	"__init__.py" -> next
	"__init__.py" -> iter
	"__init__.py" -> type
	"__init__.py" -> "_parser.parse_template"
	"__init__.py" -> "_parser.parse_template"
	"__init__.py" -> "_parser.expand_template"
	"__init__.py" -> len
	"__init__.py" -> "_parser.expand_template"
	"__init__.py" -> isinstance
	"__init__.py" -> "_parser.State"
	"__init__.py" -> "s.opengroup"
	"__init__.py" -> "p.append"
	"__init__.py" -> "_parser.SubPattern"
	"__init__.py" -> "_parser.parse"
	"__init__.py" -> "s.closegroup"
	"__init__.py" -> "_parser.SubPattern"
	"__init__.py" -> "_compiler.compile"
	"__init__.py" -> "self.scanner.scanner"
	"__init__.py" -> "m.end"
	"__init__.py" -> callable
	"__init__.py" -> action
	"__init__.py" -> "m.group"
	"__init__.py" -> append
	"enum.py" -> hasattr
	"enum.py" -> hasattr
	"enum.py" -> hasattr
	"enum.py" -> len
	"enum.py" -> len
	"enum.py" -> isinstance
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> "qualname.endswith"
	"enum.py" -> len
	"enum.py" -> len
	"enum.py" -> "name.startswith"
	"enum.py" -> TypeError
	"enum.py" -> isinstance
	"enum.py" -> setattr
	"enum.py" -> setattr
	"enum.py" -> isinstance
	"enum.py" -> ValueError
	"enum.py" -> list
	"enum.py" -> "num.bit_length"
	"enum.py" -> replace
	"enum.py" -> "bltns.bin"
	"enum.py" -> "bltns.bin"
	"enum.py" -> len
	"enum.py" -> "text.split"
	"enum.py" -> enumerate
	"enum.py" -> enumerate
	"enum.py" -> join
	"enum.py" -> _auto_null
	"enum.py" -> AttributeError
	"enum.py" -> AttributeError
	"enum.py" -> "self.fget"
	"enum.py" -> AttributeError
	"enum.py" -> "self.fset"
	"enum.py" -> AttributeError
	"enum.py" -> "self.fdel"
	"enum.py" -> delattr
	"enum.py" -> isinstance
	"enum.py" -> "enum_class._new_member_"
	"enum.py" -> "enum_class._new_member_"
	"enum.py" -> hasattr
	"enum.py" -> "enum_class._member_type_"
	"enum.py" -> TypeError
	"enum.py" -> "enum_member.__init__"
	"enum.py" -> len
	"enum.py" -> issubclass
	"enum.py" -> "enum_class._flag_mask_.bit_length"
	"enum.py" -> "enum_class._member_map_.items"
	"enum.py" -> issubclass
	"enum.py" -> "enum_class._member_names_.append"
	"enum.py" -> issubclass
	"enum.py" -> "enum_class._member_names_.append"
	"enum.py" -> "base.__dict__.get"
	"enum.py" -> isinstance
	"enum.py" -> hasattr
	"enum.py" -> hasattr
	"enum.py" -> hasattr
	"enum.py" -> property
	"enum.py" -> "redirect.__set_name__"
	"enum.py" -> setattr
	"enum.py" -> setattr
	"enum.py" -> "enum_class._value2member_map_.setdefault"
	"enum.py" -> "enum_class._unhashable_values_.append"
	"enum.py" -> super
	"enum.py" -> ValueError
	"enum.py" -> TypeError
	"enum.py" -> isinstance
	"enum.py" -> setattr
	"enum.py" -> isinstance
	"enum.py" -> split
	"enum.py" -> "value.replace"
	"enum.py" -> list
	"enum.py" -> set
	"enum.py" -> set
	"enum.py" -> ValueError
	"enum.py" -> TypeError
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> type
	"enum.py" -> any
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> "self._generate_next_value"
	"enum.py" -> len
	"enum.py" -> "self._last_values.append"
	"enum.py" -> "auto_valued.append"
	"enum.py" -> tuple
	"enum.py" -> "self._last_values.append"
	"enum.py" -> super
	"enum.py" -> "members.keys"
	"enum.py" -> "more_members.items"
	"enum.py" -> "metacls._check_for_existing_members_"
	"enum.py" -> _EnumDict
	"enum.py" -> "metacls._get_mixins_"
	"enum.py" -> getattr
	"enum.py" -> super
	"enum.py" -> append
	"enum.py" -> "classdict.setdefault"
	"enum.py" -> "classdict.pop"
	"enum.py" -> set
	"enum.py" -> ValueError
	"enum.py" -> join
	"enum.py" -> repr
	"enum.py" -> "classdict.pop"
	"enum.py" -> dict
	"enum.py" -> "classdict.items"
	"enum.py" -> "metacls._get_mixins_"
	"enum.py" -> "metacls._find_new_"
	"enum.py" -> _proto_member
	"enum.py" -> "metacls._find_data_repr_"
	"enum.py" -> getattr
	"enum.py" -> super
	"enum.py" -> "classdict.update"
	"enum.py" -> TypeError
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> setattr
	"enum.py" -> issubclass
	"enum.py" -> getattr
	"enum.py" -> setattr
	"enum.py" -> isinstance
	"enum.py" -> split
	"enum.py" -> "_order_.replace"
	"enum.py" -> issubclass
	"enum.py" -> delattr
	"enum.py" -> delattr
	"enum.py" -> delattr
	"enum.py" -> delattr
	"enum.py" -> delattr
	"enum.py" -> issubclass
	"enum.py" -> sorted
	"enum.py" -> TypeError
	"enum.py" -> "cls.__new__"
	"enum.py" -> "cls._create_"
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> type
	"enum.py" -> isinstance
	"enum.py" -> AttributeError
	"enum.py" -> super
	"enum.py" -> set
	"enum.py" -> "interesting.add"
	"enum.py" -> "interesting.add"
	"enum.py" -> sorted
	"enum.py" -> sorted
	"enum.py" -> set
	"enum.py" -> dir
	"enum.py" -> AttributeError
	"enum.py" -> AttributeError
	"enum.py" -> len
	"enum.py" -> issubclass
	"enum.py" -> reversed
	"enum.py" -> "cls.__dict__.get"
	"enum.py" -> AttributeError
	"enum.py" -> super
	"enum.py" -> "cls._get_mixins_"
	"enum.py" -> "metacls.__prepare__"
	"enum.py" -> isinstance
	"enum.py" -> split
	"enum.py" -> "names.replace"
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> enumerate
	"enum.py" -> "first_enum._generate_next_value_"
	"enum.py" -> "last_values.append"
	"enum.py" -> "names.append"
	"enum.py" -> isinstance
	"enum.py" -> "sys._getframe"
	"enum.py" -> "metacls.__new__"
	"enum.py" -> "source.items"
	"enum.py" -> filter
	"enum.py" -> "members.sort"
	"enum.py" -> "members.sort"
	"enum.py" -> type
	"enum.py" -> <unknown_function>
	"enum.py" -> "__dict__.update"
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> "mcls._check_for_existing_members_"
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> "mcls._find_data_type_"
	"enum.py" -> isinstance
	"enum.py" -> set
	"enum.py" -> set
	"enum.py" -> "base_chain.add"
	"enum.py" -> isinstance
	"enum.py" -> "data_types.add"
	"enum.py" -> isinstance
	"enum.py" -> "data_types.add"
	"enum.py" -> len
	"enum.py" -> TypeError
	"enum.py" -> "data_types.pop"
	"enum.py" -> "classdict.get"
	"enum.py" -> getattr
	"enum.py" -> type
	"enum.py" -> "cls._member_map_.values"
	"enum.py" -> "cls._missing_"
	"enum.py" -> isinstance
	"enum.py" -> issubclass
	"enum.py" -> isinstance
	"enum.py" -> ValueError
	"enum.py" -> TypeError
	"enum.py" -> isinstance
	"enum.py" -> "last_values.sort"
	"enum.py" -> reversed
	"enum.py" -> v_repr
	"enum.py" -> set
	"enum.py" -> set
	"enum.py" -> "object.__dir__"
	"enum.py" -> getattr
	"enum.py" -> "interesting.add"
	"enum.py" -> "self.__class__.mro"
	"enum.py" -> "cls.__dict__.items"
	"enum.py" -> isinstance
	"enum.py" -> "interesting.add"
	"enum.py" -> "interesting.discard"
	"enum.py" -> "interesting.add"
	"enum.py" -> sorted
	"enum.py" -> set
	"enum.py" -> "str.__format__"
	"enum.py" -> str
	"enum.py" -> hash
	"enum.py" -> len
	"enum.py" -> TypeError
	"enum.py" -> len
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> len
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> len
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> str
	"enum.py" -> "str.__new__"
	"enum.py" -> "name.lower"
	"enum.py" -> auto
	"enum.py" -> auto
	"enum.py" -> auto
	"enum.py" -> auto
	"enum.py" -> cls
	"enum.py" -> cls
	"enum.py" -> "cls._value2member_map_.get"
	"enum.py" -> max
	"enum.py" -> TypeError
	"enum.py" -> "cls._value2member_map_.get"
	"enum.py" -> sorted
	"enum.py" -> "cls._iter_member_by_value_"
	"enum.py" -> isinstance
	"enum.py" -> ValueError
	"enum.py" -> max
	"enum.py" -> "value.bit_length"
	"enum.py" -> "flag_mask.bit_length"
	"enum.py" -> ValueError
	"enum.py" -> bin
	"enum.py" -> bin
	"enum.py" -> max
	"enum.py" -> "value.bit_length"
	"enum.py" -> ValueError
	"enum.py" -> ValueError
	"enum.py" -> bin
	"enum.py" -> "object.__new__"
	"enum.py" -> "cls._member_type_.__new__"
	"enum.py" -> hasattr
	"enum.py" -> "cls._iter_member_"
	"enum.py" -> "members.append"
	"enum.py" -> "cls._member_map_.items"
	"enum.py" -> "members.append"
	"enum.py" -> join
	"enum.py" -> ValueError
	"enum.py" -> "cls._numeric_repr_"
	"enum.py" -> "cls._value2member_map_.setdefault"
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> type
	"enum.py" -> "self._iter_member_"
	"enum.py" -> "self._value_.bit_count"
	"enum.py" -> v_repr
	"enum.py" -> v_repr
	"enum.py" -> bool
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> "self.__class__"
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> "self.__class__"
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> "self.__class__"
	"enum.py" -> "self.__class__"
	"enum.py" -> "self.__class__"
	"enum.py" -> isinstance
	"enum.py" -> "value.bit_length"
	"enum.py" -> "enumeration.__members__.items"
	"enum.py" -> "duplicates.append"
	"enum.py" -> join
	"enum.py" -> ValueError
	"enum.py" -> "self.__class__.__module__.split"
	"enum.py" -> "self.__class__.__module__.split"
	"enum.py" -> join
	"enum.py" -> "self.name.split"
	"enum.py" -> "self._name_.split"
	"enum.py" -> isdigit
	"enum.py" -> "name.append"
	"enum.py" -> "name.append"
	"enum.py" -> join
	"enum.py" -> issubclass
	"enum.py" -> issubclass
	"enum.py" -> "__dict__.update"
	"enum.py" -> "cls.__dict__.get"
	"enum.py" -> issubclass
	"enum.py" -> "cls.__dict__.items"
	"enum.py" -> "cls.__dict__.get"
	"enum.py" -> type
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> setattr
	"enum.py" -> issubclass
	"enum.py" -> "attrs.items"
	"enum.py" -> isinstance
	"enum.py" -> gnv
	"enum.py" -> len
	"enum.py" -> property
	"enum.py" -> "redirect.__set_name__"
	"enum.py" -> setattr
	"enum.py" -> isinstance
	"enum.py" -> new_member
	"enum.py" -> new_member
	"enum.py" -> "member.__init__"
	"enum.py" -> property
	"enum.py" -> "redirect.__set_name__"
	"enum.py" -> setattr
	"enum.py" -> len
	"enum.py" -> "member_names.append"
	"enum.py" -> "gnv_last_values.append"
	"enum.py" -> bit_length
	"enum.py" -> sorted
	"enum.py" -> "attrs.items"
	"enum.py" -> isinstance
	"enum.py" -> gnv
	"enum.py" -> len
	"enum.py" -> property
	"enum.py" -> "redirect.__set_name__"
	"enum.py" -> setattr
	"enum.py" -> isinstance
	"enum.py" -> new_member
	"enum.py" -> new_member
	"enum.py" -> "member.__init__"
	"enum.py" -> len
	"enum.py" -> property
	"enum.py" -> "redirect.__set_name__"
	"enum.py" -> setattr
	"enum.py" -> "member_names.append"
	"enum.py" -> "gnv_last_values.append"
	"enum.py" -> issubclass
	"enum.py" -> issubclass
	"enum.py" -> TypeError
	"enum.py" -> "enumeration.__members__.items"
	"enum.py" -> "duplicates.append"
	"enum.py" -> join
	"enum.py" -> ValueError
	"enum.py" -> set
	"enum.py" -> len
	"enum.py" -> min
	"enum.py" -> max
	"enum.py" -> range
	"enum.py" -> "missing.append"
	"enum.py" -> range
	"enum.py" -> "missing.append"
	"enum.py" -> Exception
	"enum.py" -> ValueError
	"enum.py" -> join
	"enum.py" -> str
	"enum.py" -> "enumeration._member_map_.items"
	"enum.py" -> list
	"enum.py" -> "missing_names.append"
	"enum.py" -> len
	"enum.py" -> join
	"enum.py" -> ValueError
	"enum.py" -> list
	"enum.py" -> "checked_dict.keys"
	"enum.py" -> list
	"enum.py" -> "simple_dict.keys"
	"enum.py" -> set
	"enum.py" -> list
	"enum.py" -> "checked_enum._member_map_.keys"
	"enum.py" -> list
	"enum.py" -> "simple_enum._member_map_.keys"
	"enum.py" -> set
	"enum.py" -> "failed.append"
	"enum.py" -> "failed.append"
	"enum.py" -> callable
	"enum.py" -> isinstance
	"enum.py" -> replace
	"enum.py" -> "checked_value.replace"
	"enum.py" -> replace
	"enum.py" -> "simple_value.replace"
	"enum.py" -> "failed.append"
	"enum.py" -> "failed.append"
	"enum.py" -> "failed.sort"
	"enum.py" -> "failed.append"
	"enum.py" -> "failed.append"
	"enum.py" -> list
	"enum.py" -> "checked_member_dict.keys"
	"enum.py" -> list
	"enum.py" -> "simple_member_dict.keys"
	"enum.py" -> set
	"enum.py" -> "failed_member.append"
	"enum.py" -> "failed_member.append"
	"enum.py" -> "failed_member.append"
	"enum.py" -> "failed.append"
	"enum.py" -> join
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> hasattr
	"enum.py" -> "failed.append"
	"enum.py" -> TypeError
	"enum.py" -> join
	"enum.py" -> "source.items"
	"enum.py" -> filter
	"enum.py" -> "members.sort"
	"enum.py" -> "members.sort"
	"enum.py" -> etype
	"warnings.py" -> WarningMessage
	"warnings.py" -> WarningMessage
	"warnings.py" -> "file.write"
	"warnings.py" -> "line.strip"
	"warnings.py" -> "line.strip"
	"warnings.py" -> callable
	"warnings.py" -> TypeError
	"warnings.py" -> sw
	"warnings.py" -> fw
	"warnings.py" -> isinstance
	"warnings.py" -> isinstance
	"warnings.py" -> issubclass
	"warnings.py" -> isinstance
	"warnings.py" -> isinstance
	"warnings.py" -> isinstance
	"warnings.py" -> "filters.remove"
	"warnings.py" -> "filters.insert"
	"warnings.py" -> "filters.append"
	"warnings.py" -> print
	"warnings.py" -> "arg.split"
	"warnings.py" -> len
	"warnings.py" -> _OptionError
	"warnings.py" -> len
	"warnings.py" -> "parts.append"
	"warnings.py" -> "s.strip"
	"warnings.py" -> int
	"warnings.py" -> _OptionError
	"warnings.py" -> "a.startswith"
	"warnings.py" -> _OptionError
	"warnings.py" -> "category.rpartition"
	"warnings.py" -> __import__
	"warnings.py" -> _OptionError
	"warnings.py" -> getattr
	"warnings.py" -> _OptionError
	"warnings.py" -> issubclass
	"warnings.py" -> _OptionError
	"warnings.py" -> isinstance
	"warnings.py" -> isinstance
	"warnings.py" -> issubclass
	"warnings.py" -> TypeError
	"warnings.py" -> format
	"warnings.py" -> type
	"warnings.py" -> "sys._getframe"
	"warnings.py" -> "sys._getframe"
	"warnings.py" -> "sys._getframe"
	"warnings.py" -> range
	"warnings.py" -> "globals.setdefault"
	"warnings.py" -> int
	"warnings.py" -> lower
	"warnings.py" -> "registry.get"
	"warnings.py" -> "registry.clear"
	"warnings.py" -> isinstance
	"warnings.py" -> str
	"warnings.py" -> category
	"warnings.py" -> "registry.get"
	"warnings.py" -> "msg.match"
	"warnings.py" -> issubclass
	"warnings.py" -> "mod.match"
	"warnings.py" -> "onceregistry.get"
	"warnings.py" -> "registry.get"
	"warnings.py" -> RuntimeError
	"warnings.py" -> WarningMessage
	"warnings.py" -> "args.append"
	"warnings.py" -> "args.append"
	"warnings.py" -> type
	"warnings.py" -> join
	"warnings.py" -> RuntimeError
	"warnings.py" -> "self._module._filters_mutated"
	"warnings.py" -> RuntimeError
	"warnings.py" -> "self._module._filters_mutated"
	"warnings.py" -> RuntimeError
	"warnings.py" -> "message.format"
	"warnings.py" -> reversed
	"warnings.py" -> "msg_lines.append"
	"warnings.py" -> list
	"warnings.py" -> rstrip
	"warnings.py" -> join
	"warnings.py" -> hasattr
	"copyreg.py" -> callable
	"copyreg.py" -> TypeError
	"copyreg.py" -> callable
	"copyreg.py" -> TypeError
	"copyreg.py" -> type
	"copyreg.py" -> "object.__new__"
	"copyreg.py" -> "base.__new__"
	"copyreg.py" -> "base.__init__"
	"copyreg.py" -> type
	"copyreg.py" -> hasattr
	"copyreg.py" -> isinstance
	"copyreg.py" -> TypeError
	"copyreg.py" -> base
	"copyreg.py" -> getattr
	"copyreg.py" -> TypeError
	"copyreg.py" -> type
	"copyreg.py" -> getattr
	"copyreg.py" -> TypeError
	"copyreg.py" -> getstate
	"copyreg.py" -> "cls.__new__"
	"copyreg.py" -> "cls.__new__"
	"copyreg.py" -> "cls.__dict__.get"
	"copyreg.py" -> hasattr
	"copyreg.py" -> isinstance
	"copyreg.py" -> "name.startswith"
	"copyreg.py" -> "name.endswith"
	"copyreg.py" -> "c.__name__.lstrip"
	"copyreg.py" -> "names.append"
	"copyreg.py" -> "names.append"
	"copyreg.py" -> "names.append"
	"copyreg.py" -> int
	"copyreg.py" -> ValueError
	"copyreg.py" -> "_extension_registry.get"
	"copyreg.py" -> "_inverted_registry.get"
	"copyreg.py" -> ValueError
	"copyreg.py" -> ValueError
	"copyreg.py" -> "_extension_registry.get"
	"copyreg.py" -> "_inverted_registry.get"
	"copyreg.py" -> ValueError
	"copyreg.py" -> "_extension_cache.clear"
	"fnmatch.py" -> isinstance
	"fnmatch.py" -> str
	"fnmatch.py" -> bytes
	"fnmatch.py" -> match
	"fnmatch.py" -> "result.append"
	"fnmatch.py" -> match
	"fnmatch.py" -> "result.append"
	"fnmatch.py" -> match
	"fnmatch.py" -> object
	"fnmatch.py" -> len
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> "stuff.replace"
	"fnmatch.py" -> "pat.find"
	"fnmatch.py" -> "chunks.append"
	"fnmatch.py" -> "chunks.append"
	"fnmatch.py" -> range
	"fnmatch.py" -> len
	"fnmatch.py" -> join
	"fnmatch.py" -> replace
	"fnmatch.py" -> "s.replace"
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> len
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> "fixed.append"
	"fnmatch.py" -> join
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> join
	"parse.py" -> "urlsplit.cache_clear"
	"parse.py" -> "_byte_quoter_factory.cache_clear"
	"parse.py" -> "obj.encode"
	"parse.py" -> tuple
	"parse.py" -> "x.decode"
	"parse.py" -> isinstance
	"parse.py" -> isinstance
	"parse.py" -> TypeError
	"parse.py" -> "self._encoded_counterpart"
	"parse.py" -> "x.encode"
	"parse.py" -> "self._decoded_counterpart"
	"parse.py" -> "x.decode"
	"parse.py" -> isinstance
	"parse.py" -> "hostname.partition"
	"parse.py" -> "hostname.lower"
	"parse.py" -> "port.isdigit"
	"parse.py" -> "port.isascii"
	"parse.py" -> int
	"parse.py" -> ValueError
	"parse.py" -> ValueError
	"parse.py" -> classmethod
	"parse.py" -> "netloc.rpartition"
	"parse.py" -> "userinfo.partition"
	"parse.py" -> "netloc.rpartition"
	"parse.py" -> "hostinfo.partition"
	"parse.py" -> "bracketed.partition"
	"parse.py" -> "port.partition"
	"parse.py" -> "hostinfo.partition"
	"parse.py" -> "netloc.rpartition"
	"parse.py" -> "userinfo.partition"
	"parse.py" -> "netloc.rpartition"
	"parse.py" -> "hostinfo.partition"
	"parse.py" -> "bracketed.partition"
	"parse.py" -> "port.partition"
	"parse.py" -> "hostinfo.partition"
	"parse.py" -> ParseResult
	"parse.py" -> _coerce_result
	"parse.py" -> "url.find"
	"parse.py" -> "url.rfind"
	"parse.py" -> "url.find"
	"parse.py" -> len
	"parse.py" -> "url.find"
	"parse.py" -> min
	"parse.py" -> "netloc.isascii"
	"parse.py" -> "netloc.replace"
	"parse.py" -> "n.replace"
	"parse.py" -> "n.replace"
	"parse.py" -> "n.replace"
	"parse.py" -> ValueError
	"parse.py" -> "hostname.startswith"
	"parse.py" -> ValueError
	"parse.py" -> isinstance
	"parse.py" -> ValueError
	"parse.py" -> "url.lstrip"
	"parse.py" -> "scheme.strip"
	"parse.py" -> "url.replace"
	"parse.py" -> "scheme.replace"
	"parse.py" -> bool
	"parse.py" -> "url.find"
	"parse.py" -> isascii
	"parse.py" -> isalpha
	"parse.py" -> lower
	"parse.py" -> ValueError
	"parse.py" -> partition
	"parse.py" -> "netloc.partition"
	"parse.py" -> "url.split"
	"parse.py" -> "url.split"
	"parse.py" -> SplitResult
	"parse.py" -> _coerce_result
	"parse.py" -> _coerce_result
	"parse.py" -> _coerce_result
	"parse.py" -> _coerce_result
	"parse.py" -> _coerce_result
	"parse.py" -> _coerce_result
	"parse.py" -> "bpath.split"
	"parse.py" -> "path.split"
	"parse.py" -> "path.split"
	"parse.py" -> filter
	"parse.py" -> "resolved_path.pop"
	"parse.py" -> "resolved_path.append"
	"parse.py" -> "resolved_path.append"
	"parse.py" -> _coerce_result
	"parse.py" -> join
	"parse.py" -> _coerce_result
	"parse.py" -> DefragResult
	"parse.py" -> isinstance
	"parse.py" -> len
	"parse.py" -> "bytes.fromhex"
	"parse.py" -> append
	"parse.py" -> append
	"parse.py" -> append
	"parse.py" -> append
	"parse.py" -> join
	"parse.py" -> isinstance
	"parse.py" -> "_asciire.split"
	"parse.py" -> range
	"parse.py" -> len
	"parse.py" -> append
	"parse.py" -> append
	"parse.py" -> join
	"parse.py" -> append
	"parse.py" -> isinstance
	"parse.py" -> ValueError
	"parse.py" -> "qs.count"
	"parse.py" -> ValueError
	"parse.py" -> "qs.split"
	"parse.py" -> "name_value.split"
	"parse.py" -> len
	"parse.py" -> ValueError
	"parse.py" -> "nv.append"
	"parse.py" -> len
	"parse.py" -> replace
	"parse.py" -> _coerce_result
	"parse.py" -> replace
	"parse.py" -> _coerce_result
	"parse.py" -> "r.append"
	"parse.py" -> frozenset
	"parse.py" -> bytes
	"parse.py" -> AttributeError
	"parse.py" -> "_ALWAYS_SAFE.union"
	"parse.py" -> dict
	"parse.py" -> chr
	"parse.py" -> format
	"parse.py" -> isinstance
	"parse.py" -> TypeError
	"parse.py" -> TypeError
	"parse.py" -> isinstance
	"parse.py" -> isinstance
	"parse.py" -> isinstance
	"parse.py" -> _Quoter
	"parse.py" -> isinstance
	"parse.py" -> TypeError
	"parse.py" -> isinstance
	"parse.py" -> "safe.encode"
	"parse.py" -> bytes
	"parse.py" -> "bs.rstrip"
	"parse.py" -> "bs.decode"
	"parse.py" -> join
	"parse.py" -> quoter
	"parse.py" -> hasattr
	"parse.py" -> "query.items"
	"parse.py" -> len
	"parse.py" -> isinstance
	"parse.py" -> TypeError
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> quote_via
	"parse.py" -> str
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> quote_via
	"parse.py" -> str
	"parse.py" -> "l.append"
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> quote_via
	"parse.py" -> str
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> "l.append"
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> "l.append"
	"parse.py" -> len
	"parse.py" -> quote_via
	"parse.py" -> str
	"parse.py" -> "l.append"
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> quote_via
	"parse.py" -> str
	"parse.py" -> "l.append"
	"parse.py" -> join
	"parse.py" -> isinstance
	"parse.py" -> "url.encode"
	"parse.py" -> UnicodeError
	"parse.py" -> repr
	"parse.py" -> strip
	"parse.py" -> str
	"parse.py" -> strip
	"parse.py" -> strip
	"parse.py" -> "_typeprog.match"
	"parse.py" -> "match.groups"
	"parse.py" -> "scheme.lower"
	"parse.py" -> "_hostprog.match"
	"parse.py" -> "match.groups"
	"parse.py" -> "host.rpartition"
	"parse.py" -> "user.partition"
	"parse.py" -> "_portprog.fullmatch"
	"parse.py" -> "match.groups"
	"parse.py" -> "host.rpartition"
	"parse.py" -> "port.isdigit"
	"parse.py" -> "port.isascii"
	"parse.py" -> int
	"parse.py" -> "url.rpartition"
	"parse.py" -> "url.rpartition"
	"parse.py" -> "url.split"
	"parse.py" -> "attr.partition"
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> IPv4Interface
	"ipaddress.py" -> IPv6Interface
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> "address.to_bytes"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> "address.to_bytes"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> split
	"ipaddress.py" -> str
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> iter
	"ipaddress.py" -> next
	"ipaddress.py" -> min
	"ipaddress.py" -> bit_length
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> min
	"ipaddress.py" -> bit_length
	"ipaddress.py" -> list
	"ipaddress.py" -> "to_merge.pop"
	"ipaddress.py" -> "net.supernet"
	"ipaddress.py" -> "subnets.get"
	"ipaddress.py" -> "to_merge.append"
	"ipaddress.py" -> sorted
	"ipaddress.py" -> "subnets.values"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> "ips.append"
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> "ips.append"
	"ipaddress.py" -> "ips.append"
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> "nets.append"
	"ipaddress.py" -> sorted
	"ipaddress.py" -> set
	"ipaddress.py" -> "addrs.extend"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "obj._get_networks_key"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "obj._get_address_key"
	"ipaddress.py" -> "self._explode_shorthand_ip_string"
	"ipaddress.py" -> str
	"ipaddress.py" -> "self._reverse_pointer"
	"ipaddress.py" -> type
	"ipaddress.py" -> NotImplementedError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "ip_int.to_bytes"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> NetmaskValueError
	"ipaddress.py" -> "prefixlen_str.isascii"
	"ipaddress.py" -> "prefixlen_str.isdigit"
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> int
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> "cls._ip_int_from_string"
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> "cls._prefix_from_ip_int"
	"ipaddress.py" -> "cls._prefix_from_ip_int"
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> len
	"ipaddress.py" -> str
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self.__class__"
	"ipaddress.py" -> int
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self.__class__"
	"ipaddress.py" -> int
	"ipaddress.py" -> str
	"ipaddress.py" -> str
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> hash
	"ipaddress.py" -> hex
	"ipaddress.py" -> int
	"ipaddress.py" -> format
	"ipaddress.py" -> str
	"ipaddress.py" -> "_address_fmt_re.fullmatch"
	"ipaddress.py" -> super
	"ipaddress.py" -> "m.groups"
	"ipaddress.py" -> format
	"ipaddress.py" -> int
	"ipaddress.py" -> str
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> range
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> range
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> IndexError
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> IndexError
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> hash
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> type
	"ipaddress.py" -> NotImplementedError
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> "other.subnet_of"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> "other.__class__"
	"ipaddress.py" -> "self.subnets"
	"ipaddress.py" -> "other.subnet_of"
	"ipaddress.py" -> "s1.subnets"
	"ipaddress.py" -> "other.subnet_of"
	"ipaddress.py" -> "s2.subnets"
	"ipaddress.py" -> AssertionError
	"ipaddress.py" -> AssertionError
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> range
	"ipaddress.py" -> "self.__class__"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> "self.__class__"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> "self._is_subnet_of"
	"ipaddress.py" -> "self._is_subnet_of"
	"ipaddress.py" -> any
	"ipaddress.py" -> str
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> "cls._prefix_from_prefix_string"
	"ipaddress.py" -> "cls._prefix_from_ip_string"
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> "cls._ip_int_from_prefix"
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "ip_str.split"
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "int.from_bytes"
	"ipaddress.py" -> map
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> "octet_str.isascii"
	"ipaddress.py" -> "octet_str.isdigit"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> int
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> join
	"ipaddress.py" -> map
	"ipaddress.py" -> "ip_int.to_bytes"
	"ipaddress.py" -> split
	"ipaddress.py" -> str
	"ipaddress.py" -> join
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self._check_int_address"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self._check_packed_address"
	"ipaddress.py" -> "int.from_bytes"
	"ipaddress.py" -> str
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "self._ip_int_from_string"
	"ipaddress.py" -> any
	"ipaddress.py" -> "self._split_addr_prefix"
	"ipaddress.py" -> "IPv4Address.__init__"
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "IPv4Address.__eq__"
	"ipaddress.py" -> "IPv4Address.__lt__"
	"ipaddress.py" -> hash
	"ipaddress.py" -> int
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._split_addr_prefix"
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> "self._make_netmask"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> int
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> frozenset
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> "cls._prefix_from_prefix_string"
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> "cls._ip_int_from_prefix"
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "ip_str.split"
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> "parts.pop"
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "parts.append"
	"ipaddress.py" -> "parts.append"
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> range
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> range
	"ipaddress.py" -> "cls._parse_hextet"
	"ipaddress.py" -> range
	"ipaddress.py" -> "cls._parse_hextet"
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "cls._HEX_DIGITS.issuperset"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> int
	"ipaddress.py" -> enumerate
	"ipaddress.py" -> len
	"ipaddress.py" -> int
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> int
	"ipaddress.py" -> range
	"ipaddress.py" -> "cls._compress_hextets"
	"ipaddress.py" -> join
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> str
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> str
	"ipaddress.py" -> str
	"ipaddress.py" -> "self._ip_int_from_string"
	"ipaddress.py" -> range
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> join
	"ipaddress.py" -> join
	"ipaddress.py" -> replace
	"ipaddress.py" -> join
	"ipaddress.py" -> "ip_str.partition"
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self._check_int_address"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self._check_packed_address"
	"ipaddress.py" -> "int.from_bytes"
	"ipaddress.py" -> str
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "self._split_scope_id"
	"ipaddress.py" -> "self._ip_int_from_string"
	"ipaddress.py" -> super
	"ipaddress.py" -> hash
	"ipaddress.py" -> super
	"ipaddress.py" -> getattr
	"ipaddress.py" -> any
	"ipaddress.py" -> any
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> "self._split_addr_prefix"
	"ipaddress.py" -> "IPv6Address.__init__"
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> super
	"ipaddress.py" -> "IPv6Address.__eq__"
	"ipaddress.py" -> "IPv6Address.__lt__"
	"ipaddress.py" -> hash
	"ipaddress.py" -> int
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._split_addr_prefix"
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> "self._make_netmask"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> int
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> range
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"string.py" -> join
	"string.py" -> map
	"string.py" -> "s.split"
	"string.py" -> super
	"string.py" -> "mo.start"
	"string.py" -> splitlines
	"string.py" -> len
	"string.py" -> join
	"string.py" -> len
	"string.py" -> ValueError
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> str
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "self._invalid"
	"string.py" -> ValueError
	"string.py" -> "self.pattern.sub"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> str
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> ValueError
	"string.py" -> "self.pattern.sub"
	"string.py" -> "self.pattern.finditer"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> ValueError
	"string.py" -> "self.pattern.finditer"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "ids.append"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> ValueError
	"string.py" -> "Template.__init_subclass__"
	"string.py" -> "self.vformat"
	"string.py" -> set
	"string.py" -> "self._vformat"
	"string.py" -> "self.check_unused_args"
	"string.py" -> ValueError
	"string.py" -> "self.parse"
	"string.py" -> "result.append"
	"string.py" -> ValueError
	"string.py" -> str
	"string.py" -> "field_name.isdigit"
	"string.py" -> ValueError
	"string.py" -> "self.get_field"
	"string.py" -> "used_args.add"
	"string.py" -> "self.convert_field"
	"string.py" -> "self._vformat"
	"string.py" -> "result.append"
	"string.py" -> "self.format_field"
	"string.py" -> join
	"string.py" -> isinstance
	"string.py" -> format
	"string.py" -> str
	"string.py" -> repr
	"string.py" -> ascii
	"string.py" -> ValueError
	"string.py" -> format
	"string.py" -> "_string.formatter_parser"
	"string.py" -> "_string.formatter_field_name_split"
	"string.py" -> "self.get_value"
	"string.py" -> getattr
	"__init__.py" -> list
	"__init__.py" -> enumerate
	"__init__.py" -> "kwargs.items"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> func
	"__init__.py" -> hasattr
	"__init__.py" -> "base.__html__"
	"__init__.py" -> super
	"__init__.py" -> super
	"__init__.py" -> isinstance
	"__init__.py" -> hasattr
	"__init__.py" -> "self.__class__"
	"__init__.py" -> super
	"__init__.py" -> "self.escape"
	"__init__.py" -> isinstance
	"__init__.py" -> hasattr
	"__init__.py" -> "self.escape"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> super
	"__init__.py" -> isinstance
	"__init__.py" -> tuple
	"__init__.py" -> _MarkupEscapeHelper
	"__init__.py" -> hasattr
	"__init__.py" -> type
	"__init__.py" -> isinstance
	"__init__.py" -> _MarkupEscapeHelper
	"__init__.py" -> _MarkupEscapeHelper
	"__init__.py" -> "self.__class__"
	"__init__.py" -> super
	"__init__.py" -> super
	"__init__.py" -> "self.__class__"
	"__init__.py" -> super
	"__init__.py" -> map
	"__init__.py" -> "self.__class__"
	"__init__.py" -> super
	"__init__.py" -> "self.__class__"
	"__init__.py" -> super
	"__init__.py" -> "self.__class__"
	"__init__.py" -> super
	"__init__.py" -> str
	"__init__.py" -> "_strip_comments_re.sub"
	"__init__.py" -> "_strip_tags_re.sub"
	"__init__.py" -> "value.split"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> cls
	"__init__.py" -> super
	"__init__.py" -> "self.escape"
	"__init__.py" -> cls
	"__init__.py" -> cls
	"__init__.py" -> cls
	"__init__.py" -> super
	"__init__.py" -> "self.escape"
	"__init__.py" -> cls
	"__init__.py" -> cls
	"__init__.py" -> cls
	"__init__.py" -> EscapeFormatter
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "formatter.vformat"
	"__init__.py" -> EscapeFormatter
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "formatter.vformat"
	"__init__.py" -> ValueError
	"__init__.py" -> super
	"__init__.py" -> hasattr
	"__init__.py" -> "value.__html_format__"
	"__init__.py" -> hasattr
	"__init__.py" -> ValueError
	"__init__.py" -> type
	"__init__.py" -> "value.__html__"
	"__init__.py" -> str
	"__init__.py" -> str
	"__init__.py" -> "self.escape"
	"__init__.py" -> isinstance
	"__init__.py" -> hasattr
	"__init__.py" -> "self.__class__"
	"__init__.py" -> str
	"__init__.py" -> "self.escape"
	"__init__.py" -> str
	"__init__.py" -> "self.escape"
	"__init__.py" -> repr
	"__init__.py" -> int
	"__init__.py" -> float
	"typing_extensions.py" -> _Sentinel
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> len
	"typing_extensions.py" -> len
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> sum
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> "tvars.append"
	"typing_extensions.py" -> "tvars.extend"
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> super
	"typing_extensions.py" -> super
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> super
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> _FinalForm
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> "params.extend"
	"typing_extensions.py" -> "params.append"
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> type
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> set
	"typing_extensions.py" -> set
	"typing_extensions.py" -> hash
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> list
	"typing_extensions.py" -> set
	"typing_extensions.py" -> len
	"typing_extensions.py" -> len
	"typing_extensions.py" -> "new_parameters.append"
	"typing_extensions.py" -> "deduped_pairs.remove"
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> _LiteralGenericAlias
	"typing_extensions.py" -> _LiteralForm
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> list
	"typing_extensions.py" -> values
	"typing_extensions.py" -> "_overload_registry.clear"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "_EXCLUDED_ATTRS.add"
	"typing_extensions.py" -> "_EXCLUDED_ATTRS.add"
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> set
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> "attr.startswith"
	"typing_extensions.py" -> "attrs.add"
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> set
	"typing_extensions.py" -> set
	"typing_extensions.py" -> join
	"typing_extensions.py" -> str
	"typing_extensions.py" -> join
	"typing_extensions.py" -> str
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> "f_globals.get"
	"typing_extensions.py" -> "sys._getframe"
	"typing_extensions.py" -> type
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> type
	"typing_extensions.py" -> len
	"typing_extensions.py" -> set
	"typing_extensions.py" -> "_PROTO_ALLOWLIST.get"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> all
	"typing_extensions.py" -> callable
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> "type.__subclasscheck__"
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "cls.__dict__.get"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "type.__instancecheck__"
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> callable
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> object
	"typing_extensions.py" -> "type.__hash__"
	"typing_extensions.py" -> "cls.__dict__.get"
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> super
	"typing_extensions.py" -> "cls.__dict__.get"
	"typing_extensions.py" -> any
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> super
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> all
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> len
	"typing_extensions.py" -> set
	"typing_extensions.py" -> len
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> len
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "cls.__dict__.get"
	"typing_extensions.py" -> any
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> issubclass
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> staticmethod
	"typing_extensions.py" -> staticmethod
	"typing_extensions.py" -> type
	"typing_extensions.py" -> t
	"typing_extensions.py" -> type
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> any
	"typing_extensions.py" -> issubclass
	"typing_extensions.py" -> "type.__new__"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "ns.get"
	"typing_extensions.py" -> "own_annotations.items"
	"typing_extensions.py" -> "own_annotations.items"
	"typing_extensions.py" -> set
	"typing_extensions.py" -> set
	"typing_extensions.py" -> "annotations.update"
	"typing_extensions.py" -> "base.__dict__.get"
	"typing_extensions.py" -> "required_keys.update"
	"typing_extensions.py" -> "base.__dict__.get"
	"typing_extensions.py" -> "optional_keys.update"
	"typing_extensions.py" -> "base.__dict__.get"
	"typing_extensions.py" -> "annotations.update"
	"typing_extensions.py" -> "own_annotations.items"
	"typing_extensions.py" -> "required_keys.add"
	"typing_extensions.py" -> "optional_keys.add"
	"typing_extensions.py" -> "required_keys.add"
	"typing_extensions.py" -> "optional_keys.add"
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "type.__new__"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> dict
	"typing_extensions.py" -> _TypedDictMeta
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> "t.copy_with"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "hint.items"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> super
	"typing_extensions.py" -> len
	"typing_extensions.py" -> _AnnotatedAlias
	"typing_extensions.py" -> join
	"typing_extensions.py" -> repr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hash
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> len
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> _AnnotatedAlias
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> list
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> _ExtensionsSpecialForm
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> ValueError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> ParamSpecArgs
	"typing_extensions.py" -> ParamSpecKwargs
	"typing_extensions.py" -> super
	"typing_extensions.py" -> bool
	"typing_extensions.py" -> bool
	"typing_extensions.py" -> bool
	"typing_extensions.py" -> "_DefaultMixin.__init__"
	"typing_extensions.py" -> "object.__hash__"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> super
	"typing_extensions.py" -> _type_repr
	"typing_extensions.py" -> join
	"typing_extensions.py" -> _type_repr
	"typing_extensions.py" -> hash
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> _ConcatenateGenericAlias
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> _ConcatenateForm
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> _TypeGuardForm
	"typing_extensions.py" -> AttributeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "self._getitem"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> _RequiredForm
	"typing_extensions.py" -> _RequiredForm
	"typing_extensions.py" -> super
	"typing_extensions.py" -> _UnpackAlias
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> _UnpackAlias
	"typing_extensions.py" -> _UnpackForm
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "_DefaultMixin.__init__"
	"typing_extensions.py" -> "object.__hash__"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> print
	"typing_extensions.py" -> type
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> AssertionError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> original_new
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> original_new
	"typing_extensions.py" -> staticmethod
	"typing_extensions.py" -> callable
	"typing_extensions.py" -> __arg
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> "ns.get"
	"typing_extensions.py" -> "default_names.append"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> len
	"typing_extensions.py" -> join
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> classmethod
	"typing_extensions.py" -> classmethod
	"typing_extensions.py" -> AttributeError
	"typing_extensions.py" -> setattr
	"typing_extensions.py" -> "nm_tpl.__init_subclass__"
	"typing_extensions.py" -> "type.__new__"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "deprecation_msg.format"
	"typing_extensions.py" -> "kwargs.items"
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "Buffer.register"
	"typing_extensions.py" -> "Buffer.register"
	"typing_extensions.py" -> "Buffer.register"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> type
	"typing_extensions.py" -> "name.rpartition"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> "parameters.extend"
	"typing_extensions.py" -> "parameters.append"
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "self._raise_attribute_error"
	"typing_extensions.py" -> super
	"typing_extensions.py" -> "self._raise_attribute_error"
	"typing_extensions.py" -> AttributeError
	"typing_extensions.py" -> AttributeError
	"typing_extensions.py" -> AttributeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> object
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> frozenset
	"inspect.py" -> globals
	"inspect.py" -> isinstance
	"inspect.py" -> getattr
	"inspect.py" -> hasattr
	"inspect.py" -> "obj_dict.get"
	"inspect.py" -> isinstance
	"inspect.py" -> getattr
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> getattr
	"inspect.py" -> dict
	"inspect.py" -> vars
	"inspect.py" -> isinstance
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> callable
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> TypeError
	"inspect.py" -> isinstance
	"inspect.py" -> ValueError
	"inspect.py" -> dict
	"inspect.py" -> hasattr
	"inspect.py" -> isinstance
	"inspect.py" -> hasattr
	"inspect.py" -> isinstance
	"inspect.py" -> eval
	"inspect.py" -> "ann.items"
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> type
	"inspect.py" -> hasattr
	"inspect.py" -> hasattr
	"inspect.py" -> type
	"inspect.py" -> hasattr
	"inspect.py" -> hasattr
	"inspect.py" -> hasattr
	"inspect.py" -> isinstance
	"inspect.py" -> hasattr
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> bool
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> bool
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> issubclass
	"inspect.py" -> type
	"inspect.py" -> hasattr
	"inspect.py" -> "object.__dict__.items"
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> set
	"inspect.py" -> dir
	"inspect.py" -> "base.__dict__.items"
	"inspect.py" -> isinstance
	"inspect.py" -> "names.append"
	"inspect.py" -> getter
	"inspect.py" -> predicate
	"inspect.py" -> "results.append"
	"inspect.py" -> "processed.add"
	"inspect.py" -> "results.sort"
	"inspect.py" -> type
	"inspect.py" -> tuple
	"inspect.py" -> dir
	"inspect.py" -> "base.__dict__.items"
	"inspect.py" -> isinstance
	"inspect.py" -> "names.append"
	"inspect.py" -> set
	"inspect.py" -> Exception
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> "srch_cls.__getattr__"
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> "result.append"
	"inspect.py" -> Attribute
	"inspect.py" -> "processed.add"
	"inspect.py" -> hasattr
	"inspect.py" -> hasattr
	"inspect.py" -> stop
	"inspect.py" -> id
	"inspect.py" -> "sys.getrecursionlimit"
	"inspect.py" -> id
	"inspect.py" -> len
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> "line.expandtabs"
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> "expline.lstrip"
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> "func.__qualname__.split"
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> isinstance
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> isinstance
	"inspect.py" -> getattr
	"inspect.py" -> isinstance
	"inspect.py" -> split
	"inspect.py" -> "doc.expandtabs"
	"inspect.py" -> len
	"inspect.py" -> "line.lstrip"
	"inspect.py" -> len
	"inspect.py" -> min
	"inspect.py" -> lstrip
	"inspect.py" -> range
	"inspect.py" -> len
	"inspect.py" -> "lines.pop"
	"inspect.py" -> "lines.pop"
	"inspect.py" -> join
	"inspect.py" -> getattr
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> hasattr
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> getattr
	"inspect.py" -> OSError
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> type
	"inspect.py" -> len
	"inspect.py" -> "suffixes.sort"
	"inspect.py" -> "fname.endswith"
	"inspect.py" -> any
	"inspect.py" -> "filename.endswith"
	"inspect.py" -> any
	"inspect.py" -> "filename.endswith"
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> hasattr
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> items
	"inspect.py" -> "sys.modules.copy"
	"inspect.py" -> hasattr
	"inspect.py" -> "_filesbymodname.get"
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> hasattr
	"inspect.py" -> hasattr
	"inspect.py" -> getattr
	"inspect.py" -> hasattr
	"inspect.py" -> getattr
	"inspect.py" -> "self.stack.append"
	"inspect.py" -> "self.stack.append"
	"inspect.py" -> "self.generic_visit"
	"inspect.py" -> "self.stack.pop"
	"inspect.py" -> "self.stack.pop"
	"inspect.py" -> "self.stack.append"
	"inspect.py" -> join
	"inspect.py" -> ClassFoundException
	"inspect.py" -> "self.generic_visit"
	"inspect.py" -> "self.stack.pop"
	"inspect.py" -> "file.startswith"
	"inspect.py" -> "file.endswith"
	"inspect.py" -> OSError
	"inspect.py" -> OSError
	"inspect.py" -> join
	"inspect.py" -> _ClassFinder
	"inspect.py" -> "class_finder.visit"
	"inspect.py" -> OSError
	"inspect.py" -> hasattr
	"inspect.py" -> OSError
	"inspect.py" -> OSError
	"inspect.py" -> "pat.match"
	"inspect.py" -> OSError
	"inspect.py" -> len
	"inspect.py" -> strip
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> "comments.append"
	"inspect.py" -> expandtabs
	"inspect.py" -> join
	"inspect.py" -> lstrip
	"inspect.py" -> lstrip
	"inspect.py" -> expandtabs
	"inspect.py" -> lstrip
	"inspect.py" -> expandtabs
	"inspect.py" -> lstrip
	"inspect.py" -> expandtabs
	"inspect.py" -> strip
	"inspect.py" -> strip
	"inspect.py" -> join
	"inspect.py" -> BlockFinder
	"inspect.py" -> iter
	"inspect.py" -> "blockfinder.tokeneater"
	"inspect.py" -> join
	"inspect.py" -> "classes.sort"
	"inspect.py" -> "results.append"
	"inspect.py" -> "results.append"
	"inspect.py" -> append
	"inspect.py" -> "roots.append"
	"inspect.py" -> "roots.append"
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> list
	"inspect.py" -> list
	"inspect.py" -> Arguments
	"inspect.py" -> TypeError
	"inspect.py" -> "sig.parameters.values"
	"inspect.py" -> "posonlyargs.append"
	"inspect.py" -> "args.append"
	"inspect.py" -> "kwonlyargs.append"
	"inspect.py" -> FullArgSpec
	"inspect.py" -> ArgInfo
	"inspect.py" -> getattr
	"inspect.py" -> "match.group"
	"inspect.py" -> "text.removeprefix"
	"inspect.py" -> repr
	"inspect.py" -> isinstance
	"inspect.py" -> str
	"inspect.py" -> isinstance
	"inspect.py" -> repr
	"inspect.py" -> getattr
	"inspect.py" -> repr
	"inspect.py" -> formatarg
	"inspect.py" -> formatvalue
	"inspect.py" -> range
	"inspect.py" -> len
	"inspect.py" -> "specs.append"
	"inspect.py" -> "specs.append"
	"inspect.py" -> formatvarargs
	"inspect.py" -> formatvalue
	"inspect.py" -> "specs.append"
	"inspect.py" -> formatvarkw
	"inspect.py" -> formatvalue
	"inspect.py" -> join
	"inspect.py" -> repr
	"inspect.py" -> len
	"inspect.py" -> format
	"inspect.py" -> format
	"inspect.py" -> join
	"inspect.py" -> TypeError
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> str
	"inspect.py" -> len
	"inspect.py" -> TypeError
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> min
	"inspect.py" -> range
	"inspect.py" -> tuple
	"inspect.py" -> set
	"inspect.py" -> "named.items"
	"inspect.py" -> TypeError
	"inspect.py" -> TypeError
	"inspect.py" -> enumerate
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> zip
	"inspect.py" -> "global_ns.get"
	"inspect.py" -> set
	"inspect.py" -> "unbound_names.add"
	"inspect.py" -> ClosureVars
	"inspect.py" -> super
	"inspect.py" -> format
	"inspect.py" -> "code.co_positions"
	"inspect.py" -> next
	"inspect.py" -> "itertools.islice"
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> max
	"inspect.py" -> min
	"inspect.py" -> len
	"inspect.py" -> Traceback
	"inspect.py" -> super
	"inspect.py" -> format
	"inspect.py" -> "framelist.append"
	"inspect.py" -> FrameInfo
	"inspect.py" -> "framelist.append"
	"inspect.py" -> FrameInfo
	"inspect.py" -> hasattr
	"inspect.py" -> "sys._getframe"
	"inspect.py" -> "sys._getframe"
	"inspect.py" -> "sys.exc_info"
	"inspect.py" -> object
	"inspect.py" -> __get__
	"inspect.py" -> "object.__getattribute__"
	"inspect.py" -> "dict.get"
	"inspect.py" -> type
	"inspect.py" -> "dict_attr.__get__"
	"inspect.py" -> type
	"inspect.py" -> type
	"inspect.py" -> type
	"inspect.py" -> type
	"inspect.py" -> type
	"inspect.py" -> type
	"inspect.py" -> type
	"inspect.py" -> type
	"inspect.py" -> AttributeError
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> isinstance
	"inspect.py" -> "old_params.items"
	"inspect.py" -> "wrapped_sig.bind_partial"
	"inspect.py" -> format
	"inspect.py" -> ValueError
	"inspect.py" -> "old_params.items"
	"inspect.py" -> "new_params.pop"
	"inspect.py" -> "param.replace"
	"inspect.py" -> "new_params.pop"
	"inspect.py" -> "param.replace"
	"inspect.py" -> "new_params.move_to_end"
	"inspect.py" -> "new_params.move_to_end"
	"inspect.py" -> "new_params.pop"
	"inspect.py" -> "wrapped_sig.replace"
	"inspect.py" -> "new_params.values"
	"inspect.py" -> tuple
	"inspect.py" -> "sig.parameters.values"
	"inspect.py" -> ValueError
	"inspect.py" -> ValueError
	"inspect.py" -> "sig.replace"
	"inspect.py" -> isinstance
	"inspect.py" -> callable
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> "l.encode"
	"inspect.py" -> "signature.split"
	"inspect.py" -> iter
	"inspect.py" -> next
	"inspect.py" -> add
	"inspect.py" -> add
	"inspect.py" -> add
	"inspect.py" -> join
	"inspect.py" -> isinstance
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> getattr
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> "sys.modules.copy"
	"inspect.py" -> isinstance
	"inspect.py" -> ValueError
	"inspect.py" -> eval
	"inspect.py" -> eval
	"inspect.py" -> isinstance
	"inspect.py" -> type
	"inspect.py" -> isinstance
	"inspect.py" -> "a.append"
	"inspect.py" -> isinstance
	"inspect.py" -> "a.append"
	"inspect.py" -> join
	"inspect.py" -> reversed
	"inspect.py" -> isinstance
	"inspect.py" -> ValueError
	"inspect.py" -> "self.visit"
	"inspect.py" -> "self.visit"
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> visit
	"inspect.py" -> RewriteSymbolics
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> reversed
	"inspect.py" -> reversed
	"inspect.py" -> "itertools.zip_longest"
	"inspect.py" -> enumerate
	"inspect.py" -> reversed
	"inspect.py" -> list
	"inspect.py" -> zip
	"inspect.py" -> getattr
	"inspect.py" -> "parameters.pop"
	"inspect.py" -> cls
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> getattr
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> getattr
	"inspect.py" -> len
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> enumerate
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> "kwdefaults.get"
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> cls
	"inspect.py" -> "annotations.get"
	"inspect.py" -> callable
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> isinstance
	"inspect.py" -> _get_signature_of
	"inspect.py" -> hasattr
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> _get_signature_of
	"inspect.py" -> isinstance
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> isinstance
	"inspect.py" -> _get_signature_of
	"inspect.py" -> tuple
	"inspect.py" -> "wrapped_sig.parameters.values"
	"inspect.py" -> tuple
	"inspect.py" -> "sig.parameters.values"
	"inspect.py" -> "sig.replace"
	"inspect.py" -> isinstance
	"inspect.py" -> _get_signature_of
	"inspect.py" -> isinstance
	"inspect.py" -> type
	"inspect.py" -> _get_signature_of
	"inspect.py" -> _get_signature_of
	"inspect.py" -> "sigcls.from_callable"
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> isinstance
	"inspect.py" -> type
	"inspect.py" -> _get_signature_of
	"inspect.py" -> format
	"inspect.py" -> ValueError
	"inspect.py" -> isinstance
	"inspect.py" -> format
	"inspect.py" -> ValueError
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> len
	"inspect.py" -> "int.__new__"
	"inspect.py" -> _ParameterKind
	"inspect.py" -> ValueError
	"inspect.py" -> "msg.format"
	"inspect.py" -> ValueError
	"inspect.py" -> ValueError
	"inspect.py" -> isinstance
	"inspect.py" -> format
	"inspect.py" -> type
	"inspect.py" -> TypeError
	"inspect.py" -> isdigit
	"inspect.py" -> "msg.format"
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> "name.isidentifier"
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> type
	"inspect.py" -> <unknown_function>
	"inspect.py" -> type
	"inspect.py" -> format
	"inspect.py" -> format
	"inspect.py" -> repr
	"inspect.py" -> format
	"inspect.py" -> repr
	"inspect.py" -> format
	"inspect.py" -> hash
	"inspect.py" -> isinstance
	"inspect.py" -> "self._signature.parameters.items"
	"inspect.py" -> "args.extend"
	"inspect.py" -> "args.append"
	"inspect.py" -> tuple
	"inspect.py" -> "self._signature.parameters.items"
	"inspect.py" -> "kwargs.update"
	"inspect.py" -> "self._signature.parameters.items"
	"inspect.py" -> "new_arguments.append"
	"inspect.py" -> "new_arguments.append"
	"inspect.py" -> dict
	"inspect.py" -> isinstance
	"inspect.py" -> "self.arguments.items"
	"inspect.py" -> "args.append"
	"inspect.py" -> format
	"inspect.py" -> format
	"inspect.py" -> join
	"inspect.py" -> "msg.format"
	"inspect.py" -> ValueError
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> ValueError
	"inspect.py" -> "self.parameters.values"
	"inspect.py" -> <unknown_function>
	"inspect.py" -> type
	"inspect.py" -> tuple
	"inspect.py" -> "self.parameters.values"
	"inspect.py" -> "self.parameters.values"
	"inspect.py" -> "self._hash_basis"
	"inspect.py" -> frozenset
	"inspect.py" -> "kwo_params.values"
	"inspect.py" -> hash
	"inspect.py" -> isinstance
	"inspect.py" -> "self._hash_basis"
	"inspect.py" -> "other._hash_basis"
	"inspect.py" -> iter
	"inspect.py" -> "self.parameters.values"
	"inspect.py" -> iter
	"inspect.py" -> next
	"inspect.py" -> next
	"inspect.py" -> "msg.format"
	"inspect.py" -> TypeError
	"inspect.py" -> "msg.format"
	"inspect.py" -> TypeError
	"inspect.py" -> next
	"inspect.py" -> TypeError
	"inspect.py" -> TypeError
	"inspect.py" -> "values.extend"
	"inspect.py" -> tuple
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> "itertools.chain"
	"inspect.py" -> "kwargs.pop"
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> next
	"inspect.py" -> iter
	"inspect.py" -> "self._bound_arguments_cls"
	"inspect.py" -> "self._bind"
	"inspect.py" -> "self._bind"
	"inspect.py" -> type
	"inspect.py" -> tuple
	"inspect.py" -> "self._parameters.values"
	"inspect.py" -> format
	"inspect.py" -> "self.parameters.values"
	"inspect.py" -> str
	"inspect.py" -> "result.append"
	"inspect.py" -> "result.append"
	"inspect.py" -> "result.append"
	"inspect.py" -> "result.append"
	"inspect.py" -> format
	"inspect.py" -> join
	"inspect.py" -> format
	"inspect.py" -> "Signature.from_callable"
	"inspect.py" -> "parser.add_argument"
	"inspect.py" -> "parser.add_argument"
	"inspect.py" -> "parser.parse_args"
	"inspect.py" -> "target.partition"
	"inspect.py" -> format
	"inspect.py" -> type
	"inspect.py" -> print
	"inspect.py" -> "sys.exit"
	"inspect.py" -> "attrs.split"
	"inspect.py" -> getattr
	"inspect.py" -> print
	"inspect.py" -> "sys.exit"
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> repr
	"inspect.py" -> hasattr
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> print
	"inspect.py" -> print
	"__init__.py" -> "_bootstrap._setup"
	"__init__.py" -> "__file__.replace"
	"__init__.py" -> "_bootstrap_external._set_bootstrap_module"
	"__init__.py" -> "__file__.replace"
	"__init__.py" -> hasattr
	"__init__.py" -> "finder.invalidate_caches"
	"__init__.py" -> ValueError
	"__init__.py" -> format
	"__init__.py" -> ValueError
	"__init__.py" -> format
	"__init__.py" -> "_bootstrap._find_spec"
	"__init__.py" -> ImportError
	"__init__.py" -> format
	"__init__.py" -> ImportError
	"__init__.py" -> "name.startswith"
	"__init__.py" -> TypeError
	"__init__.py" -> "msg.format"
	"__init__.py" -> "_bootstrap._gcd_import"
	"__init__.py" -> TypeError
	"__init__.py" -> "sys.modules.get"
	"__init__.py" -> ImportError
	"__init__.py" -> "msg.format"
	"__init__.py" -> "name.rpartition"
	"__init__.py" -> ImportError
	"__init__.py" -> "msg.format"
	"__init__.py" -> "_bootstrap._find_spec"
	"__init__.py" -> ModuleNotFoundError
	"__init__.py" -> "_bootstrap._exec"
	"tokenize.py" -> "self._replace"
	"tokenize.py" -> join
	"tokenize.py" -> any
	"tokenize.py" -> "_itertools.permutations"
	"tokenize.py" -> "_itertools.product"
	"tokenize.py" -> "c.upper"
	"tokenize.py" -> "result.add"
	"tokenize.py" -> join
	"tokenize.py" -> map
	"tokenize.py" -> sorted
	"tokenize.py" -> set
	"tokenize.py" -> set
	"tokenize.py" -> "single_quoted.add"
	"tokenize.py" -> "triple_quoted.add"
	"tokenize.py" -> ValueError
	"tokenize.py" -> format
	"tokenize.py" -> "self.tokens.append"
	"tokenize.py" -> "self.tokens.append"
	"tokenize.py" -> iter
	"tokenize.py" -> len
	"tokenize.py" -> "self.compat"
	"tokenize.py" -> "indents.append"
	"tokenize.py" -> "indents.pop"
	"tokenize.py" -> len
	"tokenize.py" -> "self.tokens.append"
	"tokenize.py" -> len
	"tokenize.py" -> "self.add_whitespace"
	"tokenize.py" -> "self.tokens.append"
	"tokenize.py" -> join
	"tokenize.py" -> "_itertools.chain"
	"tokenize.py" -> "indents.append"
	"tokenize.py" -> "indents.pop"
	"tokenize.py" -> toks_append
	"tokenize.py" -> toks_append
	"tokenize.py" -> Untokenizer
	"tokenize.py" -> "ut.untokenize"
	"tokenize.py" -> "out.encode"
	"tokenize.py" -> replace
	"tokenize.py" -> lower
	"tokenize.py" -> "enc.startswith"
	"tokenize.py" -> "enc.startswith"
	"tokenize.py" -> readline
	"tokenize.py" -> "line.decode"
	"tokenize.py" -> format
	"tokenize.py" -> SyntaxError
	"tokenize.py" -> "cookie_re.match"
	"tokenize.py" -> "match.group"
	"tokenize.py" -> format
	"tokenize.py" -> SyntaxError
	"tokenize.py" -> format
	"tokenize.py" -> SyntaxError
	"tokenize.py" -> "first.startswith"
	"tokenize.py" -> "blank_re.match"
	"tokenize.py" -> _builtin_open
	"tokenize.py" -> "buffer.seek"
	"tokenize.py" -> "buffer.close"
	"tokenize.py" -> "_itertools.repeat"
	"tokenize.py" -> "_itertools.chain"
	"tokenize.py" -> iter
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> readline
	"tokenize.py" -> "line.decode"
	"tokenize.py" -> len
	"tokenize.py" -> TokenError
	"tokenize.py" -> "endprog.match"
	"tokenize.py" -> "endmatch.end"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> len
	"tokenize.py" -> rstrip
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> len
	"tokenize.py" -> len
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> len
	"tokenize.py" -> "indents.append"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> IndentationError
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenError
	"tokenize.py" -> match
	"tokenize.py" -> "pseudomatch.span"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> "endprog.match"
	"tokenize.py" -> "endmatch.end"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> "endpats.get"
	"tokenize.py" -> "endpats.get"
	"tokenize.py" -> "endpats.get"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> "initial.isidentifier"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> startswith
	"tokenize.py" -> "last_line.strip"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> len
	"tokenize.py" -> len
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> "sys.stderr.write"
	"tokenize.py" -> "sys.stderr.write"
	"tokenize.py" -> "sys.exit"
	"tokenize.py" -> "parser.add_argument"
	"tokenize.py" -> "parser.add_argument"
	"tokenize.py" -> "parser.parse_args"
	"tokenize.py" -> _builtin_open
	"tokenize.py" -> list
	"tokenize.py" -> print
	"tokenize.py" -> print
	"tokenize.py" -> "c_tokenizer.TokenizerIter"
	"tokenize.py" -> TokenInfo
	"keyword.py" -> frozenset
	"keyword.py" -> frozenset
	"ast.py" -> isinstance
	"ast.py" -> compile
	"ast.py" -> isinstance
	"ast.py" -> "node_or_string.lstrip"
	"ast.py" -> isinstance
	"ast.py" -> getattr
	"ast.py" -> ValueError
	"ast.py" -> isinstance
	"ast.py" -> type
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> tuple
	"ast.py" -> map
	"ast.py" -> isinstance
	"ast.py" -> list
	"ast.py" -> map
	"ast.py" -> isinstance
	"ast.py" -> set
	"ast.py" -> map
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> set
	"ast.py" -> isinstance
	"ast.py" -> len
	"ast.py" -> len
	"ast.py" -> dict
	"ast.py" -> zip
	"ast.py" -> map
	"ast.py" -> map
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> type
	"ast.py" -> getattr
	"ast.py" -> getattr
	"ast.py" -> "args.append"
	"ast.py" -> "args.append"
	"ast.py" -> getattr
	"ast.py" -> getattr
	"ast.py" -> "args.append"
	"ast.py" -> len
	"ast.py" -> join
	"ast.py" -> "sep.join"
	"ast.py" -> isinstance
	"ast.py" -> "sep.join"
	"ast.py" -> repr
	"ast.py" -> isinstance
	"ast.py" -> TypeError
	"ast.py" -> isinstance
	"ast.py" -> getattr
	"ast.py" -> hasattr
	"ast.py" -> "attr.startswith"
	"ast.py" -> setattr
	"ast.py" -> hasattr
	"ast.py" -> getattr
	"ast.py" -> hasattr
	"ast.py" -> getattr
	"ast.py" -> isinstance
	"ast.py" -> getattr
	"ast.py" -> getattr
	"ast.py" -> getattr
	"ast.py" -> getattr
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> TypeError
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> len
	"ast.py" -> len
	"ast.py" -> "lines.append"
	"ast.py" -> "lines.append"
	"ast.py" -> decode
	"ast.py" -> encode
	"ast.py" -> decode
	"ast.py" -> encode
	"ast.py" -> decode
	"ast.py" -> encode
	"ast.py" -> decode
	"ast.py" -> encode
	"ast.py" -> "lines.insert"
	"ast.py" -> "lines.append"
	"ast.py" -> join
	"ast.py" -> "todo.popleft"
	"ast.py" -> "todo.extend"
	"ast.py" -> getattr
	"ast.py" -> visitor
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "self.visit"
	"ast.py" -> isinstance
	"ast.py" -> "self.visit"
	"ast.py" -> "_const_node_type_names.get"
	"ast.py" -> type
	"ast.py" -> "_const_node_type_names.items"
	"ast.py" -> isinstance
	"ast.py" -> getattr
	"ast.py" -> visitor
	"ast.py" -> "self.generic_visit"
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "self.visit"
	"ast.py" -> isinstance
	"ast.py" -> "new_values.extend"
	"ast.py" -> "new_values.append"
	"ast.py" -> isinstance
	"ast.py" -> "self.visit"
	"ast.py" -> delattr
	"ast.py" -> setattr
	"ast.py" -> hasattr
	"ast.py" -> property
	"ast.py" -> property
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "_const_types_not.get"
	"ast.py" -> "type.__instancecheck__"
	"ast.py" -> "cls._fields.index"
	"ast.py" -> len
	"ast.py" -> TypeError
	"ast.py" -> Constant
	"ast.py" -> "Constant.__new__"
	"ast.py" -> Constant
	"ast.py" -> "Constant.__new__"
	"ast.py" -> type
	"ast.py" -> type
	"ast.py" -> type
	"ast.py" -> type
	"ast.py" -> Tuple
	"ast.py" -> list
	"ast.py" -> Load
	"ast.py" -> hasattr
	"ast.py" -> property
	"ast.py" -> repr
	"ast.py" -> "self.__class__"
	"ast.py" -> iter
	"ast.py" -> f
	"ast.py" -> next
	"ast.py" -> inter
	"ast.py" -> f
	"ast.py" -> len
	"ast.py" -> traverser
	"ast.py" -> "self.write"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.maybe_newline"
	"ast.py" -> "self.write"
	"ast.py" -> "self._source.extend"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.delimit_if"
	"ast.py" -> "self.get_precedence"
	"ast.py" -> "self._precedences.get"
	"ast.py" -> isinstance
	"ast.py" -> len
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "self._type_ignores.get"
	"ast.py" -> isinstance
	"ast.py" -> "self.traverse"
	"ast.py" -> super
	"ast.py" -> "self.traverse"
	"ast.py" -> join
	"ast.py" -> "self.get_raw_docstring"
	"ast.py" -> "self._write_docstring"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self._write_docstring_and_traverse_body"
	"ast.py" -> "self._type_ignores.clear"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.get_type_comment"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.delimit_if"
	"ast.py" -> isinstance
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.write"
	"ast.py" -> ValueError
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> ValueError
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.do_visit_try"
	"ast.py" -> "self.do_visit_try"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.maybe_newline"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.delimit_if"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self._write_docstring_and_traverse_body"
	"ast.py" -> "self._function_helper"
	"ast.py" -> "self._function_helper"
	"ast.py" -> "self.maybe_newline"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.get_type_comment"
	"ast.py" -> "self._write_docstring_and_traverse_body"
	"ast.py" -> "self._for_helper"
	"ast.py" -> "self._for_helper"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.get_type_comment"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> len
	"ast.py" -> isinstance
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.block"
	"ast.py" -> "self.get_type_comment"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.block"
	"ast.py" -> "self.get_type_comment"
	"ast.py" -> "self.traverse"
	"ast.py" -> "c.isprintable"
	"ast.py" -> decode
	"ast.py" -> "c.encode"
	"ast.py" -> join
	"ast.py" -> map
	"ast.py" -> repr
	"ast.py" -> next
	"ast.py" -> "possible_quotes.sort"
	"ast.py" -> len
	"ast.py" -> "self._str_literal_helper"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.buffered"
	"ast.py" -> "self._write_fstring_inner"
	"ast.py" -> "self._write_str_avoiding_backslashes"
	"ast.py" -> join
	"ast.py" -> "self.buffered"
	"ast.py" -> "self._write_fstring_inner"
	"ast.py" -> "fstring_parts.append"
	"ast.py" -> join
	"ast.py" -> isinstance
	"ast.py" -> list
	"ast.py" -> "self._str_literal_helper"
	"ast.py" -> "new_fstring_parts.append"
	"ast.py" -> join
	"ast.py" -> "self.write"
	"ast.py" -> isinstance
	"ast.py" -> "self._write_fstring_inner"
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> replace
	"ast.py" -> "node.value.replace"
	"ast.py" -> "self.write"
	"ast.py" -> isinstance
	"ast.py" -> "self.visit_FormattedValue"
	"ast.py" -> ValueError
	"ast.py" -> <unknown_function>
	"ast.py" -> type
	"ast.py" -> "unparser.set_precedence"
	"ast.py" -> "_Precedence.TEST.next"
	"ast.py" -> "unparser.visit"
	"ast.py" -> "self.delimit"
	"ast.py" -> ValueError
	"ast.py" -> "expr.startswith"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> chr
	"ast.py" -> "self.write"
	"ast.py" -> "self._write_fstring_inner"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.write"
	"ast.py" -> "self._write_str_avoiding_backslashes"
	"ast.py" -> isinstance
	"ast.py" -> "self.write"
	"ast.py" -> replace
	"ast.py" -> replace
	"ast.py" -> repr
	"ast.py" -> isinstance
	"ast.py" -> "self._write_str_avoiding_backslashes"
	"ast.py" -> "self.write"
	"ast.py" -> repr
	"ast.py" -> isinstance
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.items_view"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self._write_constant"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "_Precedence.TEST.next"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "_Precedence.TEST.next"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> zip
	"ast.py" -> "self.delimit_if"
	"ast.py" -> len
	"ast.py" -> "self.get_precedence"
	"ast.py" -> "self.items_view"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> frozenset
	"ast.py" -> "self.require_parens"
	"ast.py" -> "operator_precedence.next"
	"ast.py" -> "operator_precedence.next"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "_Precedence.CMP.next"
	"ast.py" -> "self.traverse"
	"ast.py" -> zip
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "operator_precedence.next"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> isinstance
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.items_view"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> len
	"ast.py" -> len
	"ast.py" -> enumerate
	"ast.py" -> zip
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> len
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> zip
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.write"
	"ast.py" -> "self.buffered"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self._write_constant"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> zip
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> zip
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "_Precedence.BOR.next"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> _Unparser
	"ast.py" -> "unparser.visit"
	"ast.py" -> "parser.add_argument"
	"ast.py" -> "parser.add_argument"
	"ast.py" -> "parser.add_argument"
	"ast.py" -> "parser.add_argument"
	"ast.py" -> "parser.add_argument"
	"ast.py" -> "parser.parse_args"
	"ast.py" -> "infile.read"
	"ast.py" -> print
	"linecache.py" -> "cache.clear"
	"linecache.py" -> len
	"linecache.py" -> len
	"linecache.py" -> list
	"linecache.py" -> "cache.keys"
	"linecache.py" -> len
	"linecache.py" -> "cache.pop"
	"linecache.py" -> "cache.pop"
	"linecache.py" -> len
	"linecache.py" -> "cache.pop"
	"linecache.py" -> "filename.startswith"
	"linecache.py" -> "filename.endswith"
	"linecache.py" -> <unknown_function>
	"linecache.py" -> len
	"linecache.py" -> "data.splitlines"
	"linecache.py" -> "fp.readlines"
	"linecache.py" -> endswith
	"linecache.py" -> len
	"linecache.py" -> "filename.startswith"
	"linecache.py" -> "filename.endswith"
	"linecache.py" -> "module_globals.get"
	"linecache.py" -> "module_globals.get"
	"linecache.py" -> getattr
	"argparse.py" -> type
	"argparse.py" -> "self._get_args"
	"argparse.py" -> "arg_strings.append"
	"argparse.py" -> repr
	"argparse.py" -> "self._get_kwargs"
	"argparse.py" -> "name.isidentifier"
	"argparse.py" -> "arg_strings.append"
	"argparse.py" -> "arg_strings.append"
	"argparse.py" -> repr
	"argparse.py" -> join
	"argparse.py" -> list
	"argparse.py" -> "self.__dict__.items"
	"argparse.py" -> type
	"argparse.py" -> min
	"argparse.py" -> max
	"argparse.py" -> "self._Section"
	"argparse.py" -> "self.formatter._indent"
	"argparse.py" -> join
	"argparse.py" -> func
	"argparse.py" -> "self.formatter._dedent"
	"argparse.py" -> join
	"argparse.py" -> "self._current_section.items.append"
	"argparse.py" -> "self._indent"
	"argparse.py" -> "self._Section"
	"argparse.py" -> "self._add_item"
	"argparse.py" -> "self._dedent"
	"argparse.py" -> "self._add_item"
	"argparse.py" -> "self._add_item"
	"argparse.py" -> get_invocation
	"argparse.py" -> "self._iter_indented_subactions"
	"argparse.py" -> "invocations.append"
	"argparse.py" -> get_invocation
	"argparse.py" -> max
	"argparse.py" -> map
	"argparse.py" -> max
	"argparse.py" -> "self._add_item"
	"argparse.py" -> "self.add_argument"
	"argparse.py" -> "self._root_section.format_help"
	"argparse.py" -> "self._long_break_matcher.sub"
	"argparse.py" -> "help.strip"
	"argparse.py" -> join
	"argparse.py" -> dict
	"argparse.py" -> dict
	"argparse.py" -> dict
	"argparse.py" -> "optionals.append"
	"argparse.py" -> "positionals.append"
	"argparse.py" -> format
	"argparse.py" -> join
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> format
	"argparse.py" -> format
	"argparse.py" -> join
	"argparse.py" -> join
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> "lines.append"
	"argparse.py" -> join
	"argparse.py" -> len
	"argparse.py" -> "line.append"
	"argparse.py" -> len
	"argparse.py" -> "lines.append"
	"argparse.py" -> join
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> "lines.extend"
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> "lines.extend"
	"argparse.py" -> "lines.extend"
	"argparse.py" -> join
	"argparse.py" -> set
	"argparse.py" -> ValueError
	"argparse.py" -> "actions.index"
	"argparse.py" -> len
	"argparse.py" -> "group_actions.add"
	"argparse.py" -> range
	"argparse.py" -> enumerate
	"argparse.py" -> "parts.append"
	"argparse.py" -> "inserts.get"
	"argparse.py" -> "inserts.pop"
	"argparse.py" -> "inserts.get"
	"argparse.py" -> "inserts.pop"
	"argparse.py" -> "self._get_default_metavar_for_positional"
	"argparse.py" -> "self._format_args"
	"argparse.py" -> "parts.append"
	"argparse.py" -> "action.format_usage"
	"argparse.py" -> "self._get_default_metavar_for_optional"
	"argparse.py" -> "self._format_args"
	"argparse.py" -> "parts.append"
	"argparse.py" -> sorted
	"argparse.py" -> join
	"argparse.py" -> "text.strip"
	"argparse.py" -> dict
	"argparse.py" -> max
	"argparse.py" -> "self._fill_text"
	"argparse.py" -> min
	"argparse.py" -> max
	"argparse.py" -> "self._format_action_invocation"
	"argparse.py" -> len
	"argparse.py" -> "action.help.strip"
	"argparse.py" -> "self._expand_help"
	"argparse.py" -> "self._split_lines"
	"argparse.py" -> "parts.append"
	"argparse.py" -> "parts.append"
	"argparse.py" -> "action_header.endswith"
	"argparse.py" -> "parts.append"
	"argparse.py" -> "self._iter_indented_subactions"
	"argparse.py" -> "parts.append"
	"argparse.py" -> "self._format_action"
	"argparse.py" -> "self._join_parts"
	"argparse.py" -> "self._get_default_metavar_for_positional"
	"argparse.py" -> <unknown_function>
	"argparse.py" -> "self._metavar_formatter"
	"argparse.py" -> "parts.extend"
	"argparse.py" -> "self._get_default_metavar_for_optional"
	"argparse.py" -> "self._format_args"
	"argparse.py" -> "parts.append"
	"argparse.py" -> join
	"argparse.py" -> str
	"argparse.py" -> join
	"argparse.py" -> isinstance
	"argparse.py" -> "self._metavar_formatter"
	"argparse.py" -> get_metavar
	"argparse.py" -> get_metavar
	"argparse.py" -> get_metavar
	"argparse.py" -> len
	"argparse.py" -> get_metavar
	"argparse.py" -> get_metavar
	"argparse.py" -> range
	"argparse.py" -> ValueError
	"argparse.py" -> join
	"argparse.py" -> get_metavar
	"argparse.py" -> dict
	"argparse.py" -> vars
	"argparse.py" -> list
	"argparse.py" -> list
	"argparse.py" -> hasattr
	"argparse.py" -> "params.get"
	"argparse.py" -> join
	"argparse.py" -> str
	"argparse.py" -> "self._get_help_string"
	"argparse.py" -> "self._indent"
	"argparse.py" -> get_subactions
	"argparse.py" -> "self._dedent"
	"argparse.py" -> strip
	"argparse.py" -> "self._whitespace_matcher.sub"
	"argparse.py" -> strip
	"argparse.py" -> "self._whitespace_matcher.sub"
	"argparse.py" -> "action.dest.upper"
	"argparse.py" -> join
	"argparse.py" -> "text.splitlines"
	"argparse.py" -> "text.splitlines"
	"argparse.py" -> join
	"argparse.py" -> join
	"argparse.py" -> dict
	"argparse.py" -> getattr
	"argparse.py" -> NotImplementedError
	"argparse.py" -> "_option_strings.append"
	"argparse.py" -> "option_string.startswith"
	"argparse.py" -> "_option_strings.append"
	"argparse.py" -> super
	"argparse.py" -> setattr
	"argparse.py" -> "option_string.startswith"
	"argparse.py" -> join
	"argparse.py" -> ValueError
	"argparse.py" -> ValueError
	"argparse.py" -> super
	"argparse.py" -> setattr
	"argparse.py" -> super
	"argparse.py" -> setattr
	"argparse.py" -> super
	"argparse.py" -> super
	"argparse.py" -> ValueError
	"argparse.py" -> ValueError
	"argparse.py" -> super
	"argparse.py" -> getattr
	"argparse.py" -> "items.append"
	"argparse.py" -> setattr
	"argparse.py" -> super
	"argparse.py" -> getattr
	"argparse.py" -> "items.append"
	"argparse.py" -> setattr
	"argparse.py" -> super
	"argparse.py" -> getattr
	"argparse.py" -> setattr
	"argparse.py" -> super
	"argparse.py" -> "parser.print_help"
	"argparse.py" -> "parser.exit"
	"argparse.py" -> super
	"argparse.py" -> "parser._get_formatter"
	"argparse.py" -> "formatter.add_text"
	"argparse.py" -> "parser._print_message"
	"argparse.py" -> "formatter.format_help"
	"argparse.py" -> "parser.exit"
	"argparse.py" -> join
	"argparse.py" -> super
	"argparse.py" -> "sup.__init__"
	"argparse.py" -> super
	"argparse.py" -> "kwargs.get"
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> ArgumentError
	"argparse.py" -> ArgumentError
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> "self._ChoicesPseudoAction"
	"argparse.py" -> "self._choices_actions.append"
	"argparse.py" -> "self._parser_class"
	"argparse.py" -> setattr
	"argparse.py" -> join
	"argparse.py" -> ArgumentError
	"argparse.py" -> "parser.parse_known_args"
	"argparse.py" -> items
	"argparse.py" -> vars
	"argparse.py" -> setattr
	"argparse.py" -> setdefault
	"argparse.py" -> vars
	"argparse.py" -> extend
	"argparse.py" -> getattr
	"argparse.py" -> getattr
	"argparse.py" -> "items.extend"
	"argparse.py" -> setattr
	"argparse.py" -> any
	"argparse.py" -> ValueError
	"argparse.py" -> open
	"argparse.py" -> ArgumentTypeError
	"argparse.py" -> join
	"argparse.py" -> repr
	"argparse.py" -> type
	"argparse.py" -> setattr
	"argparse.py" -> isinstance
	"argparse.py" -> vars
	"argparse.py" -> vars
	"argparse.py" -> super
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self._get_handler"
	"argparse.py" -> "self._registries.setdefault"
	"argparse.py" -> get
	"argparse.py" -> "self._defaults.update"
	"argparse.py" -> "self._defaults.get"
	"argparse.py" -> len
	"argparse.py" -> ValueError
	"argparse.py" -> "self._get_positional_kwargs"
	"argparse.py" -> "self._get_optional_kwargs"
	"argparse.py" -> "self._pop_action_class"
	"argparse.py" -> callable
	"argparse.py" -> ValueError
	"argparse.py" -> action_class
	"argparse.py" -> "self._registry_get"
	"argparse.py" -> callable
	"argparse.py" -> ValueError
	"argparse.py" -> ValueError
	"argparse.py" -> hasattr
	"argparse.py" -> "self._get_formatter"
	"argparse.py" -> ValueError
	"argparse.py" -> "self._add_action"
	"argparse.py" -> _ArgumentGroup
	"argparse.py" -> "self._action_groups.append"
	"argparse.py" -> _MutuallyExclusiveGroup
	"argparse.py" -> "self._mutually_exclusive_groups.append"
	"argparse.py" -> "self._check_conflict"
	"argparse.py" -> "self._actions.append"
	"argparse.py" -> "self._negative_number_matcher.match"
	"argparse.py" -> "self._has_negative_number_optionals.append"
	"argparse.py" -> "self._actions.remove"
	"argparse.py" -> ValueError
	"argparse.py" -> "self.add_argument_group"
	"argparse.py" -> "self.add_mutually_exclusive_group"
	"argparse.py" -> "group_map.get"
	"argparse.py" -> TypeError
	"argparse.py" -> "kwargs.get"
	"argparse.py" -> "kwargs.get"
	"argparse.py" -> dict
	"argparse.py" -> ValueError
	"argparse.py" -> "option_strings.append"
	"argparse.py" -> len
	"argparse.py" -> "long_option_strings.append"
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> "dest_option_string.lstrip"
	"argparse.py" -> ValueError
	"argparse.py" -> "dest.replace"
	"argparse.py" -> dict
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> "self._registry_get"
	"argparse.py" -> getattr
	"argparse.py" -> ValueError
	"argparse.py" -> "confl_optionals.append"
	"argparse.py" -> "self._get_handler"
	"argparse.py" -> conflict_handler
	"argparse.py" -> len
	"argparse.py" -> join
	"argparse.py" -> ArgumentError
	"argparse.py" -> "action.option_strings.remove"
	"argparse.py" -> "self._option_string_actions.pop"
	"argparse.py" -> "action.container._remove_action"
	"argparse.py" -> update
	"argparse.py" -> update
	"argparse.py" -> update
	"argparse.py" -> super
	"argparse.py" -> super_init
	"argparse.py" -> super
	"argparse.py" -> "self._group_actions.append"
	"argparse.py" -> super
	"argparse.py" -> "self._group_actions.remove"
	"argparse.py" -> super
	"argparse.py" -> super
	"argparse.py" -> ValueError
	"argparse.py" -> "self._container._add_action"
	"argparse.py" -> "self._group_actions.append"
	"argparse.py" -> "self._container._remove_action"
	"argparse.py" -> "self._group_actions.remove"
	"argparse.py" -> super
	"argparse.py" -> super
	"argparse.py" -> superinit
	"argparse.py" -> add_group
	"argparse.py" -> add_group
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.add_argument"
	"argparse.py" -> "self._add_container_actions"
	"argparse.py" -> "self._defaults.update"
	"argparse.py" -> getattr
	"argparse.py" -> "self.error"
	"argparse.py" -> "kwargs.setdefault"
	"argparse.py" -> type
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> "self.add_argument_group"
	"argparse.py" -> "kwargs.get"
	"argparse.py" -> "self._get_formatter"
	"argparse.py" -> "self._get_positional_actions"
	"argparse.py" -> "formatter.add_usage"
	"argparse.py" -> strip
	"argparse.py" -> "formatter.format_help"
	"argparse.py" -> "self._pop_action_class"
	"argparse.py" -> parsers_class
	"argparse.py" -> "self._subparsers._add_action"
	"argparse.py" -> "self._optionals._add_action"
	"argparse.py" -> "self._positionals._add_action"
	"argparse.py" -> "self.parse_known_args"
	"argparse.py" -> "self.error"
	"argparse.py" -> join
	"argparse.py" -> list
	"argparse.py" -> Namespace
	"argparse.py" -> hasattr
	"argparse.py" -> setattr
	"argparse.py" -> hasattr
	"argparse.py" -> setattr
	"argparse.py" -> "self._parse_known_args"
	"argparse.py" -> "self.error"
	"argparse.py" -> str
	"argparse.py" -> "self._parse_known_args"
	"argparse.py" -> hasattr
	"argparse.py" -> "args.extend"
	"argparse.py" -> getattr
	"argparse.py" -> delattr
	"argparse.py" -> "self._read_args_from_files"
	"argparse.py" -> enumerate
	"argparse.py" -> "action_conflicts.setdefault"
	"argparse.py" -> "conflicts.extend"
	"argparse.py" -> "conflicts.extend"
	"argparse.py" -> iter
	"argparse.py" -> enumerate
	"argparse.py" -> "arg_string_pattern_parts.append"
	"argparse.py" -> "arg_string_pattern_parts.append"
	"argparse.py" -> "self._parse_optional"
	"argparse.py" -> "arg_string_pattern_parts.append"
	"argparse.py" -> join
	"argparse.py" -> set
	"argparse.py" -> set
	"argparse.py" -> "seen_actions.add"
	"argparse.py" -> "self._get_values"
	"argparse.py" -> "seen_non_default_actions.add"
	"argparse.py" -> "action_conflicts.get"
	"argparse.py" -> ArgumentError
	"argparse.py" -> action
	"argparse.py" -> "extras.append"
	"argparse.py" -> match_argument
	"argparse.py" -> "action_tuples.append"
	"argparse.py" -> ArgumentError
	"argparse.py" -> "action_tuples.append"
	"argparse.py" -> ArgumentError
	"argparse.py" -> match_argument
	"argparse.py" -> "action_tuples.append"
	"argparse.py" -> "self._get_positional_actions"
	"argparse.py" -> match_partial
	"argparse.py" -> zip
	"argparse.py" -> len
	"argparse.py" -> max
	"argparse.py" -> min
	"argparse.py" -> "extras.extend"
	"argparse.py" -> "extras.extend"
	"argparse.py" -> "required_actions.append"
	"argparse.py" -> isinstance
	"argparse.py" -> hasattr
	"argparse.py" -> getattr
	"argparse.py" -> setattr
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self.error"
	"argparse.py" -> join
	"argparse.py" -> "self.error"
	"argparse.py" -> join
	"argparse.py" -> "new_arg_strings.append"
	"argparse.py" -> open
	"argparse.py" -> splitlines
	"argparse.py" -> "args_file.read"
	"argparse.py" -> "self.convert_arg_line_to_args"
	"argparse.py" -> "arg_strings.append"
	"argparse.py" -> "self._read_args_from_files"
	"argparse.py" -> "new_arg_strings.extend"
	"argparse.py" -> "self.error"
	"argparse.py" -> str
	"argparse.py" -> "self._get_nargs_pattern"
	"argparse.py" -> "nargs_errors.get"
	"argparse.py" -> ArgumentError
	"argparse.py" -> len
	"argparse.py" -> "match.group"
	"argparse.py" -> range
	"argparse.py" -> len
	"argparse.py" -> join
	"argparse.py" -> "self._get_nargs_pattern"
	"argparse.py" -> "result.extend"
	"argparse.py" -> len
	"argparse.py" -> "match.groups"
	"argparse.py" -> len
	"argparse.py" -> "arg_string.split"
	"argparse.py" -> "self._get_option_tuples"
	"argparse.py" -> len
	"argparse.py" -> join
	"argparse.py" -> "self.error"
	"argparse.py" -> len
	"argparse.py" -> "self._negative_number_matcher.match"
	"argparse.py" -> "option_string.split"
	"argparse.py" -> "option_string.startswith"
	"argparse.py" -> "result.append"
	"argparse.py" -> "result.append"
	"argparse.py" -> "option_string.startswith"
	"argparse.py" -> "result.append"
	"argparse.py" -> "self.error"
	"argparse.py" -> join
	"argparse.py" -> "nargs_pattern.replace"
	"argparse.py" -> "nargs_pattern.replace"
	"argparse.py" -> "self.parse_known_intermixed_args"
	"argparse.py" -> "self.error"
	"argparse.py" -> join
	"argparse.py" -> "self._get_positional_actions"
	"argparse.py" -> TypeError
	"argparse.py" -> TypeError
	"argparse.py" -> "self.format_usage"
	"argparse.py" -> "self.parse_known_args"
	"argparse.py" -> hasattr
	"argparse.py" -> getattr
	"argparse.py" -> delattr
	"argparse.py" -> "self._get_optional_actions"
	"argparse.py" -> "self.parse_known_args"
	"argparse.py" -> "arg_strings.remove"
	"argparse.py" -> isinstance
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self._check_value"
	"argparse.py" -> "self._check_value"
	"argparse.py" -> len
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self._check_value"
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self._check_value"
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self._check_value"
	"argparse.py" -> "self._registry_get"
	"argparse.py" -> callable
	"argparse.py" -> ArgumentError
	"argparse.py" -> type_func
	"argparse.py" -> getattr
	"argparse.py" -> repr
	"argparse.py" -> str
	"argparse.py" -> ArgumentError
	"argparse.py" -> getattr
	"argparse.py" -> repr
	"argparse.py" -> ArgumentError
	"argparse.py" -> join
	"argparse.py" -> map
	"argparse.py" -> ArgumentError
	"argparse.py" -> "self._get_formatter"
	"argparse.py" -> "formatter.add_usage"
	"argparse.py" -> "formatter.format_help"
	"argparse.py" -> "self._get_formatter"
	"argparse.py" -> "formatter.add_usage"
	"argparse.py" -> "formatter.add_text"
	"argparse.py" -> "formatter.start_section"
	"argparse.py" -> "formatter.add_text"
	"argparse.py" -> "formatter.add_arguments"
	"argparse.py" -> "formatter.end_section"
	"argparse.py" -> "formatter.add_text"
	"argparse.py" -> "formatter.format_help"
	"argparse.py" -> "self.formatter_class"
	"argparse.py" -> "self._print_message"
	"argparse.py" -> "self.format_usage"
	"argparse.py" -> "self._print_message"
	"argparse.py" -> "self.format_help"
	"argparse.py" -> "file.write"
	"argparse.py" -> "self._print_message"
	"argparse.py" -> "_sys.exit"
	"argparse.py" -> "self.print_usage"
	"argparse.py" -> "self.exit"
	"dis.py" -> list
	"dis.py" -> dict
	"dis.py" -> enumerate
	"dis.py" -> "name.startswith"
	"dis.py" -> zip
	"dis.py" -> compile
	"dis.py" -> compile
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> sorted
	"dis.py" -> "x.__dict__.items"
	"dis.py" -> isinstance
	"dis.py" -> print
	"dis.py" -> print
	"dis.py" -> print
	"dis.py" -> hasattr
	"dis.py" -> isinstance
	"dis.py" -> isinstance
	"dis.py" -> TypeError
	"dis.py" -> type
	"dis.py" -> RuntimeError
	"dis.py" -> range
	"dis.py" -> "names.append"
	"dis.py" -> "COMPILER_FLAG_NAMES.get"
	"dis.py" -> hex
	"dis.py" -> "names.append"
	"dis.py" -> hex
	"dis.py" -> join
	"dis.py" -> _Unknown
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> isinstance
	"dis.py" -> hasattr
	"dis.py" -> TypeError
	"dis.py" -> type
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> enumerate
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> enumerate
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> enumerate
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> enumerate
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> enumerate
	"dis.py" -> "lines.append"
	"dis.py" -> join
	"dis.py" -> print
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> rjust
	"dis.py" -> repr
	"dis.py" -> "fields.append"
	"dis.py" -> "self.opname.ljust"
	"dis.py" -> "fields.append"
	"dis.py" -> rjust
	"dis.py" -> repr
	"dis.py" -> "fields.append"
	"dis.py" -> rstrip
	"dis.py" -> join
	"dis.py" -> dict
	"dis.py" -> "co.co_positions"
	"dis.py" -> repr
	"dis.py" -> get_name
	"dis.py" -> next
	"dis.py" -> next
	"dis.py" -> iter
	"dis.py" -> bool
	"dis.py" -> "entries.append"
	"dis.py" -> _ExceptionTableEntry
	"dis.py" -> iter
	"dis.py" -> set
	"dis.py" -> range
	"dis.py" -> "labels.add"
	"dis.py" -> "linestarts.get"
	"dis.py" -> Positions
	"dis.py" -> next
	"dis.py" -> repr
	"dis.py" -> repr
	"dis.py" -> bool
	"dis.py" -> join
	"dis.py" -> enumerate
	"dis.py" -> Instruction
	"dis.py" -> range
	"dis.py" -> next
	"dis.py" -> items
	"dis.py" -> range
	"dis.py" -> "int.from_bytes"
	"dis.py" -> Instruction
	"dis.py" -> Positions
	"dis.py" -> next
	"dis.py" -> dict
	"dis.py" -> "co.co_positions"
	"dis.py" -> hasattr
	"dis.py" -> print
	"dis.py" -> print
	"dis.py" -> bool
	"dis.py" -> max
	"dis.py" -> "linestarts.values"
	"dis.py" -> len
	"dis.py" -> str
	"dis.py" -> len
	"dis.py" -> len
	"dis.py" -> str
	"dis.py" -> print
	"dis.py" -> print
	"dis.py" -> "instr._disassemble"
	"dis.py" -> print
	"dis.py" -> print
	"dis.py" -> range
	"dis.py" -> len
	"dis.py" -> "labels.append"
	"dis.py" -> "code.co_lines"
	"dis.py" -> enumerate
	"dis.py" -> dict
	"dis.py" -> "co.co_positions"
	"dis.py" -> format
	"dis.py" -> cls
	"dis.py" -> "co.co_positions"
	"dis.py" -> "output.getvalue"
	"dis.py" -> "parser.add_argument"
	"dis.py" -> "parser.parse_args"
	"dis.py" -> "infile.read"
	"dis.py" -> compile
	"datetime.py" -> "_DAYS_BEFORE_MONTH.append"
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> "_time.struct_time"
	"datetime.py" -> ValueError
	"datetime.py" -> "fmt.format"
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> len
	"datetime.py" -> getattr
	"datetime.py" -> "newformat.append"
	"datetime.py" -> hasattr
	"datetime.py" -> "object.utcoffset"
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> "newformat.append"
	"datetime.py" -> hasattr
	"datetime.py" -> "object.tzname"
	"datetime.py" -> "s.replace"
	"datetime.py" -> "newformat.append"
	"datetime.py" -> push
	"datetime.py" -> push
	"datetime.py" -> push
	"datetime.py" -> push
	"datetime.py" -> join
	"datetime.py" -> "_time.strftime"
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> len
	"datetime.py" -> int
	"datetime.py" -> int
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> int
	"datetime.py" -> list
	"datetime.py" -> int
	"datetime.py" -> ValueError
	"datetime.py" -> int
	"datetime.py" -> len
	"datetime.py" -> range
	"datetime.py" -> ValueError
	"datetime.py" -> int
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> int
	"datetime.py" -> all
	"datetime.py" -> map
	"datetime.py" -> ValueError
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> "tstr.find"
	"datetime.py" -> "tstr.find"
	"datetime.py" -> "tstr.find"
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> all
	"datetime.py" -> timedelta
	"datetime.py" -> timezone
	"datetime.py" -> "time_comps.append"
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> type
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> type
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> TypeError
	"datetime.py" -> type
	"datetime.py" -> type
	"datetime.py" -> divmod
	"datetime.py" -> isinstance
	"datetime.py" -> int
	"datetime.py" -> int
	"datetime.py" -> int
	"datetime.py" -> int
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> int
	"datetime.py" -> int
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> divmod
	"datetime.py" -> int
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> round
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> int
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> round
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> abs
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> OverflowError
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "args.append"
	"datetime.py" -> "args.append"
	"datetime.py" -> "args.append"
	"datetime.py" -> "args.append"
	"datetime.py" -> join
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "self._to_microseconds"
	"datetime.py" -> "other.as_integer_ratio"
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "self._to_microseconds"
	"datetime.py" -> isinstance
	"datetime.py" -> "other._to_microseconds"
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "self._to_microseconds"
	"datetime.py" -> isinstance
	"datetime.py" -> "other._to_microseconds"
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "other.as_integer_ratio"
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "self._to_microseconds"
	"datetime.py" -> "other._to_microseconds"
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> divmod
	"datetime.py" -> "self._to_microseconds"
	"datetime.py" -> "other._to_microseconds"
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._getstate"
	"datetime.py" -> "other._getstate"
	"datetime.py" -> hash
	"datetime.py" -> "self._getstate"
	"datetime.py" -> "self._getstate"
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> len
	"datetime.py" -> ord
	"datetime.py" -> isinstance
	"datetime.py" -> "year.encode"
	"datetime.py" -> ValueError
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "self.__setstate"
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "_time.localtime"
	"datetime.py" -> cls
	"datetime.py" -> "_time.time"
	"datetime.py" -> "cls.fromtimestamp"
	"datetime.py" -> cls
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> cls
	"datetime.py" -> ValueError
	"datetime.py" -> cls
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> "self.timetuple"
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> type
	"datetime.py" -> len
	"datetime.py" -> "self.strftime"
	"datetime.py" -> str
	"datetime.py" -> <unknown_function>
	"datetime.py" -> type
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> hash
	"datetime.py" -> "self._getstate"
	"datetime.py" -> isinstance
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> type
	"datetime.py" -> OverflowError
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> "other.toordinal"
	"datetime.py" -> timedelta
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> _IsoCalendarDate
	"datetime.py" -> divmod
	"datetime.py" -> bytes
	"datetime.py" -> "self._getstate"
	"datetime.py" -> timedelta
	"datetime.py" -> NotImplementedError
	"datetime.py" -> NotImplementedError
	"datetime.py" -> NotImplementedError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> ValueError
	"datetime.py" -> "dt.utcoffset"
	"datetime.py" -> ValueError
	"datetime.py" -> "dt.dst"
	"datetime.py" -> ValueError
	"datetime.py" -> "dt.dst"
	"datetime.py" -> ValueError
	"datetime.py" -> getattr
	"datetime.py" -> getinitargs
	"datetime.py" -> "self.__getstate__"
	"datetime.py" -> super
	"datetime.py" -> tuple
	"datetime.py" -> isinstance
	"datetime.py" -> len
	"datetime.py" -> ord
	"datetime.py" -> isinstance
	"datetime.py" -> "hour.encode"
	"datetime.py" -> ValueError
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "self.__setstate"
	"datetime.py" -> "object.__new__"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> "other.utcoffset"
	"datetime.py" -> TypeError
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> "self.replace"
	"datetime.py" -> "t.utcoffset"
	"datetime.py" -> hash
	"datetime.py" -> "t._getstate"
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> hash
	"datetime.py" -> hash
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> "self._tzstr"
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> "time_string.removeprefix"
	"datetime.py" -> cls
	"datetime.py" -> ValueError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> type
	"datetime.py" -> len
	"datetime.py" -> "self.strftime"
	"datetime.py" -> str
	"datetime.py" -> "self._tzinfo.utcoffset"
	"datetime.py" -> "self._tzinfo.tzname"
	"datetime.py" -> "self._tzinfo.dst"
	"datetime.py" -> <unknown_function>
	"datetime.py" -> type
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> bytes
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> "self._getstate"
	"datetime.py" -> "self.__reduce_ex__"
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> len
	"datetime.py" -> ord
	"datetime.py" -> isinstance
	"datetime.py" -> bytes
	"datetime.py" -> ValueError
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "self.__setstate"
	"datetime.py" -> "object.__new__"
	"datetime.py" -> round
	"datetime.py" -> converter
	"datetime.py" -> min
	"datetime.py" -> cls
	"datetime.py" -> "sys.platform.startswith"
	"datetime.py" -> converter
	"datetime.py" -> cls
	"datetime.py" -> timedelta
	"datetime.py" -> converter
	"datetime.py" -> timedelta
	"datetime.py" -> cls
	"datetime.py" -> "tz.fromutc"
	"datetime.py" -> "cls._fromtimestamp"
	"datetime.py" -> "cls._fromtimestamp"
	"datetime.py" -> "_time.time"
	"datetime.py" -> "cls.fromtimestamp"
	"datetime.py" -> "_time.time"
	"datetime.py" -> "cls.utcfromtimestamp"
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> cls
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> cls
	"datetime.py" -> "self.dst"
	"datetime.py" -> datetime
	"datetime.py" -> timedelta
	"datetime.py" -> "_time.localtime"
	"datetime.py" -> datetime
	"datetime.py" -> timedelta
	"datetime.py" -> <unknown_function>
	"datetime.py" -> "self._mktime"
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> <unknown_function>
	"datetime.py" -> type
	"datetime.py" -> "self._mktime"
	"datetime.py" -> timedelta
	"datetime.py" -> "_time.localtime"
	"datetime.py" -> datetime
	"datetime.py" -> timezone
	"datetime.py" -> timedelta
	"datetime.py" -> "self._local_timezone"
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> "self._local_timezone"
	"datetime.py" -> "mytz.utcoffset"
	"datetime.py" -> "mytz.utcoffset"
	"datetime.py" -> "self.replace"
	"datetime.py" -> "mytz.utcoffset"
	"datetime.py" -> "tz.fromutc"
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> join
	"datetime.py" -> map
	"datetime.py" -> "self.isoformat"
	"datetime.py" -> "self._tzinfo.utcoffset"
	"datetime.py" -> "self._tzinfo.tzname"
	"datetime.py" -> "self._tzinfo.dst"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> "other.utcoffset"
	"datetime.py" -> "self.replace"
	"datetime.py" -> "other.replace"
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> type
	"datetime.py" -> "date.fromordinal"
	"datetime.py" -> OverflowError
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> "other.toordinal"
	"datetime.py" -> timedelta
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> "other.utcoffset"
	"datetime.py" -> TypeError
	"datetime.py" -> "self.replace"
	"datetime.py" -> "t.utcoffset"
	"datetime.py" -> hash
	"datetime.py" -> "t._getstate"
	"datetime.py" -> hash
	"datetime.py" -> timedelta
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> bytes
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> "self._getstate"
	"datetime.py" -> "self.__reduce_ex__"
	"datetime.py" -> datetime
	"datetime.py" -> datetime
	"datetime.py" -> timedelta
	"datetime.py" -> object
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> ValueError
	"datetime.py" -> "cls._create"
	"datetime.py" -> "tzinfo.__new__"
	"datetime.py" -> isinstance
	"datetime.py" -> hash
	"datetime.py" -> "self.tzname"
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> "self._name_from_offset"
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> ValueError
	"datetime.py" -> TypeError
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> "timezone._create"
	"datetime.py" -> timedelta
	"datetime.py" -> "timezone._create"
	"datetime.py" -> timedelta
	"datetime.py" -> "timezone._create"
	"datetime.py" -> timedelta
	"datetime.py" -> datetime
	"_strptime.py" -> "self.__calc_weekday"
	"_strptime.py" -> "self.__calc_month"
	"_strptime.py" -> "self.__calc_am_pm"
	"_strptime.py" -> "self.__calc_timezone"
	"_strptime.py" -> "self.__calc_date_time"
	"_strptime.py" -> ValueError
	"_strptime.py" -> ValueError
	"_strptime.py" -> lower
	"_strptime.py" -> range
	"_strptime.py" -> lower
	"_strptime.py" -> range
	"_strptime.py" -> lower
	"_strptime.py" -> range
	"_strptime.py" -> lower
	"_strptime.py" -> range
	"_strptime.py" -> "time.struct_time"
	"_strptime.py" -> "am_pm.append"
	"_strptime.py" -> lower
	"_strptime.py" -> "time.strftime"
	"_strptime.py" -> "time.struct_time"
	"_strptime.py" -> lower
	"_strptime.py" -> "time.strftime"
	"_strptime.py" -> lower
	"_strptime.py" -> "time.strftime"
	"_strptime.py" -> lower
	"_strptime.py" -> "time.strftime"
	"_strptime.py" -> "replacement_pairs.extend"
	"_strptime.py" -> "current_format.replace"
	"_strptime.py" -> "time.struct_time"
	"_strptime.py" -> "time.strftime"
	"_strptime.py" -> "current_format.replace"
	"_strptime.py" -> "time.tzset"
	"_strptime.py" -> frozenset
	"_strptime.py" -> lower
	"_strptime.py" -> frozenset
	"_strptime.py" -> lower
	"_strptime.py" -> frozenset
	"_strptime.py" -> LocaleTime
	"_strptime.py" -> super
	"_strptime.py" -> "base.__init__"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "base.__setitem__"
	"_strptime.py" -> replace
	"_strptime.py" -> "base.__getitem__"
	"_strptime.py" -> "base.__setitem__"
	"_strptime.py" -> "self.pattern"
	"_strptime.py" -> "base.__setitem__"
	"_strptime.py" -> "self.pattern"
	"_strptime.py" -> "base.__setitem__"
	"_strptime.py" -> "self.pattern"
	"_strptime.py" -> sorted
	"_strptime.py" -> join
	"_strptime.py" -> "regex_chars.sub"
	"_strptime.py" -> "whitespace_replacement.sub"
	"_strptime.py" -> "format.index"
	"_strptime.py" -> "self.pattern"
	"_strptime.py" -> _thread_allocate_lock
	"_strptime.py" -> TimeRE
	"_strptime.py" -> weekday
	"_strptime.py" -> isoweekday
	"_strptime.py" -> toordinal
	"_strptime.py" -> toordinal
	"_strptime.py" -> enumerate
	"_strptime.py" -> isinstance
	"_strptime.py" -> TypeError
	"_strptime.py" -> "msg.format"
	"_strptime.py" -> type
	"_strptime.py" -> TimeRE
	"_strptime.py" -> "_regex_cache.clear"
	"_strptime.py" -> len
	"_strptime.py" -> "_regex_cache.clear"
	"_strptime.py" -> "_regex_cache.get"
	"_strptime.py" -> "_TimeRE_cache.compile"
	"_strptime.py" -> ValueError
	"_strptime.py" -> ValueError
	"_strptime.py" -> "format_regex.match"
	"_strptime.py" -> ValueError
	"_strptime.py" -> len
	"_strptime.py" -> "found.end"
	"_strptime.py" -> ValueError
	"_strptime.py" -> "found.end"
	"_strptime.py" -> "found.groupdict"
	"_strptime.py" -> "found_dict.keys"
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> "locale_time.f_month.index"
	"_strptime.py" -> lower
	"_strptime.py" -> "locale_time.a_month.index"
	"_strptime.py" -> lower
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> lower
	"_strptime.py" -> "found_dict.get"
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> len
	"_strptime.py" -> int
	"_strptime.py" -> "locale_time.f_weekday.index"
	"_strptime.py" -> lower
	"_strptime.py" -> "locale_time.a_weekday.index"
	"_strptime.py" -> lower
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> len
	"_strptime.py" -> ValueError
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> len
	"_strptime.py" -> int
	"_strptime.py" -> "z.startswith"
	"_strptime.py" -> lower
	"_strptime.py" -> enumerate
	"_strptime.py" -> ValueError
	"_strptime.py" -> ValueError
	"_strptime.py" -> ValueError
	"_strptime.py" -> ValueError
	"_strptime.py" -> toordinal
	"_strptime.py" -> toordinal
	"_strptime.py" -> toordinal
	"_strptime.py" -> weekday
	"_strptime.py" -> "found_dict.get"
	"_strptime.py" -> "time.struct_time"
	"_strptime.py" -> cls
	"locale.py" -> Error
	"locale.py" -> globals
	"locale.py" -> globals
	"locale.py" -> _localeconv
	"locale.py" -> "d.update"
	"locale.py" -> ValueError
	"locale.py" -> "s.rstrip"
	"locale.py" -> len
	"locale.py" -> "groups.append"
	"locale.py" -> "groups.append"
	"locale.py" -> "groups.reverse"
	"locale.py" -> "thousands_sep.join"
	"locale.py" -> len
	"locale.py" -> len
	"locale.py" -> len
	"locale.py" -> "formatted.split"
	"locale.py" -> "decimal_point.join"
	"locale.py" -> list
	"locale.py" -> "_percent_re.finditer"
	"locale.py" -> "_percent_re.sub"
	"locale.py" -> isinstance
	"locale.py" -> "perc.group"
	"locale.py" -> "new_val.append"
	"locale.py" -> "new_val.append"
	"locale.py" -> "perc.group"
	"locale.py" -> isinstance
	"locale.py" -> "perc.group"
	"locale.py" -> "new_val.append"
	"locale.py" -> count
	"locale.py" -> "perc.group"
	"locale.py" -> "new_val.append"
	"locale.py" -> "perc.group"
	"locale.py" -> tuple
	"locale.py" -> "_percent_re.match"
	"locale.py" -> len
	"locale.py" -> "match.group"
	"locale.py" -> len
	"locale.py" -> ValueError
	"locale.py" -> repr
	"locale.py" -> ValueError
	"locale.py" -> abs
	"locale.py" -> "s.replace"
	"locale.py" -> "s.replace"
	"locale.py" -> replace
	"locale.py" -> "s.replace"
	"locale.py" -> func
	"locale.py" -> int
	"locale.py" -> print
	"locale.py" -> str
	"locale.py" -> print
	"locale.py" -> "code.index"
	"locale.py" -> "norm_encoding.lower"
	"locale.py" -> "norm_encoding.lower"
	"locale.py" -> "norm_encoding.replace"
	"locale.py" -> "norm_encoding.replace"
	"locale.py" -> "code.partition"
	"locale.py" -> "localename.lower"
	"locale.py" -> "code.replace"
	"locale.py" -> "code.split"
	"locale.py" -> "code.split"
	"locale.py" -> "encoding.replace"
	"locale.py" -> "norm_encoding.replace"
	"locale.py" -> "locale_alias.get"
	"locale.py" -> "locale_alias.get"
	"locale.py" -> lower
	"locale.py" -> "code.split"
	"locale.py" -> "locale_alias.get"
	"locale.py" -> "code.split"
	"locale.py" -> "locale_alias.get"
	"locale.py" -> "code.split"
	"locale.py" -> "defmod.lower"
	"locale.py" -> "code.split"
	"locale.py" -> tuple
	"locale.py" -> "code.split"
	"locale.py" -> ValueError
	"locale.py" -> TypeError
	"locale.py" -> "_locale._getdefaultlocale"
	"locale.py" -> "windows_locale.get"
	"locale.py" -> int
	"locale.py" -> lookup
	"locale.py" -> "localename.split"
	"locale.py" -> _setlocale
	"locale.py" -> TypeError
	"locale.py" -> isinstance
	"locale.py" -> _setlocale
	"locale.py" -> _setlocale
	"locale.py" -> hasattr
	"locale.py" -> sorted
	"locale.py" -> "locale_encoding_alias.items"
	"locale.py" -> "k.replace"
	"locale.py" -> "locale_encoding_alias.setdefault"
	"locale.py" -> items
	"locale.py" -> globals
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> "categories.items"
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> "categories.items"
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> "categories.items"
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> "__all__.append"
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"__init__.py" -> isinstance
	"__init__.py" -> str
	"__init__.py" -> "c.isalnum"
	"__init__.py" -> "chars.append"
	"__init__.py" -> "c.isascii"
	"__init__.py" -> "chars.append"
	"__init__.py" -> join
	"__init__.py" -> "_cache.get"
	"__init__.py" -> "_aliases.get"
	"__init__.py" -> "_aliases.get"
	"__init__.py" -> "norm_encoding.replace"
	"__init__.py" -> __import__
	"__init__.py" -> getregentry
	"__init__.py" -> isinstance
	"__init__.py" -> len
	"__init__.py" -> CodecRegistryError
	"__init__.py" -> callable
	"__init__.py" -> callable
	"__init__.py" -> callable
	"__init__.py" -> callable
	"__init__.py" -> len
	"__init__.py" -> callable
	"__init__.py" -> len
	"__init__.py" -> callable
	"__init__.py" -> CodecRegistryError
	"__init__.py" -> len
	"__init__.py" -> len
	"__init__.py" -> "mod.__name__.split"
	"__init__.py" -> "mod.getaliases"
	"__init__.py" -> "_winapi.GetACP"
	"calendar.py" -> range
	"calendar.py" -> "_months.insert"
	"calendar.py" -> isinstance
	"calendar.py" -> f
	"calendar.py" -> funcs
	"calendar.py" -> range
	"calendar.py" -> isinstance
	"calendar.py" -> f
	"calendar.py" -> funcs
	"calendar.py" -> _localized_day
	"calendar.py" -> _localized_day
	"calendar.py" -> _localized_month
	"calendar.py" -> _localized_month
	"calendar.py" -> range
	"calendar.py" -> IllegalMonthError
	"calendar.py" -> property
	"calendar.py" -> range
	"calendar.py" -> "self.itermonthdays3"
	"calendar.py" -> repeat
	"calendar.py" -> range
	"calendar.py" -> repeat
	"calendar.py" -> enumerate
	"calendar.py" -> "self.itermonthdays"
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> enumerate
	"calendar.py" -> "self.itermonthdays3"
	"calendar.py" -> list
	"calendar.py" -> "self.itermonthdates"
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> list
	"calendar.py" -> "self.itermonthdays2"
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> list
	"calendar.py" -> "self.itermonthdays"
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> "self.monthdatescalendar"
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> "self.monthdays2calendar"
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> "self.monthdayscalendar"
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> print
	"calendar.py" -> "self.formatweek"
	"calendar.py" -> "s.center"
	"calendar.py" -> join
	"calendar.py" -> "self.formatday"
	"calendar.py" -> center
	"calendar.py" -> join
	"calendar.py" -> "self.formatweekday"
	"calendar.py" -> "self.iterweekdays"
	"calendar.py" -> "s.center"
	"calendar.py" -> print
	"calendar.py" -> "self.formatmonth"
	"calendar.py" -> max
	"calendar.py" -> max
	"calendar.py" -> "self.formatmonthname"
	"calendar.py" -> "s.rstrip"
	"calendar.py" -> rstrip
	"calendar.py" -> "self.formatweekheader"
	"calendar.py" -> "self.monthdays2calendar"
	"calendar.py" -> rstrip
	"calendar.py" -> "self.formatweek"
	"calendar.py" -> max
	"calendar.py" -> max
	"calendar.py" -> max
	"calendar.py" -> a
	"calendar.py" -> rstrip
	"calendar.py" -> center
	"calendar.py" -> repr
	"calendar.py" -> a
	"calendar.py" -> "self.formatweekheader"
	"calendar.py" -> enumerate
	"calendar.py" -> "self.yeardays2calendar"
	"calendar.py" -> range
	"calendar.py" -> min
	"calendar.py" -> a
	"calendar.py" -> "self.formatmonthname"
	"calendar.py" -> a
	"calendar.py" -> rstrip
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> rstrip
	"calendar.py" -> a
	"calendar.py" -> max
	"calendar.py" -> len
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> "weeks.append"
	"calendar.py" -> "weeks.append"
	"calendar.py" -> "self.formatweek"
	"calendar.py" -> a
	"calendar.py" -> rstrip
	"calendar.py" -> a
	"calendar.py" -> join
	"calendar.py" -> print
	"calendar.py" -> "self.formatyear"
	"calendar.py" -> join
	"calendar.py" -> "self.formatday"
	"calendar.py" -> join
	"calendar.py" -> "self.formatweekday"
	"calendar.py" -> "self.iterweekdays"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> "self.formatmonthname"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> "self.formatweekheader"
	"calendar.py" -> a
	"calendar.py" -> "self.monthdays2calendar"
	"calendar.py" -> a
	"calendar.py" -> "self.formatweek"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> join
	"calendar.py" -> max
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> min
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> "self.formatmonth"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> join
	"calendar.py" -> "sys.getdefaultencoding"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> "self.formatyear"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> encode
	"calendar.py" -> join
	"calendar.py" -> different_locale
	"calendar.py" -> "TextCalendar.__init__"
	"calendar.py" -> different_locale
	"calendar.py" -> super
	"calendar.py" -> different_locale
	"calendar.py" -> super
	"calendar.py" -> "HTMLCalendar.__init__"
	"calendar.py" -> different_locale
	"calendar.py" -> super
	"calendar.py" -> different_locale
	"calendar.py" -> super
	"calendar.py" -> TextCalendar
	"calendar.py" -> IllegalWeekdayError
	"calendar.py" -> print
	"calendar.py" -> "spacing.join"
	"calendar.py" -> "c.center"
	"calendar.py" -> toordinal
	"calendar.py" -> toordinal
	"calendar.py" -> "parser.add_argument_group"
	"calendar.py" -> "parser.add_argument_group"
	"calendar.py" -> "textgroup.add_argument"
	"calendar.py" -> "textgroup.add_argument"
	"calendar.py" -> "textgroup.add_argument"
	"calendar.py" -> "textgroup.add_argument"
	"calendar.py" -> "htmlgroup.add_argument"
	"calendar.py" -> "parser.add_argument"
	"calendar.py" -> "parser.add_argument"
	"calendar.py" -> "parser.add_argument"
	"calendar.py" -> "parser.add_argument"
	"calendar.py" -> "parser.add_argument"
	"calendar.py" -> "parser.parse_args"
	"calendar.py" -> "parser.error"
	"calendar.py" -> "sys.exit"
	"calendar.py" -> LocaleHTMLCalendar
	"calendar.py" -> HTMLCalendar
	"calendar.py" -> "sys.getdefaultencoding"
	"calendar.py" -> dict
	"calendar.py" -> write
	"calendar.py" -> "cal.formatyearpage"
	"calendar.py" -> write
	"calendar.py" -> "cal.formatyearpage"
	"calendar.py" -> "parser.error"
	"calendar.py" -> "sys.exit"
	"calendar.py" -> LocaleTextCalendar
	"calendar.py" -> TextCalendar
	"calendar.py" -> dict
	"calendar.py" -> "cal.formatyear"
	"calendar.py" -> "cal.formatyear"
	"calendar.py" -> "cal.formatmonth"
	"calendar.py" -> "result.encode"
	"calendar.py" -> write
	"uuid.py" -> count
	"uuid.py" -> TypeError
	"uuid.py" -> replace
	"uuid.py" -> "hex.replace"
	"uuid.py" -> replace
	"uuid.py" -> "hex.strip"
	"uuid.py" -> len
	"uuid.py" -> ValueError
	"uuid.py" -> int_
	"uuid.py" -> len
	"uuid.py" -> ValueError
	"uuid.py" -> len
	"uuid.py" -> ValueError
	"uuid.py" -> isinstance
	"uuid.py" -> repr
	"uuid.py" -> "int_.from_bytes"
	"uuid.py" -> len
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> "object.__setattr__"
	"uuid.py" -> "object.__setattr__"
	"uuid.py" -> "object.__setattr__"
	"uuid.py" -> "object.__setattr__"
	"uuid.py" -> SafeUUID
	"uuid.py" -> isinstance
	"uuid.py" -> isinstance
	"uuid.py" -> isinstance
	"uuid.py" -> isinstance
	"uuid.py" -> isinstance
	"uuid.py" -> hash
	"uuid.py" -> str
	"uuid.py" -> TypeError
	"uuid.py" -> "self.int.to_bytes"
	"uuid.py" -> str
	"uuid.py" -> int
	"uuid.py" -> split
	"uuid.py" -> "path_dirs.extend"
	"uuid.py" -> dict
	"uuid.py" -> "proc.communicate"
	"uuid.py" -> split
	"uuid.py" -> rstrip
	"uuid.py" -> "line.lower"
	"uuid.py" -> range
	"uuid.py" -> len
	"uuid.py" -> get_word_index
	"uuid.py" -> int
	"uuid.py" -> "word.replace"
	"uuid.py" -> "word.split"
	"uuid.py" -> len
	"uuid.py" -> all
	"uuid.py" -> len
	"uuid.py" -> join
	"uuid.py" -> "part.rjust"
	"uuid.py" -> all
	"uuid.py" -> len
	"uuid.py" -> join
	"uuid.py" -> int
	"uuid.py" -> split
	"uuid.py" -> rstrip
	"uuid.py" -> "stdout.readline"
	"uuid.py" -> "keywords.index"
	"uuid.py" -> split
	"uuid.py" -> "line.rstrip"
	"uuid.py" -> hasattr
	"uuid.py" -> getattr
	"uuid.py" -> getattr
	"uuid.py" -> _generate_time_safe
	"uuid.py" -> UUID
	"uuid.py" -> _UuidCreate
	"uuid.py" -> UUID
	"uuid.py" -> getter
	"uuid.py" -> format
	"uuid.py" -> _generate_time_safe
	"uuid.py" -> SafeUUID
	"uuid.py" -> UUID
	"uuid.py" -> "time.time_ns"
	"uuid.py" -> UUID
	"uuid.py" -> digest
	"uuid.py" -> bytes
	"uuid.py" -> UUID
	"uuid.py" -> UUID
	"uuid.py" -> digest
	"uuid.py" -> bytes
	"uuid.py" -> UUID
	"uuid.py" -> UUID
	"uuid.py" -> UUID
	"uuid.py" -> UUID
	"uuid.py" -> UUID
	"socket.py" -> getattr
	"socket.py" -> getattr
	"socket.py" -> getattr
	"socket.py" -> "__all__.extend"
	"socket.py" -> "C.isupper"
	"socket.py" -> "C.startswith"
	"socket.py" -> "C.isupper"
	"socket.py" -> "C.startswith"
	"socket.py" -> "C.isupper"
	"socket.py" -> "C.startswith"
	"socket.py" -> "C.isupper"
	"socket.py" -> "C.startswith"
	"socket.py" -> enum_klass
	"socket.py" -> startswith
	"socket.py" -> "sys.platform.lower"
	"socket.py" -> "__all__.append"
	"socket.py" -> "self.close"
	"socket.py" -> getattr
	"socket.py" -> "self.fileno"
	"socket.py" -> "self.getsockname"
	"socket.py" -> str
	"socket.py" -> "self.getpeername"
	"socket.py" -> str
	"socket.py" -> TypeError
	"socket.py" -> "self.fileno"
	"socket.py" -> "self.__class__"
	"socket.py" -> "sock.settimeout"
	"socket.py" -> "self.gettimeout"
	"socket.py" -> "self._accept"
	"socket.py" -> socket
	"socket.py" -> getdefaulttimeout
	"socket.py" -> "self.gettimeout"
	"socket.py" -> "sock.setblocking"
	"socket.py" -> set
	"socket.py" -> ValueError
	"socket.py" -> SocketIO
	"socket.py" -> ValueError
	"socket.py" -> hasattr
	"socket.py" -> "self._check_sendfile_params"
	"socket.py" -> "self.fileno"
	"socket.py" -> "file.fileno"
	"socket.py" -> _GiveupOnSendfile
	"socket.py" -> _GiveupOnSendfile
	"socket.py" -> min
	"socket.py" -> "self.gettimeout"
	"socket.py" -> ValueError
	"socket.py" -> hasattr
	"socket.py" -> "selector.register"
	"socket.py" -> selector_select
	"socket.py" -> TimeoutError
	"socket.py" -> os_sendfile
	"socket.py" -> selector_select
	"socket.py" -> _GiveupOnSendfile
	"socket.py" -> hasattr
	"socket.py" -> "file.seek"
	"socket.py" -> _GiveupOnSendfile
	"socket.py" -> "self._check_sendfile_params"
	"socket.py" -> "self.gettimeout"
	"socket.py" -> ValueError
	"socket.py" -> "file.seek"
	"socket.py" -> min
	"socket.py" -> min
	"socket.py" -> memoryview
	"socket.py" -> file_read
	"socket.py" -> sock_send
	"socket.py" -> len
	"socket.py" -> hasattr
	"socket.py" -> "file.seek"
	"socket.py" -> getattr
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> isinstance
	"socket.py" -> TypeError
	"socket.py" -> format
	"socket.py" -> ValueError
	"socket.py" -> format
	"socket.py" -> "self._sendfile_use_sendfile"
	"socket.py" -> "self._sendfile_use_send"
	"socket.py" -> "self.close"
	"socket.py" -> "_ss.close"
	"socket.py" -> "self._real_close"
	"socket.py" -> super
	"socket.py" -> super
	"socket.py" -> super
	"socket.py" -> "self.fileno"
	"socket.py" -> "self.fileno"
	"socket.py" -> "self.fileno"
	"socket.py" -> "self.fileno"
	"socket.py" -> socket
	"socket.py" -> hasattr
	"socket.py" -> "sock.sendmsg"
	"socket.py" -> "__all__.append"
	"socket.py" -> hasattr
	"socket.py" -> "sock.recvmsg"
	"socket.py" -> "fds.frombytes"
	"socket.py" -> len
	"socket.py" -> len
	"socket.py" -> list
	"socket.py" -> "__all__.append"
	"socket.py" -> hasattr
	"socket.py" -> socket
	"socket.py" -> "__all__.append"
	"socket.py" -> hasattr
	"socket.py" -> socket
	"socket.py" -> "a.detach"
	"socket.py" -> socket
	"socket.py" -> "b.detach"
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> socket
	"socket.py" -> "lsock.bind"
	"socket.py" -> "lsock.listen"
	"socket.py" -> "lsock.getsockname"
	"socket.py" -> socket
	"socket.py" -> "csock.setblocking"
	"socket.py" -> "csock.connect"
	"socket.py" -> "csock.setblocking"
	"socket.py" -> "lsock.accept"
	"socket.py" -> "csock.close"
	"socket.py" -> "lsock.close"
	"socket.py" -> "__all__.append"
	"socket.py" -> ValueError
	"socket.py" -> "self._checkClosed"
	"socket.py" -> "self._checkReadable"
	"socket.py" -> OSError
	"socket.py" -> "self._sock.recv_into"
	"socket.py" -> "self._checkClosed"
	"socket.py" -> "self._checkWritable"
	"socket.py" -> "self._sock.send"
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> super
	"socket.py" -> "self._checkClosed"
	"socket.py" -> "self._sock.fileno"
	"socket.py" -> "self.fileno"
	"socket.py" -> "self._sock._decref_socketios"
	"socket.py" -> "name.strip"
	"socket.py" -> gethostname
	"socket.py" -> gethostbyaddr
	"socket.py" -> "aliases.insert"
	"socket.py" -> object
	"socket.py" -> socket
	"socket.py" -> "sock.settimeout"
	"socket.py" -> "sock.bind"
	"socket.py" -> "sock.connect"
	"socket.py" -> "exceptions.clear"
	"socket.py" -> "exceptions.clear"
	"socket.py" -> "exceptions.append"
	"socket.py" -> "sock.close"
	"socket.py" -> len
	"socket.py" -> ExceptionGroup
	"socket.py" -> "exceptions.clear"
	"socket.py" -> error
	"socket.py" -> hasattr
	"socket.py" -> hasattr
	"socket.py" -> socket
	"socket.py" -> "sock.setsockopt"
	"socket.py" -> hasattr
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> socket
	"socket.py" -> hasattr
	"socket.py" -> "sock.setsockopt"
	"socket.py" -> "sock.setsockopt"
	"socket.py" -> "sock.setsockopt"
	"socket.py" -> hasattr
	"socket.py" -> hasattr
	"socket.py" -> "sock.setsockopt"
	"socket.py" -> "sock.bind"
	"socket.py" -> error
	"socket.py" -> "sock.listen"
	"socket.py" -> "sock.listen"
	"socket.py" -> "sock.close"
	"socket.py" -> "addrlist.append"
	"selectors.py" -> isinstance
	"selectors.py" -> int
	"selectors.py" -> "fileobj.fileno"
	"selectors.py" -> ValueError
	"selectors.py" -> format
	"selectors.py" -> ValueError
	"selectors.py" -> format
	"selectors.py" -> len
	"selectors.py" -> "self._selector._fileobj_lookup"
	"selectors.py" -> KeyError
	"selectors.py" -> format
	"selectors.py" -> iter
	"selectors.py" -> "self.unregister"
	"selectors.py" -> "self.register"
	"selectors.py" -> "self.get_map"
	"selectors.py" -> RuntimeError
	"selectors.py" -> KeyError
	"selectors.py" -> format
	"selectors.py" -> "self.close"
	"selectors.py" -> _SelectorMapping
	"selectors.py" -> "self._fd_to_key.values"
	"selectors.py" -> ValueError
	"selectors.py" -> format
	"selectors.py" -> SelectorKey
	"selectors.py" -> "self._fileobj_lookup"
	"selectors.py" -> KeyError
	"selectors.py" -> format
	"selectors.py" -> "self._fd_to_key.pop"
	"selectors.py" -> "self._fileobj_lookup"
	"selectors.py" -> KeyError
	"selectors.py" -> format
	"selectors.py" -> "self._fileobj_lookup"
	"selectors.py" -> KeyError
	"selectors.py" -> format
	"selectors.py" -> "self.unregister"
	"selectors.py" -> "self.register"
	"selectors.py" -> "key._replace"
	"selectors.py" -> "self._fd_to_key.clear"
	"selectors.py" -> super
	"selectors.py" -> set
	"selectors.py" -> set
	"selectors.py" -> super
	"selectors.py" -> "self._readers.add"
	"selectors.py" -> "self._writers.add"
	"selectors.py" -> super
	"selectors.py" -> "self._readers.discard"
	"selectors.py" -> "self._writers.discard"
	"selectors.py" -> max
	"selectors.py" -> "self._select"
	"selectors.py" -> set
	"selectors.py" -> set
	"selectors.py" -> "self._key_from_fd"
	"selectors.py" -> "ready.append"
	"selectors.py" -> super
	"selectors.py" -> "self._selector_cls"
	"selectors.py" -> super
	"selectors.py" -> "self._selector.register"
	"selectors.py" -> super
	"selectors.py" -> super
	"selectors.py" -> "self._selector.unregister"
	"selectors.py" -> "self._fileobj_lookup"
	"selectors.py" -> KeyError
	"selectors.py" -> "self._selector.modify"
	"selectors.py" -> super
	"selectors.py" -> "key._replace"
	"selectors.py" -> "self._selector.poll"
	"selectors.py" -> "self._key_from_fd"
	"selectors.py" -> "ready.append"
	"selectors.py" -> hasattr
	"selectors.py" -> hasattr
	"selectors.py" -> "self._selector.fileno"
	"selectors.py" -> max
	"selectors.py" -> len
	"selectors.py" -> "self._selector.poll"
	"selectors.py" -> "self._key_from_fd"
	"selectors.py" -> "ready.append"
	"selectors.py" -> "self._selector.close"
	"selectors.py" -> super
	"selectors.py" -> hasattr
	"selectors.py" -> "self._selector.fileno"
	"selectors.py" -> "self._selector.close"
	"selectors.py" -> super
	"selectors.py" -> hasattr
	"selectors.py" -> super
	"selectors.py" -> "self._selector.fileno"
	"selectors.py" -> super
	"selectors.py" -> "self._selector.control"
	"selectors.py" -> "self._selector.control"
	"selectors.py" -> super
	"selectors.py" -> super
	"selectors.py" -> "self._selector.control"
	"selectors.py" -> "self._selector.control"
	"selectors.py" -> max
	"selectors.py" -> max
	"selectors.py" -> len
	"selectors.py" -> "self._selector.control"
	"selectors.py" -> "self._key_from_fd"
	"selectors.py" -> "ready.append"
	"selectors.py" -> "self._selector.close"
	"selectors.py" -> super
	"selectors.py" -> getattr
	"selectors.py" -> selector
	"selectors.py" -> "selector_obj.poll"
	"selectors.py" -> "selector_obj.close"
	"random.py" -> "self.seed"
	"random.py" -> isinstance
	"random.py" -> isinstance
	"random.py" -> "a.decode"
	"random.py" -> ord
	"random.py" -> map
	"random.py" -> len
	"random.py" -> isinstance
	"random.py" -> isinstance
	"random.py" -> "a.encode"
	"random.py" -> "int.from_bytes"
	"random.py" -> digest
	"random.py" -> isinstance
	"random.py" -> type
	"random.py" -> TypeError
	"random.py" -> super
	"random.py" -> super
	"random.py" -> super
	"random.py" -> tuple
	"random.py" -> super
	"random.py" -> ValueError
	"random.py" -> "self.getstate"
	"random.py" -> "self.setstate"
	"random.py" -> "self.getstate"
	"random.py" -> "n.bit_length"
	"random.py" -> to_bytes
	"random.py" -> "self.getrandbits"
	"random.py" -> int
	"random.py" -> ValueError
	"random.py" -> TypeError
	"random.py" -> "self._randbelow"
	"random.py" -> ValueError
	"random.py" -> int
	"random.py" -> ValueError
	"random.py" -> int
	"random.py" -> ValueError
	"random.py" -> "self._randbelow"
	"random.py" -> ValueError
	"random.py" -> ValueError
	"random.py" -> ValueError
	"random.py" -> "self._randbelow"
	"random.py" -> "self.randrange"
	"random.py" -> len
	"random.py" -> IndexError
	"random.py" -> "self._randbelow"
	"random.py" -> len
	"random.py" -> reversed
	"random.py" -> range
	"random.py" -> len
	"random.py" -> randbelow
	"random.py" -> isinstance
	"random.py" -> TypeError
	"random.py" -> len
	"random.py" -> list
	"random.py" -> _accumulate
	"random.py" -> len
	"random.py" -> ValueError
	"random.py" -> "cum_counts.pop"
	"random.py" -> isinstance
	"random.py" -> TypeError
	"random.py" -> ValueError
	"random.py" -> "self.sample"
	"random.py" -> range
	"random.py" -> bisect
	"random.py" -> ValueError
	"random.py" -> list
	"random.py" -> range
	"random.py" -> randbelow
	"random.py" -> set
	"random.py" -> range
	"random.py" -> randbelow
	"random.py" -> randbelow
	"random.py" -> selected_add
	"random.py" -> len
	"random.py" -> floor
	"random.py" -> _repeat
	"random.py" -> list
	"random.py" -> _accumulate
	"random.py" -> isinstance
	"random.py" -> TypeError
	"random.py" -> TypeError
	"random.py" -> len
	"random.py" -> ValueError
	"random.py" -> ValueError
	"random.py" -> ValueError
	"random.py" -> bisect
	"random.py" -> _repeat
	"random.py" -> "self.random"
	"random.py" -> "self.random"
	"random.py" -> "self.normalvariate"
	"random.py" -> "self.random"
	"random.py" -> ValueError
	"random.py" -> "self.gammavariate"
	"random.py" -> "self.gammavariate"
	"random.py" -> "self.random"
	"random.py" -> "self.random"
	"random.py" -> "int.from_bytes"
	"random.py" -> ValueError
	"random.py" -> "int.from_bytes"
	"random.py" -> NotImplementedError
	"random.py" -> Random
	"random.py" -> perf_counter
	"random.py" -> func
	"random.py" -> _repeat
	"random.py" -> perf_counter
	"random.py" -> min
	"random.py" -> max
	"random.py" -> print
	"random.py" -> print
	"random.py" -> hasattr
	"hashlib.py" -> set
	"hashlib.py" -> set
	"hashlib.py" -> "cache.get"
	"hashlib.py" -> "cache.get"
	"hashlib.py" -> ValueError
	"hashlib.py" -> getattr
	"hashlib.py" -> f
	"hashlib.py" -> <unknown_function>
	"hashlib.py" -> <unknown_function>
	"hashlib.py" -> <unknown_function>
	"hashlib.py" -> "algorithms_available.union"
	"hashlib.py" -> bytes
	"hashlib.py" -> range
	"hashlib.py" -> bytes
	"hashlib.py" -> range
	"hashlib.py" -> isinstance
	"hashlib.py" -> TypeError
	"hashlib.py" -> isinstance
	"hashlib.py" -> bytes
	"hashlib.py" -> memoryview
	"hashlib.py" -> isinstance
	"hashlib.py" -> bytes
	"hashlib.py" -> memoryview
	"hashlib.py" -> new
	"hashlib.py" -> new
	"hashlib.py" -> getattr
	"hashlib.py" -> len
	"hashlib.py" -> digest
	"hashlib.py" -> new
	"hashlib.py" -> len
	"hashlib.py" -> "inner.update"
	"hashlib.py" -> "password.translate"
	"hashlib.py" -> "outer.update"
	"hashlib.py" -> "password.translate"
	"hashlib.py" -> "inner.copy"
	"hashlib.py" -> "outer.copy"
	"hashlib.py" -> "icpy.update"
	"hashlib.py" -> "ocpy.update"
	"hashlib.py" -> "icpy.digest"
	"hashlib.py" -> "ocpy.digest"
	"hashlib.py" -> ValueError
	"hashlib.py" -> ValueError
	"hashlib.py" -> len
	"hashlib.py" -> "loop.to_bytes"
	"hashlib.py" -> from_bytes
	"hashlib.py" -> range
	"hashlib.py" -> from_bytes
	"hashlib.py" -> "rkey.to_bytes"
	"hashlib.py" -> isinstance
	"hashlib.py" -> new
	"hashlib.py" -> digest
	"hashlib.py" -> hasattr
	"hashlib.py" -> "digestobj.update"
	"hashlib.py" -> "fileobj.getbuffer"
	"hashlib.py" -> hasattr
	"hashlib.py" -> hasattr
	"hashlib.py" -> "fileobj.readable"
	"hashlib.py" -> ValueError
	"hashlib.py" -> bytearray
	"hashlib.py" -> memoryview
	"hashlib.py" -> "fileobj.readinto"
	"hashlib.py" -> "digestobj.update"
	"hashlib.py" -> globals
	"hashlib.py" -> __get_hash
	"__init__.py" -> "time.time"
	"__init__.py" -> "_nameToLevel.copy"
	"__init__.py" -> "_levelToName.get"
	"__init__.py" -> "_nameToLevel.get"
	"__init__.py" -> hasattr
	"__init__.py" -> "sys._getframe"
	"__init__.py" -> "sys.exc_info"
	"__init__.py" -> isinstance
	"__init__.py" -> str
	"__init__.py" -> ValueError
	"__init__.py" -> TypeError
	"__init__.py" -> "_lock.acquire"
	"__init__.py" -> "_lock.release"
	"__init__.py" -> hasattr
	"__init__.py" -> "_at_fork_reinit_lock_weakset.add"
	"__init__.py" -> "handler._at_fork_reinit"
	"__init__.py" -> "_lock._at_fork_reinit"
	"__init__.py" -> "time.time"
	"__init__.py" -> len
	"__init__.py" -> isinstance
	"__init__.py" -> int
	"__init__.py" -> int
	"__init__.py" -> "sys.modules.get"
	"__init__.py" -> "mp.current_process"
	"__init__.py" -> hasattr
	"__init__.py" -> str
	"__init__.py" -> _logRecordFactory
	"__init__.py" -> "rv.__dict__.update"
	"__init__.py" -> "self._fmt.find"
	"__init__.py" -> "self.validation_pattern.search"
	"__init__.py" -> ValueError
	"__init__.py" -> "self._format"
	"__init__.py" -> ValueError
	"__init__.py" -> "self._fmt.format"
	"__init__.py" -> set
	"__init__.py" -> "_str_formatter.parse"
	"__init__.py" -> "self.field_spec.match"
	"__init__.py" -> ValueError
	"__init__.py" -> "fields.add"
	"__init__.py" -> ValueError
	"__init__.py" -> "self.fmt_spec.match"
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> super
	"__init__.py" -> "fmt.find"
	"__init__.py" -> "fmt.find"
	"__init__.py" -> set
	"__init__.py" -> "pattern.finditer"
	"__init__.py" -> "m.groupdict"
	"__init__.py" -> "fields.add"
	"__init__.py" -> "fields.add"
	"__init__.py" -> "m.group"
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> "self._tpl.substitute"
	"__init__.py" -> ValueError
	"__init__.py" -> join
	"__init__.py" -> "_STYLES.keys"
	"__init__.py" -> <unknown_function>
	"__init__.py" -> "self._style.validate"
	"__init__.py" -> "self.converter"
	"__init__.py" -> "time.strftime"
	"__init__.py" -> "time.strftime"
	"__init__.py" -> "sio.getvalue"
	"__init__.py" -> "sio.close"
	"__init__.py" -> "self._style.usesTime"
	"__init__.py" -> "self._style.format"
	"__init__.py" -> "record.getMessage"
	"__init__.py" -> "self.usesTime"
	"__init__.py" -> "self.formatTime"
	"__init__.py" -> "self.formatMessage"
	"__init__.py" -> "self.formatException"
	"__init__.py" -> "self.formatStack"
	"__init__.py" -> Formatter
	"__init__.py" -> len
	"__init__.py" -> "self.formatHeader"
	"__init__.py" -> "self.linefmt.format"
	"__init__.py" -> "self.formatFooter"
	"__init__.py" -> len
	"__init__.py" -> "record.name.find"
	"__init__.py" -> "self.filters.append"
	"__init__.py" -> "self.filters.remove"
	"__init__.py" -> hasattr
	"__init__.py" -> "f.filter"
	"__init__.py" -> f
	"__init__.py" -> "handlers.remove"
	"__init__.py" -> "_handlerList.append"
	"__init__.py" -> "Filterer.__init__"
	"__init__.py" -> "self.createLock"
	"__init__.py" -> property
	"__init__.py" -> "self.lock._at_fork_reinit"
	"__init__.py" -> "self.lock.acquire"
	"__init__.py" -> "self.lock.release"
	"__init__.py" -> "fmt.format"
	"__init__.py" -> NotImplementedError
	"__init__.py" -> "self.filter"
	"__init__.py" -> "self.acquire"
	"__init__.py" -> "self.emit"
	"__init__.py" -> "self.release"
	"__init__.py" -> "sys.exc_info"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> "Handler.__init__"
	"__init__.py" -> "self.acquire"
	"__init__.py" -> hasattr
	"__init__.py" -> "self.stream.flush"
	"__init__.py" -> "self.release"
	"__init__.py" -> "self.format"
	"__init__.py" -> "stream.write"
	"__init__.py" -> "self.flush"
	"__init__.py" -> "self.handleError"
	"__init__.py" -> "self.acquire"
	"__init__.py" -> "self.flush"
	"__init__.py" -> "self.release"
	"__init__.py" -> getattr
	"__init__.py" -> str
	"__init__.py" -> classmethod
	"__init__.py" -> "Handler.__init__"
	"__init__.py" -> "StreamHandler.__init__"
	"__init__.py" -> "self._open"
	"__init__.py" -> "self.acquire"
	"__init__.py" -> "self.flush"
	"__init__.py" -> hasattr
	"__init__.py" -> "stream.close"
	"__init__.py" -> "StreamHandler.close"
	"__init__.py" -> "self.release"
	"__init__.py" -> open_func
	"__init__.py" -> "self._open"
	"__init__.py" -> "StreamHandler.emit"
	"__init__.py" -> "Handler.__init__"
	"__init__.py" -> _StderrHandler
	"__init__.py" -> issubclass
	"__init__.py" -> TypeError
	"__init__.py" -> isinstance
	"__init__.py" -> TypeError
	"__init__.py" -> isinstance
	"__init__.py" -> <unknown_function>
	"__init__.py" -> "self._fixupChildren"
	"__init__.py" -> "self._fixupParents"
	"__init__.py" -> <unknown_function>
	"__init__.py" -> "self._fixupParents"
	"__init__.py" -> issubclass
	"__init__.py" -> TypeError
	"__init__.py" -> "name.rfind"
	"__init__.py" -> PlaceHolder
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> "obj.append"
	"__init__.py" -> "name.rfind"
	"__init__.py" -> len
	"__init__.py" -> "ph.loggerMap.keys"
	"__init__.py" -> "self.loggerDict.values"
	"__init__.py" -> isinstance
	"__init__.py" -> "logger._cache.clear"
	"__init__.py" -> "self.root._cache.clear"
	"__init__.py" -> "Filterer.__init__"
	"__init__.py" -> "self.manager._clear_cache"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "self.warning"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "self.error"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "self.critical"
	"__init__.py" -> isinstance
	"__init__.py" -> TypeError
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "sio.write"
	"__init__.py" -> "sio.getvalue"
	"__init__.py" -> _logRecordFactory
	"__init__.py" -> KeyError
	"__init__.py" -> "self.findCaller"
	"__init__.py" -> isinstance
	"__init__.py" -> type
	"__init__.py" -> isinstance
	"__init__.py" -> "sys.exc_info"
	"__init__.py" -> "self.makeRecord"
	"__init__.py" -> "self.handle"
	"__init__.py" -> "self.filter"
	"__init__.py" -> "self.callHandlers"
	"__init__.py" -> "self.handlers.append"
	"__init__.py" -> "self.handlers.remove"
	"__init__.py" -> "hdlr.handle"
	"__init__.py" -> "lastResort.handle"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> "self.getEffectiveLevel"
	"__init__.py" -> join
	"__init__.py" -> "self.manager.getLogger"
	"__init__.py" -> "self.getEffectiveLevel"
	"__init__.py" -> "Logger.__init__"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.warning"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self.process"
	"__init__.py" -> "self.logger.log"
	"__init__.py" -> "self.logger.isEnabledFor"
	"__init__.py" -> "self.logger.setLevel"
	"__init__.py" -> "self.logger.getEffectiveLevel"
	"__init__.py" -> "self.logger.hasHandlers"
	"__init__.py" -> "self.logger._log"
	"__init__.py" -> "logger.getEffectiveLevel"
	"__init__.py" -> classmethod
	"__init__.py" -> RootLogger
	"__init__.py" -> Manager
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "root.removeHandler"
	"__init__.py" -> "h.close"
	"__init__.py" -> len
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> FileHandler
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> StreamHandler
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> ValueError
	"__init__.py" -> join
	"__init__.py" -> "_STYLES.keys"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> Formatter
	"__init__.py" -> "h.setFormatter"
	"__init__.py" -> "root.addHandler"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "root.setLevel"
	"__init__.py" -> join
	"__init__.py" -> "kwargs.keys"
	"__init__.py" -> ValueError
	"__init__.py" -> isinstance
	"__init__.py" -> "Logger.manager.getLogger"
	"__init__.py" -> len
	"__init__.py" -> "root.critical"
	"__init__.py" -> len
	"__init__.py" -> "root.error"
	"__init__.py" -> len
	"__init__.py" -> "root.warning"
	"__init__.py" -> len
	"__init__.py" -> "root.info"
	"__init__.py" -> len
	"__init__.py" -> "root.debug"
	"__init__.py" -> len
	"__init__.py" -> "root.log"
	"__init__.py" -> "root.manager._clear_cache"
	"__init__.py" -> reversed
	"__init__.py" -> wr
	"__init__.py" -> "h.acquire"
	"__init__.py" -> "h.flush"
	"__init__.py" -> "h.close"
	"__init__.py" -> "h.release"
	"__init__.py" -> "atexit.register"
	"__init__.py" -> _warnings_showwarning
	"__init__.py" -> "logger.addHandler"
	"__init__.py" -> NullHandler
	"__init__.py" -> "logger.warning"
	"__init__.py" -> str
	"statistics.py" -> set
	"statistics.py" -> groupby
	"statistics.py" -> types_add
	"statistics.py" -> map
	"statistics.py" -> partials_get
	"statistics.py" -> sum
	"statistics.py" -> "partials.items"
	"statistics.py" -> set
	"statistics.py" -> groupby
	"statistics.py" -> types_add
	"statistics.py" -> map
	"statistics.py" -> sum
	"statistics.py" -> "sx_partials.items"
	"statistics.py" -> sum
	"statistics.py" -> "sxx_partials.items"
	"statistics.py" -> "x.is_finite"
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> TypeError
	"statistics.py" -> "x.as_integer_ratio"
	"statistics.py" -> type
	"statistics.py" -> TypeError
	"statistics.py" -> type
	"statistics.py" -> issubclass
	"statistics.py" -> T
	"statistics.py" -> issubclass
	"statistics.py" -> T
	"statistics.py" -> T
	"statistics.py" -> StatisticsError
	"statistics.py" -> "n.bit_length"
	"statistics.py" -> "m.bit_length"
	"statistics.py" -> "root.as_integer_ratio"
	"statistics.py" -> "root.next_plus"
	"statistics.py" -> "plus.as_integer_ratio"
	"statistics.py" -> "root.next_minus"
	"statistics.py" -> "minus.as_integer_ratio"
	"statistics.py" -> StatisticsError
	"statistics.py" -> len
	"statistics.py" -> enumerate
	"statistics.py" -> StatisticsError
	"statistics.py" -> len
	"statistics.py" -> list
	"statistics.py" -> len
	"statistics.py" -> map
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> map
	"statistics.py" -> StatisticsError
	"statistics.py" -> iter
	"statistics.py" -> list
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> isinstance
	"statistics.py" -> StatisticsError
	"statistics.py" -> TypeError
	"statistics.py" -> repeat
	"statistics.py" -> iter
	"statistics.py" -> list
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> zip
	"statistics.py" -> StatisticsError
	"statistics.py" -> sorted
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> sorted
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> sorted
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> sorted
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> float
	"statistics.py" -> float
	"statistics.py" -> TypeError
	"statistics.py" -> most_common
	"statistics.py" -> iter
	"statistics.py" -> StatisticsError
	"statistics.py" -> iter
	"statistics.py" -> max
	"statistics.py" -> "counts.values"
	"statistics.py" -> "counts.items"
	"statistics.py" -> StatisticsError
	"statistics.py" -> sorted
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> range
	"statistics.py" -> divmod
	"statistics.py" -> "result.append"
	"statistics.py" -> range
	"statistics.py" -> "result.append"
	"statistics.py" -> ValueError
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> issubclass
	"statistics.py" -> StatisticsError
	"statistics.py" -> issubclass
	"statistics.py" -> StatisticsError
	"statistics.py" -> float
	"statistics.py" -> float
	"statistics.py" -> float
	"statistics.py" -> float
	"statistics.py" -> len
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> zip
	"statistics.py" -> len
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> zip
	"statistics.py" -> StatisticsError
	"statistics.py" -> len
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> zip
	"statistics.py" -> zip
	"statistics.py" -> StatisticsError
	"statistics.py" -> LinearRegression
	"statistics.py" -> StatisticsError
	"statistics.py" -> float
	"statistics.py" -> float
	"statistics.py" -> cls
	"statistics.py" -> gauss
	"statistics.py" -> range
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> "self.inv_cdf"
	"statistics.py" -> range
	"statistics.py" -> isinstance
	"statistics.py" -> TypeError
	"statistics.py" -> StatisticsError
	"statistics.py" -> "Y.cdf"
	"statistics.py" -> "X.cdf"
	"statistics.py" -> "Y.cdf"
	"statistics.py" -> "X.cdf"
	"statistics.py" -> StatisticsError
	"statistics.py" -> isinstance
	"statistics.py" -> NormalDist
	"statistics.py" -> NormalDist
	"statistics.py" -> isinstance
	"statistics.py" -> NormalDist
	"statistics.py" -> NormalDist
	"statistics.py" -> NormalDist
	"statistics.py" -> NormalDist
	"statistics.py" -> NormalDist
	"statistics.py" -> NormalDist
	"statistics.py" -> isinstance
	"statistics.py" -> hash
	"statistics.py" -> type
	"bisect.py" -> key
	"bisect.py" -> "a.insert"
	"bisect.py" -> ValueError
	"bisect.py" -> len
	"bisect.py" -> key
	"bisect.py" -> key
	"bisect.py" -> "a.insert"
	"bisect.py" -> ValueError
	"bisect.py" -> len
	"bisect.py" -> key
	"fractions.py" -> super
	"fractions.py" -> type
	"fractions.py" -> isinstance
	"fractions.py" -> isinstance
	"fractions.py" -> "numerator.as_integer_ratio"
	"fractions.py" -> isinstance
	"fractions.py" -> "_RATIONAL_FORMAT.match"
	"fractions.py" -> ValueError
	"fractions.py" -> int
	"fractions.py" -> "m.group"
	"fractions.py" -> "m.group"
	"fractions.py" -> int
	"fractions.py" -> "m.group"
	"fractions.py" -> "decimal.replace"
	"fractions.py" -> len
	"fractions.py" -> int
	"fractions.py" -> "m.group"
	"fractions.py" -> int
	"fractions.py" -> "m.group"
	"fractions.py" -> TypeError
	"fractions.py" -> type
	"fractions.py" -> type
	"fractions.py" -> isinstance
	"fractions.py" -> isinstance
	"fractions.py" -> TypeError
	"fractions.py" -> ZeroDivisionError
	"fractions.py" -> isinstance
	"fractions.py" -> cls
	"fractions.py" -> isinstance
	"fractions.py" -> TypeError
	"fractions.py" -> type
	"fractions.py" -> cls
	"fractions.py" -> "f.as_integer_ratio"
	"fractions.py" -> isinstance
	"fractions.py" -> int
	"fractions.py" -> isinstance
	"fractions.py" -> TypeError
	"fractions.py" -> type
	"fractions.py" -> cls
	"fractions.py" -> "dec.as_integer_ratio"
	"fractions.py" -> ValueError
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> abs
	"fractions.py" -> abs
	"fractions.py" -> str
	"fractions.py" -> isinstance
	"fractions.py" -> monomorphic_operator
	"fractions.py" -> isinstance
	"fractions.py" -> fallback_operator
	"fractions.py" -> float
	"fractions.py" -> isinstance
	"fractions.py" -> fallback_operator
	"fractions.py" -> complex
	"fractions.py" -> isinstance
	"fractions.py" -> monomorphic_operator
	"fractions.py" -> isinstance
	"fractions.py" -> fallback_operator
	"fractions.py" -> float
	"fractions.py" -> float
	"fractions.py" -> isinstance
	"fractions.py" -> fallback_operator
	"fractions.py" -> complex
	"fractions.py" -> complex
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> divmod
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> isinstance
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> float
	"fractions.py" -> float
	"fractions.py" -> float
	"fractions.py" -> isinstance
	"fractions.py" -> Fraction
	"fractions.py" -> float
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> abs
	"fractions.py" -> _index
	"fractions.py" -> _index
	"fractions.py" -> divmod
	"fractions.py" -> abs
	"fractions.py" -> Fraction
	"fractions.py" -> round
	"fractions.py" -> Fraction
	"fractions.py" -> round
	"fractions.py" -> pow
	"fractions.py" -> hash
	"fractions.py" -> hash
	"fractions.py" -> abs
	"fractions.py" -> type
	"fractions.py" -> isinstance
	"fractions.py" -> isinstance
	"fractions.py" -> isinstance
	"fractions.py" -> "a.from_float"
	"fractions.py" -> isinstance
	"fractions.py" -> op
	"fractions.py" -> isinstance
	"fractions.py" -> op
	"fractions.py" -> op
	"fractions.py" -> "self.from_float"
	"fractions.py" -> "a._richcmp"
	"fractions.py" -> "a._richcmp"
	"fractions.py" -> "a._richcmp"
	"fractions.py" -> "a._richcmp"
	"fractions.py" -> bool
	"fractions.py" -> type
	"fractions.py" -> "self.__class__"
	"fractions.py" -> type
	"fractions.py" -> "self.__class__"
	"platform.py" -> "_component_re.split"
	"platform.py" -> int
	"platform.py" -> "_ver_stages.get"
	"platform.py" -> "result.extend"
	"platform.py" -> "ver.split"
	"platform.py" -> len
	"platform.py" -> tuple
	"platform.py" -> open
	"platform.py" -> "f.read"
	"platform.py" -> len
	"platform.py" -> "_libc_search.search"
	"platform.py" -> "m.end"
	"platform.py" -> len
	"platform.py" -> "f.read"
	"platform.py" -> max
	"platform.py" -> len
	"platform.py" -> "s.decode"
	"platform.py" -> "m.groups"
	"platform.py" -> V
	"platform.py" -> V
	"platform.py" -> V
	"platform.py" -> V
	"platform.py" -> len
	"platform.py" -> "m.end"
	"platform.py" -> "version.split"
	"platform.py" -> "l.append"
	"platform.py" -> list
	"platform.py" -> map
	"platform.py" -> map
	"platform.py" -> join
	"platform.py" -> "info.strip"
	"platform.py" -> "_ver_output.match"
	"platform.py" -> "m.groups"
	"platform.py" -> "winreg.OpenKeyEx"
	"platform.py" -> "winreg.QueryValueEx"
	"platform.py" -> getwindowsversion
	"platform.py" -> map
	"platform.py" -> split
	"platform.py" -> format
	"platform.py" -> "_WIN32_CLIENT_RELEASES.get"
	"platform.py" -> "_WIN32_CLIENT_RELEASES.get"
	"platform.py" -> format
	"platform.py" -> getattr
	"platform.py" -> "_WIN32_SERVER_RELEASES.get"
	"platform.py" -> "_WIN32_SERVER_RELEASES.get"
	"platform.py" -> "winreg.OpenKeyEx"
	"platform.py" -> "winreg.QueryValueEx"
	"platform.py" -> open
	"platform.py" -> "System.getProperty"
	"platform.py" -> "release.split"
	"platform.py" -> int
	"platform.py" -> str
	"platform.py" -> join
	"platform.py" -> join
	"platform.py" -> "x.strip"
	"platform.py" -> filter
	"platform.py" -> dict
	"platform.py" -> "output.decode"
	"platform.py" -> str
	"platform.py" -> getattr
	"platform.py" -> func
	"platform.py" -> "vms_lib.getsyi"
	"platform.py" -> strip
	"platform.py" -> "_Processor.get"
	"platform.py" -> "itertools.chain"
	"platform.py" -> super
	"platform.py" -> len
	"platform.py" -> "cls.__new__"
	"platform.py" -> len
	"platform.py" -> len
	"platform.py" -> TypeError
	"platform.py" -> tuple
	"platform.py" -> len
	"platform.py" -> tuple
	"platform.py" -> iter
	"platform.py" -> tuple
	"platform.py" -> len
	"platform.py" -> any
	"platform.py" -> join
	"platform.py" -> uname_result
	"platform.py" -> map
	"platform.py" -> "_sys_version_cache.get"
	"platform.py" -> "sys_version.startswith"
	"platform.py" -> "_ironpython_sys_version_parser.match"
	"platform.py" -> "_ironpython26_sys_version_parser.match"
	"platform.py" -> ValueError
	"platform.py" -> repr
	"platform.py" -> "match.groups"
	"platform.py" -> "sys.platform.startswith"
	"platform.py" -> "_sys_version_parser.match"
	"platform.py" -> ValueError
	"platform.py" -> repr
	"platform.py" -> "match.groups"
	"platform.py" -> "_pypy_sys_version_parser.match"
	"platform.py" -> ValueError
	"platform.py" -> repr
	"platform.py" -> "match.groups"
	"platform.py" -> "_sys_version_parser.match"
	"platform.py" -> ValueError
	"platform.py" -> repr
	"platform.py" -> "match.groups"
	"platform.py" -> hasattr
	"platform.py" -> hasattr
	"platform.py" -> "version.split"
	"platform.py" -> len
	"platform.py" -> "l.append"
	"platform.py" -> join
	"platform.py" -> tuple
	"platform.py" -> split
	"platform.py" -> "_platform_cache.get"
	"platform.py" -> "_os_release_line.match"
	"platform.py" -> "mo.group"
	"platform.py" -> "_os_release_unescape.sub"
	"platform.py" -> "mo.group"
	"platform.py" -> open
	"platform.py" -> OSError
	"platform.py" -> join
	"platform.py" -> "_os_release_cache.copy"
	"platform.py" -> print
	"platform.py" -> "sys.exit"
	"plistlib.py" -> update
	"plistlib.py" -> globals
	"plistlib.py" -> isinstance
	"plistlib.py" -> TypeError
	"plistlib.py" -> ValueError
	"plistlib.py" -> ValueError
	"plistlib.py" -> repr
	"plistlib.py" -> isinstance
	"plistlib.py" -> hash
	"plistlib.py" -> range
	"plistlib.py" -> len
	"plistlib.py" -> "pieces.append"
	"plistlib.py" -> join
	"plistlib.py" -> isinstance
	"plistlib.py" -> "s.encode"
	"plistlib.py" -> groupdict
	"plistlib.py" -> "_dateParser.match"
	"plistlib.py" -> "lst.append"
	"plistlib.py" -> int
	"plistlib.py" -> "_controlCharPat.search"
	"plistlib.py" -> ValueError
	"plistlib.py" -> "text.replace"
	"plistlib.py" -> "text.replace"
	"plistlib.py" -> "text.replace"
	"plistlib.py" -> "text.replace"
	"plistlib.py" -> "text.replace"
	"plistlib.py" -> "self.parser.ParseFile"
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> getattr
	"plistlib.py" -> handler
	"plistlib.py" -> getattr
	"plistlib.py" -> handler
	"plistlib.py" -> "self.data.append"
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> ValueError
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> ValueError
	"plistlib.py" -> append
	"plistlib.py" -> join
	"plistlib.py" -> "self._dict_type"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.stack.append"
	"plistlib.py" -> ValueError
	"plistlib.py" -> "self.stack.pop"
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> ValueError
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.stack.append"
	"plistlib.py" -> "self.stack.pop"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "raw.startswith"
	"plistlib.py" -> "raw.startswith"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> int
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> int
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> float
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "self.stack.append"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> "self.stack.pop"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "line.encode"
	"plistlib.py" -> "self.file.write"
	"plistlib.py" -> "self.file.write"
	"plistlib.py" -> "self.file.write"
	"plistlib.py" -> "file.write"
	"plistlib.py" -> "_DumbXMLWriter.__init__"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> "self.write_value"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> OverflowError
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> repr
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.write_dict"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.write_bytes"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.write_array"
	"plistlib.py" -> TypeError
	"plistlib.py" -> type
	"plistlib.py" -> "self.begin_element"
	"plistlib.py" -> max
	"plistlib.py" -> len
	"plistlib.py" -> "self.indent.replace"
	"plistlib.py" -> split
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> "self.end_element"
	"plistlib.py" -> "self.begin_element"
	"plistlib.py" -> sorted
	"plistlib.py" -> "d.items"
	"plistlib.py" -> "d.items"
	"plistlib.py" -> isinstance
	"plistlib.py" -> TypeError
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> "self.write_value"
	"plistlib.py" -> "self.end_element"
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> "self.begin_element"
	"plistlib.py" -> "self.write_value"
	"plistlib.py" -> "self.end_element"
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> "header.startswith"
	"plistlib.py" -> "header.startswith"
	"plistlib.py" -> encode
	"plistlib.py" -> "start.decode"
	"plistlib.py" -> len
	"plistlib.py" -> "ValueError.__init__"
	"plistlib.py" -> object
	"plistlib.py" -> "self._fp.seek"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> len
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "self._fp.seek"
	"plistlib.py" -> "self._read_ints"
	"plistlib.py" -> "self._read_object"
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> len
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> tuple
	"plistlib.py" -> "int.from_bytes"
	"plistlib.py" -> range
	"plistlib.py" -> "self._read_ints"
	"plistlib.py" -> "self._fp.seek"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "int.from_bytes"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "self._get_size"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> len
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "self._get_size"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> len
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "data.decode"
	"plistlib.py" -> "self._get_size"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> len
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "data.decode"
	"plistlib.py" -> UID
	"plistlib.py" -> "int.from_bytes"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "self._get_size"
	"plistlib.py" -> "self._read_refs"
	"plistlib.py" -> "result.extend"
	"plistlib.py" -> "self._read_object"
	"plistlib.py" -> "self._get_size"
	"plistlib.py" -> "self._read_refs"
	"plistlib.py" -> "self._read_refs"
	"plistlib.py" -> "self._dict_type"
	"plistlib.py" -> zip
	"plistlib.py" -> "self._read_object"
	"plistlib.py" -> "self._read_object"
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "self._flatten"
	"plistlib.py" -> len
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._write_object"
	"plistlib.py" -> "self._getrefnum"
	"plistlib.py" -> "self._fp.tell"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> id
	"plistlib.py" -> len
	"plistlib.py" -> "self._objlist.append"
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> id
	"plistlib.py" -> isinstance
	"plistlib.py" -> "value.items"
	"plistlib.py" -> sorted
	"plistlib.py" -> isinstance
	"plistlib.py" -> TypeError
	"plistlib.py" -> "keys.append"
	"plistlib.py" -> "values.append"
	"plistlib.py" -> "itertools.chain"
	"plistlib.py" -> "self._flatten"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self._flatten"
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> id
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._getrefnum"
	"plistlib.py" -> "self._fp.tell"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> OverflowError
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "value.to_bytes"
	"plistlib.py" -> OverflowError
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> isinstance
	"plistlib.py" -> total_seconds
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self._write_size"
	"plistlib.py" -> len
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "value.encode"
	"plistlib.py" -> "self._write_size"
	"plistlib.py" -> len
	"plistlib.py" -> "value.encode"
	"plistlib.py" -> "self._write_size"
	"plistlib.py" -> len
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> isinstance
	"plistlib.py" -> ValueError
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> OverflowError
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self._getrefnum"
	"plistlib.py" -> len
	"plistlib.py" -> "self._write_size"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> isinstance
	"plistlib.py" -> sorted
	"plistlib.py" -> "value.items"
	"plistlib.py" -> "value.items"
	"plistlib.py" -> isinstance
	"plistlib.py" -> TypeError
	"plistlib.py" -> "keyRefs.append"
	"plistlib.py" -> "self._getrefnum"
	"plistlib.py" -> "valRefs.append"
	"plistlib.py" -> "self._getrefnum"
	"plistlib.py" -> len
	"plistlib.py" -> "self._write_size"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> TypeError
	"plistlib.py" -> dict
	"plistlib.py" -> dict
	"plistlib.py" -> "fp.read"
	"plistlib.py" -> "fp.seek"
	"plistlib.py" -> "_FORMATS.values"
	"plistlib.py" -> <unknown_function>
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> P
	"plistlib.py" -> "p.parse"
	"plistlib.py" -> ValueError
	"plistlib.py" -> <unknown_function>
	"plistlib.py" -> "writer.write"
	"plistlib.py" -> "fp.getvalue"
	"subprocess.py" -> "__all__.extend"
	"subprocess.py" -> "self.lpAttributeList.copy"
	"subprocess.py" -> list
	"subprocess.py" -> STARTUPINFO
	"subprocess.py" -> CloseHandle
	"subprocess.py" -> int
	"subprocess.py" -> ValueError
	"subprocess.py" -> int
	"subprocess.py" -> getattr
	"subprocess.py" -> hasattr
	"subprocess.py" -> "inst._internal_poll"
	"subprocess.py" -> "_active.remove"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "flag_opt_map.items"
	"subprocess.py" -> getattr
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> getattr
	"subprocess.py" -> "warnopts.remove"
	"subprocess.py" -> "warnopts.remove"
	"subprocess.py" -> "warnopts.remove"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "args.extend"
	"subprocess.py" -> "args.extend"
	"subprocess.py" -> "sys._getframe"
	"subprocess.py" -> Popen
	"subprocess.py" -> "p.wait"
	"subprocess.py" -> "p.kill"
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> CalledProcessError
	"subprocess.py" -> ValueError
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> format
	"subprocess.py" -> format
	"subprocess.py" -> "args.append"
	"subprocess.py" -> format
	"subprocess.py" -> "args.append"
	"subprocess.py" -> format
	"subprocess.py" -> format
	"subprocess.py" -> type
	"subprocess.py" -> join
	"subprocess.py" -> classmethod
	"subprocess.py" -> CalledProcessError
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> ValueError
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> ValueError
	"subprocess.py" -> Popen
	"subprocess.py" -> "process.communicate"
	"subprocess.py" -> "process.kill"
	"subprocess.py" -> "process.communicate"
	"subprocess.py" -> "process.wait"
	"subprocess.py" -> "process.kill"
	"subprocess.py" -> "process.poll"
	"subprocess.py" -> CalledProcessError
	"subprocess.py" -> CompletedProcess
	"subprocess.py" -> map
	"subprocess.py" -> "result.append"
	"subprocess.py" -> "result.append"
	"subprocess.py" -> "bs_buf.append"
	"subprocess.py" -> "result.append"
	"subprocess.py" -> len
	"subprocess.py" -> "result.append"
	"subprocess.py" -> "result.extend"
	"subprocess.py" -> "result.append"
	"subprocess.py" -> "result.extend"
	"subprocess.py" -> "result.extend"
	"subprocess.py" -> "result.append"
	"subprocess.py" -> join
	"subprocess.py" -> hasattr
	"subprocess.py" -> "ver.split"
	"subprocess.py" -> len
	"subprocess.py" -> tuple
	"subprocess.py" -> map
	"subprocess.py" -> split
	"subprocess.py" -> OSError
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> ValueError
	"subprocess.py" -> ValueError
	"subprocess.py" -> ValueError
	"subprocess.py" -> bool
	"subprocess.py" -> bool
	"subprocess.py" -> SubprocessError
	"subprocess.py" -> hasattr
	"subprocess.py" -> ValueError
	"subprocess.py" -> isinstance
	"subprocess.py" -> ValueError
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> format
	"subprocess.py" -> type
	"subprocess.py" -> ValueError
	"subprocess.py" -> hasattr
	"subprocess.py" -> ValueError
	"subprocess.py" -> isinstance
	"subprocess.py" -> ValueError
	"subprocess.py" -> isinstance
	"subprocess.py" -> ValueError
	"subprocess.py" -> "gids.append"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "gids.append"
	"subprocess.py" -> TypeError
	"subprocess.py" -> format
	"subprocess.py" -> type
	"subprocess.py" -> ValueError
	"subprocess.py" -> hasattr
	"subprocess.py" -> ValueError
	"subprocess.py" -> isinstance
	"subprocess.py" -> ValueError
	"subprocess.py" -> "pwd.getpwnam"
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> ValueError
	"subprocess.py" -> "self._get_handles"
	"subprocess.py" -> "msvcrt.open_osfhandle"
	"subprocess.py" -> "p2cwrite.Detach"
	"subprocess.py" -> "msvcrt.open_osfhandle"
	"subprocess.py" -> "c2pread.Detach"
	"subprocess.py" -> "msvcrt.open_osfhandle"
	"subprocess.py" -> "errread.Detach"
	"subprocess.py" -> "self._execute_child"
	"subprocess.py" -> filter
	"subprocess.py" -> "f.close"
	"subprocess.py" -> "to_close.append"
	"subprocess.py" -> "to_close.append"
	"subprocess.py" -> "to_close.append"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "to_close.append"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "fd.Close"
	"subprocess.py" -> len
	"subprocess.py" -> classmethod
	"subprocess.py" -> bool
	"subprocess.py" -> "data.decode"
	"subprocess.py" -> replace
	"subprocess.py" -> "data.replace"
	"subprocess.py" -> "self.stdout.close"
	"subprocess.py" -> "self.stderr.close"
	"subprocess.py" -> "self.stdin.close"
	"subprocess.py" -> "self._wait"
	"subprocess.py" -> "self.wait"
	"subprocess.py" -> _warn
	"subprocess.py" -> "self._internal_poll"
	"subprocess.py" -> "_active.append"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "self.stdin.write"
	"subprocess.py" -> "self.stdin.close"
	"subprocess.py" -> ValueError
	"subprocess.py" -> count
	"subprocess.py" -> "self._stdin_write"
	"subprocess.py" -> "self.stdout.read"
	"subprocess.py" -> "self.stdout.close"
	"subprocess.py" -> "self.stderr.read"
	"subprocess.py" -> "self.stderr.close"
	"subprocess.py" -> "self.wait"
	"subprocess.py" -> _time
	"subprocess.py" -> "self._communicate"
	"subprocess.py" -> min
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self._wait"
	"subprocess.py" -> "self.wait"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self._internal_poll"
	"subprocess.py" -> _time
	"subprocess.py" -> _time
	"subprocess.py" -> TimeoutExpired
	"subprocess.py" -> join
	"subprocess.py" -> join
	"subprocess.py" -> _time
	"subprocess.py" -> "self._wait"
	"subprocess.py" -> min
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self._wait"
	"subprocess.py" -> getattr
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "to_close.append"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "fd.Close"
	"subprocess.py" -> "self._on_error_fd_closer"
	"subprocess.py" -> "_winapi.GetStdHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.append"
	"subprocess.py" -> "_winapi.CloseHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "stdin.fileno"
	"subprocess.py" -> "self._make_inheritable"
	"subprocess.py" -> "_winapi.GetStdHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.append"
	"subprocess.py" -> "_winapi.CloseHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "stdout.fileno"
	"subprocess.py" -> "self._make_inheritable"
	"subprocess.py" -> "_winapi.GetStdHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.append"
	"subprocess.py" -> "_winapi.CloseHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "stderr.fileno"
	"subprocess.py" -> "self._make_inheritable"
	"subprocess.py" -> "_winapi.DuplicateHandle"
	"subprocess.py" -> "_winapi.GetCurrentProcess"
	"subprocess.py" -> "_winapi.GetCurrentProcess"
	"subprocess.py" -> Handle
	"subprocess.py" -> list
	"subprocess.py" -> "_winapi.GetFileType"
	"subprocess.py" -> isinstance
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> STARTUPINFO
	"subprocess.py" -> "startupinfo.copy"
	"subprocess.py" -> bool
	"subprocess.py" -> list
	"subprocess.py" -> "attribute_list.get"
	"subprocess.py" -> int
	"subprocess.py" -> int
	"subprocess.py" -> int
	"subprocess.py" -> "self._filter_handle_list"
	"subprocess.py" -> FileNotFoundError
	"subprocess.py" -> format
	"subprocess.py" -> "sys.audit"
	"subprocess.py" -> "_winapi.CreateProcess"
	"subprocess.py" -> int
	"subprocess.py" -> "self._close_pipe_fds"
	"subprocess.py" -> Handle
	"subprocess.py" -> "_winapi.CloseHandle"
	"subprocess.py" -> _WaitForSingleObject
	"subprocess.py" -> _GetExitCodeProcess
	"subprocess.py" -> int
	"subprocess.py" -> "_winapi.WaitForSingleObject"
	"subprocess.py" -> TimeoutExpired
	"subprocess.py" -> "_winapi.GetExitCodeProcess"
	"subprocess.py" -> "buffer.append"
	"subprocess.py" -> "fh.read"
	"subprocess.py" -> "fh.close"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "self.stdout_thread.start"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "self.stderr_thread.start"
	"subprocess.py" -> "self._stdin_write"
	"subprocess.py" -> "self.stdout_thread.join"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self.stdout_thread.is_alive"
	"subprocess.py" -> TimeoutExpired
	"subprocess.py" -> "self.stderr_thread.join"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self.stderr_thread.is_alive"
	"subprocess.py" -> TimeoutExpired
	"subprocess.py" -> "self.stdout.close"
	"subprocess.py" -> "self.stderr.close"
	"subprocess.py" -> "self.terminate"
	"subprocess.py" -> ValueError
	"subprocess.py" -> format
	"subprocess.py" -> "_winapi.TerminateProcess"
	"subprocess.py" -> "_winapi.GetExitCodeProcess"
	"subprocess.py" -> "self._on_error_fd_closer"
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "stdin.fileno"
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "stdout.fileno"
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "sys.__stdout__.fileno"
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "stderr.fileno"
	"subprocess.py" -> getattr
	"subprocess.py" -> "sigset.append"
	"subprocess.py" -> "file_actions.append"
	"subprocess.py" -> "file_actions.append"
	"subprocess.py" -> "self._close_pipe_fds"
	"subprocess.py" -> isinstance
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> list
	"subprocess.py" -> hasattr
	"subprocess.py" -> "sys.audit"
	"subprocess.py" -> "self._posix_spawn"
	"subprocess.py" -> "low_fds_to_close.append"
	"subprocess.py" -> "env.items"
	"subprocess.py" -> ValueError
	"subprocess.py" -> "env_list.append"
	"subprocess.py" -> tuple
	"subprocess.py" -> set
	"subprocess.py" -> "fds_to_keep.add"
	"subprocess.py" -> tuple
	"subprocess.py" -> sorted
	"subprocess.py" -> map
	"subprocess.py" -> "self._close_pipe_fds"
	"subprocess.py" -> bytearray
	"subprocess.py" -> len
	"subprocess.py" -> "self._handle_exitstatus"
	"subprocess.py" -> "errpipe_data.split"
	"subprocess.py" -> "err_msg.decode"
	"subprocess.py" -> format
	"subprocess.py" -> bytes
	"subprocess.py" -> getattr
	"subprocess.py" -> "exception_name.decode"
	"subprocess.py" -> issubclass
	"subprocess.py" -> int
	"subprocess.py" -> child_exception_type
	"subprocess.py" -> child_exception_type
	"subprocess.py" -> _WIFSTOPPED
	"subprocess.py" -> _WSTOPSIG
	"subprocess.py" -> _waitstatus_to_exitcode
	"subprocess.py" -> "self._waitpid_lock.acquire"
	"subprocess.py" -> _waitpid
	"subprocess.py" -> "self._handle_exitstatus"
	"subprocess.py" -> "self._waitpid_lock.release"
	"subprocess.py" -> _time
	"subprocess.py" -> "self._waitpid_lock.acquire"
	"subprocess.py" -> "self._try_wait"
	"subprocess.py" -> "self._handle_exitstatus"
	"subprocess.py" -> "self._waitpid_lock.release"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> TimeoutExpired
	"subprocess.py" -> min
	"subprocess.py" -> "time.sleep"
	"subprocess.py" -> "self._try_wait"
	"subprocess.py" -> "self._handle_exitstatus"
	"subprocess.py" -> "self.stdin.flush"
	"subprocess.py" -> "self.stdin.close"
	"subprocess.py" -> "self._save_input"
	"subprocess.py" -> memoryview
	"subprocess.py" -> _PopenSelector
	"subprocess.py" -> "selector.register"
	"subprocess.py" -> "selector.register"
	"subprocess.py" -> "selector.register"
	"subprocess.py" -> "selector.get_map"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self._check_timeout"
	"subprocess.py" -> RuntimeError
	"subprocess.py" -> "selector.select"
	"subprocess.py" -> "self._check_timeout"
	"subprocess.py" -> "selector.unregister"
	"subprocess.py" -> "key.fileobj.close"
	"subprocess.py" -> len
	"subprocess.py" -> "selector.unregister"
	"subprocess.py" -> "key.fileobj.close"
	"subprocess.py" -> "selector.unregister"
	"subprocess.py" -> "key.fileobj.close"
	"subprocess.py" -> append
	"subprocess.py" -> "self.wait"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> join
	"subprocess.py" -> join
	"subprocess.py" -> "self._translate_newlines"
	"subprocess.py" -> "self._translate_newlines"
	"subprocess.py" -> "self._input.encode"
	"subprocess.py" -> "self.poll"
	"subprocess.py" -> "self.send_signal"
	"subprocess.py" -> "self.send_signal"
	"contextlib.py" -> classmethod
	"contextlib.py" -> classmethod
	"contextlib.py" -> "self._recreate_cm"
	"contextlib.py" -> func
	"contextlib.py" -> "self._recreate_cm"
	"contextlib.py" -> func
	"contextlib.py" -> func
	"contextlib.py" -> getattr
	"contextlib.py" -> type
	"contextlib.py" -> "self.__class__"
	"contextlib.py" -> next
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> next
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> typ
	"contextlib.py" -> "self.gen.throw"
	"contextlib.py" -> isinstance
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> anext
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> anext
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> typ
	"contextlib.py" -> "self.gen.athrow"
	"contextlib.py" -> isinstance
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> _GeneratorContextManager
	"contextlib.py" -> _AsyncGeneratorContextManager
	"contextlib.py" -> "self.thing.close"
	"contextlib.py" -> "self.thing.aclose"
	"contextlib.py" -> "self._old_targets.append"
	"contextlib.py" -> getattr
	"contextlib.py" -> setattr
	"contextlib.py" -> setattr
	"contextlib.py" -> "self._old_targets.pop"
	"contextlib.py" -> issubclass
	"contextlib.py" -> <unknown_function>
	"contextlib.py" -> type
	"contextlib.py" -> type
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "self._push_cm_exit"
	"contextlib.py" -> type
	"contextlib.py" -> TypeError
	"contextlib.py" -> _enter
	"contextlib.py" -> "self._push_cm_exit"
	"contextlib.py" -> "self._create_cb_wrapper"
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "self._create_exit_wrapper"
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "self._exit_callbacks.append"
	"contextlib.py" -> "sys.exc_info"
	"contextlib.py" -> "self._exit_callbacks.pop"
	"contextlib.py" -> cb
	"contextlib.py" -> "sys.exc_info"
	"contextlib.py" -> "self.__exit__"
	"contextlib.py" -> type
	"contextlib.py" -> TypeError
	"contextlib.py" -> _enter
	"contextlib.py" -> "self._push_async_cm_exit"
	"contextlib.py" -> type
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "self._push_async_cm_exit"
	"contextlib.py" -> "self._create_async_cb_wrapper"
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "self.__aexit__"
	"contextlib.py" -> "self._create_async_exit_wrapper"
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "sys.exc_info"
	"contextlib.py" -> "self._exit_callbacks.pop"
	"contextlib.py" -> cb
	"contextlib.py" -> cb
	"contextlib.py" -> "sys.exc_info"
	"contextlib.py" -> "self._old_cwd.append"
	"contextlib.py" -> "self._old_cwd.pop"
	"signal.py" -> globals
	"signal.py" -> "name.isupper"
	"signal.py" -> "name.startswith"
	"signal.py" -> "name.startswith"
	"signal.py" -> "name.startswith"
	"signal.py" -> enum_klass
	"signal.py" -> int
	"signal.py" -> "_signal.signal"
	"signal.py" -> "_signal.getsignal"
	"signal.py" -> "_signal.pthread_sigmask"
	"signal.py" -> set
	"signal.py" -> "_signal.sigpending"
	"signal.py" -> "_signal.sigwait"
	"signal.py" -> "_signal.valid_signals"
	"threading.py" -> "__all__.append"
	"threading.py" -> _PyRLock
	"threading.py" -> _CRLock
	"threading.py" -> _allocate_lock
	"threading.py" -> "self._block.locked"
	"threading.py" -> hex
	"threading.py" -> id
	"threading.py" -> "self._block._at_fork_reinit"
	"threading.py" -> get_ident
	"threading.py" -> "self._block.acquire"
	"threading.py" -> get_ident
	"threading.py" -> RuntimeError
	"threading.py" -> "self._block.release"
	"threading.py" -> "self.release"
	"threading.py" -> "self._block.acquire"
	"threading.py" -> RuntimeError
	"threading.py" -> "self._block.release"
	"threading.py" -> get_ident
	"threading.py" -> "self._lock._at_fork_reinit"
	"threading.py" -> "self._waiters.clear"
	"threading.py" -> "self._lock.__enter__"
	"threading.py" -> "self._lock.__exit__"
	"threading.py" -> len
	"threading.py" -> "self._lock.release"
	"threading.py" -> "self._lock.acquire"
	"threading.py" -> "self._lock.acquire"
	"threading.py" -> "self._lock.release"
	"threading.py" -> "self._is_owned"
	"threading.py" -> RuntimeError
	"threading.py" -> _allocate_lock
	"threading.py" -> "waiter.acquire"
	"threading.py" -> "self._waiters.append"
	"threading.py" -> "self._release_save"
	"threading.py" -> "waiter.acquire"
	"threading.py" -> "waiter.acquire"
	"threading.py" -> "waiter.acquire"
	"threading.py" -> "self._acquire_restore"
	"threading.py" -> "self._waiters.remove"
	"threading.py" -> predicate
	"threading.py" -> _time
	"threading.py" -> _time
	"threading.py" -> "self.wait"
	"threading.py" -> predicate
	"threading.py" -> "self._is_owned"
	"threading.py" -> RuntimeError
	"threading.py" -> "waiter.release"
	"threading.py" -> "waiters.remove"
	"threading.py" -> "self.notify"
	"threading.py" -> len
	"threading.py" -> "self.notify_all"
	"threading.py" -> ValueError
	"threading.py" -> Condition
	"threading.py" -> Lock
	"threading.py" -> id
	"threading.py" -> ValueError
	"threading.py" -> _time
	"threading.py" -> _time
	"threading.py" -> "self._cond.wait"
	"threading.py" -> ValueError
	"threading.py" -> range
	"threading.py" -> "self._cond.notify"
	"threading.py" -> "self.release"
	"threading.py" -> "Semaphore.__init__"
	"threading.py" -> id
	"threading.py" -> ValueError
	"threading.py" -> ValueError
	"threading.py" -> range
	"threading.py" -> "self._cond.notify"
	"threading.py" -> Condition
	"threading.py" -> Lock
	"threading.py" -> id
	"threading.py" -> "self._cond._at_fork_reinit"
	"threading.py" -> "self.is_set"
	"threading.py" -> "self._cond.notify_all"
	"threading.py" -> "self._cond.wait"
	"threading.py" -> Condition
	"threading.py" -> Lock
	"threading.py" -> id
	"threading.py" -> id
	"threading.py" -> "self._enter"
	"threading.py" -> "self._release"
	"threading.py" -> "self._wait"
	"threading.py" -> "self._exit"
	"threading.py" -> "self._cond.wait"
	"threading.py" -> "self._action"
	"threading.py" -> "self._cond.notify_all"
	"threading.py" -> "self._break"
	"threading.py" -> "self._cond.wait_for"
	"threading.py" -> "self._break"
	"threading.py" -> "self._cond.notify_all"
	"threading.py" -> "self._cond.notify_all"
	"threading.py" -> "self._break"
	"threading.py" -> "self._cond.notify_all"
	"threading.py" -> _count
	"threading.py" -> _counter
	"threading.py" -> _allocate_lock
	"threading.py" -> set
	"threading.py" -> "lock.locked"
	"threading.py" -> "_shutdown_locks.difference_update"
	"threading.py" -> str
	"threading.py" -> Event
	"threading.py" -> "_dangling.add"
	"threading.py" -> "self._started._at_fork_reinit"
	"threading.py" -> "self._tstate_lock._at_fork_reinit"
	"threading.py" -> "self._tstate_lock.acquire"
	"threading.py" -> "self._started.is_set"
	"threading.py" -> "self.is_alive"
	"threading.py" -> RuntimeError
	"threading.py" -> "self._started.is_set"
	"threading.py" -> RuntimeError
	"threading.py" -> _start_new_thread
	"threading.py" -> "self._started.wait"
	"threading.py" -> "self._target"
	"threading.py" -> "self._bootstrap_inner"
	"threading.py" -> get_ident
	"threading.py" -> get_native_id
	"threading.py" -> _set_sentinel
	"threading.py" -> "self._tstate_lock.acquire"
	"threading.py" -> "_shutdown_locks.add"
	"threading.py" -> "self._set_ident"
	"threading.py" -> "self._set_tstate_lock"
	"threading.py" -> "self._set_native_id"
	"threading.py" -> "self._started.set"
	"threading.py" -> "_sys.settrace"
	"threading.py" -> "_sys.setprofile"
	"threading.py" -> "self.run"
	"threading.py" -> "self._invoke_excepthook"
	"threading.py" -> "self._delete"
	"threading.py" -> "lock.locked"
	"threading.py" -> get_ident
	"threading.py" -> RuntimeError
	"threading.py" -> "self._started.is_set"
	"threading.py" -> RuntimeError
	"threading.py" -> RuntimeError
	"threading.py" -> "self._wait_for_tstate_lock"
	"threading.py" -> "self._wait_for_tstate_lock"
	"threading.py" -> max
	"threading.py" -> "lock.acquire"
	"threading.py" -> "lock.release"
	"threading.py" -> "self._stop"
	"threading.py" -> "lock.locked"
	"threading.py" -> "lock.release"
	"threading.py" -> "self._stop"
	"threading.py" -> str
	"threading.py" -> "self._started.is_set"
	"threading.py" -> "self._wait_for_tstate_lock"
	"threading.py" -> RuntimeError
	"threading.py" -> "self._started.is_set"
	"threading.py" -> RuntimeError
	"threading.py" -> _ExceptHookArgs
	"threading.py" -> get_ident
	"threading.py" -> print
	"threading.py" -> "stderr.flush"
	"threading.py" -> RuntimeError
	"threading.py" -> RuntimeError
	"threading.py" -> sys_exc_info
	"threading.py" -> hook
	"threading.py" -> local_print
	"threading.py" -> sys_excepthook
	"threading.py" -> sys_exc_info
	"threading.py" -> "Thread.__init__"
	"threading.py" -> Event
	"threading.py" -> "self.finished.set"
	"threading.py" -> "self.finished.wait"
	"threading.py" -> "self.finished.is_set"
	"threading.py" -> "self.function"
	"threading.py" -> "self.finished.set"
	"threading.py" -> "Thread.__init__"
	"threading.py" -> "self._set_tstate_lock"
	"threading.py" -> "self._started.set"
	"threading.py" -> "self._set_ident"
	"threading.py" -> "self._set_native_id"
	"threading.py" -> "Thread.__init__"
	"threading.py" -> "self._started.set"
	"threading.py" -> "self._set_ident"
	"threading.py" -> "self._set_native_id"
	"threading.py" -> "self._started.is_set"
	"threading.py" -> get_ident
	"threading.py" -> _DummyThread
	"threading.py" -> len
	"threading.py" -> len
	"threading.py" -> list
	"threading.py" -> "_active.values"
	"threading.py" -> list
	"threading.py" -> "_limbo.values"
	"threading.py" -> list
	"threading.py" -> "_active.values"
	"threading.py" -> list
	"threading.py" -> "_limbo.values"
	"threading.py" -> RuntimeError
	"threading.py" -> "_threading_atexits.append"
	"threading.py" -> _MainThread
	"threading.py" -> reversed
	"threading.py" -> atexit_call
	"threading.py" -> get_ident
	"threading.py" -> "tlock.locked"
	"threading.py" -> "tlock.release"
	"threading.py" -> "_main_thread._stop"
	"threading.py" -> list
	"threading.py" -> "_shutdown_locks.clear"
	"threading.py" -> "lock.acquire"
	"threading.py" -> "lock.release"
	"threading.py" -> get_ident
	"threading.py" -> _MainThread
	"threading.py" -> _allocate_lock
	"threading.py" -> set
	"threading.py" -> set
	"threading.py" -> "threads.update"
	"threading.py" -> "thread._reset_internal_locks"
	"threading.py" -> get_ident
	"threading.py" -> "thread._reset_internal_locks"
	"threading.py" -> "thread._stop"
	"threading.py" -> "_limbo.clear"
	"threading.py" -> "_active.clear"
	"threading.py" -> "_active.update"
	"threading.py" -> len
	"threading.py" -> hasattr
	"shutil.py" -> hasattr
	"shutil.py" -> "sys.platform.startswith"
	"shutil.py" -> hasattr
	"shutil.py" -> "fsrc.fileno"
	"shutil.py" -> "fdst.fileno"
	"shutil.py" -> _GiveupOnFastCopy
	"shutil.py" -> "posix._fcopyfile"
	"shutil.py" -> _GiveupOnFastCopy
	"shutil.py" -> "fsrc.fileno"
	"shutil.py" -> "fdst.fileno"
	"shutil.py" -> _GiveupOnFastCopy
	"shutil.py" -> max
	"shutil.py" -> min
	"shutil.py" -> _GiveupOnFastCopy
	"shutil.py" -> _GiveupOnFastCopy
	"shutil.py" -> memoryview
	"shutil.py" -> bytearray
	"shutil.py" -> fsrc_readinto
	"shutil.py" -> "fdst.write"
	"shutil.py" -> fdst_write
	"shutil.py" -> fsrc_read
	"shutil.py" -> fdst_write
	"shutil.py" -> isinstance
	"shutil.py" -> hasattr
	"shutil.py" -> "src.stat"
	"shutil.py" -> hasattr
	"shutil.py" -> isinstance
	"shutil.py" -> "fn.stat"
	"shutil.py" -> isinstance
	"shutil.py" -> "fn.is_symlink"
	"shutil.py" -> "sys.audit"
	"shutil.py" -> SameFileError
	"shutil.py" -> format
	"shutil.py" -> enumerate
	"shutil.py" -> isinstance
	"shutil.py" -> SpecialFileError
	"shutil.py" -> open
	"shutil.py" -> open
	"shutil.py" -> min
	"shutil.py" -> FileNotFoundError
	"shutil.py" -> "sys.audit"
	"shutil.py" -> hasattr
	"shutil.py" -> stat_func
	"shutil.py" -> chmod_func
	"shutil.py" -> hasattr
	"shutil.py" -> "sys.audit"
	"shutil.py" -> getattr
	"shutil.py" -> getattr
	"shutil.py" -> isinstance
	"shutil.py" -> "src.stat"
	"shutil.py" -> <unknown_function>
	"shutil.py" -> <unknown_function>
	"shutil.py" -> <unknown_function>
	"shutil.py" -> hasattr
	"shutil.py" -> <unknown_function>
	"shutil.py" -> hasattr
	"shutil.py" -> getattr
	"shutil.py" -> "ignored_names.extend"
	"shutil.py" -> set
	"shutil.py" -> ignore
	"shutil.py" -> set
	"shutil.py" -> "srcentry.is_symlink"
	"shutil.py" -> "srcentry.stat"
	"shutil.py" -> "srcentry.is_dir"
	"shutil.py" -> copy_function
	"shutil.py" -> "srcentry.is_dir"
	"shutil.py" -> copy_function
	"shutil.py" -> "errors.extend"
	"shutil.py" -> "errors.append"
	"shutil.py" -> str
	"shutil.py" -> getattr
	"shutil.py" -> "errors.append"
	"shutil.py" -> str
	"shutil.py" -> Error
	"shutil.py" -> "sys.audit"
	"shutil.py" -> list
	"shutil.py" -> hasattr
	"shutil.py" -> "entry.stat"
	"shutil.py" -> "entry.is_dir"
	"shutil.py" -> list
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "entry.is_symlink"
	"shutil.py" -> OSError
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> list
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "entry.is_dir"
	"shutil.py" -> "entry.stat"
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> OSError
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "sys.audit"
	"shutil.py" -> isinstance
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> OSError
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> NotImplementedError
	"shutil.py" -> OSError
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "path.rstrip"
	"shutil.py" -> "sys.audit"
	"shutil.py" -> Error
	"shutil.py" -> Error
	"shutil.py" -> PermissionError
	"shutil.py" -> copy_function
	"shutil.py" -> "src.endswith"
	"shutil.py" -> "dst.endswith"
	"shutil.py" -> "dst.startswith"
	"shutil.py" -> hasattr
	"shutil.py" -> getpwnam
	"shutil.py" -> ValueError
	"shutil.py" -> format
	"shutil.py" -> "logger.info"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "tar.add"
	"shutil.py" -> "tar.close"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "zf.write"
	"shutil.py" -> "logger.info"
	"shutil.py" -> sorted
	"shutil.py" -> "zf.write"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "zf.write"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "_ARCHIVE_FORMATS.items"
	"shutil.py" -> "formats.sort"
	"shutil.py" -> callable
	"shutil.py" -> TypeError
	"shutil.py" -> isinstance
	"shutil.py" -> TypeError
	"shutil.py" -> isinstance
	"shutil.py" -> len
	"shutil.py" -> TypeError
	"shutil.py" -> "sys.audit"
	"shutil.py" -> ValueError
	"shutil.py" -> "logger.debug"
	"shutil.py" -> func
	"shutil.py" -> "logger.debug"
	"shutil.py" -> "_UNPACK_FORMATS.items"
	"shutil.py" -> "formats.sort"
	"shutil.py" -> "_UNPACK_FORMATS.items"
	"shutil.py" -> RegistryError
	"shutil.py" -> callable
	"shutil.py" -> TypeError
	"shutil.py" -> ReadError
	"shutil.py" -> "zip.infolist"
	"shutil.py" -> "name.startswith"
	"shutil.py" -> "name.split"
	"shutil.py" -> "name.endswith"
	"shutil.py" -> "zip.open"
	"shutil.py" -> open
	"shutil.py" -> "zip.close"
	"shutil.py" -> ReadError
	"shutil.py" -> "tarobj.extractall"
	"shutil.py" -> "tarobj.close"
	"shutil.py" -> "_UNPACK_FORMATS.items"
	"shutil.py" -> "filename.endswith"
	"shutil.py" -> "sys.audit"
	"shutil.py" -> ValueError
	"shutil.py" -> format
	"shutil.py" -> func
	"shutil.py" -> dict
	"shutil.py" -> ReadError
	"shutil.py" -> format
	"shutil.py" -> dict
	"shutil.py" -> func
	"shutil.py" -> hasattr
	"shutil.py" -> "__all__.append"
	"shutil.py" -> _ntuple_diskusage
	"shutil.py" -> "__all__.append"
	"shutil.py" -> "nt._getdiskusage"
	"shutil.py" -> _ntuple_diskusage
	"shutil.py" -> "sys.audit"
	"shutil.py" -> ValueError
	"shutil.py" -> isinstance
	"shutil.py" -> LookupError
	"shutil.py" -> format
	"shutil.py" -> isinstance
	"shutil.py" -> LookupError
	"shutil.py" -> format
	"shutil.py" -> int
	"shutil.py" -> int
	"shutil.py" -> "sys.__stdout__.fileno"
	"shutil.py" -> isinstance
	"shutil.py" -> "path.split"
	"shutil.py" -> "path.split"
	"shutil.py" -> "path.insert"
	"shutil.py" -> "pathext_source.split"
	"shutil.py" -> any
	"shutil.py" -> endswith
	"shutil.py" -> "cmd.lower"
	"shutil.py" -> "ext.lower"
	"shutil.py" -> set
	"shutil.py" -> "seen.add"
	"tarfile.py" -> "sys.getfilesystemencoding"
	"tarfile.py" -> ValueError
	"tarfile.py" -> "s.encode"
	"tarfile.py" -> len
	"tarfile.py" -> "s.find"
	"tarfile.py" -> "s.decode"
	"tarfile.py" -> range
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> int
	"tarfile.py" -> "s.strip"
	"tarfile.py" -> InvalidHeaderError
	"tarfile.py" -> int
	"tarfile.py" -> bytes
	"tarfile.py" -> bytearray
	"tarfile.py" -> bytearray
	"tarfile.py" -> range
	"tarfile.py" -> "s.insert"
	"tarfile.py" -> ValueError
	"tarfile.py" -> sum
	"tarfile.py" -> sum
	"tarfile.py" -> divmod
	"tarfile.py" -> range
	"tarfile.py" -> "src.read"
	"tarfile.py" -> len
	"tarfile.py" -> exception
	"tarfile.py" -> "dst.write"
	"tarfile.py" -> "src.read"
	"tarfile.py" -> len
	"tarfile.py" -> exception
	"tarfile.py" -> "dst.write"
	"tarfile.py" -> getattr
	"tarfile.py" -> decode
	"tarfile.py" -> "s.encode"
	"tarfile.py" -> print
	"tarfile.py" -> hasattr
	"tarfile.py" -> _LowLevelFile
	"tarfile.py" -> _StreamProxy
	"tarfile.py" -> "fileobj.getcomptype"
	"tarfile.py" -> CompressionError
	"tarfile.py" -> "self._init_read_gz"
	"tarfile.py" -> "self._init_write_gz"
	"tarfile.py" -> CompressionError
	"tarfile.py" -> CompressionError
	"tarfile.py" -> CompressionError
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> hasattr
	"tarfile.py" -> "self.close"
	"tarfile.py" -> "self.zlib.compressobj"
	"tarfile.py" -> int
	"tarfile.py" -> "time.time"
	"tarfile.py" -> "self.__write"
	"tarfile.py" -> "self.name.endswith"
	"tarfile.py" -> "self.__write"
	"tarfile.py" -> "self.name.encode"
	"tarfile.py" -> "self.zlib.crc32"
	"tarfile.py" -> len
	"tarfile.py" -> "self.cmp.compress"
	"tarfile.py" -> "self.__write"
	"tarfile.py" -> len
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "self.cmp.flush"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> "self.zlib.decompressobj"
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> CompressionError
	"tarfile.py" -> ord
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> ord
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> ord
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> "self.read"
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> divmod
	"tarfile.py" -> range
	"tarfile.py" -> "self.read"
	"tarfile.py" -> "self.read"
	"tarfile.py" -> StreamError
	"tarfile.py" -> "self._read"
	"tarfile.py" -> len
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> len
	"tarfile.py" -> "self.fileobj.read"
	"tarfile.py" -> "self.cmp.decompress"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "t.append"
	"tarfile.py" -> len
	"tarfile.py" -> join
	"tarfile.py" -> len
	"tarfile.py" -> "self.fileobj.read"
	"tarfile.py" -> "t.append"
	"tarfile.py" -> len
	"tarfile.py" -> join
	"tarfile.py" -> "self.fileobj.read"
	"tarfile.py" -> "self.buf.startswith"
	"tarfile.py" -> "self.buf.startswith"
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> getattr
	"tarfile.py" -> "self.map.append"
	"tarfile.py" -> "self.map.append"
	"tarfile.py" -> "self.map.append"
	"tarfile.py" -> "self.fileobj.seekable"
	"tarfile.py" -> min
	"tarfile.py" -> max
	"tarfile.py" -> max
	"tarfile.py" -> min
	"tarfile.py" -> max
	"tarfile.py" -> min
	"tarfile.py" -> ValueError
	"tarfile.py" -> min
	"tarfile.py" -> len
	"tarfile.py" -> min
	"tarfile.py" -> "self.fileobj.seek"
	"tarfile.py" -> "self.fileobj.read"
	"tarfile.py" -> len
	"tarfile.py" -> ReadError
	"tarfile.py" -> "self.read"
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> _FileInFile
	"tarfile.py" -> super
	"tarfile.py" -> super
	"tarfile.py" -> super
	"tarfile.py" -> super
	"tarfile.py" -> super
	"tarfile.py" -> super
	"tarfile.py" -> "name.startswith"
	"tarfile.py" -> "member.path.lstrip"
	"tarfile.py" -> AbsolutePathError
	"tarfile.py" -> OutsideDestinationError
	"tarfile.py" -> "member.isreg"
	"tarfile.py" -> "member.islnk"
	"tarfile.py" -> "member.isdir"
	"tarfile.py" -> "member.issym"
	"tarfile.py" -> SpecialFileError
	"tarfile.py" -> "member.islnk"
	"tarfile.py" -> "member.issym"
	"tarfile.py" -> AbsoluteLinkError
	"tarfile.py" -> LinkOutsideDestinationError
	"tarfile.py" -> "member.replace"
	"tarfile.py" -> "member.replace"
	"tarfile.py" -> object
	"tarfile.py" -> dict
	"tarfile.py" -> id
	"tarfile.py" -> endswith
	"tarfile.py" -> "self.get_info"
	"tarfile.py" -> "info.items"
	"tarfile.py" -> ValueError
	"tarfile.py" -> "self.create_ustar_header"
	"tarfile.py" -> "self.create_gnu_header"
	"tarfile.py" -> "self.create_pax_header"
	"tarfile.py" -> ValueError
	"tarfile.py" -> len
	"tarfile.py" -> encode
	"tarfile.py" -> ValueError
	"tarfile.py" -> len
	"tarfile.py" -> encode
	"tarfile.py" -> "self._posix_split_name"
	"tarfile.py" -> "self._create_header"
	"tarfile.py" -> len
	"tarfile.py" -> encode
	"tarfile.py" -> "self._create_gnu_long_header"
	"tarfile.py" -> len
	"tarfile.py" -> encode
	"tarfile.py" -> "self._create_gnu_long_header"
	"tarfile.py" -> "self._create_header"
	"tarfile.py" -> "self.pax_headers.copy"
	"tarfile.py" -> encode
	"tarfile.py" -> len
	"tarfile.py" -> isinstance
	"tarfile.py" -> round
	"tarfile.py" -> str
	"tarfile.py" -> "self._create_pax_generic_header"
	"tarfile.py" -> "self._create_header"
	"tarfile.py" -> "cls._create_pax_generic_header"
	"tarfile.py" -> "name.split"
	"tarfile.py" -> range
	"tarfile.py" -> len
	"tarfile.py" -> join
	"tarfile.py" -> join
	"tarfile.py" -> len
	"tarfile.py" -> "prefix.encode"
	"tarfile.py" -> len
	"tarfile.py" -> "name.encode"
	"tarfile.py" -> ValueError
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> ValueError
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> join
	"tarfile.py" -> bytes
	"tarfile.py" -> divmod
	"tarfile.py" -> len
	"tarfile.py" -> "name.encode"
	"tarfile.py" -> len
	"tarfile.py" -> "cls._create_header"
	"tarfile.py" -> "cls._create_payload"
	"tarfile.py" -> "pax_headers.items"
	"tarfile.py" -> "value.encode"
	"tarfile.py" -> "pax_headers.items"
	"tarfile.py" -> "value.encode"
	"tarfile.py" -> "value.encode"
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> str
	"tarfile.py" -> bytes
	"tarfile.py" -> str
	"tarfile.py" -> len
	"tarfile.py" -> "cls._create_header"
	"tarfile.py" -> "cls._create_payload"
	"tarfile.py" -> len
	"tarfile.py" -> EmptyHeaderError
	"tarfile.py" -> len
	"tarfile.py" -> TruncatedHeaderError
	"tarfile.py" -> "buf.count"
	"tarfile.py" -> EOFHeaderError
	"tarfile.py" -> InvalidHeaderError
	"tarfile.py" -> cls
	"tarfile.py" -> "obj.name.endswith"
	"tarfile.py" -> range
	"tarfile.py" -> "structs.append"
	"tarfile.py" -> bool
	"tarfile.py" -> "obj.isdir"
	"tarfile.py" -> "obj.name.rstrip"
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> "cls.frombuf"
	"tarfile.py" -> "tarfile.fileobj.tell"
	"tarfile.py" -> "obj._proc_member"
	"tarfile.py" -> "self._proc_gnulong"
	"tarfile.py" -> "self._proc_sparse"
	"tarfile.py" -> "self._proc_pax"
	"tarfile.py" -> "self._proc_builtin"
	"tarfile.py" -> "tarfile.fileobj.tell"
	"tarfile.py" -> "self.isreg"
	"tarfile.py" -> "self._block"
	"tarfile.py" -> "self._apply_pax_info"
	"tarfile.py" -> "self.isdir"
	"tarfile.py" -> "self.name.rstrip"
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> "self._block"
	"tarfile.py" -> "self.fromtarfile"
	"tarfile.py" -> SubsequentHeaderError
	"tarfile.py" -> str
	"tarfile.py" -> "next.isdir"
	"tarfile.py" -> "next.name.removesuffix"
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> range
	"tarfile.py" -> "structs.append"
	"tarfile.py" -> bool
	"tarfile.py" -> "tarfile.fileobj.tell"
	"tarfile.py" -> "self._block"
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> "self._block"
	"tarfile.py" -> "tarfile.pax_headers.copy"
	"tarfile.py" -> decode
	"tarfile.py" -> "match.group"
	"tarfile.py" -> "pax_headers.get"
	"tarfile.py" -> "regex.match"
	"tarfile.py" -> "match.groups"
	"tarfile.py" -> int
	"tarfile.py" -> InvalidHeaderError
	"tarfile.py" -> "match.end"
	"tarfile.py" -> "match.start"
	"tarfile.py" -> "self._decode_pax_field"
	"tarfile.py" -> "self._decode_pax_field"
	"tarfile.py" -> "self._decode_pax_field"
	"tarfile.py" -> "self.fromtarfile"
	"tarfile.py" -> SubsequentHeaderError
	"tarfile.py" -> str
	"tarfile.py" -> "self._proc_gnusparse_01"
	"tarfile.py" -> "self._proc_gnusparse_00"
	"tarfile.py" -> "pax_headers.get"
	"tarfile.py" -> "pax_headers.get"
	"tarfile.py" -> "self._proc_gnusparse_10"
	"tarfile.py" -> "next._apply_pax_info"
	"tarfile.py" -> "next.isreg"
	"tarfile.py" -> "next._block"
	"tarfile.py" -> "offsets.append"
	"tarfile.py" -> int
	"tarfile.py" -> "match.group"
	"tarfile.py" -> "numbytes.append"
	"tarfile.py" -> int
	"tarfile.py" -> "match.group"
	"tarfile.py" -> list
	"tarfile.py" -> zip
	"tarfile.py" -> int
	"tarfile.py" -> split
	"tarfile.py" -> list
	"tarfile.py" -> zip
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> "buf.split"
	"tarfile.py" -> int
	"tarfile.py" -> len
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> "buf.split"
	"tarfile.py" -> "sparse.append"
	"tarfile.py" -> int
	"tarfile.py" -> "tarfile.fileobj.tell"
	"tarfile.py" -> list
	"tarfile.py" -> zip
	"tarfile.py" -> "pax_headers.items"
	"tarfile.py" -> setattr
	"tarfile.py" -> setattr
	"tarfile.py" -> int
	"tarfile.py" -> setattr
	"tarfile.py" -> int
	"tarfile.py" -> <unknown_function>
	"tarfile.py" -> "value.rstrip"
	"tarfile.py" -> setattr
	"tarfile.py" -> "pax_headers.copy"
	"tarfile.py" -> "value.decode"
	"tarfile.py" -> "value.decode"
	"tarfile.py" -> divmod
	"tarfile.py" -> "self.isreg"
	"tarfile.py" -> ValueError
	"tarfile.py" -> bltn_open
	"tarfile.py" -> hasattr
	"tarfile.py" -> isinstance
	"tarfile.py" -> hasattr
	"tarfile.py" -> "self.fileobj.tell"
	"tarfile.py" -> "self.next"
	"tarfile.py" -> "self.fileobj.seek"
	"tarfile.py" -> "self.tarinfo.fromtarfile"
	"tarfile.py" -> "self.members.append"
	"tarfile.py" -> "self.fileobj.seek"
	"tarfile.py" -> ReadError
	"tarfile.py" -> str
	"tarfile.py" -> "self.tarinfo.create_pax_global_header"
	"tarfile.py" -> "self.pax_headers.copy"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> len
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> ValueError
	"tarfile.py" -> sorted
	"tarfile.py" -> getattr
	"tarfile.py" -> "fileobj.tell"
	"tarfile.py" -> func
	"tarfile.py" -> "error_msgs.append"
	"tarfile.py" -> "fileobj.seek"
	"tarfile.py" -> join
	"tarfile.py" -> ReadError
	"tarfile.py" -> "mode.split"
	"tarfile.py" -> getattr
	"tarfile.py" -> CompressionError
	"tarfile.py" -> func
	"tarfile.py" -> "mode.split"
	"tarfile.py" -> ValueError
	"tarfile.py" -> _Stream
	"tarfile.py" -> cls
	"tarfile.py" -> "stream.close"
	"tarfile.py" -> "cls.taropen"
	"tarfile.py" -> ValueError
	"tarfile.py" -> ValueError
	"tarfile.py" -> cls
	"tarfile.py" -> ValueError
	"tarfile.py" -> CompressionError
	"tarfile.py" -> ReadError
	"tarfile.py" -> "cls.taropen"
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> ValueError
	"tarfile.py" -> CompressionError
	"tarfile.py" -> "cls.taropen"
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> ValueError
	"tarfile.py" -> CompressionError
	"tarfile.py" -> "cls.taropen"
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> divmod
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> "self._getmember"
	"tarfile.py" -> "name.rstrip"
	"tarfile.py" -> KeyError
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "self._load"
	"tarfile.py" -> "self.getmembers"
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "arcname.replace"
	"tarfile.py" -> "arcname.lstrip"
	"tarfile.py" -> "self.tarinfo"
	"tarfile.py" -> "fileobj.fileno"
	"tarfile.py" -> "pwd.getpwuid"
	"tarfile.py" -> hasattr
	"tarfile.py" -> hasattr
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "tarinfo.ischr"
	"tarfile.py" -> "tarinfo.isblk"
	"tarfile.py" -> "time.localtime"
	"tarfile.py" -> "tarinfo.isdir"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> "tarinfo.islnk"
	"tarfile.py" -> print
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self.gettarinfo"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> filter
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "tarinfo.isreg"
	"tarfile.py" -> bltn_open
	"tarfile.py" -> "self.addfile"
	"tarfile.py" -> "tarinfo.isdir"
	"tarfile.py" -> "self.addfile"
	"tarfile.py" -> sorted
	"tarfile.py" -> "self.add"
	"tarfile.py" -> "self.addfile"
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "tarinfo.tobuf"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> len
	"tarfile.py" -> divmod
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "self.members.append"
	"tarfile.py" -> isinstance
	"tarfile.py" -> TypeError
	"tarfile.py" -> callable
	"tarfile.py" -> ValueError
	"tarfile.py" -> "self._get_filter_function"
	"tarfile.py" -> "self._get_extract_tarinfo"
	"tarfile.py" -> "tarinfo.isdir"
	"tarfile.py" -> "directories.append"
	"tarfile.py" -> "self._extract_one"
	"tarfile.py" -> "tarinfo.isdir"
	"tarfile.py" -> "directories.sort"
	"tarfile.py" -> "self.chown"
	"tarfile.py" -> "self.utime"
	"tarfile.py" -> "self.chmod"
	"tarfile.py" -> "self._handle_nonfatal_error"
	"tarfile.py" -> "self._get_filter_function"
	"tarfile.py" -> "self._get_extract_tarinfo"
	"tarfile.py" -> "self._extract_one"
	"tarfile.py" -> isinstance
	"tarfile.py" -> "self.getmember"
	"tarfile.py" -> filter_function
	"tarfile.py" -> "self._handle_fatal_error"
	"tarfile.py" -> "self._handle_nonfatal_error"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "tarinfo.islnk"
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "self._extract_member"
	"tarfile.py" -> "self._handle_fatal_error"
	"tarfile.py" -> "self._handle_nonfatal_error"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> isinstance
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> type
	"tarfile.py" -> "self._check"
	"tarfile.py" -> isinstance
	"tarfile.py" -> "self.getmember"
	"tarfile.py" -> "tarinfo.isreg"
	"tarfile.py" -> "self.fileobject"
	"tarfile.py" -> "tarinfo.islnk"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> isinstance
	"tarfile.py" -> StreamError
	"tarfile.py" -> "self.extractfile"
	"tarfile.py" -> "self._find_link_target"
	"tarfile.py" -> "targetpath.rstrip"
	"tarfile.py" -> "targetpath.replace"
	"tarfile.py" -> "tarinfo.islnk"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "tarinfo.isreg"
	"tarfile.py" -> "self.makefile"
	"tarfile.py" -> "tarinfo.isdir"
	"tarfile.py" -> "self.makedir"
	"tarfile.py" -> "tarinfo.isfifo"
	"tarfile.py" -> "self.makefifo"
	"tarfile.py" -> "tarinfo.ischr"
	"tarfile.py" -> "tarinfo.isblk"
	"tarfile.py" -> "self.makedev"
	"tarfile.py" -> "tarinfo.islnk"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> "self.makelink"
	"tarfile.py" -> "self.makeunknown"
	"tarfile.py" -> "self.makefile"
	"tarfile.py" -> "self.chown"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> "self.chmod"
	"tarfile.py" -> "self.utime"
	"tarfile.py" -> "source.seek"
	"tarfile.py" -> bltn_open
	"tarfile.py" -> "target.seek"
	"tarfile.py" -> "target.seek"
	"tarfile.py" -> "target.truncate"
	"tarfile.py" -> "self.makefile"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> hasattr
	"tarfile.py" -> ExtractError
	"tarfile.py" -> hasattr
	"tarfile.py" -> hasattr
	"tarfile.py" -> ExtractError
	"tarfile.py" -> "tarinfo.isblk"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> "self._extract_member"
	"tarfile.py" -> "self._find_link_target"
	"tarfile.py" -> "self._extract_member"
	"tarfile.py" -> "self._find_link_target"
	"tarfile.py" -> ExtractError
	"tarfile.py" -> hasattr
	"tarfile.py" -> "pwd.getpwnam"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> hasattr
	"tarfile.py" -> ExtractError
	"tarfile.py" -> ExtractError
	"tarfile.py" -> hasattr
	"tarfile.py" -> ExtractError
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "self.fileobj.tell"
	"tarfile.py" -> "self.fileobj.seek"
	"tarfile.py" -> "self.fileobj.read"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "self.tarinfo.fromtarfile"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> ReadError
	"tarfile.py" -> str
	"tarfile.py" -> ReadError
	"tarfile.py" -> ReadError
	"tarfile.py" -> str
	"tarfile.py" -> ReadError
	"tarfile.py" -> str
	"tarfile.py" -> isinstance
	"tarfile.py" -> ReadError
	"tarfile.py" -> "self.members.append"
	"tarfile.py" -> "self.getmembers"
	"tarfile.py" -> "members.index"
	"tarfile.py" -> reversed
	"tarfile.py" -> ValueError
	"tarfile.py" -> "self.next"
	"tarfile.py" -> OSError
	"tarfile.py" -> OSError
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> join
	"tarfile.py" -> filter
	"tarfile.py" -> "self._getmember"
	"tarfile.py" -> KeyError
	"tarfile.py" -> "self.next"
	"tarfile.py" -> len
	"tarfile.py" -> "self.next"
	"tarfile.py" -> print
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "self.close"
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> hasattr
	"tarfile.py" -> "name.tell"
	"tarfile.py" -> open
	"tarfile.py" -> "name.seek"
	"tarfile.py" -> open
	"tarfile.py" -> "t.close"
	"tarfile.py" -> "parser.add_argument"
	"tarfile.py" -> "parser.add_argument"
	"tarfile.py" -> "parser.add_mutually_exclusive_group"
	"tarfile.py" -> "group.add_argument"
	"tarfile.py" -> "group.add_argument"
	"tarfile.py" -> "group.add_argument"
	"tarfile.py" -> "group.add_argument"
	"tarfile.py" -> "parser.parse_args"
	"tarfile.py" -> "parser.exit"
	"tarfile.py" -> open
	"tarfile.py" -> "tar.getmembers"
	"tarfile.py" -> print
	"tarfile.py" -> "tar.getmembers"
	"tarfile.py" -> print
	"tarfile.py" -> format
	"tarfile.py" -> "parser.exit"
	"tarfile.py" -> format
	"tarfile.py" -> "TarFile.open"
	"tarfile.py" -> "tf.list"
	"tarfile.py" -> "parser.exit"
	"tarfile.py" -> format
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> "parser.exit"
	"tarfile.py" -> "parser.format_help"
	"tarfile.py" -> "TarFile.open"
	"tarfile.py" -> "tf.extractall"
	"tarfile.py" -> format
	"tarfile.py" -> format
	"tarfile.py" -> print
	"tarfile.py" -> "parser.exit"
	"tarfile.py" -> format
	"tarfile.py" -> "args.create.pop"
	"tarfile.py" -> "TarFile.open"
	"tarfile.py" -> "tf.add"
	"tarfile.py" -> print
	"tarfile.py" -> format
	"copy.py" -> type
	"copy.py" -> "_copy_dispatch.get"
	"copy.py" -> copier
	"copy.py" -> issubclass
	"copy.py" -> getattr
	"copy.py" -> copier
	"copy.py" -> reductor
	"copy.py" -> getattr
	"copy.py" -> reductor
	"copy.py" -> getattr
	"copy.py" -> reductor
	"copy.py" -> Error
	"copy.py" -> isinstance
	"copy.py" -> type
	"copy.py" -> type
	"copy.py" -> type
	"copy.py" -> getattr
	"copy.py" -> id
	"copy.py" -> "memo.get"
	"copy.py" -> type
	"copy.py" -> "_deepcopy_dispatch.get"
	"copy.py" -> copier
	"copy.py" -> issubclass
	"copy.py" -> getattr
	"copy.py" -> copier
	"copy.py" -> reductor
	"copy.py" -> getattr
	"copy.py" -> reductor
	"copy.py" -> getattr
	"copy.py" -> reductor
	"copy.py" -> Error
	"copy.py" -> isinstance
	"copy.py" -> type
	"copy.py" -> type
	"copy.py" -> type
	"copy.py" -> id
	"copy.py" -> append
	"copy.py" -> id
	"copy.py" -> zip
	"copy.py" -> tuple
	"copy.py" -> id
	"copy.py" -> "x.items"
	"copy.py" -> <unknown_function>
	"copy.py" -> type
	"copy.py" -> append
	"copy.py" -> id
	"copy.py" -> id
	"copy.py" -> func
	"copy.py" -> id
	"copy.py" -> hasattr
	"copy.py" -> "y.__setstate__"
	"copy.py" -> isinstance
	"copy.py" -> len
	"copy.py" -> "y.__dict__.update"
	"copy.py" -> "slotstate.items"
	"copy.py" -> setattr
	"copy.py" -> "y.append"
	"copy.py" -> "y.append"
	"lzma.py" -> ValueError
	"lzma.py" -> ValueError
	"lzma.py" -> LZMACompressor
	"lzma.py" -> ValueError
	"lzma.py" -> format
	"lzma.py" -> isinstance
	"lzma.py" -> "builtins.open"
	"lzma.py" -> hasattr
	"lzma.py" -> hasattr
	"lzma.py" -> TypeError
	"lzma.py" -> "self._buffer.close"
	"lzma.py" -> "self._fp.write"
	"lzma.py" -> "self._compressor.flush"
	"lzma.py" -> "self._fp.close"
	"lzma.py" -> "self._check_not_closed"
	"lzma.py" -> "self._fp.fileno"
	"lzma.py" -> "self.readable"
	"lzma.py" -> "self._buffer.seekable"
	"lzma.py" -> "self._check_not_closed"
	"lzma.py" -> "self._check_not_closed"
	"lzma.py" -> "self._check_can_read"
	"lzma.py" -> "self._buffer.peek"
	"lzma.py" -> "self._check_can_read"
	"lzma.py" -> "self._buffer.read"
	"lzma.py" -> "self._check_can_read"
	"lzma.py" -> "self._buffer.read1"
	"lzma.py" -> "self._check_can_read"
	"lzma.py" -> "self._buffer.readline"
	"lzma.py" -> "self._check_can_write"
	"lzma.py" -> isinstance
	"lzma.py" -> len
	"lzma.py" -> memoryview
	"lzma.py" -> "self._compressor.compress"
	"lzma.py" -> "self._fp.write"
	"lzma.py" -> "self._check_can_seek"
	"lzma.py" -> "self._buffer.seek"
	"lzma.py" -> "self._check_not_closed"
	"lzma.py" -> "self._buffer.tell"
	"lzma.py" -> ValueError
	"lzma.py" -> ValueError
	"lzma.py" -> ValueError
	"lzma.py" -> ValueError
	"lzma.py" -> "mode.replace"
	"lzma.py" -> LZMAFile
	"lzma.py" -> LZMACompressor
	"lzma.py" -> "comp.compress"
	"lzma.py" -> "comp.flush"
	"lzma.py" -> LZMADecompressor
	"lzma.py" -> "decomp.decompress"
	"lzma.py" -> "results.append"
	"lzma.py" -> LZMAError
	"lzma.py" -> join
	"bz2.py" -> ValueError
	"bz2.py" -> ValueError
	"bz2.py" -> isinstance
	"bz2.py" -> _builtin_open
	"bz2.py" -> hasattr
	"bz2.py" -> hasattr
	"bz2.py" -> TypeError
	"bz2.py" -> "self._buffer.close"
	"bz2.py" -> "self._fp.write"
	"bz2.py" -> "self._compressor.flush"
	"bz2.py" -> "self._fp.close"
	"bz2.py" -> "self._check_not_closed"
	"bz2.py" -> "self._fp.fileno"
	"bz2.py" -> "self.readable"
	"bz2.py" -> "self._buffer.seekable"
	"bz2.py" -> "self._check_not_closed"
	"bz2.py" -> "self._check_not_closed"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.peek"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.read"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.read1"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.readinto"
	"bz2.py" -> isinstance
	"bz2.py" -> hasattr
	"bz2.py" -> TypeError
	"bz2.py" -> "size.__index__"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.readline"
	"bz2.py" -> isinstance
	"bz2.py" -> hasattr
	"bz2.py" -> TypeError
	"bz2.py" -> "size.__index__"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.readlines"
	"bz2.py" -> "self._check_can_write"
	"bz2.py" -> isinstance
	"bz2.py" -> len
	"bz2.py" -> memoryview
	"bz2.py" -> "self._compressor.compress"
	"bz2.py" -> "self._fp.write"
	"bz2.py" -> "self._check_can_seek"
	"bz2.py" -> "self._buffer.seek"
	"bz2.py" -> "self._check_not_closed"
	"bz2.py" -> "self._buffer.tell"
	"bz2.py" -> ValueError
	"bz2.py" -> ValueError
	"bz2.py" -> ValueError
	"bz2.py" -> ValueError
	"bz2.py" -> "mode.replace"
	"bz2.py" -> BZ2File
	"bz2.py" -> "comp.compress"
	"bz2.py" -> "comp.flush"
	"bz2.py" -> "decomp.decompress"
	"bz2.py" -> "results.append"
	"bz2.py" -> ValueError
	"bz2.py" -> join
	"gzip.py" -> ValueError
	"gzip.py" -> ValueError
	"gzip.py" -> ValueError
	"gzip.py" -> ValueError
	"gzip.py" -> "mode.replace"
	"gzip.py" -> isinstance
	"gzip.py" -> GzipFile
	"gzip.py" -> hasattr
	"gzip.py" -> hasattr
	"gzip.py" -> GzipFile
	"gzip.py" -> TypeError
	"gzip.py" -> "output.write"
	"gzip.py" -> len
	"gzip.py" -> "self.file.read"
	"gzip.py" -> "self.file.read"
	"gzip.py" -> len
	"gzip.py" -> len
	"gzip.py" -> "self.file.seek"
	"gzip.py" -> ValueError
	"gzip.py" -> format
	"gzip.py" -> "builtins.open"
	"gzip.py" -> getattr
	"gzip.py" -> isinstance
	"gzip.py" -> getattr
	"gzip.py" -> "mode.startswith"
	"gzip.py" -> _GzipReader
	"gzip.py" -> "mode.startswith"
	"gzip.py" -> "self._init_write"
	"gzip.py" -> ValueError
	"gzip.py" -> format
	"gzip.py" -> "self._write_gzip_header"
	"gzip.py" -> repr
	"gzip.py" -> hex
	"gzip.py" -> id
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> isinstance
	"gzip.py" -> "fname.encode"
	"gzip.py" -> "fname.endswith"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> encode
	"gzip.py" -> chr
	"gzip.py" -> "time.time"
	"gzip.py" -> int
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> OSError
	"gzip.py" -> ValueError
	"gzip.py" -> isinstance
	"gzip.py" -> len
	"gzip.py" -> memoryview
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self.compress.compress"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> OSError
	"gzip.py" -> "self._buffer.read"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> OSError
	"gzip.py" -> "self._buffer.read1"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> OSError
	"gzip.py" -> "self._buffer.peek"
	"gzip.py" -> "fileobj.write"
	"gzip.py" -> "self.compress.flush"
	"gzip.py" -> "self._buffer.close"
	"gzip.py" -> "myfileobj.close"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self.compress.flush"
	"gzip.py" -> "self.fileobj.flush"
	"gzip.py" -> "self.fileobj.fileno"
	"gzip.py" -> OSError
	"gzip.py" -> "self._buffer.seek"
	"gzip.py" -> ValueError
	"gzip.py" -> OSError
	"gzip.py" -> range
	"gzip.py" -> "self.write"
	"gzip.py" -> "self.write"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> "self._buffer.seek"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> "self._buffer.readline"
	"gzip.py" -> "fp.read"
	"gzip.py" -> len
	"gzip.py" -> "fp.read"
	"gzip.py" -> len
	"gzip.py" -> EOFError
	"gzip.py" -> "fp.read"
	"gzip.py" -> BadGzipFile
	"gzip.py" -> BadGzipFile
	"gzip.py" -> "fp.read"
	"gzip.py" -> "fp.read"
	"gzip.py" -> super
	"gzip.py" -> _PaddedFile
	"gzip.py" -> "self.readall"
	"gzip.py" -> "self._read_eof"
	"gzip.py" -> "self._decomp_factory"
	"gzip.py" -> "self._init_read"
	"gzip.py" -> "self._read_gzip_header"
	"gzip.py" -> "self._fp.read"
	"gzip.py" -> "self._decompressor.decompress"
	"gzip.py" -> "self._fp.prepend"
	"gzip.py" -> "self._fp.prepend"
	"gzip.py" -> EOFError
	"gzip.py" -> "self._add_read_data"
	"gzip.py" -> len
	"gzip.py" -> len
	"gzip.py" -> BadGzipFile
	"gzip.py" -> hex
	"gzip.py" -> hex
	"gzip.py" -> BadGzipFile
	"gzip.py" -> "self._fp.read"
	"gzip.py" -> "self._fp.prepend"
	"gzip.py" -> super
	"gzip.py" -> "time.time"
	"gzip.py" -> int
	"gzip.py" -> len
	"gzip.py" -> join
	"gzip.py" -> "do.decompress"
	"gzip.py" -> "fp.tell"
	"gzip.py" -> len
	"gzip.py" -> EOFError
	"gzip.py" -> BadGzipFile
	"gzip.py" -> len
	"gzip.py" -> BadGzipFile
	"gzip.py" -> "decompressed_members.append"
	"gzip.py" -> lstrip
	"gzip.py" -> "parser.add_mutually_exclusive_group"
	"gzip.py" -> "group.add_argument"
	"gzip.py" -> "group.add_argument"
	"gzip.py" -> "group.add_argument"
	"gzip.py" -> "parser.add_argument"
	"gzip.py" -> "parser.parse_args"
	"gzip.py" -> GzipFile
	"gzip.py" -> "sys.exit"
	"gzip.py" -> open
	"gzip.py" -> "builtins.open"
	"gzip.py" -> GzipFile
	"gzip.py" -> "builtins.open"
	"gzip.py" -> open
	"gzip.py" -> "f.read"
	"gzip.py" -> "g.write"
	"gzip.py" -> "g.close"
	"gzip.py" -> "f.close"
	"zipfile.py" -> len
	"zipfile.py" -> unpack
	"zipfile.py" -> "buffer.append"
	"zipfile.py" -> len
	"zipfile.py" -> "buffer.append"
	"zipfile.py" -> join
	"zipfile.py" -> hasattr
	"zipfile.py" -> open
	"zipfile.py" -> "fpin.seek"
	"zipfile.py" -> "fpin.read"
	"zipfile.py" -> len
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> "fpin.seek"
	"zipfile.py" -> "fpin.read"
	"zipfile.py" -> len
	"zipfile.py" -> "fpin.seek"
	"zipfile.py" -> "fpin.tell"
	"zipfile.py" -> "fpin.seek"
	"zipfile.py" -> "fpin.read"
	"zipfile.py" -> len
	"zipfile.py" -> list
	"zipfile.py" -> "endrec.append"
	"zipfile.py" -> "endrec.append"
	"zipfile.py" -> max
	"zipfile.py" -> "fpin.seek"
	"zipfile.py" -> "fpin.read"
	"zipfile.py" -> "data.rfind"
	"zipfile.py" -> len
	"zipfile.py" -> list
	"zipfile.py" -> "endrec.append"
	"zipfile.py" -> "endrec.append"
	"zipfile.py" -> "filename.find"
	"zipfile.py" -> chr
	"zipfile.py" -> "filename.replace"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "compressor_names.get"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "self.is_dir"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> join
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> "self._encodeFilenameFlags"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self.filename.encode"
	"zipfile.py" -> "self.filename.encode"
	"zipfile.py" -> len
	"zipfile.py" -> unpack
	"zipfile.py" -> len
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> unpack
	"zipfile.py" -> unpack
	"zipfile.py" -> unpack
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> isinstance
	"zipfile.py" -> "time.localtime"
	"zipfile.py" -> cls
	"zipfile.py" -> range
	"zipfile.py" -> list
	"zipfile.py" -> map
	"zipfile.py" -> range
	"zipfile.py" -> bytearray
	"zipfile.py" -> append
	"zipfile.py" -> bytes
	"zipfile.py" -> len
	"zipfile.py" -> "self._init"
	"zipfile.py" -> "self._comp.compress"
	"zipfile.py" -> "self._comp.compress"
	"zipfile.py" -> "self._init"
	"zipfile.py" -> "self._comp.flush"
	"zipfile.py" -> "self._comp.flush"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self._decomp.decompress"
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> LZMACompressor
	"zipfile.py" -> LZMADecompressor
	"zipfile.py" -> "compressor_names.get"
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> "self._writing"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self._file.seek"
	"zipfile.py" -> "self._file.tell"
	"zipfile.py" -> "self._writing"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self._file.seek"
	"zipfile.py" -> "self._file.read"
	"zipfile.py" -> "self._file.tell"
	"zipfile.py" -> "self._close"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.flush"
	"zipfile.py" -> "self.fp.close"
	"zipfile.py" -> hasattr
	"zipfile.py" -> "fileobj.seekable"
	"zipfile.py" -> "fileobj.tell"
	"zipfile.py" -> "self._init_decrypter"
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> "self._fileobj.read"
	"zipfile.py" -> "self._decrypter"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "compressor_names.get"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> join
	"zipfile.py" -> "self._readbuffer.find"
	"zipfile.py" -> len
	"zipfile.py" -> "self.read"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self._read1"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self._read1"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> "self._read1"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self._read1"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self._read2"
	"zipfile.py" -> len
	"zipfile.py" -> "self._read2"
	"zipfile.py" -> max
	"zipfile.py" -> "self._decompressor.decompress"
	"zipfile.py" -> "self._decompressor.flush"
	"zipfile.py" -> "self._decompressor.decompress"
	"zipfile.py" -> len
	"zipfile.py" -> "self._update_crc"
	"zipfile.py" -> max
	"zipfile.py" -> min
	"zipfile.py" -> "self._fileobj.read"
	"zipfile.py" -> len
	"zipfile.py" -> "self._decrypter"
	"zipfile.py" -> "self._fileobj.close"
	"zipfile.py" -> super
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self.tell"
	"zipfile.py" -> ValueError
	"zipfile.py" -> len
	"zipfile.py" -> "self._fileobj.seek"
	"zipfile.py" -> "self._init_decrypter"
	"zipfile.py" -> min
	"zipfile.py" -> "self.read"
	"zipfile.py" -> "self.tell"
	"zipfile.py" -> ValueError
	"zipfile.py" -> len
	"zipfile.py" -> ValueError
	"zipfile.py" -> isinstance
	"zipfile.py" -> len
	"zipfile.py" -> memoryview
	"zipfile.py" -> "self._compressor.compress"
	"zipfile.py" -> len
	"zipfile.py" -> "self._fileobj.write"
	"zipfile.py" -> super
	"zipfile.py" -> "self._compressor.flush"
	"zipfile.py" -> len
	"zipfile.py" -> "self._fileobj.write"
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> "self._fileobj.write"
	"zipfile.py" -> "self._fileobj.tell"
	"zipfile.py" -> "self._fileobj.tell"
	"zipfile.py" -> "self._fileobj.seek"
	"zipfile.py" -> "self._fileobj.write"
	"zipfile.py" -> "self._zinfo.FileHeader"
	"zipfile.py" -> "self._fileobj.seek"
	"zipfile.py" -> "self._zipfile.filelist.append"
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> isinstance
	"zipfile.py" -> isinstance
	"zipfile.py" -> getattr
	"zipfile.py" -> "self._RealGetContents"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> _Tellable
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self._RealGetContents"
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self._fpclose"
	"zipfile.py" -> "self.close"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> join
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> print
	"zipfile.py" -> print
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> "fp.seek"
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> len
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> print
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> "filename.decode"
	"zipfile.py" -> "filename.decode"
	"zipfile.py" -> ZipInfo
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> "x._decodeExtra"
	"zipfile.py" -> "self.filelist.append"
	"zipfile.py" -> print
	"zipfile.py" -> print
	"zipfile.py" -> print
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "f.read"
	"zipfile.py" -> "self.NameToInfo.get"
	"zipfile.py" -> KeyError
	"zipfile.py" -> isinstance
	"zipfile.py" -> TypeError
	"zipfile.py" -> type
	"zipfile.py" -> isinstance
	"zipfile.py" -> TypeError
	"zipfile.py" -> type
	"zipfile.py" -> len
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> isinstance
	"zipfile.py" -> ZipInfo
	"zipfile.py" -> "self.getinfo"
	"zipfile.py" -> "self._open_to_write"
	"zipfile.py" -> ValueError
	"zipfile.py" -> _SharedFile
	"zipfile.py" -> "zef_file.read"
	"zipfile.py" -> len
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> "zef_file.read"
	"zipfile.py" -> "zef_file.read"
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> "fname.decode"
	"zipfile.py" -> "fname.decode"
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> isinstance
	"zipfile.py" -> TypeError
	"zipfile.py" -> type
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> ZipExtFile
	"zipfile.py" -> "zef_file.close"
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> LargeZipFile
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> "self._writecheck"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "zinfo.FileHeader"
	"zipfile.py" -> _ZipWriteFile
	"zipfile.py" -> "self._extract_member"
	"zipfile.py" -> "self.namelist"
	"zipfile.py" -> "self._extract_member"
	"zipfile.py" -> "str.maketrans"
	"zipfile.py" -> len
	"zipfile.py" -> "arcname.translate"
	"zipfile.py" -> "x.rstrip"
	"zipfile.py" -> "arcname.split"
	"zipfile.py" -> "pathsep.join"
	"zipfile.py" -> isinstance
	"zipfile.py" -> "self.getinfo"
	"zipfile.py" -> "member.filename.replace"
	"zipfile.py" -> "arcname.replace"
	"zipfile.py" -> "arcname.split"
	"zipfile.py" -> "self._sanitize_windows_name"
	"zipfile.py" -> "member.is_dir"
	"zipfile.py" -> "self.open"
	"zipfile.py" -> open
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> len
	"zipfile.py" -> LargeZipFile
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> "ZipInfo.from_file"
	"zipfile.py" -> "zinfo.is_dir"
	"zipfile.py" -> "self.mkdir"
	"zipfile.py" -> open
	"zipfile.py" -> "self.open"
	"zipfile.py" -> isinstance
	"zipfile.py" -> "data.encode"
	"zipfile.py" -> isinstance
	"zipfile.py" -> ZipInfo
	"zipfile.py" -> "time.localtime"
	"zipfile.py" -> "time.time"
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> len
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "dest.write"
	"zipfile.py" -> isinstance
	"zipfile.py" -> "zinfo.is_dir"
	"zipfile.py" -> ValueError
	"zipfile.py" -> isinstance
	"zipfile.py" -> "directory_name.endswith"
	"zipfile.py" -> ZipInfo
	"zipfile.py" -> TypeError
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> "self._writecheck"
	"zipfile.py" -> "self.filelist.append"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "zinfo.FileHeader"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> "self.close"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self._write_end_record"
	"zipfile.py" -> "self._fpclose"
	"zipfile.py" -> "extra.append"
	"zipfile.py" -> "extra.append"
	"zipfile.py" -> "extra.append"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> "zinfo._encodeFilenameFlags"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> len
	"zipfile.py" -> LargeZipFile
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> min
	"zipfile.py" -> min
	"zipfile.py" -> min
	"zipfile.py" -> len
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.truncate"
	"zipfile.py" -> "self.fp.flush"
	"zipfile.py" -> "fp.close"
	"zipfile.py" -> "ZipFile.__init__"
	"zipfile.py" -> filterfunc
	"zipfile.py" -> print
	"zipfile.py" -> print
	"zipfile.py" -> "self._get_codename"
	"zipfile.py" -> print
	"zipfile.py" -> "self.write"
	"zipfile.py" -> sorted
	"zipfile.py" -> "dirlist.remove"
	"zipfile.py" -> "self.writepy"
	"zipfile.py" -> filterfunc
	"zipfile.py" -> print
	"zipfile.py" -> "self._get_codename"
	"zipfile.py" -> print
	"zipfile.py" -> "self.write"
	"zipfile.py" -> print
	"zipfile.py" -> sorted
	"zipfile.py" -> filterfunc
	"zipfile.py" -> print
	"zipfile.py" -> "self._get_codename"
	"zipfile.py" -> print
	"zipfile.py" -> "self.write"
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> "self._get_codename"
	"zipfile.py" -> print
	"zipfile.py" -> "self.write"
	"zipfile.py" -> print
	"zipfile.py" -> print
	"zipfile.py" -> format
	"zipfile.py" -> ValueError
	"zipfile.py" -> "itertools.islice"
	"zipfile.py" -> "path.rstrip"
	"zipfile.py" -> "itertools.filterfalse"
	"zipfile.py" -> set
	"zipfile.py" -> "itertools.chain.from_iterable"
	"zipfile.py" -> map
	"zipfile.py" -> _dedupe
	"zipfile.py" -> super
	"zipfile.py" -> list
	"zipfile.py" -> "self._implied_dirs"
	"zipfile.py" -> set
	"zipfile.py" -> "self.namelist"
	"zipfile.py" -> "self._name_set"
	"zipfile.py" -> super
	"zipfile.py" -> "name.endswith"
	"zipfile.py" -> "self._name_set"
	"zipfile.py" -> ZipInfo
	"zipfile.py" -> isinstance
	"zipfile.py" -> isinstance
	"zipfile.py" -> cls
	"zipfile.py" -> super
	"zipfile.py" -> super
	"zipfile.py" -> "FastLookup.make"
	"zipfile.py" -> "self.is_dir"
	"zipfile.py" -> IsADirectoryError
	"zipfile.py" -> "self.exists"
	"zipfile.py" -> FileNotFoundError
	"zipfile.py" -> "self.root.open"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "strm.read"
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "strm.read"
	"zipfile.py" -> "path.at.rstrip"
	"zipfile.py" -> "self.at.rstrip"
	"zipfile.py" -> "self.__class__"
	"zipfile.py" -> "self.at.endswith"
	"zipfile.py" -> "self.exists"
	"zipfile.py" -> "self.is_dir"
	"zipfile.py" -> "self.root._name_set"
	"zipfile.py" -> "self.is_dir"
	"zipfile.py" -> ValueError
	"zipfile.py" -> map
	"zipfile.py" -> "self.root.namelist"
	"zipfile.py" -> filter
	"zipfile.py" -> "self.__repr.format"
	"zipfile.py" -> "self._next"
	"zipfile.py" -> "self.root.resolve_dir"
	"zipfile.py" -> "self.at.rstrip"
	"zipfile.py" -> "self._next"
	"zipfile.py" -> "parser.add_mutually_exclusive_group"
	"zipfile.py" -> "group.add_argument"
	"zipfile.py" -> "group.add_argument"
	"zipfile.py" -> "group.add_argument"
	"zipfile.py" -> "group.add_argument"
	"zipfile.py" -> "parser.add_argument"
	"zipfile.py" -> "parser.parse_args"
	"zipfile.py" -> ZipFile
	"zipfile.py" -> "zf.testzip"
	"zipfile.py" -> print
	"zipfile.py" -> format
	"zipfile.py" -> print
	"zipfile.py" -> ZipFile
	"zipfile.py" -> "zf.printdir"
	"zipfile.py" -> ZipFile
	"zipfile.py" -> "zf.extractall"
	"zipfile.py" -> print
	"zipfile.py" -> "sys.exit"
	"zipfile.py" -> "args.create.pop"
	"zipfile.py" -> "zf.write"
	"zipfile.py" -> "zf.write"
	"zipfile.py" -> sorted
	"zipfile.py" -> ZipFile
	"py_compile.py" -> join
	"py_compile.py" -> "tbtext.replace"
	"py_compile.py" -> "Exception.__init__"
	"py_compile.py" -> FileExistsError
	"py_compile.py" -> "msg.format"
	"py_compile.py" -> FileExistsError
	"py_compile.py" -> "msg.format"
	"py_compile.py" -> "loader.get_data"
	"py_compile.py" -> "loader.source_to_code"
	"py_compile.py" -> PyCompileError
	"py_compile.py" -> "sys.stderr.write"
	"py_compile.py" -> "loader.path_stats"
	"py_compile.py" -> "parser.add_argument"
	"py_compile.py" -> "parser.add_argument"
	"py_compile.py" -> "parser.parse_args"
	"py_compile.py" -> "filename.rstrip"
	"py_compile.py" -> "sys.stdin.readlines"
	"py_compile.py" -> compile
	"py_compile.py" -> "parser.exit"
	"py_compile.py" -> "parser.exit"
	"py_compile.py" -> "parser.exit"
	"py_compile.py" -> "parser.exit"
	"py_compile.py" -> str
	"dataclasses.py" -> _HAS_DEFAULT_FACTORY_CLASS
	"dataclasses.py" -> _MISSING_TYPE
	"dataclasses.py" -> _KW_ONLY_TYPE
	"dataclasses.py" -> _FIELD_BASE
	"dataclasses.py" -> _FIELD_BASE
	"dataclasses.py" -> _FIELD_BASE
	"dataclasses.py" -> set
	"dataclasses.py" -> id
	"dataclasses.py" -> "_thread.get_ident"
	"dataclasses.py" -> "repr_running.add"
	"dataclasses.py" -> user_function
	"dataclasses.py" -> "repr_running.discard"
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> repr
	"dataclasses.py" -> InitVar
	"dataclasses.py" -> getattr
	"dataclasses.py" -> type
	"dataclasses.py" -> func
	"dataclasses.py" -> classmethod
	"dataclasses.py" -> ValueError
	"dataclasses.py" -> Field
	"dataclasses.py" -> tuple
	"dataclasses.py" -> tuple
	"dataclasses.py" -> join
	"dataclasses.py" -> join
	"dataclasses.py" -> join
	"dataclasses.py" -> join
	"dataclasses.py" -> "locals.keys"
	"dataclasses.py" -> exec
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> "locals.update"
	"dataclasses.py" -> "body_lines.append"
	"dataclasses.py" -> join
	"dataclasses.py" -> "body_lines.append"
	"dataclasses.py" -> join
	"dataclasses.py" -> join
	"dataclasses.py" -> repr
	"dataclasses.py" -> type
	"dataclasses.py" -> type
	"dataclasses.py" -> "_MODULE_IDENTIFIER_RE.match"
	"dataclasses.py" -> "match.group"
	"dataclasses.py" -> "sys.modules.get"
	"dataclasses.py" -> "sys.modules.get"
	"dataclasses.py" -> "module.__dict__.get"
	"dataclasses.py" -> "sys.modules.get"
	"dataclasses.py" -> is_type_predicate
	"dataclasses.py" -> "ns.get"
	"dataclasses.py" -> "match.group"
	"dataclasses.py" -> getattr
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> "sys.modules.get"
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> ValueError
	"dataclasses.py" -> type
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> setattr
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> setattr
	"dataclasses.py" -> _DataclassParams
	"dataclasses.py" -> getattr
	"dataclasses.py" -> "base_fields.values"
	"dataclasses.py" -> getattr
	"dataclasses.py" -> "cls.__dict__.get"
	"dataclasses.py" -> "cls_annotations.items"
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> "cls_fields.append"
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> getattr
	"dataclasses.py" -> delattr
	"dataclasses.py" -> setattr
	"dataclasses.py" -> "cls.__dict__.items"
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> setattr
	"dataclasses.py" -> "cls.__dict__.get"
	"dataclasses.py" -> ValueError
	"dataclasses.py" -> "fields.values"
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> "fields.values"
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> bool
	"dataclasses.py" -> bool
	"dataclasses.py" -> bool
	"dataclasses.py" -> hash_action
	"dataclasses.py" -> getattr
	"dataclasses.py" -> str
	"dataclasses.py" -> tuple
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> getattr
	"dataclasses.py" -> zip
	"dataclasses.py" -> "object.__setattr__"
	"dataclasses.py" -> "cls.__dict__.get"
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> dict
	"dataclasses.py" -> tuple
	"dataclasses.py" -> set
	"dataclasses.py" -> "itertools.chain.from_iterable"
	"dataclasses.py" -> map
	"dataclasses.py" -> tuple
	"dataclasses.py" -> "itertools.filterfalse"
	"dataclasses.py" -> "itertools.chain"
	"dataclasses.py" -> "cls_dict.pop"
	"dataclasses.py" -> "cls_dict.pop"
	"dataclasses.py" -> "cls_dict.pop"
	"dataclasses.py" -> getattr
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> getattr
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> tuple
	"dataclasses.py" -> "fields.values"
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> type
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> type
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> getattr
	"dataclasses.py" -> "result.append"
	"dataclasses.py" -> dict_factory
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> "obj.items"
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> getattr
	"dataclasses.py" -> "result.append"
	"dataclasses.py" -> tuple_factory
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> "obj.items"
	"dataclasses.py" -> set
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> len
	"dataclasses.py" -> len
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> "name.isidentifier"
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> "seen.add"
	"dataclasses.py" -> "ns.update"
	"dataclasses.py" -> "ns.update"
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> values
	"dataclasses.py" -> getattr
	"dataclasses.py" -> ValueError
	"dataclasses.py" -> ValueError
	"dataclasses.py" -> getattr
	"dataclasses.py" -> "obj.__class__"
	"conftest.py" -> "monkeypatch.MonkeyPatch"
	"conftest.py" -> "mp.delenv"
	"conftest.py" -> "mp.setenv"
	"conftest.py" -> "mp.undo"
	"conftest.py" -> "pytest.fixture"
	"conftest.py" -> "monkeypatch._setitem.extend"
	"conftest.py" -> "pytest.fixture"
	"conftest.py" -> Flask
	"conftest.py" -> "app.config.update"
	"conftest.py" -> "app.app_context"
	"conftest.py" -> "app.test_request_context"
	"conftest.py" -> "app.test_client"
	"conftest.py" -> "monkeypatch.syspath_prepend"
	"conftest.py" -> set
	"conftest.py" -> "sys.modules.keys"
	"conftest.py" -> "sys.modules.keys"
	"conftest.py" -> "sys.modules.pop"
	"conftest.py" -> "leaks.append"
	"conftest.py" -> "request_ctx._get_current_object"
	"conftest.py" -> "request_ctx.pop"
	"conftest.py" -> "pytest.fixture"
	"conftest.py" -> AttributeError
	"conftest.py" -> getattr
	"conftest.py" -> LimitedLoader
	"conftest.py" -> old_get_loader
	"conftest.py" -> "monkeypatch.setattr"
	"conftest.py" -> "pytest.fixture"
	"conftest.py" -> "rv.mkdir"
	"conftest.py" -> "monkeypatch.syspath_prepend"
	"conftest.py" -> "monkeypatch.setattr"
	"conftest.py" -> "rv.mkdir"
	"conftest.py" -> "monkeypatch.syspath_prepend"
	"conftest.py" -> "request.addfinalizer"
	"conftest.py" -> "sys.modules.pop"
	"test_converters.py" -> "value.split"
	"test_converters.py" -> super
	"test_converters.py" -> join
	"test_converters.py" -> base_to_url
	"test_converters.py" -> join
	"test_converters.py" -> "app.route"
	"test_converters.py" -> "client.get"
	"test_converters.py" -> "app.test_request_context"
	"test_converters.py" -> url_for
	"test_converters.py" -> "app.get"
	"test_converters.py" -> "client.get"
	"test_logging.py" -> "logger.setLevel"
	"test_logging.py" -> "pytestconfig.pluginmanager.unregister"
	"test_logging.py" -> "logger.setLevel"
	"test_logging.py" -> "pytestconfig.pluginmanager.register"
	"test_logging.py" -> "pytest.fixture"
	"test_logging.py" -> "app.logger.error"
	"test_logging.py" -> "app.route"
	"test_logging.py" -> "client.get"
	"test_logging.py" -> "stream.getvalue"
	"test_logging.py" -> "wsgi_errors_stream._get_current_object"
	"test_logging.py" -> "app.test_request_context"
	"test_logging.py" -> "wsgi_errors_stream._get_current_object"
	"test_logging.py" -> has_level_handler
	"test_logging.py" -> has_level_handler
	"test_logging.py" -> has_level_handler
	"test_logging.py" -> "handler.setLevel"
	"test_logging.py" -> has_level_handler
	"test_logging.py" -> Exception
	"test_logging.py" -> "app.route"
	"test_logging.py" -> "client.get"
	"test_logging.py" -> "stream.getvalue"
	"test_signals.py" -> "flask.render_template"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "flask.template_rendered.connect"
	"test_signals.py" -> "client.get"
	"test_signals.py" -> len
	"test_signals.py" -> "flask.template_rendered.disconnect"
	"test_signals.py" -> "flask.Flask"
	"test_signals.py" -> "flask.render_template"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "flask.before_render_template.connect"
	"test_signals.py" -> get
	"test_signals.py" -> "app.test_client"
	"test_signals.py" -> len
	"test_signals.py" -> "flask.before_render_template.disconnect"
	"test_signals.py" -> "flask.Flask"
	"test_signals.py" -> "calls.append"
	"test_signals.py" -> "calls.append"
	"test_signals.py" -> "calls.append"
	"test_signals.py" -> "calls.append"
	"test_signals.py" -> "calls.append"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "flask.request_started.connect"
	"test_signals.py" -> "flask.request_finished.connect"
	"test_signals.py" -> get
	"test_signals.py" -> "app.test_client"
	"test_signals.py" -> "flask.request_started.disconnect"
	"test_signals.py" -> "flask.request_finished.disconnect"
	"test_signals.py" -> "flask.Flask"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "flask.got_request_exception.connect"
	"test_signals.py" -> get
	"test_signals.py" -> "app.test_client"
	"test_signals.py" -> len
	"test_signals.py" -> isinstance
	"test_signals.py" -> "flask.got_request_exception.disconnect"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "flask.appcontext_pushed.connect"
	"test_signals.py" -> "flask.appcontext_popped.connect"
	"test_signals.py" -> "client.get"
	"test_signals.py" -> "flask.appcontext_pushed.disconnect"
	"test_signals.py" -> "flask.appcontext_popped.disconnect"
	"test_signals.py" -> "flask.flash"
	"test_signals.py" -> "flask.redirect"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "flask.message_flashed.connect"
	"test_signals.py" -> "app.test_client"
	"test_signals.py" -> "client.session_transaction"
	"test_signals.py" -> "client.get"
	"test_signals.py" -> len
	"test_signals.py" -> "flask.message_flashed.disconnect"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "flask.appcontext_tearing_down.connect"
	"test_signals.py" -> "client.get"
	"test_signals.py" -> len
	"test_signals.py" -> isinstance
	"test_signals.py" -> "flask.appcontext_tearing_down.disconnect"
	"test_request.py" -> AssertionError
	"test_request.py" -> "app.post"
	"test_request.py" -> "app.errorhandler"
	"test_request.py" -> "client.post"
	"test_request.py" -> Request
	"test_request.py" -> "app.app_context"
	"test_request.py" -> "app.app_context"
	"test_request.py" -> "app.get"
	"test_request.py" -> "app.test_client"
	"test_request.py" -> "client.get"
	"test_request.py" -> "client.get"
	"test_request.py" -> "client.get"
	"test_async.py" -> "pytest.importorskip"
	"test_async.py" -> Flask
	"test_async.py" -> "app.route"
	"test_async.py" -> "app.route"
	"test_async.py" -> "app.errorhandler"
	"test_async.py" -> AppError
	"test_async.py" -> "app.route"
	"test_async.py" -> Blueprint
	"test_async.py" -> "blueprint.route"
	"test_async.py" -> "blueprint.errorhandler"
	"test_async.py" -> BlueprintError
	"test_async.py" -> "blueprint.route"
	"test_async.py" -> "app.register_blueprint"
	"test_async.py" -> "app.add_url_rule"
	"test_async.py" -> "AsyncView.as_view"
	"test_async.py" -> "app.add_url_rule"
	"test_async.py" -> "AsyncMethodView.as_view"
	"test_async.py" -> "pytest.fixture"
	"test_async.py" -> "async_app.test_client"
	"test_async.py" -> "test_client.get"
	"test_async.py" -> "response.get_data"
	"test_async.py" -> "test_client.post"
	"test_async.py" -> "response.get_data"
	"test_async.py" -> "pytest.mark.parametrize"
	"test_async.py" -> "async_app.test_client"
	"test_async.py" -> "test_client.get"
	"test_async.py" -> "pytest.mark.parametrize"
	"test_async.py" -> Flask
	"test_async.py" -> "app.route"
	"test_async.py" -> Blueprint
	"test_async.py" -> "blueprint.route"
	"test_async.py" -> "app.register_blueprint"
	"test_async.py" -> "app.test_client"
	"test_async.py" -> "test_client.get"
	"test_async.py" -> "test_client.get"
	"test_session_interface.py" -> "request_ctx.match_request"
	"test_session_interface.py" -> "flask.Flask"
	"test_session_interface.py" -> MySessionInterface
	"test_session_interface.py" -> "app.get"
	"test_session_interface.py" -> get
	"test_session_interface.py" -> "app.test_client"
	"test_instance_config.py" -> "pytest.raises"
	"test_instance_config.py" -> "flask.Flask"
	"test_instance_config.py" -> "flask.Flask"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> "app.mkdir"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> "monkeypatch.syspath_prepend"
	"test_instance_config.py" -> "ns.mkdir"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> create_namespace
	"test_instance_config.py" -> create_namespace
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> "installed_path.mkdir"
	"test_instance_config.py" -> "monkeypatch.syspath_prepend"
	"test_instance_config.py" -> "app.mkdir"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> "app.mkdir"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> purge_module
	"test_views.py" -> "app.test_client"
	"test_views.py" -> "c.get"
	"test_views.py" -> "c.post"
	"test_views.py" -> "c.put"
	"test_views.py" -> parse_set_header
	"test_views.py" -> "c.open"
	"test_views.py" -> sorted
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> common_test
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> common_test
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> common_test
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "BetterIndex.as_view"
	"test_views.py" -> parse_set_header
	"test_views.py" -> "client.open"
	"test_views.py" -> sorted
	"test_views.py" -> "flask.make_response"
	"test_views.py" -> f
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "flask.Flask"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index1.as_view"
	"test_views.py" -> "app.test_client"
	"test_views.py" -> "c.open"
	"test_views.py" -> "flask.Flask"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index2.as_view"
	"test_views.py" -> "app.test_client"
	"test_views.py" -> "c.open"
	"test_views.py" -> sorted
	"test_views.py" -> "flask.Flask"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index3.as_view"
	"test_views.py" -> "app.test_client"
	"test_views.py" -> "c.open"
	"test_views.py" -> "flask.Response"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.head"
	"test_views.py" -> "flask.Response"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.head"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> "pytest.raises"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> common_test
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "ChildView.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.open"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "GetDeleteView.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.delete"
	"test_views.py" -> sorted
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "View.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.post"
	"test_views.py" -> sorted
	"test_views.py" -> str
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "CountInit.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.get"
	"test_json_tag.py" -> TaggedJSONSerializer
	"test_json_tag.py" -> "s.loads"
	"test_json_tag.py" -> "s.dumps"
	"test_json_tag.py" -> "pytest.mark.parametrize"
	"test_json_tag.py" -> replace
	"test_json_tag.py" -> TaggedJSONSerializer
	"test_json_tag.py" -> "pytest.raises"
	"test_json_tag.py" -> "s.register"
	"test_json_tag.py" -> isinstance
	"test_json_tag.py" -> isinstance
	"test_json_tag.py" -> isinstance
	"test_json_tag.py" -> "self.serializer.tag"
	"test_json_tag.py" -> Foo
	"test_json_tag.py" -> TaggedJSONSerializer
	"test_json_tag.py" -> "s.register"
	"test_json_tag.py" -> "s.loads"
	"test_json_tag.py" -> "s.dumps"
	"test_json_tag.py" -> Foo
	"test_json_tag.py" -> JSONTag
	"test_json_tag.py" -> "pytest.raises"
	"test_json_tag.py" -> "pytest.raises"
	"test_json_tag.py" -> "pytest.raises"
	"test_json_tag.py" -> TaggedJSONSerializer
	"test_json_tag.py" -> "s.register"
	"test_json_tag.py" -> isinstance
	"test_json_tag.py" -> "s.register"
	"test_json_tag.py" -> isinstance
	"test_subclassing.py" -> SuppressedFlask
	"test_subclassing.py" -> Exception
	"test_subclassing.py" -> "app.route"
	"test_subclassing.py" -> get
	"test_subclassing.py" -> "app.test_client"
	"test_subclassing.py" -> "out.getvalue"
	"test_reqctx.py" -> "buffer.append"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "ctx.push"
	"test_reqctx.py" -> "ctx.pop"
	"test_reqctx.py" -> "buffer.append"
	"test_reqctx.py" -> Exception
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "buffer.append"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> Exception
	"test_reqctx.py" -> "app.config.update"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "flask.url_for"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "flask.url_for"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "app.config.update"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "app.config.update"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> index
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> meh
	"test_reqctx.py" -> "flask.has_request_context"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "ctx.push"
	"test_reqctx.py" -> "flask.has_request_context"
	"test_reqctx.py" -> "ctx.pop"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "ctx.push"
	"test_reqctx.py" -> index
	"test_reqctx.py" -> "ctx.pop"
	"test_reqctx.py" -> "pytest.raises"
	"test_reqctx.py" -> index
	"test_reqctx.py" -> "request_ctx.copy"
	"test_reqctx.py" -> "flask.session.get"
	"test_reqctx.py" -> "greenlets.append"
	"test_reqctx.py" -> greenlet
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "client.get"
	"test_reqctx.py" -> run
	"test_reqctx.py" -> "flask.session.get"
	"test_reqctx.py" -> "greenlets.append"
	"test_reqctx.py" -> greenlet
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "client.get"
	"test_reqctx.py" -> run
	"test_reqctx.py" -> "pytest.mark.skipif"
	"test_reqctx.py" -> SessionError
	"test_reqctx.py" -> FailingSessionInterface
	"test_reqctx.py" -> CustomFlask
	"test_reqctx.py" -> AssertionError
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> get
	"test_reqctx.py" -> "app.test_client"
	"test_reqctx.py" -> "flask.request.url.endswith"
	"test_reqctx.py" -> get_cookie_name
	"test_reqctx.py" -> super
	"test_reqctx.py" -> PathAwareSessionInterface
	"test_reqctx.py" -> CustomFlask
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "flask.session.get"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "flask.session.get"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.test_client"
	"test_reqctx.py" -> "test_client.post"
	"test_reqctx.py" -> "test_client.post"
	"test_reqctx.py" -> "test_client.get"
	"test_reqctx.py" -> "test_client.get"
	"test_reqctx.py" -> "flask.Flask"
	"test_reqctx.py" -> EnvironBuilder
	"test_reqctx.py" -> "builder.get_environ"
	"test_reqctx.py" -> "app.request_context"
	"test_reqctx.py" -> "app.full_dispatch_request"
	"test_reqctx.py" -> "flask.Flask"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> EnvironBuilder
	"test_reqctx.py" -> "builder.get_environ"
	"test_reqctx.py" -> "app.request_context"
	"test_reqctx.py" -> "app.full_dispatch_request"
	"test_reqctx.py" -> "flask.Flask"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> get
	"test_reqctx.py" -> "app.test_client"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "frontend.errorhandler"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "frontend.route"
	"test_blueprints.py" -> "backend.errorhandler"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "backend.route"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "sideend.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.errorhandler"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "blue.errorhandler"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "blue.register_error_handler"
	"test_blueprints.py" -> MyDecoratorException
	"test_blueprints.py" -> "blue.route"
	"test_blueprints.py" -> MyFunctionException
	"test_blueprints.py" -> "blue.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "errors.app_errorhandler"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "forbidden_bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "pytest.mark.parametrize"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> str
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "values.setdefault"
	"test_blueprints.py" -> "values.pop"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "app.test_client"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "rv.data.strip"
	"test_blueprints.py" -> "rv.close"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "rv.data.strip"
	"test_blueprints.py" -> "rv.close"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> parse_cache_control_header
	"test_blueprints.py" -> "rv.close"
	"test_blueprints.py" -> "app.test_request_context"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "app.test_request_context"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> test_request_context
	"test_blueprints.py" -> "flask.Flask"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> MyBlueprint
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.test_request_context"
	"test_blueprints.py" -> "blueprint.send_static_file"
	"test_blueprints.py" -> parse_cache_control_header
	"test_blueprints.py" -> "rv.close"
	"test_blueprints.py" -> sorted
	"test_blueprints.py" -> "app.jinja_env.list_templates"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "test.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> str
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "bp.add_url_rule"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "bp.add_url_rule"
	"test_blueprints.py" -> "app.url_map.add"
	"test_blueprints.py" -> Rule
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.endpoint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.filters.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.add_app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.filters.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.filters.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.add_app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.filters.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.add_app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.add_app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.tests.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.add_app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.tests.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.tests.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.add_app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.tests.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.add_app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.add_app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.render_template_string"
	"test_blueprints.py" -> template_string
	"test_blueprints.py" -> "answer_bp.route"
	"test_blueprints.py" -> template_string
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_global"
	"test_blueprints.py" -> "app.jinja_env.globals.keys"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.globals.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "app.app_context"
	"test_blueprints.py" -> "flask.render_template_string"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "values.setdefault"
	"test_blueprints.py" -> "values.pop"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "parent.errorhandler"
	"test_blueprints.py" -> "parent.route"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "parent.route"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "grandchild.errorhandler"
	"test_blueprints.py" -> "grandchild.route"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "grandchild.route"
	"test_blueprints.py" -> "child.register_blueprint"
	"test_blueprints.py" -> "parent.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> dict
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> dict
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> dict
	"test_blueprints.py" -> join
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "flask.render_template_string"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "parent.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "parent.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "pytest.mark.parametrize"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "parent.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "parent.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "bp.register_blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.get"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "bp.get"
	"test_blueprints.py" -> "bp.errorhandler"
	"test_blueprints.py" -> "bp2.get"
	"test_blueprints.py" -> "bp.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_pyfile"
	"test_config.py" -> "__file__.rsplit"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_object"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_file"
	"test_config.py" -> common_object_test
	"test_config.py" -> "pytest.importorskip"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_file"
	"test_config.py" -> common_object_test
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_prefixed_env"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_prefixed_env"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_prefixed_env"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_mapping"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_mapping"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_mapping"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_mapping"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "pytest.raises"
	"test_config.py" -> "app.config.from_mapping"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_object"
	"test_config.py" -> common_object_test
	"test_config.py" -> "monkeypatch.setattr"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "pytest.raises"
	"test_config.py" -> "app.config.from_envvar"
	"test_config.py" -> str
	"test_config.py" -> "app.config.from_envvar"
	"test_config.py" -> "monkeypatch.setattr"
	"test_config.py" -> "__file__.rsplit"
	"test_config.py" -> "app.config.from_envvar"
	"test_config.py" -> common_object_test
	"test_config.py" -> "monkeypatch.setattr"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "pytest.raises"
	"test_config.py" -> "app.config.from_envvar"
	"test_config.py" -> str
	"test_config.py" -> "msg.startswith"
	"test_config.py" -> "msg.endswith"
	"test_config.py" -> "app.config.from_envvar"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "pytest.raises"
	"test_config.py" -> "app.config.from_pyfile"
	"test_config.py" -> str
	"test_config.py" -> "msg.startswith"
	"test_config.py" -> "msg.endswith"
	"test_config.py" -> "app.config.from_pyfile"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "pytest.raises"
	"test_config.py" -> "app.config.from_file"
	"test_config.py" -> str
	"test_config.py" -> "msg.startswith"
	"test_config.py" -> "msg.endswith"
	"test_config.py" -> "app.config.from_file"
	"test_config.py" -> Flask
	"test_config.py" -> isinstance
	"test_config.py" -> "app.config.from_object"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.get_namespace"
	"test_config.py" -> len
	"test_config.py" -> "app.config.get_namespace"
	"test_config.py" -> len
	"test_config.py" -> "app.config.get_namespace"
	"test_config.py" -> len
	"test_config.py" -> "app.config.get_namespace"
	"test_config.py" -> len
	"test_config.py" -> "f.write_text"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_pyfile"
	"test_config.py" -> "pytest.mark.parametrize"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> "pytest.raises"
	"test_user_error_handler.py" -> "app.register_error_handler"
	"test_user_error_handler.py" -> CustomException
	"test_user_error_handler.py" -> str
	"test_user_error_handler.py" -> "pytest.raises"
	"test_user_error_handler.py" -> "app.register_error_handler"
	"test_user_error_handler.py" -> str
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> type
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> "pytest.raises"
	"test_user_error_handler.py" -> "app.register_error_handler"
	"test_user_error_handler.py" -> str
	"test_user_error_handler.py" -> CustomException
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> KeyError
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "flask.abort"
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> ParentException
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> ChildExceptionUnregistered
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> ChildExceptionRegistered
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "app.test_client"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> Forbidden
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> ForbiddenSubclassRegistered
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> ForbiddenSubclassUnregistered
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "app.test_client"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "flask.Blueprint"
	"test_user_error_handler.py" -> "bp.errorhandler"
	"test_user_error_handler.py" -> InternalServerError
	"test_user_error_handler.py" -> "bp.route"
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> InternalServerError
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "app.register_blueprint"
	"test_user_error_handler.py" -> "app.test_client"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "flask.Blueprint"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "bp.errorhandler"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "bp.errorhandler"
	"test_user_error_handler.py" -> NotFound
	"test_user_error_handler.py" -> "bp.route"
	"test_user_error_handler.py" -> Forbidden
	"test_user_error_handler.py" -> "bp.route"
	"test_user_error_handler.py" -> "flask.Flask"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> Forbidden
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "app.register_blueprint"
	"test_user_error_handler.py" -> "app.test_client"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "self.Custom"
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> KeyError
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "flask.abort"
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> InternalServerError
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "pytest.fixture"
	"test_user_error_handler.py" -> getattr
	"test_user_error_handler.py" -> type
	"test_user_error_handler.py" -> type
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "self.report_error"
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "pytest.mark.parametrize"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> str
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "self.report_error"
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_helpers.py" -> getattr
	"test_helpers.py" -> "flask.send_file"
	"test_helpers.py" -> "app.open_resource"
	"test_helpers.py" -> "f.read"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "app.send_static_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "flask.send_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "app.send_static_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "flask.send_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "app.send_static_file"
	"test_helpers.py" -> FakePath
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> StaticFileApp
	"test_helpers.py" -> "app.test_request_context"
	"test_helpers.py" -> "app.send_static_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "flask.send_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "flask.send_from_directory"
	"test_helpers.py" -> "rv.data.strip"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "app.add_url_rule"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "MyView.as_view"
	"test_helpers.py" -> "app.add_url_rule"
	"test_helpers.py" -> "app.add_url_rule"
	"test_helpers.py" -> "app.add_url_rule"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "flask.redirect"
	"test_helpers.py" -> "app.app_context"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "flask.redirect"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "flask.abort"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "flask.abort"
	"test_helpers.py" -> MyFlask
	"test_helpers.py" -> isinstance
	"test_helpers.py" -> "app.app_context"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "flask.abort"
	"test_helpers.py" -> write_text
	"test_helpers.py" -> "flask.Flask"
	"test_helpers.py" -> AssertionError
	"test_helpers.py" -> "flask.Response"
	"test_helpers.py" -> "flask.stream_with_context"
	"test_helpers.py" -> generate
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "client.get"
	"test_helpers.py" -> "flask.Response"
	"test_helpers.py" -> generate
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "client.get"
	"test_helpers.py" -> "called.append"
	"test_helpers.py" -> next
	"test_helpers.py" -> "flask.Response"
	"test_helpers.py" -> "flask.stream_with_context"
	"test_helpers.py" -> Wrapper
	"test_helpers.py" -> generate
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "client.get"
	"test_helpers.py" -> "flask.Response"
	"test_helpers.py" -> gen
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "client.get"
	"test_helpers.py" -> "monkeypatch.setenv"
	"test_helpers.py" -> get_debug_flag
	"test_helpers.py" -> "pytest.mark.parametrize"
	"test_helpers.py" -> "flask.Flask"
	"test_helpers.py" -> "app.test_request_context"
	"test_helpers.py" -> "flask.helpers.make_response"
	"test_helpers.py" -> "flask.helpers.make_response"
	"test_helpers.py" -> "flask.Flask"
	"test_helpers.py" -> "app.open_resource"
	"test_helpers.py" -> str
	"test_helpers.py" -> "f.read"
	"test_helpers.py" -> "pytest.mark.parametrize"
	"test_helpers.py" -> "flask.Flask"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "app.open_resource"
	"test_helpers.py" -> "pytest.mark.parametrize"
	"test_helpers.py" -> "flask.Flask"
	"test_helpers.py" -> write_text
	"test_helpers.py" -> "app.open_resource"
	"test_helpers.py" -> "f.read"
	"test_helpers.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "flask.request.get_json"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.post"
	"test_json.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> str
	"test_json.py" -> "flask.request.get_json"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.post"
	"test_json.py" -> "flask.request.get_json"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.post"
	"test_json.py" -> "app.json.dumps"
	"test_json.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "flask.json.dump"
	"test_json.py" -> "out.seek"
	"test_json.py" -> "flask.json.load"
	"test_json.py" -> "app.add_url_rule"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "client.get"
	"test_json.py" -> "flask.json.loads"
	"test_json.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.get"
	"test_json.py" -> "flask.json.loads"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.get"
	"test_json.py" -> "flask.json.loads"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.get"
	"test_json.py" -> http_date
	"test_json.py" -> "pytest.mark.parametrize"
	"test_json.py" -> FixedOffset
	"test_json.py" -> FixedOffset
	"test_json.py" -> strftime
	"test_json.py" -> "dt.astimezone"
	"test_json.py" -> "flask.json.dumps"
	"test_json.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "app.add_url_rule"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "client.get"
	"test_json.py" -> "flask.json.loads"
	"test_json.py" -> str
	"test_json.py" -> "flask.json.dumps"
	"test_json.py" -> "flask.request.get_json"
	"test_json.py" -> str
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.post"
	"test_json.py" -> "flask.json.dumps"
	"test_json.py" -> "flask.render_template_string"
	"test_json.py" -> isinstance
	"test_json.py" -> "DefaultJSONProvider.default"
	"test_json.py" -> len
	"test_json.py" -> X
	"test_json.py" -> "kwargs.setdefault"
	"test_json.py" -> loads
	"test_json.py" -> super
	"test_json.py" -> CustomProvider
	"test_json.py" -> "flask.json.dumps"
	"test_json.py" -> "flask.request.get_json"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.post"
	"test_json.py" -> "flask.json.dumps"
	"test_json.py" -> "dict.fromkeys"
	"test_json.py" -> range
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.get"
	"test_json.py" -> "x.strip"
	"test_json.py" -> splitlines
	"test_json.py" -> decode
	"test_json.py" -> "rv.data.strip"
	"test_json.py" -> "json.dumps"
	"test_json.py" -> ObjectWithHTML
	"test_cli.py" -> resolve
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> isinstance
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> isinstance
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> isinstance
	"test_cli.py" -> Flask
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> Flask
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> Flask
	"test_cli.py" -> Flask
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> Flask
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> TypeError
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "request.addfinalizer"
	"test_cli.py" -> prepare_import
	"test_cli.py" -> str
	"test_cli.py" -> "pytest.mark.parametrize"
	"test_cli.py" -> locate_app
	"test_cli.py" -> "pytest.mark.parametrize"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> locate_app
	"test_cli.py" -> "pytest.mark.parametrize"
	"test_cli.py" -> locate_app
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> locate_app
	"test_cli.py" -> MockCtx
	"test_cli.py" -> get_version
	"test_cli.py" -> "capsys.readouterr"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> str
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> Flask
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "monkeypatch.chdir"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "monkeypatch.chdir"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> bool
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "current_app._get_current_object"
	"test_cli.py" -> "app.cli.command"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> Flask
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "cli.command"
	"test_cli.py" -> "cli.group"
	"test_cli.py" -> "subgroup.command"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> Flask
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Flask
	"test_cli.py" -> "cli.command"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Flask
	"test_cli.py" -> str
	"test_cli.py" -> "cli.command"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "pytest.mark.parametrize"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "cli.add_command"
	"test_cli.py" -> "flask_group.command"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Exception
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Flask
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> zip
	"test_cli.py" -> "output.splitlines"
	"test_cli.py" -> len
	"test_cli.py" -> invoke
	"test_cli.py" -> "self.expect_order"
	"test_cli.py" -> invoke
	"test_cli.py" -> invoke
	"test_cli.py" -> "self.expect_order"
	"test_cli.py" -> invoke
	"test_cli.py" -> "self.expect_order"
	"test_cli.py" -> invoke
	"test_cli.py" -> "app.url_map.iter_rules"
	"test_cli.py" -> "self.expect_order"
	"test_cli.py" -> invoke
	"test_cli.py" -> invoke
	"test_cli.py" -> invoke
	"test_cli.py" -> Flask
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Flask
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Flask
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "pytest.mark.skipif"
	"test_cli.py" -> dotenv_not_available
	"test_cli.py" -> "monkeypatch._setitem.append"
	"test_cli.py" -> "monkeypatch.setenv"
	"test_cli.py" -> "monkeypatch.chdir"
	"test_cli.py" -> load_dotenv
	"test_cli.py" -> load_dotenv
	"test_cli.py" -> "monkeypatch._setitem.append"
	"test_cli.py" -> load_dotenv
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "monkeypatch.chdir"
	"test_cli.py" -> load_dotenv
	"test_cli.py" -> "monkeypatch.chdir"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> Blueprint
	"test_cli.py" -> Blueprint
	"test_cli.py" -> Blueprint
	"test_cli.py" -> Blueprint
	"test_cli.py" -> "custom.cli.command"
	"test_cli.py" -> "nested.cli.command"
	"test_cli.py" -> "merged.cli.command"
	"test_cli.py" -> "late.cli.command"
	"test_cli.py" -> "app.register_blueprint"
	"test_cli.py" -> "app.register_blueprint"
	"test_cli.py" -> "app.register_blueprint"
	"test_cli.py" -> "app.register_blueprint"
	"test_cli.py" -> "app.test_cli_runner"
	"test_cli.py" -> "app_runner.invoke"
	"test_cli.py" -> "app_runner.invoke"
	"test_cli.py" -> "app_runner.invoke"
	"test_cli.py" -> "app_runner.invoke"
	"test_cli.py" -> Blueprint
	"test_cli.py" -> "app.register_blueprint"
	"test_cli.py" -> invoke
	"test_cli.py" -> "app.test_cli_runner"
	"test_cli.py" -> "run_command.make_context"
	"testing.py" -> getattr
	"testing.py" -> "self._output.write"
	"testing.py" -> "self._echo"
	"testing.py" -> "self._input.read"
	"testing.py" -> "self._echo"
	"testing.py" -> "self._input.read1"
	"testing.py" -> "self._echo"
	"testing.py" -> "self._input.readline"
	"testing.py" -> "self._echo"
	"testing.py" -> "self._input.readlines"
	"testing.py" -> iter
	"testing.py" -> "self._echo"
	"testing.py" -> repr
	"testing.py" -> super
	"testing.py" -> hasattr
	"testing.py" -> _find_binary_reader
	"testing.py" -> TypeError
	"testing.py" -> isinstance
	"testing.py" -> "input.encode"
	"testing.py" -> replace
	"testing.py" -> "self.stdout_bytes.decode"
	"testing.py" -> ValueError
	"testing.py" -> replace
	"testing.py" -> "self.stderr_bytes.decode"
	"testing.py" -> repr
	"testing.py" -> type
	"testing.py" -> dict
	"testing.py" -> "rv.update"
	"testing.py" -> "self.make_env"
	"testing.py" -> EchoingStdin
	"testing.py" -> _NamedTextIOWrapper
	"testing.py" -> _NamedTextIOWrapper
	"testing.py" -> _NamedTextIOWrapper
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> rstrip
	"testing.py" -> "text_input.readline"
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> "sys.stdout.flush"
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> "sys.stdout.flush"
	"testing.py" -> rstrip
	"testing.py" -> "text_input.readline"
	"testing.py" -> "sys.stdin.read"
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> "sys.stdout.flush"
	"testing.py" -> "env.items"
	"testing.py" -> "old_env.items"
	"testing.py" -> "self.isolation"
	"testing.py" -> isinstance
	"testing.py" -> "extra.pop"
	"testing.py" -> "self.get_default_prog_name"
	"testing.py" -> "cli.main"
	"testing.py" -> "sys.exc_info"
	"testing.py" -> isinstance
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> str
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> "sys.exc_info"
	"testing.py" -> "sys.stdout.flush"
	"testing.py" -> getvalue
	"testing.py" -> getvalue
	"testing.py" -> Result
	"tempfile.py" -> hasattr
	"tempfile.py" -> hasattr
	"tempfile.py" -> hasattr
	"tempfile.py" -> _allocate_lock
	"tempfile.py" -> isinstance
	"tempfile.py" -> isinstance
	"tempfile.py" -> TypeError
	"tempfile.py" -> TypeError
	"tempfile.py" -> isinstance
	"tempfile.py" -> output_type
	"tempfile.py" -> getattr
	"tempfile.py" -> join
	"tempfile.py" -> "self.rng.choices"
	"tempfile.py" -> "dirlist.append"
	"tempfile.py" -> "dirlist.extend"
	"tempfile.py" -> "dirlist.extend"
	"tempfile.py" -> "dirlist.append"
	"tempfile.py" -> "dirlist.append"
	"tempfile.py" -> _RandomNameSequence
	"tempfile.py" -> range
	"tempfile.py" -> next
	"tempfile.py" -> FileNotFoundError
	"tempfile.py" -> "_once_lock.acquire"
	"tempfile.py" -> _RandomNameSequence
	"tempfile.py" -> "_once_lock.release"
	"tempfile.py" -> map
	"tempfile.py" -> range
	"tempfile.py" -> next
	"tempfile.py" -> "_sys.audit"
	"tempfile.py" -> FileExistsError
	"tempfile.py" -> "_once_lock.acquire"
	"tempfile.py" -> "_once_lock.release"
	"tempfile.py" -> map
	"tempfile.py" -> range
	"tempfile.py" -> next
	"tempfile.py" -> "_sys.audit"
	"tempfile.py" -> FileExistsError
	"tempfile.py" -> range
	"tempfile.py" -> next
	"tempfile.py" -> FileExistsError
	"tempfile.py" -> "self.file.close"
	"tempfile.py" -> unlink
	"tempfile.py" -> "self.close"
	"tempfile.py" -> "self.file.close"
	"tempfile.py" -> _TemporaryFileCloser
	"tempfile.py" -> getattr
	"tempfile.py" -> hasattr
	"tempfile.py" -> func
	"tempfile.py" -> isinstance
	"tempfile.py" -> setattr
	"tempfile.py" -> "self.file.__enter__"
	"tempfile.py" -> "self.file.__exit__"
	"tempfile.py" -> "self.close"
	"tempfile.py" -> "self._closer.close"
	"tempfile.py" -> getattr
	"tempfile.py" -> getattr
	"tempfile.py" -> _TemporaryFileWrapper
	"tempfile.py" -> "file.close"
	"tempfile.py" -> hasattr
	"tempfile.py" -> getattr
	"tempfile.py" -> getattr
	"tempfile.py" -> getattr
	"tempfile.py" -> getattr
	"tempfile.py" -> classmethod
	"tempfile.py" -> "file.tell"
	"tempfile.py" -> "self.rollover"
	"tempfile.py" -> "file.tell"
	"tempfile.py" -> hasattr
	"tempfile.py" -> "newfile.buffer.write"
	"tempfile.py" -> getvalue
	"tempfile.py" -> "file.detach"
	"tempfile.py" -> "newfile.write"
	"tempfile.py" -> "file.getvalue"
	"tempfile.py" -> "newfile.seek"
	"tempfile.py" -> ValueError
	"tempfile.py" -> "self._file.close"
	"tempfile.py" -> "self._file.__iter__"
	"tempfile.py" -> format
	"tempfile.py" -> "self.close"
	"tempfile.py" -> "self._file.close"
	"tempfile.py" -> "self.rollover"
	"tempfile.py" -> "self._file.fileno"
	"tempfile.py" -> "self._file.flush"
	"tempfile.py" -> "self._file.isatty"
	"tempfile.py" -> "self._file.readable"
	"tempfile.py" -> "self._file.read"
	"tempfile.py" -> "self._file.read1"
	"tempfile.py" -> "self._file.readinto"
	"tempfile.py" -> "self._file.readinto1"
	"tempfile.py" -> "self._file.readline"
	"tempfile.py" -> "self._file.readlines"
	"tempfile.py" -> "self._file.seekable"
	"tempfile.py" -> "self._file.seek"
	"tempfile.py" -> "self._file.tell"
	"tempfile.py" -> "self._file.truncate"
	"tempfile.py" -> "self.rollover"
	"tempfile.py" -> "self._file.truncate"
	"tempfile.py" -> "self._file.writable"
	"tempfile.py" -> "file.write"
	"tempfile.py" -> "self._check"
	"tempfile.py" -> "file.writelines"
	"tempfile.py" -> "self._check"
	"tempfile.py" -> "self._file.detach"
	"tempfile.py" -> format
	"tempfile.py" -> issubclass
	"tempfile.py" -> "cls._rmtree"
	"tempfile.py" -> issubclass
	"tempfile.py" -> "cls._rmtree"
	"tempfile.py" -> format
	"tempfile.py" -> "self.cleanup"
	"tempfile.py" -> "self._finalizer.detach"
	"tempfile.py" -> "self._rmtree"
	"tempfile.py" -> classmethod
	"shlex.py" -> isinstance
	"shlex.py" -> "self.wordchars.maketrans"
	"shlex.py" -> "dict.fromkeys"
	"shlex.py" -> "self.wordchars.translate"
	"shlex.py" -> print
	"shlex.py" -> repr
	"shlex.py" -> "self.pushback.appendleft"
	"shlex.py" -> isinstance
	"shlex.py" -> "self.filestack.appendleft"
	"shlex.py" -> print
	"shlex.py" -> print
	"shlex.py" -> "self.instream.close"
	"shlex.py" -> "self.filestack.popleft"
	"shlex.py" -> print
	"shlex.py" -> "self.pushback.popleft"
	"shlex.py" -> print
	"shlex.py" -> repr
	"shlex.py" -> "self.read_token"
	"shlex.py" -> "self.sourcehook"
	"shlex.py" -> "self.read_token"
	"shlex.py" -> "self.push_source"
	"shlex.py" -> "self.get_token"
	"shlex.py" -> "self.pop_source"
	"shlex.py" -> "self.get_token"
	"shlex.py" -> print
	"shlex.py" -> repr
	"shlex.py" -> print
	"shlex.py" -> "self._pushback_chars.pop"
	"shlex.py" -> "self.instream.read"
	"shlex.py" -> print
	"shlex.py" -> print
	"shlex.py" -> "self.instream.readline"
	"shlex.py" -> print
	"shlex.py" -> ValueError
	"shlex.py" -> print
	"shlex.py" -> ValueError
	"shlex.py" -> print
	"shlex.py" -> "self.instream.readline"
	"shlex.py" -> "self._pushback_chars.append"
	"shlex.py" -> "self._pushback_chars.append"
	"shlex.py" -> "self.pushback.appendleft"
	"shlex.py" -> print
	"shlex.py" -> print
	"shlex.py" -> repr
	"shlex.py" -> print
	"shlex.py" -> isinstance
	"shlex.py" -> open
	"shlex.py" -> "self.get_token"
	"shlex.py" -> shlex
	"shlex.py" -> list
	"shlex.py" -> _find_unsafe
	"shlex.py" -> "s.replace"
	"shlex.py" -> "lexer.get_token"
	"shlex.py" -> print
	"shlex.py" -> repr
	"shlex.py" -> len
	"shlex.py" -> shlex
	"shlex.py" -> open
	"shlex.py" -> shlex
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "_SSLMethod.__members__.items"
	"ssl.py" -> getattr
	"ssl.py" -> hasattr
	"ssl.py" -> "dn.count"
	"ssl.py" -> "dn.lower"
	"ssl.py" -> "hostname.lower"
	"ssl.py" -> CertificateError
	"ssl.py" -> format
	"ssl.py" -> "dn.partition"
	"ssl.py" -> CertificateError
	"ssl.py" -> format
	"ssl.py" -> CertificateError
	"ssl.py" -> format
	"ssl.py" -> CertificateError
	"ssl.py" -> format
	"ssl.py" -> "hostname.partition"
	"ssl.py" -> "dn_remainder.lower"
	"ssl.py" -> "hostname_remainder.lower"
	"ssl.py" -> ValueError
	"ssl.py" -> format
	"ssl.py" -> ValueError
	"ssl.py" -> format
	"ssl.py" -> ValueError
	"ssl.py" -> format
	"ssl.py" -> "cert_ipaddress.rstrip"
	"ssl.py" -> ValueError
	"ssl.py" -> "cert.get"
	"ssl.py" -> "dnsnames.append"
	"ssl.py" -> "dnsnames.append"
	"ssl.py" -> "cert.get"
	"ssl.py" -> "dnsnames.append"
	"ssl.py" -> len
	"ssl.py" -> CertificateError
	"ssl.py" -> join
	"ssl.py" -> map
	"ssl.py" -> len
	"ssl.py" -> CertificateError
	"ssl.py" -> CertificateError
	"ssl.py" -> DefaultVerifyPaths
	"ssl.py" -> super
	"ssl.py" -> super
	"ssl.py" -> super
	"ssl.py" -> isinstance
	"ssl.py" -> decode
	"ssl.py" -> "hostname.encode"
	"ssl.py" -> "hostname.decode"
	"ssl.py" -> "self.sslsocket_class._create"
	"ssl.py" -> "self.sslobject_class._create"
	"ssl.py" -> "self._encode_hostname"
	"ssl.py" -> bytearray
	"ssl.py" -> bytes
	"ssl.py" -> len
	"ssl.py" -> len
	"ssl.py" -> "protos.append"
	"ssl.py" -> len
	"ssl.py" -> "protos.extend"
	"ssl.py" -> "self._set_npn_protocols"
	"ssl.py" -> callable
	"ssl.py" -> TypeError
	"ssl.py" -> "self._encode_hostname"
	"ssl.py" -> server_name_callback
	"ssl.py" -> bytearray
	"ssl.py" -> bytes
	"ssl.py" -> len
	"ssl.py" -> len
	"ssl.py" -> "protos.append"
	"ssl.py" -> len
	"ssl.py" -> "protos.extend"
	"ssl.py" -> "self._set_alpn_protocols"
	"ssl.py" -> bytearray
	"ssl.py" -> "certs.extend"
	"ssl.py" -> "self.load_verify_locations"
	"ssl.py" -> isinstance
	"ssl.py" -> TypeError
	"ssl.py" -> "self._load_windows_store_certs"
	"ssl.py" -> "self.set_default_verify_paths"
	"ssl.py" -> hasattr
	"ssl.py" -> TLSVersion
	"ssl.py" -> super
	"ssl.py" -> "minimum_version.__set__"
	"ssl.py" -> super
	"ssl.py" -> TLSVersion
	"ssl.py" -> super
	"ssl.py" -> "maximum_version.__set__"
	"ssl.py" -> super
	"ssl.py" -> Options
	"ssl.py" -> super
	"ssl.py" -> "options.__set__"
	"ssl.py" -> super
	"ssl.py" -> hasattr
	"ssl.py" -> super
	"ssl.py" -> "_msg_callback.__set__"
	"ssl.py" -> super
	"ssl.py" -> hasattr
	"ssl.py" -> TypeError
	"ssl.py" -> TLSVersion
	"ssl.py" -> _TLSContentType
	"ssl.py" -> msg_enum
	"ssl.py" -> callback
	"ssl.py" -> "_msg_callback.__set__"
	"ssl.py" -> super
	"ssl.py" -> _SSLMethod
	"ssl.py" -> super
	"ssl.py" -> VerifyFlags
	"ssl.py" -> super
	"ssl.py" -> "verify_flags.__set__"
	"ssl.py" -> super
	"ssl.py" -> super
	"ssl.py" -> VerifyMode
	"ssl.py" -> "verify_mode.__set__"
	"ssl.py" -> super
	"ssl.py" -> isinstance
	"ssl.py" -> TypeError
	"ssl.py" -> SSLContext
	"ssl.py" -> SSLContext
	"ssl.py" -> ValueError
	"ssl.py" -> "context.load_verify_locations"
	"ssl.py" -> "context.load_default_certs"
	"ssl.py" -> hasattr
	"ssl.py" -> isinstance
	"ssl.py" -> TypeError
	"ssl.py" -> ValueError
	"ssl.py" -> SSLContext
	"ssl.py" -> ValueError
	"ssl.py" -> "context.load_cert_chain"
	"ssl.py" -> "context.load_verify_locations"
	"ssl.py" -> "context.load_default_certs"
	"ssl.py" -> hasattr
	"ssl.py" -> TypeError
	"ssl.py" -> "cls.__new__"
	"ssl.py" -> "context._wrap_bio"
	"ssl.py" -> "self._sslobj.read"
	"ssl.py" -> "self._sslobj.read"
	"ssl.py" -> "self._sslobj.write"
	"ssl.py" -> "self._sslobj.getpeercert"
	"ssl.py" -> "self._sslobj.selected_alpn_protocol"
	"ssl.py" -> "self._sslobj.cipher"
	"ssl.py" -> "self._sslobj.shared_ciphers"
	"ssl.py" -> "self._sslobj.compression"
	"ssl.py" -> "self._sslobj.pending"
	"ssl.py" -> "self._sslobj.do_handshake"
	"ssl.py" -> "self._sslobj.shutdown"
	"ssl.py" -> "self._sslobj.get_channel_binding"
	"ssl.py" -> "self._sslobj.version"
	"ssl.py" -> "self._sslobj.verify_client_post_handshake"
	"ssl.py" -> getattr
	"ssl.py" -> TypeError
	"ssl.py" -> "sock.getsockopt"
	"ssl.py" -> NotImplementedError
	"ssl.py" -> ValueError
	"ssl.py" -> ValueError
	"ssl.py" -> ValueError
	"ssl.py" -> dict
	"ssl.py" -> "sock.fileno"
	"ssl.py" -> "cls.__new__"
	"ssl.py" -> super
	"ssl.py" -> "self.settimeout"
	"ssl.py" -> "sock.gettimeout"
	"ssl.py" -> "sock.detach"
	"ssl.py" -> "context._encode_hostname"
	"ssl.py" -> "self.getpeername"
	"ssl.py" -> "self._context._wrap_socket"
	"ssl.py" -> "self.gettimeout"
	"ssl.py" -> ValueError
	"ssl.py" -> "self.do_handshake"
	"ssl.py" -> "self.close"
	"ssl.py" -> NotImplementedError
	"ssl.py" -> "self.getpeername"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> "self._sslobj.read"
	"ssl.py" -> "self._sslobj.read"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> "self._sslobj.write"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._check_connected"
	"ssl.py" -> "self._sslobj.getpeercert"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._sslobj.selected_alpn_protocol"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._sslobj.cipher"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._sslobj.shared_ciphers"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._sslobj.compression"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> "self._sslobj.write"
	"ssl.py" -> super
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> super
	"ssl.py" -> super
	"ssl.py" -> NotImplementedError
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> memoryview
	"ssl.py" -> "view.cast"
	"ssl.py" -> len
	"ssl.py" -> "self.send"
	"ssl.py" -> super
	"ssl.py" -> "self._sendfile_use_send"
	"ssl.py" -> super
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> "self.read"
	"ssl.py" -> super
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> len
	"ssl.py" -> ValueError
	"ssl.py" -> "self.read"
	"ssl.py" -> super
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> super
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> super
	"ssl.py" -> NotImplementedError
	"ssl.py" -> NotImplementedError
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._sslobj.pending"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> super
	"ssl.py" -> "self._sslobj.shutdown"
	"ssl.py" -> ValueError
	"ssl.py" -> str
	"ssl.py" -> "self._sslobj.verify_client_post_handshake"
	"ssl.py" -> ValueError
	"ssl.py" -> str
	"ssl.py" -> super
	"ssl.py" -> "self._check_connected"
	"ssl.py" -> "self.gettimeout"
	"ssl.py" -> "self.settimeout"
	"ssl.py" -> "self._sslobj.do_handshake"
	"ssl.py" -> "self.settimeout"
	"ssl.py" -> ValueError
	"ssl.py" -> ValueError
	"ssl.py" -> "self.context._wrap_socket"
	"ssl.py" -> super
	"ssl.py" -> super
	"ssl.py" -> "self.do_handshake"
	"ssl.py" -> "self._real_connect"
	"ssl.py" -> "self._real_connect"
	"ssl.py" -> super
	"ssl.py" -> "self.context.wrap_socket"
	"ssl.py" -> "self._sslobj.get_channel_binding"
	"ssl.py" -> ValueError
	"ssl.py" -> format
	"ssl.py" -> "self._sslobj.version"
	"ssl.py" -> ValueError
	"ssl.py" -> ValueError
	"ssl.py" -> SSLContext
	"ssl.py" -> "context.load_verify_locations"
	"ssl.py" -> "context.load_cert_chain"
	"ssl.py" -> "context.set_ciphers"
	"ssl.py" -> "context.wrap_socket"
	"ssl.py" -> "months.index"
	"ssl.py" -> title
	"ssl.py" -> ValueError
	"ssl.py" -> strptime
	"ssl.py" -> str
	"ssl.py" -> range
	"ssl.py" -> len
	"ssl.py" -> "ss.append"
	"ssl.py" -> join
	"ssl.py" -> "pem_cert_string.startswith"
	"ssl.py" -> ValueError
	"ssl.py" -> endswith
	"ssl.py" -> "pem_cert_string.strip"
	"ssl.py" -> ValueError
	"ssl.py" -> "pem_cert_string.strip"
	"ssl.py" -> len
	"ssl.py" -> len
	"ssl.py" -> "d.encode"
	"ssl.py" -> _create_stdlib_context
	"ssl.py" -> "context.wrap_socket"
	"ssl.py" -> "sslsock.getpeercert"
	"ssl.py" -> "_PROTOCOL_NAMES.get"
	"base64.py" -> isinstance
	"base64.py" -> "s.encode"
	"base64.py" -> ValueError
	"base64.py" -> isinstance
	"base64.py" -> tobytes
	"base64.py" -> memoryview
	"base64.py" -> TypeError
	"base64.py" -> len
	"base64.py" -> repr
	"base64.py" -> "encoded.translate"
	"base64.py" -> "bytes.maketrans"
	"base64.py" -> len
	"base64.py" -> repr
	"base64.py" -> "s.translate"
	"base64.py" -> "bytes.maketrans"
	"base64.py" -> "bytes.maketrans"
	"base64.py" -> "bytes.maketrans"
	"base64.py" -> translate
	"base64.py" -> "s.translate"
	"base64.py" -> bytes
	"base64.py" -> isinstance
	"base64.py" -> tobytes
	"base64.py" -> memoryview
	"base64.py" -> len
	"base64.py" -> bytearray
	"base64.py" -> range
	"base64.py" -> len
	"base64.py" -> from_bytes
	"base64.py" -> bytes
	"base64.py" -> enumerate
	"base64.py" -> len
	"base64.py" -> len
	"base64.py" -> repr
	"base64.py" -> "s.translate"
	"base64.py" -> "bytes.maketrans"
	"base64.py" -> "s.upper"
	"base64.py" -> len
	"base64.py" -> "s.rstrip"
	"base64.py" -> len
	"base64.py" -> bytearray
	"base64.py" -> range
	"base64.py" -> len
	"base64.py" -> "acc.to_bytes"
	"base64.py" -> "acc.to_bytes"
	"base64.py" -> bytes
	"base64.py" -> "_B32_ENCODE_DOCSTRING.format"
	"base64.py" -> "_B32_DECODE_DOCSTRING.format"
	"base64.py" -> "_B32_ENCODE_DOCSTRING.format"
	"base64.py" -> "_B32_DECODE_DOCSTRING.format"
	"base64.py" -> upper
	"base64.py" -> "s.upper"
	"base64.py" -> isinstance
	"base64.py" -> tobytes
	"base64.py" -> memoryview
	"base64.py" -> len
	"base64.py" -> unpack
	"base64.py" -> len
	"base64.py" -> join
	"base64.py" -> bytes
	"base64.py" -> range
	"base64.py" -> max
	"base64.py" -> range
	"base64.py" -> len
	"base64.py" -> len
	"base64.py" -> "chunks.append"
	"base64.py" -> join
	"base64.py" -> "b.endswith"
	"base64.py" -> ValueError
	"base64.py" -> format
	"base64.py" -> "b.startswith"
	"base64.py" -> curr_append
	"base64.py" -> len
	"base64.py" -> decoded_append
	"base64.py" -> packI
	"base64.py" -> ValueError
	"base64.py" -> curr_clear
	"base64.py" -> ValueError
	"base64.py" -> decoded_append
	"base64.py" -> ValueError
	"base64.py" -> decoded_append
	"base64.py" -> ValueError
	"base64.py" -> join
	"base64.py" -> len
	"base64.py" -> bytes
	"base64.py" -> enumerate
	"base64.py" -> len
	"base64.py" -> range
	"base64.py" -> len
	"base64.py" -> enumerate
	"base64.py" -> ValueError
	"base64.py" -> "out.append"
	"base64.py" -> packI
	"base64.py" -> ValueError
	"base64.py" -> join
	"base64.py" -> "input.read"
	"base64.py" -> len
	"base64.py" -> "input.read"
	"base64.py" -> len
	"base64.py" -> "output.write"
	"base64.py" -> "input.readline"
	"base64.py" -> "output.write"
	"base64.py" -> memoryview
	"base64.py" -> TypeError
	"base64.py" -> TypeError
	"base64.py" -> TypeError
	"base64.py" -> range
	"base64.py" -> len
	"base64.py" -> "pieces.append"
	"base64.py" -> join
	"base64.py" -> print
	"base64.py" -> print
	"base64.py" -> "sys.exit"
	"base64.py" -> print
	"base64.py" -> open
	"base64.py" -> func
	"base64.py" -> func
	"base64.py" -> print
	"base64.py" -> repr
	"base64.py" -> print
	"base64.py" -> repr
	"base64.py" -> print
	"base64.py" -> repr
	"getopt.py" -> "Exception.__init__"
	"getopt.py" -> type
	"getopt.py" -> type
	"getopt.py" -> list
	"getopt.py" -> startswith
	"getopt.py" -> startswith
	"getopt.py" -> isinstance
	"getopt.py" -> list
	"getopt.py" -> "shortopts.startswith"
	"getopt.py" -> "prog_args.append"
	"getopt.py" -> "opt.index"
	"getopt.py" -> GetoptError
	"getopt.py" -> GetoptError
	"getopt.py" -> "opts.append"
	"getopt.py" -> "o.startswith"
	"getopt.py" -> GetoptError
	"getopt.py" -> len
	"getopt.py" -> GetoptError
	"getopt.py" -> len
	"getopt.py" -> "unique_match.endswith"
	"getopt.py" -> GetoptError
	"getopt.py" -> "opts.append"
	"getopt.py" -> range
	"getopt.py" -> len
	"getopt.py" -> "shortopts.startswith"
	"getopt.py" -> GetoptError
	"getopt.py" -> print
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "flask.render_template_string"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "flask.stream_template_string"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> dict
	"test_templating.py" -> "flask.render_template_string"
	"test_templating.py" -> "flask.render_template_string"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "rv.data.split"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "data.splitlines"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "data.splitlines"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "flask.render_template_string"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "flask.get_template_attribute"
	"test_templating.py" -> macro
	"test_templating.py" -> "app.template_filter"
	"test_templating.py" -> "app.jinja_env.filters.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> "app.add_template_filter"
	"test_templating.py" -> "app.jinja_env.filters.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> "app.template_filter"
	"test_templating.py" -> "app.jinja_env.filters.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> "app.add_template_filter"
	"test_templating.py" -> "app.jinja_env.filters.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> "app.template_filter"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "app.add_template_filter"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "app.template_filter"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "app.add_template_filter"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.template_test"
	"test_templating.py" -> "app.jinja_env.tests.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.add_template_test"
	"test_templating.py" -> "app.jinja_env.tests.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.template_test"
	"test_templating.py" -> "app.jinja_env.tests.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.add_template_test"
	"test_templating.py" -> "app.jinja_env.tests.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.template_test"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.add_template_test"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.template_test"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.add_template_test"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "app.template_global"
	"test_templating.py" -> "app.jinja_env.globals.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> "flask.render_template_string"
	"test_templating.py" -> MyFlask
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "app.test_client"
	"test_templating.py" -> "c.get"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "flask.Flask"
	"test_templating.py" -> "flask.Flask"
	"test_templating.py" -> "flask.Flask"
	"test_templating.py" -> "flask.Flask"
	"test_templating.py" -> "flask.Flask"
	"test_templating.py" -> "monkeypatch.setattr"
	"test_templating.py" -> "app.run"
	"test_templating.py" -> "app.run"
	"test_templating.py" -> "called.append"
	"test_templating.py" -> str
	"test_templating.py" -> "app.test_client"
	"test_templating.py" -> "monkeypatch.setitem"
	"test_templating.py" -> "monkeypatch.setattr"
	"test_templating.py" -> _TestHandler
	"test_templating.py" -> "pytest.raises"
	"test_templating.py" -> "c.get"
	"test_templating.py" -> str
	"test_templating.py" -> len
	"test_templating.py" -> CustomFlask
	"test_templating.py" -> isinstance
	"test_appctx.py" -> "app.route"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "flask.url_for"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "pytest.raises"
	"test_appctx.py" -> "flask.url_for"
	"test_appctx.py" -> "pytest.raises"
	"test_appctx.py" -> "flask.url_for"
	"test_appctx.py" -> "app.test_request_context"
	"test_appctx.py" -> "flask.current_app._get_current_object"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "flask.current_app._get_current_object"
	"test_appctx.py" -> "cleanup_stuff.append"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "cleanup_stuff.append"
	"test_appctx.py" -> Exception
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "cleanup_stuff.append"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> Exception
	"test_appctx.py" -> "cleanup_stuff.append"
	"test_appctx.py" -> Exception
	"test_appctx.py" -> "app.route"
	"test_appctx.py" -> "flask.jsonify"
	"test_appctx.py" -> str
	"test_appctx.py" -> "app.errorhandler"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "client.get"
	"test_appctx.py" -> "cleanup_stuff.append"
	"test_appctx.py" -> ValueError
	"test_appctx.py" -> "app.route"
	"test_appctx.py" -> "pytest.raises"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "client.get"
	"test_appctx.py" -> len
	"test_appctx.py" -> isinstance
	"test_appctx.py" -> str
	"test_appctx.py" -> "flask.g.get"
	"test_appctx.py" -> "flask.g.get"
	"test_appctx.py" -> "flask.g.setdefault"
	"test_appctx.py" -> "flask.g.setdefault"
	"test_appctx.py" -> "flask.g.pop"
	"test_appctx.py" -> "pytest.raises"
	"test_appctx.py" -> "flask.g.pop"
	"test_appctx.py" -> "flask.g.pop"
	"test_appctx.py" -> list
	"test_appctx.py" -> repr
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "flask.render_template_string"
	"test_appctx.py" -> "called.append"
	"test_appctx.py" -> "called.append"
	"test_appctx.py" -> "app.route"
	"test_appctx.py" -> "client.get"
	"test_appctx.py" -> "called.append"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "called.append"
	"test_regression.py" -> str
	"test_regression.py" -> "app.errorhandler"
	"test_regression.py" -> "flask.abort"
	"test_regression.py" -> "flask.redirect"
	"test_regression.py" -> "flask.url_for"
	"test_regression.py" -> "app.route"
	"test_regression.py" -> Foo
	"test_regression.py" -> "app.route"
	"test_regression.py" -> "app.test_client"
	"test_regression.py" -> "c.get"
	"test_regression.py" -> rpartition
	"test_regression.py" -> "c.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> EnvironBuilder
	"test_testing.py" -> "request.addfinalizer"
	"test_testing.py" -> "client.open"
	"test_testing.py" -> "builder.get_environ"
	"test_testing.py" -> "client.open"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> EnvironBuilder
	"test_testing.py" -> EnvironBuilder
	"test_testing.py" -> decode
	"test_testing.py" -> "eb.input_stream.read"
	"test_testing.py" -> "flask.Flask"
	"test_testing.py" -> "app.test_client"
	"test_testing.py" -> "flask.Blueprint"
	"test_testing.py" -> "bp.route"
	"test_testing.py" -> "app.register_blueprint"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "flask.redirect"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "flask.session.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "flask.session.get"
	"test_testing.py" -> "client.post"
	"test_testing.py" -> "flask.session.get"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> str
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.session_transaction"
	"test_testing.py" -> len
	"test_testing.py" -> len
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "client.session_transaction"
	"test_testing.py" -> len
	"test_testing.py" -> "flask.Flask"
	"test_testing.py" -> "app.test_client"
	"test_testing.py" -> "pytest.raises"
	"test_testing.py" -> "c.session_transaction"
	"test_testing.py" -> str
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "flask.request._get_current_object"
	"test_testing.py" -> "client.session_transaction"
	"test_testing.py" -> "flask.request._get_current_object"
	"test_testing.py" -> "app.test_client"
	"test_testing.py" -> "pytest.raises"
	"test_testing.py" -> "c.session_transaction"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> hasattr
	"test_testing.py" -> "pytest.raises"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.post"
	"test_testing.py" -> jsonify
	"test_testing.py" -> "flask.request.get_json"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.post"
	"test_testing.py" -> "flask.request.get_json"
	"test_testing.py" -> "rv.get_json"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> Namespace
	"test_testing.py" -> "appcontext_popped.connected_to"
	"test_testing.py" -> "client.post"
	"test_testing.py" -> "rv.get_data"
	"test_testing.py" -> "flask.Flask"
	"test_testing.py" -> "app.test_client"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "flask.url_for"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "flask.url_for"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.test_cli_runner"
	"test_testing.py" -> isinstance
	"test_testing.py" -> "app.test_cli_runner"
	"test_testing.py" -> isinstance
	"test_testing.py" -> "app.cli.command"
	"test_testing.py" -> "app.test_cli_runner"
	"test_testing.py" -> "runner.invoke"
	"test_testing.py" -> "runner.invoke"
	"test_testing.py" -> "app.cli.command"
	"test_testing.py" -> ScriptInfo
	"test_testing.py" -> "app.test_cli_runner"
	"test_testing.py" -> "runner.invoke"
	"test_testing.py" -> "flask.stream_with_context"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "rv.close"
	"test_testing.py" -> "_cv_request.get"
	"__init__.py" -> Flask
	"__init__.py" -> "app.register_blueprint"
	"__init__.py" -> "app.register_blueprint"
	"__init__.py" -> Blueprint
	"__init__.py" -> render_template
	"__init__.py" -> "frontend.route"
	"__init__.py" -> render_template
	"__init__.py" -> "frontend.route"
	"__init__.py" -> Blueprint
	"__init__.py" -> render_template
	"__init__.py" -> "admin.route"
	"__init__.py" -> render_template
	"__init__.py" -> "admin.route"
	"hello.py" -> Flask
	"hello.py" -> "app.route"
	"__init__.py" -> Module
	"importerrorapp.py" -> ImportError
	"importerrorapp.py" -> Flask
	"factory.py" -> Flask
	"factory.py" -> Flask
	"factory.py" -> join
	"multiapp.py" -> Flask
	"multiapp.py" -> Flask
	"app.py" -> Flask
	"__init__.py" -> Flask
	"flask.py" -> Flask
	"typing_route.py" -> Flask
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> jsonify
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> range
	"typing_route.py" -> show
	"typing_route.py" -> "app.route"
	"typing_route.py" -> encode
	"typing_route.py" -> range
	"typing_route.py" -> "app.route"
	"typing_route.py" -> iter
	"typing_route.py" -> range
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> render_template
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> stream_template
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> render_template
	"typing_route.py" -> "app.add_url_rule"
	"typing_route.py" -> "RenderTemplateView.as_view"
	"typing_app_decorators.py" -> Flask
	"typing_app_decorators.py" -> Response
	"typing_app_decorators.py" -> Response
	"typing_error_handler.py" -> Flask
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"conf.py" -> get_version
	"conf.py" -> ProjectLink
	"conf.py" -> ProjectLink
	"conf.py" -> ProjectLink
	"conf.py" -> ProjectLink
	"conf.py" -> ProjectLink
	"conf.py" -> "text.endswith"
	"conf.py" -> rsplit
	"conf.py" -> "words.strip"
	"conf.py" -> "packaging.version.parse"
	"conf.py" -> set_classes
	"conf.py" -> reference
	"conf.py" -> "app.add_role"
	"conftest.py" -> open
	"conftest.py" -> decode
	"conftest.py" -> "f.read"
	"conftest.py" -> create_app
	"conftest.py" -> "app.app_context"
	"conftest.py" -> init_db
	"conftest.py" -> executescript
	"conftest.py" -> get_db
	"conftest.py" -> "app.test_client"
	"conftest.py" -> "app.test_cli_runner"
	"conftest.py" -> "self._client.post"
	"conftest.py" -> "self._client.get"
	"conftest.py" -> AuthActions
	"test_auth.py" -> "client.get"
	"test_auth.py" -> "client.post"
	"test_auth.py" -> "app.app_context"
	"test_auth.py" -> fetchone
	"test_auth.py" -> execute
	"test_auth.py" -> get_db
	"test_auth.py" -> "client.post"
	"test_auth.py" -> "pytest.mark.parametrize"
	"test_auth.py" -> "client.get"
	"test_auth.py" -> "auth.login"
	"test_auth.py" -> "client.get"
	"test_auth.py" -> "auth.login"
	"test_auth.py" -> "pytest.mark.parametrize"
	"test_auth.py" -> "auth.login"
	"test_auth.py" -> "auth.logout"
	"test_db.py" -> "app.app_context"
	"test_db.py" -> get_db
	"test_db.py" -> get_db
	"test_db.py" -> "pytest.raises"
	"test_db.py" -> "db.execute"
	"test_db.py" -> str
	"test_db.py" -> "monkeypatch.setattr"
	"test_db.py" -> "runner.invoke"
	"test_factory.py" -> create_app
	"test_factory.py" -> create_app
	"test_factory.py" -> "client.get"
	"test_blog.py" -> "client.get"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.get"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "pytest.mark.parametrize"
	"test_blog.py" -> "app.app_context"
	"test_blog.py" -> get_db
	"test_blog.py" -> "db.execute"
	"test_blog.py" -> "db.commit"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "client.get"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "pytest.mark.parametrize"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.get"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "app.app_context"
	"test_blog.py" -> get_db
	"test_blog.py" -> fetchone
	"test_blog.py" -> "db.execute"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.get"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "app.app_context"
	"test_blog.py" -> get_db
	"test_blog.py" -> fetchone
	"test_blog.py" -> "db.execute"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "pytest.mark.parametrize"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "app.app_context"
	"test_blog.py" -> get_db
	"test_blog.py" -> fetchone
	"test_blog.py" -> "db.execute"
	"auth.py" -> Blueprint
	"auth.py" -> redirect
	"auth.py" -> url_for
	"auth.py" -> view
	"auth.py" -> "session.get"
	"auth.py" -> fetchone
	"auth.py" -> execute
	"auth.py" -> get_db
	"auth.py" -> get_db
	"auth.py" -> "db.execute"
	"auth.py" -> generate_password_hash
	"auth.py" -> "db.commit"
	"auth.py" -> redirect
	"auth.py" -> url_for
	"auth.py" -> flash
	"auth.py" -> render_template
	"auth.py" -> "bp.route"
	"auth.py" -> get_db
	"auth.py" -> fetchone
	"auth.py" -> "db.execute"
	"auth.py" -> check_password_hash
	"auth.py" -> "session.clear"
	"auth.py" -> redirect
	"auth.py" -> url_for
	"auth.py" -> flash
	"auth.py" -> render_template
	"auth.py" -> "bp.route"
	"auth.py" -> "session.clear"
	"auth.py" -> redirect
	"auth.py" -> url_for
	"auth.py" -> "bp.route"
	"db.py" -> "g.pop"
	"db.py" -> "db.close"
	"db.py" -> get_db
	"db.py" -> "current_app.open_resource"
	"db.py" -> "db.executescript"
	"db.py" -> decode
	"db.py" -> "f.read"
	"db.py" -> init_db
	"db.py" -> "v.decode"
	"db.py" -> "app.teardown_appcontext"
	"db.py" -> "app.cli.add_command"
	"__init__.py" -> AttributeError
	"__init__.py" -> Flask
	"__init__.py" -> "app.config.from_mapping"
	"__init__.py" -> "app.config.from_pyfile"
	"__init__.py" -> "app.config.update"
	"__init__.py" -> "app.route"
	"__init__.py" -> "db.init_app"
	"__init__.py" -> "app.register_blueprint"
	"__init__.py" -> "app.register_blueprint"
	"__init__.py" -> "app.add_url_rule"
	"blog.py" -> Blueprint
	"blog.py" -> get_db
	"blog.py" -> fetchall
	"blog.py" -> "db.execute"
	"blog.py" -> render_template
	"blog.py" -> "bp.route"
	"blog.py" -> fetchone
	"blog.py" -> execute
	"blog.py" -> get_db
	"blog.py" -> abort
	"blog.py" -> abort
	"blog.py" -> flash
	"blog.py" -> get_db
	"blog.py" -> "db.execute"
	"blog.py" -> "db.commit"
	"blog.py" -> redirect
	"blog.py" -> url_for
	"blog.py" -> render_template
	"blog.py" -> "bp.route"
	"blog.py" -> get_post
	"blog.py" -> flash
	"blog.py" -> get_db
	"blog.py" -> "db.execute"
	"blog.py" -> "db.commit"
	"blog.py" -> redirect
	"blog.py" -> url_for
	"blog.py" -> render_template
	"blog.py" -> "bp.route"
	"blog.py" -> get_post
	"blog.py" -> get_db
	"blog.py" -> "db.execute"
	"blog.py" -> "db.commit"
	"blog.py" -> redirect
	"blog.py" -> url_for
	"blog.py" -> "bp.route"
	"make_celery.py" -> create_app
	"tasks.py" -> shared_task
	"tasks.py" -> "time.sleep"
	"tasks.py" -> shared_task
	"tasks.py" -> range
	"tasks.py" -> "self.update_state"
	"tasks.py" -> "time.sleep"
	"tasks.py" -> shared_task
	"__init__.py" -> Flask
	"__init__.py" -> "app.config.from_mapping"
	"__init__.py" -> dict
	"__init__.py" -> "app.config.from_prefixed_env"
	"__init__.py" -> celery_init_app
	"__init__.py" -> render_template
	"__init__.py" -> "app.route"
	"__init__.py" -> "app.register_blueprint"
	"__init__.py" -> "app.app_context"
	"__init__.py" -> "self.run"
	"__init__.py" -> Celery
	"__init__.py" -> "celery_app.config_from_object"
	"__init__.py" -> "celery_app.set_default"
	"views.py" -> Blueprint
	"views.py" -> AsyncResult
	"views.py" -> "result.ready"
	"views.py" -> "result.successful"
	"views.py" -> "result.get"
	"views.py" -> "bp.get"
	"views.py" -> "request.form.get"
	"views.py" -> "request.form.get"
	"views.py" -> "tasks.add.delay"
	"views.py" -> "bp.post"
	"views.py" -> "tasks.block.delay"
	"views.py" -> "bp.post"
	"views.py" -> "tasks.process.delay"
	"views.py" -> "request.form.get"
	"views.py" -> "bp.post"
	"__init__.py" -> Flask
	"views.py" -> render_template
	"views.py" -> "app.route"
	"views.py" -> "app.route"
	"views.py" -> "request.form.get"
	"views.py" -> "request.form.get"
	"views.py" -> jsonify
	"views.py" -> "app.route"
	"test_js_example.py" -> "template_rendered.connected_to"
	"test_js_example.py" -> "client.get"
	"test_js_example.py" -> "pytest.mark.parametrize"
	"test_js_example.py" -> "client.post"
	"test_js_example.py" -> "response.get_json"
	"test_js_example.py" -> "pytest.mark.parametrize"
	"conftest.py" -> "pytest.fixture"
	"conftest.py" -> "app.test_client"
	"logging.py" -> "logger.getEffectiveLevel"
	"logging.py" -> any
	"logging.py" -> "default_handler.setFormatter"
	"logging.py" -> "logger.setLevel"
	"logging.py" -> has_level_handler
	"logging.py" -> "logger.addHandler"
	"signals.py" -> Namespace
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"sessions.py" -> "self.get"
	"sessions.py" -> bool
	"sessions.py" -> __init__
	"sessions.py" -> super
	"sessions.py" -> __getitem__
	"sessions.py" -> super
	"sessions.py" -> get
	"sessions.py" -> super
	"sessions.py" -> setdefault
	"sessions.py" -> super
	"sessions.py" -> RuntimeError
	"sessions.py" -> "self.null_session_class"
	"sessions.py" -> isinstance
	"sessions.py" -> NotImplementedError
	"sessions.py" -> NotImplementedError
	"sessions.py" -> TaggedJSONSerializer
	"sessions.py" -> staticmethod
	"sessions.py" -> "keys.extend"
	"sessions.py" -> URLSafeTimedSerializer
	"sessions.py" -> "self.get_signing_serializer"
	"sessions.py" -> "request.cookies.get"
	"sessions.py" -> "self.get_cookie_name"
	"sessions.py" -> "self.session_class"
	"sessions.py" -> int
	"sessions.py" -> "app.permanent_session_lifetime.total_seconds"
	"sessions.py" -> "s.loads"
	"sessions.py" -> "self.session_class"
	"sessions.py" -> "self.session_class"
	"sessions.py" -> "self.get_cookie_name"
	"sessions.py" -> "self.get_cookie_domain"
	"sessions.py" -> "self.get_cookie_path"
	"sessions.py" -> "self.get_cookie_secure"
	"sessions.py" -> "self.get_cookie_partitioned"
	"sessions.py" -> "self.get_cookie_samesite"
	"sessions.py" -> "self.get_cookie_httponly"
	"sessions.py" -> "response.vary.add"
	"sessions.py" -> "response.delete_cookie"
	"sessions.py" -> "response.vary.add"
	"sessions.py" -> "self.should_set_cookie"
	"sessions.py" -> "self.get_expiration_time"
	"sessions.py" -> dumps
	"sessions.py" -> "self.get_signing_serializer"
	"sessions.py" -> dict
	"sessions.py" -> "response.set_cookie"
	"sessions.py" -> "response.vary.add"
	"config.py" -> "self.get_converter"
	"config.py" -> __init__
	"config.py" -> super
	"config.py" -> RuntimeError
	"config.py" -> "self.from_pyfile"
	"config.py" -> sorted
	"config.py" -> "key.startswith"
	"config.py" -> "key.removeprefix"
	"config.py" -> loads
	"config.py" -> "key.split"
	"config.py" -> open
	"config.py" -> exec
	"config.py" -> compile
	"config.py" -> "config_file.read"
	"config.py" -> "self.from_object"
	"config.py" -> isinstance
	"config.py" -> import_string
	"config.py" -> dir
	"config.py" -> "key.isupper"
	"config.py" -> getattr
	"config.py" -> open
	"config.py" -> load
	"config.py" -> "self.from_mapping"
	"config.py" -> "mappings.update"
	"config.py" -> "mappings.update"
	"config.py" -> "mappings.items"
	"config.py" -> "key.isupper"
	"config.py" -> "self.items"
	"config.py" -> "k.startswith"
	"config.py" -> len
	"config.py" -> "key.lower"
	"config.py" -> type
	"config.py" -> "dict.__repr__"
	"templating.py" -> "_cv_app.get"
	"templating.py" -> "_cv_request.get"
	"templating.py" -> "app.create_global_jinja_loader"
	"templating.py" -> "self._get_source_explained"
	"templating.py" -> "self._get_source_fast"
	"templating.py" -> "self._iter_loaders"
	"templating.py" -> "loader.get_source"
	"templating.py" -> "attempts.append"
	"templating.py" -> explain_template_loading_attempts
	"templating.py" -> "self._iter_loaders"
	"templating.py" -> "loader.get_source"
	"templating.py" -> "self.app.iter_blueprints"
	"templating.py" -> set
	"templating.py" -> "result.update"
	"templating.py" -> "loader.list_templates"
	"templating.py" -> "self.app.iter_blueprints"
	"templating.py" -> "loader.list_templates"
	"templating.py" -> "result.add"
	"templating.py" -> list
	"templating.py" -> "app.update_template_context"
	"templating.py" -> "before_render_template.send"
	"templating.py" -> "template.render"
	"templating.py" -> "template_rendered.send"
	"templating.py" -> "current_app._get_current_object"
	"templating.py" -> "app.jinja_env.get_or_select_template"
	"templating.py" -> _render
	"templating.py" -> "current_app._get_current_object"
	"templating.py" -> "app.jinja_env.from_string"
	"templating.py" -> _render
	"templating.py" -> "app.update_template_context"
	"templating.py" -> "before_render_template.send"
	"templating.py" -> "template.generate"
	"templating.py" -> "template_rendered.send"
	"templating.py" -> generate
	"templating.py" -> stream_with_context
	"templating.py" -> "current_app._get_current_object"
	"templating.py" -> "app.jinja_env.get_or_select_template"
	"templating.py" -> _stream
	"templating.py" -> "current_app._get_current_object"
	"templating.py" -> "app.jinja_env.from_string"
	"templating.py" -> _stream
	"globals.py" -> LocalProxy
	"globals.py" -> LocalProxy
	"globals.py" -> LocalProxy
	"globals.py" -> LocalProxy
	"globals.py" -> LocalProxy
	"globals.py" -> LocalProxy
	"__init__.py" -> AttributeError
	"blueprints.py" -> __init__
	"blueprints.py" -> super
	"blueprints.py" -> AppGroup
	"blueprints.py" -> isinstance
	"blueprints.py" -> int
	"blueprints.py" -> "value.total_seconds"
	"blueprints.py" -> RuntimeError
	"blueprints.py" -> "self.get_send_file_max_age"
	"blueprints.py" -> send_from_directory
	"blueprints.py" -> ValueError
	"blueprints.py" -> open
	"blueprints.py" -> open
	"cli.py" -> getattr
	"cli.py" -> isinstance
	"cli.py" -> "module.__dict__.values"
	"cli.py" -> isinstance
	"cli.py" -> len
	"cli.py" -> len
	"cli.py" -> NoAppException
	"cli.py" -> getattr
	"cli.py" -> app_factory
	"cli.py" -> isinstance
	"cli.py" -> _called_with_wrong_args
	"cli.py" -> NoAppException
	"cli.py" -> NoAppException
	"cli.py" -> "sys.exc_info"
	"cli.py" -> "app_name.strip"
	"cli.py" -> NoAppException
	"cli.py" -> isinstance
	"cli.py" -> isinstance
	"cli.py" -> isinstance
	"cli.py" -> NoAppException
	"cli.py" -> NoAppException
	"cli.py" -> NoAppException
	"cli.py" -> getattr
	"cli.py" -> NoAppException
	"cli.py" -> attr
	"cli.py" -> _called_with_wrong_args
	"cli.py" -> NoAppException
	"cli.py" -> isinstance
	"cli.py" -> NoAppException
	"cli.py" -> "module_name.append"
	"cli.py" -> "sys.path.insert"
	"cli.py" -> join
	"cli.py" -> __import__
	"cli.py" -> "sys.exc_info"
	"cli.py" -> NoAppException
	"cli.py" -> NoAppException
	"cli.py" -> find_best_app
	"cli.py" -> find_app_by_string
	"cli.py" -> "ctx.exit"
	"cli.py" -> get_load_dotenv
	"cli.py" -> "self.create_app"
	"cli.py" -> prepare_import
	"cli.py" -> locate_app
	"cli.py" -> prepare_import
	"cli.py" -> locate_app
	"cli.py" -> NoAppException
	"cli.py" -> get_debug_flag
	"cli.py" -> load_app
	"cli.py" -> "ctx.ensure_object"
	"cli.py" -> "ctx.with_resource"
	"cli.py" -> "app.app_context"
	"cli.py" -> "ctx.invoke"
	"cli.py" -> "kwargs.pop"
	"cli.py" -> with_appcontext
	"cli.py" -> <unknown_function>
	"cli.py" -> command
	"cli.py" -> super
	"cli.py" -> "kwargs.setdefault"
	"cli.py" -> group
	"cli.py" -> super
	"cli.py" -> "ctx.ensure_object"
	"cli.py" -> "ctx.get_parameter_source"
	"cli.py" -> load_dotenv
	"cli.py" -> list
	"cli.py" -> "extra.pop"
	"cli.py" -> "params.extend"
	"cli.py" -> "params.append"
	"cli.py" -> setdefault
	"cli.py" -> __init__
	"cli.py" -> super
	"cli.py" -> "self.add_command"
	"cli.py" -> "self.add_command"
	"cli.py" -> "self.add_command"
	"cli.py" -> "self.add_command"
	"cli.py" -> "ep.load"
	"cli.py" -> "self._load_plugin_commands"
	"cli.py" -> get_command
	"cli.py" -> super
	"cli.py" -> "ctx.ensure_object"
	"cli.py" -> "info.load_app"
	"cli.py" -> "e.format_message"
	"cli.py" -> "current_app._get_current_object"
	"cli.py" -> "ctx.with_resource"
	"cli.py" -> "app.app_context"
	"cli.py" -> "app.cli.get_command"
	"cli.py" -> "self._load_plugin_commands"
	"cli.py" -> set
	"cli.py" -> list_commands
	"cli.py" -> super
	"cli.py" -> "ctx.ensure_object"
	"cli.py" -> "rv.update"
	"cli.py" -> "cli.list_commands"
	"cli.py" -> "info.load_app"
	"cli.py" -> "e.format_message"
	"cli.py" -> sorted
	"cli.py" -> ScriptInfo
	"cli.py" -> make_context
	"cli.py" -> super
	"cli.py" -> "_env_file_option.handle_parse_result"
	"cli.py" -> "_app_option.handle_parse_result"
	"cli.py" -> parse_args
	"cli.py" -> super
	"cli.py" -> lstrip
	"cli.py" -> len
	"cli.py" -> "dotenv.find_dotenv"
	"cli.py" -> "dotenv.dotenv_values"
	"cli.py" -> "dotenv.dotenv_values"
	"cli.py" -> "data.items"
	"cli.py" -> bool
	"cli.py" -> is_running_from_reloader
	"cli.py" -> "self.path_type"
	"cli.py" -> lower
	"cli.py" -> import_string
	"cli.py" -> isinstance
	"cli.py" -> "ctx.params.get"
	"cli.py" -> isinstance
	"cli.py" -> "self.split_envvar_value"
	"cli.py" -> super
	"cli.py" -> super_convert
	"cli.py" -> "info.load_app"
	"cli.py" -> is_running_from_reloader
	"cli.py" -> get_debug_flag
	"cli.py" -> show_server_banner
	"cli.py" -> run_simple
	"cli.py" -> CertParamType
	"cli.py" -> SeparatedPathType
	"cli.py" -> SeparatedPathType
	"cli.py" -> "run_command.params.insert"
	"cli.py" -> open
	"cli.py" -> eval
	"cli.py" -> compile
	"cli.py" -> "f.read"
	"cli.py" -> "ctx.update"
	"cli.py" -> "current_app.make_shell_context"
	"cli.py" -> getattr
	"cli.py" -> interactive_hook
	"cli.py" -> list
	"cli.py" -> "current_app.url_map.iter_rules"
	"cli.py" -> set
	"cli.py" -> any
	"cli.py" -> join
	"cli.py" -> sorted
	"cli.py" -> set
	"cli.py" -> "row.append"
	"cli.py" -> "row.append"
	"cli.py" -> "rows.append"
	"cli.py" -> "headers.append"
	"cli.py" -> "sorts.append"
	"cli.py" -> "headers.append"
	"cli.py" -> "sorts.append"
	"cli.py" -> "rows.sort"
	"cli.py" -> "sorts.index"
	"cli.py" -> "rows.insert"
	"cli.py" -> max
	"cli.py" -> len
	"cli.py" -> range
	"cli.py" -> len
	"cli.py" -> "rows.insert"
	"cli.py" -> join
	"cli.py" -> enumerate
	"cli.py" -> "template.format"
	"cli.py" -> FlaskGroup
	"cli.py" -> "cli.main"
	"cli.py" -> main
	"traceback.py" -> format
	"traceback.py" -> "StackSummary.from_list"
	"traceback.py" -> print
	"traceback.py" -> format
	"traceback.py" -> "StackSummary.from_list"
	"traceback.py" -> format
	"traceback.py" -> "StackSummary._extract_from_extended_frame_gen"
	"traceback.py" -> _Sentinel
	"traceback.py" -> ValueError
	"traceback.py" -> isinstance
	"traceback.py" -> TypeError
	"traceback.py" -> type
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> "te.print"
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> list
	"traceback.py" -> "te.format"
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> list
	"traceback.py" -> "te.format_exception_only"
	"traceback.py" -> func
	"traceback.py" -> "sys.exc_info"
	"traceback.py" -> join
	"traceback.py" -> "sys.exc_info"
	"traceback.py" -> hasattr
	"traceback.py" -> ValueError
	"traceback.py" -> "sys._getframe"
	"traceback.py" -> "sys._getframe"
	"traceback.py" -> "sys._getframe"
	"traceback.py" -> "StackSummary.extract"
	"traceback.py" -> "stack.reverse"
	"traceback.py" -> "tb.tb_frame.clear"
	"traceback.py" -> repr
	"traceback.py" -> "locals.items"
	"traceback.py" -> isinstance
	"traceback.py" -> isinstance
	"traceback.py" -> iter
	"traceback.py" -> format
	"traceback.py" -> "self._line.strip"
	"traceback.py" -> "sys._getframe"
	"traceback.py" -> "code.co_positions"
	"traceback.py" -> next
	"traceback.py" -> "itertools.islice"
	"traceback.py" -> "klass._extract_from_extended_frame_gen"
	"traceback.py" -> getattr
	"traceback.py" -> "itertools.islice"
	"traceback.py" -> klass
	"traceback.py" -> set
	"traceback.py" -> "fnames.add"
	"traceback.py" -> "result.append"
	"traceback.py" -> FrameSummary
	"traceback.py" -> StackSummary
	"traceback.py" -> isinstance
	"traceback.py" -> "result.append"
	"traceback.py" -> "result.append"
	"traceback.py" -> FrameSummary
	"traceback.py" -> "row.append"
	"traceback.py" -> format
	"traceback.py" -> "frame_summary.line.strip"
	"traceback.py" -> "row.append"
	"traceback.py" -> format
	"traceback.py" -> len
	"traceback.py" -> len
	"traceback.py" -> "frame_summary.line.lstrip"
	"traceback.py" -> len
	"traceback.py" -> len
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> sorted
	"traceback.py" -> "frame_summary.locals.items"
	"traceback.py" -> "row.append"
	"traceback.py" -> format
	"traceback.py" -> join
	"traceback.py" -> "self.format_frame_summary"
	"traceback.py" -> "result.append"
	"traceback.py" -> "result.append"
	"traceback.py" -> "result.append"
	"traceback.py" -> "str.encode"
	"traceback.py" -> len
	"traceback.py" -> decode
	"traceback.py" -> len
	"traceback.py" -> normalize
	"traceback.py" -> normalize
	"traceback.py" -> len
	"traceback.py" -> len
	"traceback.py" -> "operator_str.lstrip"
	"traceback.py" -> len
	"traceback.py" -> isspace
	"traceback.py" -> _Anchors
	"traceback.py" -> normalize
	"traceback.py" -> normalize
	"traceback.py" -> normalize
	"traceback.py" -> normalize
	"traceback.py" -> _Anchors
	"traceback.py" -> set
	"traceback.py" -> "self.indent"
	"traceback.py" -> isinstance
	"traceback.py" -> set
	"traceback.py" -> "_seen.add"
	"traceback.py" -> id
	"traceback.py" -> "StackSummary._extract_from_extended_frame_gen"
	"traceback.py" -> getattr
	"traceback.py" -> issubclass
	"traceback.py" -> str
	"traceback.py" -> str
	"traceback.py" -> "self._load_lines"
	"traceback.py" -> "queue.pop"
	"traceback.py" -> id
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> id
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> isinstance
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> "exceptions.append"
	"traceback.py" -> "queue.append"
	"traceback.py" -> "queue.append"
	"traceback.py" -> "queue.extend"
	"traceback.py" -> zip
	"traceback.py" -> cls
	"traceback.py" -> type
	"traceback.py" -> isinstance
	"traceback.py" -> isinstance
	"traceback.py" -> issubclass
	"traceback.py" -> "self._format_syntax_error"
	"traceback.py" -> isinstance
	"traceback.py" -> "note.split"
	"traceback.py" -> format
	"traceback.py" -> format
	"traceback.py" -> "text.rstrip"
	"traceback.py" -> "rtext.lstrip"
	"traceback.py" -> len
	"traceback.py" -> len
	"traceback.py" -> format
	"traceback.py" -> "c.isspace"
	"traceback.py" -> format
	"traceback.py" -> join
	"traceback.py" -> format
	"traceback.py" -> _ExceptionPrintContext
	"traceback.py" -> "output.append"
	"traceback.py" -> "output.append"
	"traceback.py" -> reversed
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "exc.stack.format"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "exc.format_exception_only"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "exc.stack.format"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "exc.format_exception_only"
	"traceback.py" -> len
	"traceback.py" -> range
	"traceback.py" -> "_ctx.indent"
	"traceback.py" -> format
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "_ctx.indent"
	"traceback.py" -> "self.format"
	"traceback.py" -> print
	"textwrap.py" -> "dict.fromkeys"
	"textwrap.py" -> map
	"textwrap.py" -> ord
	"textwrap.py" -> "text.expandtabs"
	"textwrap.py" -> "text.translate"
	"textwrap.py" -> "self.wordsep_re.split"
	"textwrap.py" -> "self.wordsep_simple_re.split"
	"textwrap.py" -> len
	"textwrap.py" -> patsearch
	"textwrap.py" -> len
	"textwrap.py" -> "chunk.rfind"
	"textwrap.py" -> any
	"textwrap.py" -> "cur_line.append"
	"textwrap.py" -> "cur_line.append"
	"textwrap.py" -> "reversed_chunks.pop"
	"textwrap.py" -> ValueError
	"textwrap.py" -> len
	"textwrap.py" -> len
	"textwrap.py" -> "self.placeholder.lstrip"
	"textwrap.py" -> ValueError
	"textwrap.py" -> "chunks.reverse"
	"textwrap.py" -> len
	"textwrap.py" -> strip
	"textwrap.py" -> len
	"textwrap.py" -> "cur_line.append"
	"textwrap.py" -> "chunks.pop"
	"textwrap.py" -> len
	"textwrap.py" -> "self._handle_long_word"
	"textwrap.py" -> sum
	"textwrap.py" -> map
	"textwrap.py" -> strip
	"textwrap.py" -> len
	"textwrap.py" -> len
	"textwrap.py" -> len
	"textwrap.py" -> strip
	"textwrap.py" -> "lines.append"
	"textwrap.py" -> join
	"textwrap.py" -> strip
	"textwrap.py" -> len
	"textwrap.py" -> "cur_line.append"
	"textwrap.py" -> "lines.append"
	"textwrap.py" -> join
	"textwrap.py" -> len
	"textwrap.py" -> rstrip
	"textwrap.py" -> len
	"textwrap.py" -> len
	"textwrap.py" -> "lines.append"
	"textwrap.py" -> "self.placeholder.lstrip"
	"textwrap.py" -> "self._munge_whitespace"
	"textwrap.py" -> "self._split"
	"textwrap.py" -> "self._split_chunks"
	"textwrap.py" -> "self._fix_sentence_endings"
	"textwrap.py" -> "self._wrap_chunks"
	"textwrap.py" -> join
	"textwrap.py" -> "self.wrap"
	"textwrap.py" -> TextWrapper
	"textwrap.py" -> "w.wrap"
	"textwrap.py" -> TextWrapper
	"textwrap.py" -> "w.fill"
	"textwrap.py" -> TextWrapper
	"textwrap.py" -> "w.fill"
	"textwrap.py" -> join
	"textwrap.py" -> split
	"textwrap.py" -> "text.strip"
	"textwrap.py" -> "_whitespace_only_re.sub"
	"textwrap.py" -> "_leading_whitespace_re.findall"
	"textwrap.py" -> "indent.startswith"
	"textwrap.py" -> "margin.startswith"
	"textwrap.py" -> enumerate
	"textwrap.py" -> zip
	"textwrap.py" -> "text.split"
	"textwrap.py" -> "line.startswith"
	"textwrap.py" -> "line.strip"
	"textwrap.py" -> "text.splitlines"
	"textwrap.py" -> join
	"textwrap.py" -> print
	"code.py" -> "self.compile"
	"code.py" -> "self.showsyntaxerror"
	"code.py" -> "self.runcode"
	"code.py" -> exec
	"code.py" -> "self.showtraceback"
	"code.py" -> "sys.exc_info"
	"code.py" -> SyntaxError
	"code.py" -> "self.write"
	"code.py" -> join
	"code.py" -> "sys.excepthook"
	"code.py" -> "sys.exc_info"
	"code.py" -> "self.write"
	"code.py" -> join
	"code.py" -> "sys.excepthook"
	"code.py" -> "sys.stderr.write"
	"code.py" -> "InteractiveInterpreter.__init__"
	"code.py" -> "self.resetbuffer"
	"code.py" -> "self.write"
	"code.py" -> "self.write"
	"code.py" -> str
	"code.py" -> "self.raw_input"
	"code.py" -> "self.write"
	"code.py" -> "self.push"
	"code.py" -> "self.write"
	"code.py" -> "self.resetbuffer"
	"code.py" -> "self.write"
	"code.py" -> "self.write"
	"code.py" -> "self.buffer.append"
	"code.py" -> join
	"code.py" -> "self.runsource"
	"code.py" -> "self.resetbuffer"
	"code.py" -> input
	"code.py" -> InteractiveConsole
	"code.py" -> "console.interact"
	"code.py" -> "parser.add_argument"
	"code.py" -> "parser.parse_args"
	"codeop.py" -> getattr
	"codeop.py" -> "source.split"
	"codeop.py" -> "line.strip"
	"codeop.py" -> compiler
	"codeop.py" -> compiler
	"codeop.py" -> str
	"codeop.py" -> compiler
	"codeop.py" -> repr
	"codeop.py" -> repr
	"codeop.py" -> compile
	"codeop.py" -> compile
	"codeop.py" -> Compile
	"rlcompleter.py" -> isinstance
	"rlcompleter.py" -> TypeError
	"rlcompleter.py" -> "text.strip"
	"rlcompleter.py" -> "self.attr_matches"
	"rlcompleter.py" -> "self.global_matches"
	"rlcompleter.py" -> callable
	"rlcompleter.py" -> len
	"rlcompleter.py" -> "seen.add"
	"rlcompleter.py" -> "matches.append"
	"rlcompleter.py" -> "nspace.items"
	"rlcompleter.py" -> "seen.add"
	"rlcompleter.py" -> "matches.append"
	"rlcompleter.py" -> "self._callable_postfix"
	"rlcompleter.py" -> "m.group"
	"rlcompleter.py" -> eval
	"rlcompleter.py" -> set
	"rlcompleter.py" -> dir
	"rlcompleter.py" -> "words.discard"
	"rlcompleter.py" -> hasattr
	"rlcompleter.py" -> "words.add"
	"rlcompleter.py" -> "words.update"
	"rlcompleter.py" -> len
	"rlcompleter.py" -> isinstance
	"rlcompleter.py" -> getattr
	"rlcompleter.py" -> type
	"rlcompleter.py" -> "matches.append"
	"rlcompleter.py" -> getattr
	"rlcompleter.py" -> "matches.append"
	"rlcompleter.py" -> "self._callable_postfix"
	"rlcompleter.py" -> "matches.append"
	"rlcompleter.py" -> "matches.sort"
	"rlcompleter.py" -> dir
	"rlcompleter.py" -> hasattr
	"rlcompleter.py" -> Completer
	"rlcompleter.py" -> "atexit.register"
	"__init__.py" -> lstrip
	"__init__.py" -> "section._replace"
	"__init__.py" -> "Pair.parse"
	"__init__.py" -> "cls.read"
	"__init__.py" -> filter
	"__init__.py" -> map
	"__init__.py" -> "text.splitlines"
	"__init__.py" -> "value.startswith"
	"__init__.py" -> "value.endswith"
	"__init__.py" -> "value.strip"
	"__init__.py" -> Pair
	"__init__.py" -> "line.startswith"
	"__init__.py" -> update
	"__init__.py" -> vars
	"__init__.py" -> "self.pattern.match"
	"__init__.py" -> "match.group"
	"__init__.py" -> filter
	"__init__.py" -> split
	"__init__.py" -> "match.group"
	"__init__.py" -> "self.pattern.match"
	"__init__.py" -> "match.group"
	"__init__.py" -> "self.pattern.match"
	"__init__.py" -> "match.group"
	"__init__.py" -> "self.pattern.match"
	"__init__.py" -> "match.group"
	"__init__.py" -> update
	"__init__.py" -> vars
	"__init__.py" -> getattr
	"__init__.py" -> all
	"__init__.py" -> map
	"__init__.py" -> "params.values"
	"__init__.py" -> "self._key"
	"__init__.py" -> "other._key"
	"__init__.py" -> "self._key"
	"__init__.py" -> "other._key"
	"__init__.py" -> AttributeError
	"__init__.py" -> hash
	"__init__.py" -> "self._key"
	"__init__.py" -> next
	"__init__.py" -> iter
	"__init__.py" -> "self.select"
	"__init__.py" -> KeyError
	"__init__.py" -> tuple
	"__init__.py" -> EntryPoints
	"__init__.py" -> "_py39compat.ep_matches"
	"__init__.py" -> cls
	"__init__.py" -> "ep._for"
	"__init__.py" -> "cls._from_text"
	"__init__.py" -> EntryPoint
	"__init__.py" -> "Sectioned.section_pairs"
	"__init__.py" -> open
	"__init__.py" -> "self.locate"
	"__init__.py" -> "stream.read"
	"__init__.py" -> open
	"__init__.py" -> "self.locate"
	"__init__.py" -> "stream.read"
	"__init__.py" -> "self.dist.locate_file"
	"__init__.py" -> "spec.partition"
	"__init__.py" -> vars
	"__init__.py" -> getattr
	"__init__.py" -> getattr
	"__init__.py" -> super
	"__init__.py" -> ValueError
	"__init__.py" -> next
	"__init__.py" -> iter
	"__init__.py" -> "cls.discover"
	"__init__.py" -> PackageNotFoundError
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> ValueError
	"__init__.py" -> "DistributionFinder.Context"
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> resolver
	"__init__.py" -> "cls._discover_resolvers"
	"__init__.py" -> PathDistribution
	"__init__.py" -> getattr
	"__init__.py" -> filter
	"__init__.py" -> "self.read_text"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> "_adapters.Message"
	"__init__.py" -> "Prepared.normalize"
	"__init__.py" -> "EntryPoints._from_text_for"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> PackagePath
	"__init__.py" -> FileHash
	"__init__.py" -> int
	"__init__.py" -> starmap
	"__init__.py" -> list
	"__init__.py" -> filter
	"__init__.py" -> exists
	"__init__.py" -> "path.locate"
	"__init__.py" -> "self._read_files_distinfo"
	"__init__.py" -> "self._read_files_egginfo_installed"
	"__init__.py" -> "self._read_files_egginfo_sources"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> "text.splitlines"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> getattr
	"__init__.py" -> as_posix
	"__init__.py" -> relative_to
	"__init__.py" -> resolve
	"__init__.py" -> resolve
	"__init__.py" -> "self.locate_file"
	"__init__.py" -> "text.splitlines"
	"__init__.py" -> map
	"__init__.py" -> "self.read_text"
	"__init__.py" -> map
	"__init__.py" -> "text.splitlines"
	"__init__.py" -> "self._read_dist_info_reqs"
	"__init__.py" -> "self._read_egg_info_reqs"
	"__init__.py" -> list
	"__init__.py" -> "self.metadata.get_all"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> <unknown_function>
	"__init__.py" -> pass_none
	"__init__.py" -> "cls._convert_egg_info_reqs_to_simple_reqs"
	"__init__.py" -> "Sectioned.read"
	"__init__.py" -> "section.partition"
	"__init__.py" -> list
	"__init__.py" -> filter
	"__init__.py" -> join
	"__init__.py" -> "self._load_json"
	"__init__.py" -> <unknown_function>
	"__init__.py" -> pass_none
	"__init__.py" -> "self.read_text"
	"__init__.py" -> update
	"__init__.py" -> vars
	"__init__.py" -> get
	"__init__.py" -> vars
	"__init__.py" -> Context
	"__init__.py" -> super
	"__init__.py" -> "self.zip_children"
	"__init__.py" -> "zip_path.root.namelist"
	"__init__.py" -> "dict.fromkeys"
	"__init__.py" -> "child.split"
	"__init__.py" -> "self.lookup"
	"__init__.py" -> "self.lookup.cache_clear"
	"__init__.py" -> Lookup
	"__init__.py" -> lower
	"__init__.py" -> "base.endswith"
	"__init__.py" -> FreezableDefaultDict
	"__init__.py" -> FreezableDefaultDict
	"__init__.py" -> "path.children"
	"__init__.py" -> "child.lower"
	"__init__.py" -> "low.endswith"
	"__init__.py" -> partition
	"__init__.py" -> "low.rpartition"
	"__init__.py" -> "Prepared.normalize"
	"__init__.py" -> append
	"__init__.py" -> "path.joinpath"
	"__init__.py" -> partition
	"__init__.py" -> "base.rpartition"
	"__init__.py" -> "Prepared.legacy_normalize"
	"__init__.py" -> append
	"__init__.py" -> "path.joinpath"
	"__init__.py" -> "self.infos.freeze"
	"__init__.py" -> "self.eggs.freeze"
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> "self.infos.values"
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> "self.eggs.values"
	"__init__.py" -> "itertools.chain"
	"__init__.py" -> "self.normalize"
	"__init__.py" -> "self.legacy_normalize"
	"__init__.py" -> replace
	"__init__.py" -> lower
	"__init__.py" -> replace
	"__init__.py" -> "name.lower"
	"__init__.py" -> bool
	"__init__.py" -> "DistributionFinder.Context"
	"__init__.py" -> "self._search_paths"
	"__init__.py" -> map
	"__init__.py" -> Prepared
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> "path.search"
	"__init__.py" -> map
	"__init__.py" -> "FastPath.__new__.cache_clear"
	"__init__.py" -> "self._path.joinpath"
	"__init__.py" -> str
	"__init__.py" -> <unknown_function>
	"__init__.py" -> pass_none
	"__init__.py" -> "self._name_from_stem"
	"__init__.py" -> super
	"__init__.py" -> "filename.partition"
	"__init__.py" -> "Distribution.from_name"
	"__init__.py" -> "Distribution.discover"
	"__init__.py" -> "Distribution.from_name"
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> _unique
	"__init__.py" -> EntryPoints
	"__init__.py" -> append
	"__init__.py" -> dict
	"__init__.py" -> split
	"__init__.py" -> "dist.read_text"
	"__init__.py" -> str
	"__init__.py" -> set
	"__init__.py" -> map
	"__init__.py" -> always_iterable
	"__init__.py" -> filter
	"__init__.py" -> parsestr
	"__init__.py" -> parsebytes
	"__init__.py" -> parse
	"__init__.py" -> parse
	"parser.py" -> "feedparser._set_headersonly"
	"parser.py" -> "fp.read"
	"parser.py" -> "feedparser.feed"
	"parser.py" -> "feedparser.close"
	"parser.py" -> "self.parse"
	"parser.py" -> "Parser.parse"
	"parser.py" -> "Parser.parsestr"
	"parser.py" -> Parser
	"parser.py" -> "self.parser.parse"
	"parser.py" -> "fp.detach"
	"parser.py" -> "text.decode"
	"parser.py" -> "self.parser.parsestr"
	"parser.py" -> "BytesParser.parse"
	"parser.py" -> "BytesParser.parsebytes"
	"feedparser.py" -> object
	"feedparser.py" -> "self._eofstack.append"
	"feedparser.py" -> "self._eofstack.pop"
	"feedparser.py" -> "self._partial.seek"
	"feedparser.py" -> "self.pushlines"
	"feedparser.py" -> "self._partial.readlines"
	"feedparser.py" -> "self._partial.seek"
	"feedparser.py" -> "self._partial.truncate"
	"feedparser.py" -> "self._lines.popleft"
	"feedparser.py" -> reversed
	"feedparser.py" -> ateof
	"feedparser.py" -> "self._lines.appendleft"
	"feedparser.py" -> "self._lines.appendleft"
	"feedparser.py" -> "self._partial.write"
	"feedparser.py" -> "self._partial.seek"
	"feedparser.py" -> "self._partial.readlines"
	"feedparser.py" -> "self._partial.seek"
	"feedparser.py" -> "self._partial.truncate"
	"feedparser.py" -> endswith
	"feedparser.py" -> "self._partial.write"
	"feedparser.py" -> "parts.pop"
	"feedparser.py" -> "self.pushlines"
	"feedparser.py" -> "self._lines.extend"
	"feedparser.py" -> "self.readline"
	"feedparser.py" -> _factory
	"feedparser.py" -> BufferedSubFile
	"feedparser.py" -> "self._parsegen"
	"feedparser.py" -> "self._input.push"
	"feedparser.py" -> "self._call_parse"
	"feedparser.py" -> "self._parse"
	"feedparser.py" -> "self._input.close"
	"feedparser.py" -> "self._call_parse"
	"feedparser.py" -> "self._pop_message"
	"feedparser.py" -> "root.get_content_maintype"
	"feedparser.py" -> "root.is_multipart"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "self._factory"
	"feedparser.py" -> "self._factory"
	"feedparser.py" -> "self._cur.get_content_type"
	"feedparser.py" -> "msg.set_default_type"
	"feedparser.py" -> attach
	"feedparser.py" -> "self._msgstack.append"
	"feedparser.py" -> "self._msgstack.pop"
	"feedparser.py" -> "self._new_message"
	"feedparser.py" -> "headerRE.match"
	"feedparser.py" -> "NLCRE.match"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "self._input.unreadline"
	"feedparser.py" -> "headers.append"
	"feedparser.py" -> "self._parse_headers"
	"feedparser.py" -> "self._input.readline"
	"feedparser.py" -> "lines.append"
	"feedparser.py" -> "self._cur.set_payload"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> "self._cur.get_content_type"
	"feedparser.py" -> "self._input.push_eof_matcher"
	"feedparser.py" -> "self._parsegen"
	"feedparser.py" -> "self._pop_message"
	"feedparser.py" -> "self._input.pop_eof_matcher"
	"feedparser.py" -> "self._input.readline"
	"feedparser.py" -> "self._input.readline"
	"feedparser.py" -> "self._input.unreadline"
	"feedparser.py" -> "self._cur.get_content_maintype"
	"feedparser.py" -> "self._parsegen"
	"feedparser.py" -> "self._pop_message"
	"feedparser.py" -> "self._cur.get_content_maintype"
	"feedparser.py" -> "self._cur.get_boundary"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "lines.append"
	"feedparser.py" -> "self._cur.set_payload"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> lower
	"feedparser.py" -> str
	"feedparser.py" -> "self._cur.get"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "self._input.readline"
	"feedparser.py" -> "boundaryre.match"
	"feedparser.py" -> "mo.group"
	"feedparser.py" -> "mo.group"
	"feedparser.py" -> "NLCRE_eol.search"
	"feedparser.py" -> len
	"feedparser.py" -> "eolmo.group"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> "self._input.unreadline"
	"feedparser.py" -> "self._input.readline"
	"feedparser.py" -> "boundaryre.match"
	"feedparser.py" -> "self._input.unreadline"
	"feedparser.py" -> "self._input.push_eof_matcher"
	"feedparser.py" -> "self._parsegen"
	"feedparser.py" -> "self._last.get_content_maintype"
	"feedparser.py" -> "NLCRE_eol.search"
	"feedparser.py" -> len
	"feedparser.py" -> "mo.group"
	"feedparser.py" -> isinstance
	"feedparser.py" -> "NLCRE_eol.search"
	"feedparser.py" -> len
	"feedparser.py" -> "mo.group"
	"feedparser.py" -> "self._input.pop_eof_matcher"
	"feedparser.py" -> "self._pop_message"
	"feedparser.py" -> "preamble.append"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "self._cur.set_payload"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "epilogue.append"
	"feedparser.py" -> "NLCRE_bol.match"
	"feedparser.py" -> len
	"feedparser.py" -> "bolmo.group"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> "lines.append"
	"feedparser.py" -> "self._cur.set_payload"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> enumerate
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "lastvalue.append"
	"feedparser.py" -> "self._cur.set_raw"
	"feedparser.py" -> "self.policy.header_source_parse"
	"feedparser.py" -> "line.startswith"
	"feedparser.py" -> "NLCRE_eol.search"
	"feedparser.py" -> len
	"feedparser.py" -> "mo.group"
	"feedparser.py" -> "self._cur.set_unixfrom"
	"feedparser.py" -> len
	"feedparser.py" -> "self._input.unreadline"
	"feedparser.py" -> "self._cur.defects.append"
	"feedparser.py" -> "line.find"
	"feedparser.py" -> "self._cur.defects.append"
	"feedparser.py" -> "self._cur.set_raw"
	"feedparser.py" -> "self.policy.header_source_parse"
	"feedparser.py" -> super
	"feedparser.py" -> "data.decode"
	"__init__.py" -> "itertools.islice"
	"__init__.py" -> "path.rstrip"
	"__init__.py" -> "itertools.filterfalse"
	"__init__.py" -> set
	"__init__.py" -> super
	"__init__.py" -> super
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> map
	"__init__.py" -> _dedupe
	"__init__.py" -> super
	"__init__.py" -> list
	"__init__.py" -> "self._implied_dirs"
	"__init__.py" -> set
	"__init__.py" -> "self.namelist"
	"__init__.py" -> "self._name_set"
	"__init__.py" -> super
	"__init__.py" -> "name.endswith"
	"__init__.py" -> "self._name_set"
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> cls
	"__init__.py" -> "cls._implied_dirs"
	"__init__.py" -> "zf.namelist"
	"__init__.py" -> "zf.writestr"
	"__init__.py" -> super
	"__init__.py" -> super
	"__init__.py" -> text_encoding
	"__init__.py" -> "FastLookup.make"
	"__init__.py" -> hash
	"__init__.py" -> "self.is_dir"
	"__init__.py" -> IsADirectoryError
	"__init__.py" -> "self.exists"
	"__init__.py" -> FileNotFoundError
	"__init__.py" -> "self.root.open"
	"__init__.py" -> ValueError
	"__init__.py" -> "self._base"
	"__init__.py" -> "self._base"
	"__init__.py" -> "self._base"
	"__init__.py" -> "self._base"
	"__init__.py" -> "self.open"
	"__init__.py" -> "strm.read"
	"__init__.py" -> "self.open"
	"__init__.py" -> "strm.read"
	"__init__.py" -> "path.at.rstrip"
	"__init__.py" -> "self.at.rstrip"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.at.endswith"
	"__init__.py" -> "self.exists"
	"__init__.py" -> "self.is_dir"
	"__init__.py" -> "self.root._name_set"
	"__init__.py" -> "self.is_dir"
	"__init__.py" -> ValueError
	"__init__.py" -> map
	"__init__.py" -> "self.root.namelist"
	"__init__.py" -> filter
	"__init__.py" -> ValueError
	"__init__.py" -> map
	"__init__.py" -> filter
	"__init__.py" -> "self.root.namelist"
	"__init__.py" -> "self.glob"
	"__init__.py" -> str
	"__init__.py" -> str
	"__init__.py" -> "other.joinpath"
	"__init__.py" -> "self.__repr.format"
	"__init__.py" -> "self._next"
	"__init__.py" -> "self.root.resolve_dir"
	"__init__.py" -> "self.at.rstrip"
	"__init__.py" -> "self._next"
	"glob.py" -> list
	"glob.py" -> "sys.audit"
	"glob.py" -> "sys.audit"
	"glob.py" -> next
	"glob.py" -> "itertools.chain"
	"glob.py" -> glob_in_dir
	"glob.py" -> isinstance
	"glob.py" -> isinstance
	"glob.py" -> bytes
	"glob.py" -> "entry.is_dir"
	"glob.py" -> fsencode
	"glob.py" -> list
	"glob.py" -> isinstance
	"glob.py" -> "magic_check_bytes.search"
	"glob.py" -> "magic_check.search"
	"glob.py" -> isinstance
	"glob.py" -> isinstance
	"glob.py" -> "magic_check_bytes.sub"
	"glob.py" -> "magic_check.sub"
	"glob.py" -> getattr
	"csv.py" -> "self._validate"
	"csv.py" -> str
	"csv.py" -> next
	"csv.py" -> next
	"csv.py" -> next
	"csv.py" -> dict
	"csv.py" -> zip
	"csv.py" -> len
	"csv.py" -> len
	"csv.py" -> "extrasaction.lower"
	"csv.py" -> ValueError
	"csv.py" -> dict
	"csv.py" -> zip
	"csv.py" -> "self.writerow"
	"csv.py" -> "rowdict.keys"
	"csv.py" -> ValueError
	"csv.py" -> join
	"csv.py" -> repr
	"csv.py" -> "rowdict.get"
	"csv.py" -> "self.writer.writerow"
	"csv.py" -> "self._dict_to_list"
	"csv.py" -> "self.writer.writerows"
	"csv.py" -> map
	"csv.py" -> "self._guess_quote_and_delimiter"
	"csv.py" -> "self._guess_delimiter"
	"csv.py" -> "regexp.findall"
	"csv.py" -> "quotes.get"
	"csv.py" -> "delims.get"
	"csv.py" -> max
	"csv.py" -> max
	"csv.py" -> "dq_regexp.search"
	"csv.py" -> list
	"csv.py" -> filter
	"csv.py" -> "data.split"
	"csv.py" -> chr
	"csv.py" -> range
	"csv.py" -> min
	"csv.py" -> len
	"csv.py" -> len
	"csv.py" -> "charFrequency.get"
	"csv.py" -> "line.count"
	"csv.py" -> "metaFrequency.get"
	"csv.py" -> "charFrequency.keys"
	"csv.py" -> list
	"csv.py" -> items
	"csv.py" -> len
	"csv.py" -> len
	"csv.py" -> max
	"csv.py" -> "items.remove"
	"csv.py" -> sum
	"csv.py" -> "modes.items"
	"csv.py" -> float
	"csv.py" -> min
	"csv.py" -> len
	"csv.py" -> len
	"csv.py" -> len
	"csv.py" -> list
	"csv.py" -> "delims.keys"
	"csv.py" -> count
	"csv.py" -> count
	"csv.py" -> len
	"csv.py" -> "delims.keys"
	"csv.py" -> count
	"csv.py" -> count
	"csv.py" -> "delims.items"
	"csv.py" -> "items.sort"
	"csv.py" -> count
	"csv.py" -> count
	"csv.py" -> "self.sniff"
	"csv.py" -> next
	"csv.py" -> len
	"csv.py" -> range
	"csv.py" -> len
	"csv.py" -> list
	"csv.py" -> "columnTypes.keys"
	"csv.py" -> thisType
	"csv.py" -> len
	"csv.py" -> "columnTypes.items"
	"csv.py" -> type
	"csv.py" -> type
	"csv.py" -> len
	"csv.py" -> colType
	"wrappers.py" -> super
	"wrappers.py" -> super
	"wrappers.py" -> super
	"wrappers.py" -> "endpoint.rpartition"
	"wrappers.py" -> _split_blueprint_path
	"wrappers.py" -> _load_form_data
	"wrappers.py" -> super
	"wrappers.py" -> attach_enctype_error_multidict
	"wrappers.py" -> on_json_loading_failed
	"wrappers.py" -> super
	"wrappers.py" -> BadRequest
	"wrappers.py" -> super
	"app.py" -> isinstance
	"app.py" -> ImmutableDict
	"app.py" -> SecureCookieSessionInterface
	"app.py" -> __init__
	"app.py" -> super
	"app.py" -> "cli.AppGroup"
	"app.py" -> bool
	"app.py" -> "self.add_url_rule"
	"app.py" -> send_static_file
	"app.py" -> self_ref
	"app.py" -> isinstance
	"app.py" -> int
	"app.py" -> "value.total_seconds"
	"app.py" -> RuntimeError
	"app.py" -> "self.get_send_file_max_age"
	"app.py" -> send_from_directory
	"app.py" -> ValueError
	"app.py" -> open
	"app.py" -> open
	"app.py" -> open
	"app.py" -> open
	"app.py" -> dict
	"app.py" -> "self.jinja_environment"
	"app.py" -> "rv.globals.update"
	"app.py" -> get_host
	"app.py" -> "self.url_map.bind_to_environ"
	"app.py" -> "self.url_map.bind"
	"app.py" -> isinstance
	"app.py" -> FormDataRoutingRedirect
	"app.py" -> chain
	"app.py" -> reversed
	"app.py" -> "context.copy"
	"app.py" -> "context.update"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "context.update"
	"app.py" -> "rv.update"
	"app.py" -> processor
	"app.py" -> is_running_from_reloader
	"app.py" -> get_load_dotenv
	"app.py" -> "cli.load_dotenv"
	"app.py" -> get_debug_flag
	"app.py" -> bool
	"app.py" -> "self.config.get"
	"app.py" -> "server_name.partition"
	"app.py" -> int
	"app.py" -> int
	"app.py" -> "options.setdefault"
	"app.py" -> "options.setdefault"
	"app.py" -> "options.setdefault"
	"app.py" -> "cli.show_server_banner"
	"app.py" -> run_simple
	"app.py" -> cls
	"app.py" -> cls
	"app.py" -> isinstance
	"app.py" -> "self._find_error_handler"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> isinstance
	"app.py" -> isinstance
	"app.py" -> "self.trap_http_exception"
	"app.py" -> "self.handle_http_exception"
	"app.py" -> "self._find_error_handler"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "sys.exc_info"
	"app.py" -> "got_request_exception.send"
	"app.py" -> "self.log_exception"
	"app.py" -> InternalServerError
	"app.py" -> "self._find_error_handler"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "self.finalize_request"
	"app.py" -> "self.logger.error"
	"app.py" -> "self.raise_routing_exception"
	"app.py" -> getattr
	"app.py" -> "self.make_default_options_response"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "request_started.send"
	"app.py" -> "self.preprocess_request"
	"app.py" -> "self.dispatch_request"
	"app.py" -> "self.handle_user_exception"
	"app.py" -> "self.finalize_request"
	"app.py" -> "self.make_response"
	"app.py" -> "self.process_response"
	"app.py" -> "request_finished.send"
	"app.py" -> "self.logger.exception"
	"app.py" -> "adapter.allowed_methods"
	"app.py" -> "self.response_class"
	"app.py" -> "rv.allow.update"
	"app.py" -> "self.async_to_sync"
	"app.py" -> RuntimeError
	"app.py" -> "_cv_request.get"
	"app.py" -> "_cv_app.get"
	"app.py" -> "self.create_url_adapter"
	"app.py" -> RuntimeError
	"app.py" -> ValueError
	"app.py" -> "self.inject_url_defaults"
	"app.py" -> "url_adapter.build"
	"app.py" -> "values.update"
	"app.py" -> "self.handle_url_build_error"
	"app.py" -> isinstance
	"app.py" -> len
	"app.py" -> isinstance
	"app.py" -> TypeError
	"app.py" -> TypeError
	"app.py" -> isinstance
	"app.py" -> isinstance
	"app.py" -> isinstance
	"app.py" -> "self.response_class"
	"app.py" -> isinstance
	"app.py" -> "self.json.response"
	"app.py" -> isinstance
	"app.py" -> callable
	"app.py" -> "self.response_class.force_type"
	"app.py" -> with_traceback
	"app.py" -> TypeError
	"app.py" -> type
	"app.py" -> "sys.exc_info"
	"app.py" -> TypeError
	"app.py" -> type
	"app.py" -> isinstance
	"app.py" -> "rv.headers.update"
	"app.py" -> reversed
	"app.py" -> url_func
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "request_ctx._get_current_object"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> chain
	"app.py" -> reversed
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "self.session_interface.is_null_session"
	"app.py" -> "self.session_interface.save_session"
	"app.py" -> "sys.exc_info"
	"app.py" -> chain
	"app.py" -> reversed
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "request_tearing_down.send"
	"app.py" -> "sys.exc_info"
	"app.py" -> reversed
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "appcontext_tearing_down.send"
	"app.py" -> AppContext
	"app.py" -> RequestContext
	"app.py" -> EnvironBuilder
	"app.py" -> "self.request_context"
	"app.py" -> "builder.get_environ"
	"app.py" -> "builder.close"
	"app.py" -> "self.request_context"
	"app.py" -> "ctx.push"
	"app.py" -> "self.full_dispatch_request"
	"app.py" -> "self.handle_exception"
	"app.py" -> "sys.exc_info"
	"app.py" -> response
	"app.py" -> <unknown_function>
	"app.py" -> "_cv_app.get"
	"app.py" -> <unknown_function>
	"app.py" -> "_cv_request.get"
	"app.py" -> "self.should_ignore_error"
	"app.py" -> "ctx.pop"
	"app.py" -> "self.wsgi_app"
	"sync.py" -> "context.get"
	"sync.py" -> "cvar.get"
	"sync.py" -> "cvar.set"
	"sync.py" -> "cvar.set"
	"sync.py" -> hasattr
	"sync.py" -> isinstance
	"sync.py" -> iscoroutinefunction
	"sync.py" -> "SyncToAsync.thread_sensitive_context.get"
	"sync.py" -> "SyncToAsync.thread_sensitive_context.set"
	"sync.py" -> "SyncToAsync.context_to_thread_executor.pop"
	"sync.py" -> "executor.shutdown"
	"sync.py" -> "SyncToAsync.thread_sensitive_context.reset"
	"sync.py" -> Local
	"sync.py" -> callable
	"sync.py" -> getattr
	"sync.py" -> getattr
	"sync.py" -> getattr
	"sync.py" -> "event_loop.is_running"
	"sync.py" -> RuntimeError
	"sync.py" -> hasattr
	"sync.py" -> CurrentThreadExecutor
	"sync.py" -> "self.main_wrap"
	"sync.py" -> "sys.exc_info"
	"sync.py" -> "self.main_event_loop.is_running"
	"sync.py" -> "loop_executor.submit"
	"sync.py" -> "current_executor.run_until_future"
	"sync.py" -> "loop_future.result"
	"sync.py" -> "self.main_event_loop.call_soon_threadsafe"
	"sync.py" -> "current_executor.run_until_future"
	"sync.py" -> hasattr
	"sync.py" -> "call_result.result"
	"sync.py" -> "loop.run_until_complete"
	"sync.py" -> "task.cancel"
	"sync.py" -> "loop.run_until_complete"
	"sync.py" -> "task.cancelled"
	"sync.py" -> "task.exception"
	"sync.py" -> "loop.call_exception_handler"
	"sync.py" -> "task.exception"
	"sync.py" -> hasattr
	"sync.py" -> "loop.run_until_complete"
	"sync.py" -> "loop.shutdown_asyncgens"
	"sync.py" -> "loop.close"
	"sync.py" -> "SyncToAsync.get_current_task"
	"sync.py" -> "self.awaitable"
	"sync.py" -> "self.awaitable"
	"sync.py" -> "call_result.set_exception"
	"sync.py" -> "call_result.set_result"
	"sync.py" -> callable
	"sync.py" -> getattr
	"sync.py" -> TypeError
	"sync.py" -> TypeError
	"sync.py" -> hasattr
	"sync.py" -> "self.thread_sensitive_context.get"
	"sync.py" -> "self.thread_sensitive_context.get"
	"sync.py" -> "self.deadlock_context.get"
	"sync.py" -> RuntimeError
	"sync.py" -> "self.deadlock_context.set"
	"sync.py" -> "loop.run_in_executor"
	"sync.py" -> "self.get_current_task"
	"sync.py" -> "sys.exc_info"
	"sync.py" -> "self.deadlock_context.set"
	"sync.py" -> "AsyncToSync.launch_map.get"
	"sync.py" -> func
	"sync.py" -> func
	"sync.py" -> AsyncToSync
	"sync.py" -> AsyncToSync
	"sync.py" -> SyncToAsync
	"sync.py" -> SyncToAsync
	"__init__.py" -> AttributeError
	"debughelpers.py" -> "request.form.getlist"
	"debughelpers.py" -> join
	"debughelpers.py" -> repr
	"debughelpers.py" -> "buf.append"
	"debughelpers.py" -> join
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> "exc.new_url.partition"
	"debughelpers.py" -> "buf.append"
	"debughelpers.py" -> "buf.append"
	"debughelpers.py" -> __init__
	"debughelpers.py" -> super
	"debughelpers.py" -> join
	"debughelpers.py" -> __getitem__
	"debughelpers.py" -> super
	"debughelpers.py" -> with_traceback
	"debughelpers.py" -> DebugFilesKeyError
	"debughelpers.py" -> type
	"debughelpers.py" -> type
	"debughelpers.py" -> sorted
	"debughelpers.py" -> "loader.__dict__.items"
	"debughelpers.py" -> "key.startswith"
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> all
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> enumerate
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> repr
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> _dump_loader_info
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "app.logger.info"
	"debughelpers.py" -> join
	"ctx.py" -> object
	"ctx.py" -> AttributeError
	"ctx.py" -> AttributeError
	"ctx.py" -> "self.__dict__.get"
	"ctx.py" -> "self.__dict__.pop"
	"ctx.py" -> "self.__dict__.pop"
	"ctx.py" -> "self.__dict__.setdefault"
	"ctx.py" -> iter
	"ctx.py" -> "_cv_app.get"
	"ctx.py" -> "object.__repr__"
	"ctx.py" -> "_cv_request.get"
	"ctx.py" -> RuntimeError
	"ctx.py" -> "ctx._after_request_functions.append"
	"ctx.py" -> "_cv_request.get"
	"ctx.py" -> RuntimeError
	"ctx.py" -> "ctx.copy"
	"ctx.py" -> <unknown_function>
	"ctx.py" -> "ctx.app.ensure_sync"
	"ctx.py" -> "_cv_request.get"
	"ctx.py" -> "_cv_app.get"
	"ctx.py" -> "app.create_url_adapter"
	"ctx.py" -> "app.app_ctx_globals_class"
	"ctx.py" -> "self._cv_tokens.append"
	"ctx.py" -> "_cv_app.set"
	"ctx.py" -> "appcontext_pushed.send"
	"ctx.py" -> len
	"ctx.py" -> "sys.exc_info"
	"ctx.py" -> "self.app.do_teardown_appcontext"
	"ctx.py" -> "_cv_app.get"
	"ctx.py" -> "_cv_app.reset"
	"ctx.py" -> "self._cv_tokens.pop"
	"ctx.py" -> AssertionError
	"ctx.py" -> "appcontext_popped.send"
	"ctx.py" -> "self.push"
	"ctx.py" -> "self.pop"
	"ctx.py" -> "app.request_class"
	"ctx.py" -> "app.create_url_adapter"
	"ctx.py" -> "self.__class__"
	"ctx.py" -> "self.url_adapter.match"
	"ctx.py" -> "_cv_app.get"
	"ctx.py" -> "self.app.app_context"
	"ctx.py" -> "app_ctx.push"
	"ctx.py" -> "self._cv_tokens.append"
	"ctx.py" -> "_cv_request.set"
	"ctx.py" -> "session_interface.open_session"
	"ctx.py" -> "session_interface.make_null_session"
	"ctx.py" -> "self.match_request"
	"ctx.py" -> len
	"ctx.py" -> "sys.exc_info"
	"ctx.py" -> "self.app.do_teardown_request"
	"ctx.py" -> getattr
	"ctx.py" -> request_close
	"ctx.py" -> "_cv_request.get"
	"ctx.py" -> "self._cv_tokens.pop"
	"ctx.py" -> "_cv_request.reset"
	"ctx.py" -> "app_ctx.pop"
	"ctx.py" -> AssertionError
	"ctx.py" -> "self.push"
	"ctx.py" -> "self.pop"
	"ctx.py" -> type
	"testing.py" -> bool
	"testing.py" -> "app.config.get"
	"testing.py" -> "app_root.lstrip"
	"testing.py" -> __init__
	"testing.py" -> super
	"testing.py" -> "self.app.json.dumps"
	"testing.py" -> __init__
	"testing.py" -> super
	"testing.py" -> _get_werkzeug_version
	"testing.py" -> TypeError
	"testing.py" -> "app.test_request_context"
	"testing.py" -> "self._add_cookies_to_wsgi"
	"testing.py" -> "app.session_interface.open_session"
	"testing.py" -> RuntimeError
	"testing.py" -> "app.response_class"
	"testing.py" -> "app.session_interface.is_null_session"
	"testing.py" -> "app.session_interface.save_session"
	"testing.py" -> "self._update_cookies_from_response"
	"testing.py" -> "ctx.request.host.partition"
	"testing.py" -> "resp.headers.getlist"
	"testing.py" -> "self._copy_environ"
	"testing.py" -> "kwargs.get"
	"testing.py" -> EnvironBuilder
	"testing.py" -> "builder.get_request"
	"testing.py" -> "builder.close"
	"testing.py" -> isinstance
	"testing.py" -> isinstance
	"testing.py" -> "self._copy_environ"
	"testing.py" -> "builder.get_request"
	"testing.py" -> isinstance
	"testing.py" -> get_request
	"testing.py" -> "EnvironBuilder.from_environ"
	"testing.py" -> "self._copy_environ"
	"testing.py" -> "self._copy_environ"
	"testing.py" -> "self._request_from_builder_args"
	"testing.py" -> "self._context_stack.close"
	"testing.py" -> open
	"testing.py" -> super
	"testing.py" -> "self._new_contexts.pop"
	"testing.py" -> "self._context_stack.enter_context"
	"testing.py" -> RuntimeError
	"testing.py" -> "self._context_stack.close"
	"testing.py" -> __init__
	"testing.py" -> super
	"testing.py" -> ScriptInfo
	"testing.py" -> invoke
	"testing.py" -> super
	"helpers.py" -> bool
	"helpers.py" -> "val.lower"
	"helpers.py" -> "val.lower"
	"helpers.py" -> iter
	"helpers.py" -> generator_or_function
	"helpers.py" -> stream_with_context
	"helpers.py" -> "_cv_request.get"
	"helpers.py" -> RuntimeError
	"helpers.py" -> hasattr
	"helpers.py" -> "gen.close"
	"helpers.py" -> generator
	"helpers.py" -> next
	"helpers.py" -> "current_app.response_class"
	"helpers.py" -> len
	"helpers.py" -> "current_app.make_response"
	"helpers.py" -> "current_app.url_for"
	"helpers.py" -> "current_app.redirect"
	"helpers.py" -> _wz_redirect
	"helpers.py" -> "current_app.aborter"
	"helpers.py" -> _wz_abort
	"helpers.py" -> getattr
	"helpers.py" -> "current_app.jinja_env.get_template"
	"helpers.py" -> "session.get"
	"helpers.py" -> "flashes.append"
	"helpers.py" -> "current_app._get_current_object"
	"helpers.py" -> "message_flashed.send"
	"helpers.py" -> "session.pop"
	"helpers.py" -> list
	"helpers.py" -> filter
	"helpers.py" -> "kwargs.get"
	"helpers.py" -> "kwargs.update"
	"helpers.py" -> "werkzeug.utils.send_file"
	"helpers.py" -> _prepare_send_file_kwargs
	"helpers.py" -> "werkzeug.utils.send_from_directory"
	"helpers.py" -> _prepare_send_file_kwargs
	"helpers.py" -> "sys.modules.get"
	"helpers.py" -> hasattr
	"helpers.py" -> hasattr
	"helpers.py" -> "loader.get_filename"
	"helpers.py" -> __import__
	"helpers.py" -> getattr
	"helpers.py" -> RuntimeError
	"helpers.py" -> "out.extend"
	"helpers.py" -> _split_blueprint_path
	"helpers.py" -> "name.rpartition"
	"__main__.py" -> main
	"views.py" -> frozenset
	"views.py" -> NotImplementedError
	"views.py" -> "view.view_class"
	"views.py" -> <unknown_function>
	"views.py" -> "current_app.ensure_sync"
	"views.py" -> cls
	"views.py" -> <unknown_function>
	"views.py" -> "current_app.ensure_sync"
	"views.py" -> decorator
	"views.py" -> __init_subclass__
	"views.py" -> super
	"views.py" -> set
	"views.py" -> getattr
	"views.py" -> "methods.update"
	"views.py" -> hasattr
	"views.py" -> "methods.add"
	"views.py" -> "key.upper"
	"views.py" -> getattr
	"views.py" -> "request.method.lower"
	"views.py" -> getattr
	"views.py" -> <unknown_function>
	"views.py" -> "current_app.ensure_sync"
	"blueprints.py" -> "self.options.get"
	"blueprints.py" -> "self.options.get"
	"blueprints.py" -> "self.options.get"
	"blueprints.py" -> "self.options.get"
	"blueprints.py" -> dict
	"blueprints.py" -> "self.url_defaults.update"
	"blueprints.py" -> "self.options.get"
	"blueprints.py" -> join
	"blueprints.py" -> "self.url_prefix.rstrip"
	"blueprints.py" -> "rule.lstrip"
	"blueprints.py" -> "options.setdefault"
	"blueprints.py" -> _endpoint_from_view_func
	"blueprints.py" -> dict
	"blueprints.py" -> "options.pop"
	"blueprints.py" -> "self.app.add_url_rule"
	"blueprints.py" -> lstrip
	"blueprints.py" -> __init__
	"blueprints.py" -> super
	"blueprints.py" -> ValueError
	"blueprints.py" -> ValueError
	"blueprints.py" -> AssertionError
	"blueprints.py" -> "self.deferred_functions.append"
	"blueprints.py" -> func
	"blueprints.py" -> "self.record"
	"blueprints.py" -> BlueprintSetupState
	"blueprints.py" -> ValueError
	"blueprints.py" -> "self._blueprints.append"
	"blueprints.py" -> "options.get"
	"blueprints.py" -> "options.get"
	"blueprints.py" -> lstrip
	"blueprints.py" -> ValueError
	"blueprints.py" -> any
	"blueprints.py" -> "app.blueprints.values"
	"blueprints.py" -> "self.make_setup_state"
	"blueprints.py" -> "state.add_url_rule"
	"blueprints.py" -> "self._merge_blueprint_funcs"
	"blueprints.py" -> deferred
	"blueprints.py" -> "options.get"
	"blueprints.py" -> "app.cli.commands.update"
	"blueprints.py" -> "app.cli.add_command"
	"blueprints.py" -> "app.cli.add_command"
	"blueprints.py" -> "bp_options.copy"
	"blueprints.py" -> "bp_options.get"
	"blueprints.py" -> "bp_options.get"
	"blueprints.py" -> "state.url_prefix.rstrip"
	"blueprints.py" -> "bp_url_prefix.lstrip"
	"blueprints.py" -> "blueprint.register"
	"blueprints.py" -> "bp_dict.items"
	"blueprints.py" -> extend
	"blueprints.py" -> "self.error_handler_spec.items"
	"blueprints.py" -> "code_values.items"
	"blueprints.py" -> "value.items"
	"blueprints.py" -> "self.view_functions.items"
	"blueprints.py" -> extend
	"blueprints.py" -> extend
	"blueprints.py" -> extend
	"blueprints.py" -> extend
	"blueprints.py" -> extend
	"blueprints.py" -> extend
	"blueprints.py" -> ValueError
	"blueprints.py" -> hasattr
	"blueprints.py" -> ValueError
	"blueprints.py" -> "self.record"
	"blueprints.py" -> "s.add_url_rule"
	"blueprints.py" -> "self.add_app_template_filter"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> "self.add_app_template_test"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> "self.add_app_template_global"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.before_request_funcs.setdefault"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.after_request_funcs.setdefault"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.teardown_request_funcs.setdefault"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.template_context_processors.setdefault"
	"blueprints.py" -> <unknown_function>
	"blueprints.py" -> "state.app.errorhandler"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.url_value_preprocessors.setdefault"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.url_default_functions.setdefault"
	"app.py" -> isinstance
	"app.py" -> <unknown_function>
	"app.py" -> <unknown_function>
	"app.py" -> <unknown_function>
	"app.py" -> __init__
	"app.py" -> super
	"app.py" -> "self.auto_find_instance_path"
	"app.py" -> ValueError
	"app.py" -> "self.make_config"
	"app.py" -> "self.make_aborter"
	"app.py" -> "self.json_provider_class"
	"app.py" -> "self.url_map_class"
	"app.py" -> AssertionError
	"app.py" -> getattr
	"app.py" -> "self.create_jinja_environment"
	"app.py" -> NotImplementedError
	"app.py" -> dict
	"app.py" -> get_debug_flag
	"app.py" -> "self.config_class"
	"app.py" -> "self.aborter_class"
	"app.py" -> find_package
	"app.py" -> DispatchingJinjaLoader
	"app.py" -> "filename.endswith"
	"app.py" -> "blueprint.register"
	"app.py" -> "self.blueprints.values"
	"app.py" -> _endpoint_from_view_func
	"app.py" -> "options.pop"
	"app.py" -> getattr
	"app.py" -> isinstance
	"app.py" -> TypeError
	"app.py" -> "item.upper"
	"app.py" -> set
	"app.py" -> getattr
	"app.py" -> getattr
	"app.py" -> "required_methods.add"
	"app.py" -> "self.url_rule_class"
	"app.py" -> "self.url_map.add"
	"app.py" -> "self.view_functions.get"
	"app.py" -> AssertionError
	"app.py" -> "self.add_template_filter"
	"app.py" -> "self.add_template_test"
	"app.py" -> "self.add_template_global"
	"app.py" -> "self.teardown_appcontext_funcs.append"
	"app.py" -> "self.shell_context_processors.append"
	"app.py" -> "self._get_exc_class_and_code"
	"app.py" -> type
	"app.py" -> "handler_map.get"
	"app.py" -> isinstance
	"app.py" -> isinstance
	"app.py" -> _wz_redirect
	"app.py" -> chain
	"app.py" -> reversed
	"app.py" -> _split_blueprint_path
	"app.py" -> "endpoint.rpartition"
	"app.py" -> func
	"app.py" -> handler
	"app.py" -> "sys.exc_info"
	"scaffold.py" -> object
	"scaffold.py" -> "self._check_setup_finished"
	"scaffold.py" -> f
	"scaffold.py" -> get_root_path
	"scaffold.py" -> type
	"scaffold.py" -> rstrip
	"scaffold.py" -> rstrip
	"scaffold.py" -> "value.rstrip"
	"scaffold.py" -> TypeError
	"scaffold.py" -> "self.route"
	"scaffold.py" -> "self._method_route"
	"scaffold.py" -> "self._method_route"
	"scaffold.py" -> "self._method_route"
	"scaffold.py" -> "self._method_route"
	"scaffold.py" -> "self._method_route"
	"scaffold.py" -> "options.pop"
	"scaffold.py" -> "self.add_url_rule"
	"scaffold.py" -> append
	"scaffold.py" -> "self.before_request_funcs.setdefault"
	"scaffold.py" -> append
	"scaffold.py" -> "self.after_request_funcs.setdefault"
	"scaffold.py" -> append
	"scaffold.py" -> "self.teardown_request_funcs.setdefault"
	"scaffold.py" -> append
	"scaffold.py" -> append
	"scaffold.py" -> append
	"scaffold.py" -> "self.register_error_handler"
	"scaffold.py" -> "self._get_exc_class_and_code"
	"scaffold.py" -> isinstance
	"scaffold.py" -> ValueError
	"scaffold.py" -> isinstance
	"scaffold.py" -> TypeError
	"scaffold.py" -> issubclass
	"scaffold.py" -> ValueError
	"scaffold.py" -> issubclass
	"scaffold.py" -> "import_name.partition"
	"scaffold.py" -> ValueError
	"scaffold.py" -> next
	"scaffold.py" -> "package_path.is_relative_to"
	"scaffold.py" -> _find_package_path
	"scaffold.py" -> is_relative_to
	"scaffold.py" -> "site_folder.lower"
	"scaffold.py" -> "folder.lower"
	"scaffold.py" -> lower
	"provider.py" -> "fp.write"
	"provider.py" -> "self.dumps"
	"provider.py" -> "self.loads"
	"provider.py" -> "fp.read"
	"provider.py" -> TypeError
	"provider.py" -> len
	"provider.py" -> "self._prepare_response_obj"
	"provider.py" -> "self._app.response_class"
	"provider.py" -> "self.dumps"
	"provider.py" -> isinstance
	"provider.py" -> http_date
	"provider.py" -> isinstance
	"provider.py" -> str
	"provider.py" -> hasattr
	"provider.py" -> str
	"provider.py" -> "o.__html__"
	"provider.py" -> TypeError
	"provider.py" -> type
	"provider.py" -> staticmethod
	"provider.py" -> "kwargs.setdefault"
	"provider.py" -> "kwargs.setdefault"
	"provider.py" -> "kwargs.setdefault"
	"provider.py" -> "self._prepare_response_obj"
	"provider.py" -> "dump_args.setdefault"
	"provider.py" -> "dump_args.setdefault"
	"provider.py" -> "self._app.response_class"
	"provider.py" -> "self.dumps"
	"__init__.py" -> JSONEncoder
	"__init__.py" -> "_default_encoder.iterencode"
	"__init__.py" -> iterencode
	"__init__.py" -> cls
	"__init__.py" -> "fp.write"
	"__init__.py" -> "_default_encoder.encode"
	"__init__.py" -> encode
	"__init__.py" -> cls
	"__init__.py" -> JSONDecoder
	"__init__.py" -> bstartswith
	"__init__.py" -> bstartswith
	"__init__.py" -> bstartswith
	"__init__.py" -> len
	"__init__.py" -> len
	"__init__.py" -> "fp.read"
	"__init__.py" -> isinstance
	"__init__.py" -> "s.startswith"
	"__init__.py" -> JSONDecodeError
	"__init__.py" -> isinstance
	"__init__.py" -> TypeError
	"__init__.py" -> "s.decode"
	"__init__.py" -> "_default_decoder.decode"
	"__init__.py" -> decode
	"__init__.py" -> cls
	"__init__.py" -> "current_app.json.dumps"
	"__init__.py" -> "kwargs.setdefault"
	"__init__.py" -> "current_app.json.dump"
	"__init__.py" -> "kwargs.setdefault"
	"__init__.py" -> "current_app.json.loads"
	"__init__.py" -> "current_app.json.load"
	"__init__.py" -> "current_app.json.response"
	"tag.py" -> "self.to_json"
	"tag.py" -> isinstance
	"tag.py" -> len
	"tag.py" -> next
	"tag.py" -> iter
	"tag.py" -> next
	"tag.py" -> iter
	"tag.py" -> "self.serializer.tag"
	"tag.py" -> next
	"tag.py" -> iter
	"tag.py" -> isinstance
	"tag.py" -> "self.serializer.tag"
	"tag.py" -> "value.items"
	"tag.py" -> isinstance
	"tag.py" -> "self.serializer.tag"
	"tag.py" -> tuple
	"tag.py" -> isinstance
	"tag.py" -> "self.serializer.tag"
	"tag.py" -> isinstance
	"tag.py" -> decode
	"tag.py" -> callable
	"tag.py" -> getattr
	"tag.py" -> str
	"tag.py" -> "value.__html__"
	"tag.py" -> isinstance
	"tag.py" -> isinstance
	"tag.py" -> http_date
	"tag.py" -> parse_date
	"tag.py" -> "self.register"
	"tag.py" -> tag_class
	"tag.py" -> KeyError
	"tag.py" -> "self.order.append"
	"tag.py" -> "self.order.insert"
	"tag.py" -> "tag.check"
	"tag.py" -> "tag.tag"
	"tag.py" -> len
	"tag.py" -> next
	"tag.py" -> iter
	"tag.py" -> to_python
	"tag.py" -> isinstance
	"tag.py" -> "self._untag_scan"
	"tag.py" -> "value.items"
	"tag.py" -> "self.untag"
	"tag.py" -> isinstance
	"tag.py" -> "self._untag_scan"
	"tag.py" -> dumps
	"tag.py" -> "self.tag"
	"tag.py" -> "self._untag_scan"
	"tag.py" -> loads
	subgraph "cluster_Built-in (sys)" {
		node [color=white style=filled]
		label="Built-in (sys)"
		color=lightgrey style=filled
		"built-in"
	}
	subgraph "cluster_Standard Library" {
		node [color=white style=filled]
		label="Standard Library"
		color=lightblue style=filled
		"platform.py"
		"__init__.py"
		"datetime.py"
		"uuid.py"
		"dataclasses.py"
		"pathlib.py"
		"contextlib.py"
		"warnings.py"
		"weakref.py"
		"fnmatch.py"
		"parse.py"
		"functools.py"
		frozen
		"operator.py"
		"grp.cpython-311-darwin.so"
		"reprlib.py"
		"typing.py"
		"types.py"
		"keyword.py"
		"heapq.py"
		"copy.py"
		"_weakrefset.py"
		"enum.py"
		"copyreg.py"
		"linecache.py"
		"tracemalloc.py"
		"traceback.py"
		"unicodedata.cpython-311-darwin.so"
		"ipaddress.py"
		"string.py"
		"typing_extensions.py"
		"inspect.py"
		"dis.py"
		"ast.py"
		"tokenize.py"
		"argparse.py"
		"token.py"
		"shutil.py"
		"gettext.py"
		"textwrap.py"
		"opcode.py"
		"math.cpython-311-darwin.so"
		"_strptime.py"
		"locale.py"
		"calendar.py"
		"subprocess.py"
		"socket.py"
		"random.py"
		"hashlib.py"
		"_socket.cpython-311-darwin.so"
		"selectors.py"
		"array.cpython-311-darwin.so"
		"select.cpython-311-darwin.so"
		"statistics.py"
		"_hashlib.cpython-311-darwin.so"
		"threading.py"
		"pickle.py"
		"fractions.py"
		"decimal.py"
		"bisect.py"
		"plistlib.py"
		"struct.py"
		"binascii.cpython-311-darwin.so"
		"expat.py"
		"signal.py"
		"fcntl.cpython-311-darwin.so"
		"_posixsubprocess.cpython-311-darwin.so"
		"tarfile.py"
		"zipfile.py"
		"zlib.cpython-311-darwin.so"
		"bz2.py"
		"lzma.py"
		"gzip.py"
		"_compression.py"
		"_bz2.cpython-311-darwin.so"
		"py_compile.py"
		"testing.py"
		"ssl.py"
		"shlex.py"
		"tempfile.py"
		"_ssl.cpython-311-darwin.so"
		"base64.py"
		"getopt.py"
		"contextvars.py"
		"readline.cpython-311-darwin.so"
		"rlcompleter.py"
		"code.py"
		"codeop.py"
		"csv.py"
		"parser.py"
		"feedparser.py"
		"glob.py"
		"_csv.cpython-311-darwin.so"
		"sync.py"
	}
	subgraph cluster_flask {
		node [color=white style=filled]
		label=flask
		color=lightgrey style=filled
		"test_basic.py"
		"conftest.py"
		"test_converters.py"
		"test_logging.py"
		"test_signals.py"
		"test_request.py"
		"test_async.py"
		"test_session_interface.py"
		"test_instance_config.py"
		"test_views.py"
		"test_json_tag.py"
		"test_subclassing.py"
		"test_reqctx.py"
		"test_blueprints.py"
		"test_config.py"
		"test_user_error_handler.py"
		"test_helpers.py"
		"test_json.py"
		"test_cli.py"
		"test_templating.py"
		"test_appctx.py"
		"test_regression.py"
		"test_testing.py"
		"hello.py"
		"wsgi.py"
		"importerrorapp.py"
		"factory.py"
		"multiapp.py"
		"app.py"
		"flask.py"
		"typing_route.py"
		"typing_app_decorators.py"
		"typing_error_handler.py"
		"conf.py"
		"test_auth.py"
		"test_db.py"
		"test_factory.py"
		"test_blog.py"
		"auth.py"
		"db.py"
		"blog.py"
		"make_celery.py"
		"tasks.py"
		"views.py"
		"test_js_example.py"
		"logging.py"
		"signals.py"
		"sessions.py"
		"config.py"
		"templating.py"
		"globals.py"
		"blueprints.py"
		"cli.py"
		"wrappers.py"
		"debughelpers.py"
		"ctx.py"
		"helpers.py"
		"__main__.py"
		"scaffold.py"
		"provider.py"
		"tag.py"
	}
	"functools.py" -> "result.append"
	"contextlib.py" -> issubclass
	"zipfile.py" -> "self.namelist"
	"uuid.py" -> digest
	"testing.py" -> "self._echo"
	"parse.py" -> "_byte_quoter_factory.cache_clear"
	"typing.py" -> "self.__origin__"
	"conftest.py" -> "monkeypatch._setitem.extend"
	"__init__.py" -> "self.data.clear"
	"zipfile.py" -> getattr
	"test_testing.py" -> "flask.stream_with_context"
	"test_auth.py" -> "auth.login"
	"typing.py" -> "newargs.extend"
	"__init__.py" -> "self.format"
	"argparse.py" -> "self._actions.remove"
	"test_user_error_handler.py" -> "pytest.fixture"
	"argparse.py" -> get_invocation
	"tarfile.py" -> "self.close"
	"test_views.py" -> str
	"ast.py" -> "fstring_parts.append"
	"dataclasses.py" -> hash_action
	"tokenize.py" -> "buffer.close"
	"test_cli.py" -> "pytest.mark.skipif"
	"typing.py" -> "default_names.append"
	"types.py" -> getattr
	"blueprints.py" -> send_from_directory
	"threading.py" -> sys_excepthook
	"types.py" -> bool
	"ast.py" -> visitor
	"sessions.py" -> int
	"app.py" -> "self.handle_user_exception"
	"cli.py" -> make_context
	"test_appctx.py" -> "cleanup_stuff.append"
	"__init__.py" -> starmap
	"plistlib.py" -> "self._read_ints"
	"views.py" -> "tasks.add.delay"
	"scaffold.py" -> "package_path.is_relative_to"
	"__init__.py" -> lower
	"socket.py" -> isinstance
	"zipfile.py" -> "self._writing"
	"test_instance_config.py" -> "pytest.raises"
	"enum.py" -> "mcls._check_for_existing_members_"
	"dataclasses.py" -> "match.group"
	"enum.py" -> "self.__class__"
	"platform.py" -> str
	"test_basic.py" -> getattr
	"test_logging.py" -> "app.route"
	"inspect.py" -> isdigit
	"feedparser.py" -> "data.decode"
	"tarfile.py" -> "self._create_gnu_long_header"
	"traceback.py" -> "locals.items"
	"parse.py" -> "port.partition"
	"pathlib.py" -> cls
	"app.py" -> "self.blueprints.values"
	"base64.py" -> "pieces.append"
	"__init__.py" -> "path.joinpath"
	"pathlib.py" -> "other_path.stat"
	"contextlib.py" -> anext
	"scaffold.py" -> type
	"enum.py" -> "text.split"
	"tarfile.py" -> "obj.isdir"
	"typing.py" -> eval
	"random.py" -> "self.random"
	"calendar.py" -> "self.formatmonth"
	"py_compile.py" -> "sys.stdin.readlines"
	"testing.py" -> "self._input.read1"
	"templating.py" -> "app.update_template_context"
	"test_cli.py" -> resolve
	"threading.py" -> "self._break"
	"parse.py" -> hasattr
	"test_reqctx.py" -> "ctx.push"
	"selectors.py" -> "self._readers.discard"
	"types.py" -> "base.__mro_entries__"
	"selectors.py" -> KeyError
	"bz2.py" -> "self._fp.close"
	"app.py" -> "self.handle_url_build_error"
	"threading.py" -> "thread._stop"
	"tarfile.py" -> "tarinfo.isblk"
	"__init__.py" -> "h.release"
	"pathlib.py" -> "self._from_parsed_parts"
	"ast.py" -> chr
	"tag.py" -> parse_date
	"dataclasses.py" -> "itertools.chain"
	"blueprints.py" -> "self._blueprints.append"
	"pathlib.py" -> set
	"auth.py" -> url_for
	"argparse.py" -> "lines.extend"
	"app.py" -> "self.jinja_environment"
	"test_cli.py" -> Exception
	"traceback.py" -> "self._format_syntax_error"
	"tarfile.py" -> filter
	"ipaddress.py" -> "self._string_from_ip_int"
	"dis.py" -> "linestarts.values"
	"typing_extensions.py" -> join
	"test_cli.py" -> TypeError
	"test_testing.py" -> "flask.request.get_json"
	"bz2.py" -> "self.readable"
	"zipfile.py" -> NotImplementedError
	"blueprints.py" -> "self.url_defaults.update"
	"base64.py" -> curr_append
	"locale.py" -> _localeconv
	"__init__.py" -> "_STYLES.keys"
	"tempfile.py" -> "self.rollover"
	"code.py" -> "console.interact"
	"ast.py" -> "self.generic_visit"
	"__init__.py" -> "self.data.isalpha"
	"shlex.py" -> list
	"textwrap.py" -> "text.translate"
	"test_blueprints.py" -> dict
	"traceback.py" -> "StackSummary.extract"
	"random.py" -> "int.from_bytes"
	"scaffold.py" -> object
	"conftest.py" -> "f.read"
	"rlcompleter.py" -> "words.discard"
	"platform.py" -> "x.strip"
	"blueprints.py" -> "code_values.items"
	"test_auth.py" -> "app.app_context"
	"ast.py" -> set
	"zipfile.py" -> "self._decrypter"
	"csv.py" -> "self.writer.writerows"
	"__init__.py" -> "self.data.isnumeric"
	"tarfile.py" -> "value.encode"
	"shutil.py" -> getattr
	"typing_extensions.py" -> "cls.__dict__.get"
	"fractions.py" -> "decimal.replace"
	"app.py" -> "self.view_functions.get"
	"inspect.py" -> "signature.split"
	"app.py" -> self_ref
	"datetime.py" -> timedelta
	"conftest.py" -> get_db
	"sync.py" -> "self.awaitable"
	"__init__.py" -> "iterable.items"
	"blueprints.py" -> BlueprintSetupState
	"dataclasses.py" -> "ns.update"
	"plistlib.py" -> type
	"__init__.py" -> "self.at.endswith"
	"inspect.py" -> "values.extend"
	"threading.py" -> _ExceptHookArgs
	"zipfile.py" -> "member.is_dir"
	"dataclasses.py" -> "module.__dict__.get"
	"__init__.py" -> "stream.write"
	"operator.py" -> type
	"tarfile.py" -> KeyError
	"reprlib.py" -> getattr
	"string.py" -> "self.format_field"
	"test_blueprints.py" -> "flask.render_template"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"tarfile.py" -> "self.create_gnu_header"
	"test_basic.py" -> "exc_info.errisinstance"
	"testing.py" -> getvalue
	"__init__.py" -> "_default_encoder.encode"
	"pathlib.py" -> "name.rfind"
	"base64.py" -> join
	"ssl.py" -> "maximum_version.__set__"
	"shutil.py" -> _GiveupOnFastCopy
	"zipfile.py" -> format
	"testing.py" -> EchoingStdin
	"test_instance_config.py" -> "ns.mkdir"
	"typing.py" -> "newargs.append"
	"test_basic.py" -> "rv.headers.getlist"
	"shutil.py" -> ReadError
	"tarfile.py" -> "args.create.pop"
	"test_basic.py" -> "flask.jsonify"
	"test_testing.py" -> "c.session_transaction"
	"hashlib.py" -> memoryview
	"__init__.py" -> "self.__missing__"
	"enum.py" -> "checked_member_dict.keys"
	"testing.py" -> "app.test_request_context"
	"helpers.py" -> list
	"test_appctx.py" -> str
	"views.py" -> "view.view_class"
	"functools.py" -> function
	"warnings.py" -> isinstance
	"typing.py" -> values
	"test_cli.py" -> "flask_group.command"
	"parser.py" -> "BytesParser.parsebytes"
	"locale.py" -> tuple
	"rlcompleter.py" -> Completer
	"__init__.py" -> "Prepared.normalize"
	"enum.py" -> "more_members.items"
	"test_basic.py" -> "monkeypatch.setattr"
	"auth.py" -> get_db
	"string.py" -> "self._vformat"
	"getopt.py" -> startswith
	"traceback.py" -> join
	"feedparser.py" -> isinstance
	"reprlib.py" -> get_ident
	"tempfile.py" -> "self._rmtree"
	"pathlib.py" -> "self.mkdir"
	"bz2.py" -> "self._fp.fileno"
	"__init__.py" -> Formatter
	"typing_extensions.py" -> dict
	"inspect.py" -> "obj_dict.get"
	"testing.py" -> "self.stderr_bytes.decode"
	"test_appctx.py" -> "flask.jsonify"
	"ast.py" -> TypeError
	"gzip.py" -> "self._buffer.read1"
	"plistlib.py" -> object
	"locale.py" -> "code.split"
	"test_blog.py" -> "db.commit"
	"calendar.py" -> print
	"test_converters.py" -> "app.get"
	"feedparser.py" -> "self.pushlines"
	"zipfile.py" -> "self.fp.close"
	"testing.py" -> "self.isolation"
	"subprocess.py" -> "self.stderr.read"
	"parse.py" -> "netloc.replace"
	"app.py" -> _split_blueprint_path
	"shutil.py" -> "dst.startswith"
	"sync.py" -> "loop.run_in_executor"
	"argparse.py" -> delattr
	"tarfile.py" -> "arcname.lstrip"
	"shutil.py" -> NotImplementedError
	"testing.py" -> Result
	"threading.py" -> "self._wait"
	"tarfile.py" -> "match.start"
	"ipaddress.py" -> frozenset
	"helpers.py" -> len
	"test_reqctx.py" -> AssertionError
	"typing.py" -> compile
	"blueprints.py" -> int
	"test_blueprints.py" -> "bp.add_url_rule"
	"test_json.py" -> "app.add_url_rule"
	"datetime.py" -> "_time.time"
	"feedparser.py" -> "self._input.readline"
	"blueprints.py" -> "bp_options.get"
	"test_json.py" -> "flask.render_template_string"
	"threading.py" -> "self._delete"
	"fnmatch.py" -> add
	"pathlib.py" -> "self.parent.stat"
	"__init__.py" -> "root.error"
	"test_testing.py" -> "flask.Flask"
	"subprocess.py" -> CloseHandle
	"enum.py" -> "enum_class._new_member_"
	"tarfile.py" -> "self._proc_builtin"
	"datetime.py" -> int
	"tarfile.py" -> "self.makedir"
	"test_testing.py" -> Namespace
	"__init__.py" -> "fp.write"
	"functools.py" -> "found.sort"
	"zipfile.py" -> "parser.add_mutually_exclusive_group"
	"argparse.py" -> "self._container._remove_action"
	"threading.py" -> "_main_thread._stop"
	"testing.py" -> "sys.stdout.flush"
	"test_basic.py" -> "pytest.raises"
	"calendar.py" -> "result.encode"
	"traceback.py" -> "self.format_frame_summary"
	"inspect.py" -> formatvarargs
	"typing.py" -> TypeError
	"enum.py" -> "checked_dict.keys"
	"test_converters.py" -> base_to_url
	"tempfile.py" -> "file.writelines"
	"plistlib.py" -> "fp.seek"
	"ssl.py" -> "hostname.encode"
	"test_signals.py" -> "flask.appcontext_tearing_down.disconnect"
	"argparse.py" -> "self._format_action_invocation"
	"csv.py" -> "items.remove"
	"config.py" -> loads
	"feedparser.py" -> "self._cur.set_payload"
	"enum.py" -> issubclass
	"plistlib.py" -> "fp.read"
	"scaffold.py" -> append
	"config.py" -> "self.from_object"
	"shutil.py" -> format
	"__init__.py" -> join
	"app.py" -> "self.dispatch_request"
	"test_basic.py" -> "match.group"
	"textwrap.py" -> map
	"tarfile.py" -> "self.fromtarfile"
	"weakref.py" -> "ref.__ne__"
	"test_appctx.py" -> "pytest.raises"
	"__init__.py" -> "h.flush"
	"datetime.py" -> "self._getstate"
	"test_basic.py" -> expect_exception
	"enum.py" -> min
	"test_config.py" -> "app.config.from_mapping"
	"textwrap.py" -> "cur_line.append"
	"helpers.py" -> "current_app.jinja_env.get_template"
	"sessions.py" -> "self.get"
	"test_views.py" -> sorted
	"test_blueprints.py" -> "flask.abort"
	"uuid.py" -> "word.replace"
	"bz2.py" -> "results.append"
	"socket.py" -> _GiveupOnSendfile
	"__init__.py" -> "self.root.open"
	"test_basic.py" -> "rv.data.strip"
	"inspect.py" -> "int.__new__"
	"db.py" -> "app.teardown_appcontext"
	"debughelpers.py" -> "key.startswith"
	"tempfile.py" -> func
	"socket.py" -> "aliases.insert"
	"argparse.py" -> "arg_strings.remove"
	"argparse.py" -> add_group
	"cli.py" -> command
	"typing_extensions.py" -> _TypedDictMeta
	"pathlib.py" -> getattr
	"ssl.py" -> memoryview
	"feedparser.py" -> "self._cur.set_unixfrom"
	"code.py" -> exec
	"config.py" -> super
	"pathlib.py" -> bool
	"test_helpers.py" -> "app.route"
	"string.py" -> "self.pattern.finditer"
	"argparse.py" -> "kwargs.setdefault"
	"blueprints.py" -> AssertionError
	"functools.py" -> list
	"tarfile.py" -> "self.isdir"
	"threading.py" -> "self._waiters.append"
	"inspect.py" -> min
	"app.py" -> "self.create_url_adapter"
	"app.py" -> send_static_file
	"app.py" -> <unknown_function>
	"ctx.py" -> AttributeError
	"dataclasses.py" -> tuple_factory
	"argparse.py" -> "self._option_string_actions.pop"
	"testing.py" -> "EnvironBuilder.from_environ"
	"sync.py" -> "cvar.get"
	"inspect.py" -> zip
	"inspect.py" -> "annotations.get"
	"datetime.py" -> str
	"test_testing.py" -> "app.test_cli_runner"
	"argparse.py" -> "self._print_message"
	"py_compile.py" -> "parser.parse_args"
	"argparse.py" -> "self._registry_get"
	"argparse.py" -> "self._actions.append"
	"ast.py" -> getattr
	"test_reqctx.py" -> "pytest.raises"
	"argparse.py" -> extend
	"app.py" -> SecureCookieSessionInterface
	"__init__.py" -> "h.setFormatter"
	"ssl.py" -> "self._sslobj.selected_alpn_protocol"
	"bz2.py" -> "self._buffer.readinto"
	"platform.py" -> "ver.split"
	"test_json.py" -> "out.seek"
	"config.py" -> "config_file.read"
	"argparse.py" -> "self._get_optional_actions"
	"zipfile.py" -> print
	"socket.py" -> sock_send
	"textwrap.py" -> rstrip
	"enum.py" -> tuple
	"threading.py" -> hasattr
	"__init__.py" -> "self.makeRecord"
	"inspect.py" -> "sys._getframe"
	"argparse.py" -> "positionals.append"
	"typing.py" -> "f_globals.get"
	"threading.py" -> "_active.update"
	"sync.py" -> "current_executor.run_until_future"
	"tarfile.py" -> "info.get"
	"calendar.py" -> _localized_day
	"enum.py" -> "name.append"
	"__init__.py" -> "s.closegroup"
	"gzip.py" -> "self._decomp_factory"
	"calendar.py" -> "self.itermonthdays"
	"plistlib.py" -> append
	"subprocess.py" -> "result.append"
	"warnings.py" -> sw
	"_strptime.py" -> "replacement_pairs.extend"
	"datetime.py" -> divmod
	"pathlib.py" -> "name.lstrip"
	"_strptime.py" -> "base.__getitem__"
	"typing_extensions.py" -> _LiteralGenericAlias
	"tarfile.py" -> open
	"gzip.py" -> "f.close"
	"test_signals.py" -> "flask.appcontext_pushed.connect"
	"scaffold.py" -> "self._method_route"
	"app.py" -> "self.preprocess_request"
	"functools.py" -> len
	"reprlib.py" -> "self._repr_iterable"
	"testing.py" -> "self.stdout_bytes.decode"
	"socket.py" -> "lsock.accept"
	"tokenize.py" -> ValueError
	"argparse.py" -> len
	"test_converters.py" -> super
	"datetime.py" -> "object.__new__"
	"subprocess.py" -> "self.poll"
	"inspect.py" -> tuple
	"typing.py" -> "sys.modules.get"
	"functools.py" -> "method.__get__"
	"ssl.py" -> callable
	"app.py" -> "adapter.allowed_methods"
	"dataclasses.py" -> "cls_fields.append"
	"test_helpers.py" -> getattr
	"cli.py" -> "app.app_context"
	"argparse.py" -> "file.write"
	"tarfile.py" -> "value.decode"
	"zipfile.py" -> "self._file.seek"
	"weakref.py" -> wr
	"ast.py" -> "lines.insert"
	"threading.py" -> _PyRLock
	"tag.py" -> KeyError
	"test_blueprints.py" -> "frontend.errorhandler"
	"dis.py" -> "infile.read"
	"test_blueprints.py" -> "blue.route"
	"__init__.py" -> "self.data.pop"
	"parse.py" -> min
	"subprocess.py" -> "sys._getframe"
	"tempfile.py" -> unlink
	"string.py" -> set
	"subprocess.py" -> "sys.__stdout__.fileno"
	"app.py" -> "handler_map.get"
	"hashlib.py" -> bytes
	"subprocess.py" -> "kwargs.get"
	"typing_extensions.py" -> set
	"templating.py" -> "template.generate"
	"tag.py" -> "self.serializer.tag"
	"typing_error_handler.py" -> "app.errorhandler"
	"enum.py" -> "cls._value2member_map_.setdefault"
	"statistics.py" -> T
	"test_blueprints.py" -> "values.setdefault"
	"enum.py" -> "self.name.split"
	"scaffold.py" -> TypeError
	"views.py" -> hasattr
	"enum.py" -> "enum_member.__init__"
	"zipfile.py" -> "time.time"
	"platform.py" -> func
	"warnings.py" -> "args.append"
	"socket.py" -> ExceptionGroup
	"scaffold.py" -> "self._check_setup_finished"
	"test_signals.py" -> "flask.template_rendered.disconnect"
	"ssl.py" -> "self._sslobj.shutdown"
	"subprocess.py" -> tuple
	"shutil.py" -> OSError
	"test_views.py" -> "flask.Flask"
	"__init__.py" -> "state.pop"
	"copy.py" -> "_deepcopy_dispatch.get"
	"enum.py" -> "base_chain.add"
	"config.py" -> "self.from_pyfile"
	"__init__.py" -> "self.critical"
	"testing.py" -> "env.items"
	"subprocess.py" -> "f.close"
	"inspect.py" -> dir
	"ast.py" -> "new_values.extend"
	"subprocess.py" -> Popen
	"subprocess.py" -> "low_fds_to_close.append"
	"test_blueprints.py" -> "parent.route"
	"ssl.py" -> "self.read"
	"ipaddress.py" -> replace
	"__init__.py" -> "StreamHandler.close"
	"test_instance_config.py" -> purge_module
	"dataclasses.py" -> "seen.add"
	"subprocess.py" -> "self._communicate"
	"dataclasses.py" -> "fields.values"
	"traceback.py" -> cls
	"tarfile.py" -> "self._proc_gnulong"
	"base64.py" -> range
	"shlex.py" -> repr
	"scaffold.py" -> "value.rstrip"
	"tokenize.py" -> "cookie_re.match"
	"testing.py" -> iter
	"test_json_tag.py" -> TaggedJSONSerializer
	"parse.py" -> tuple
	"cli.py" -> __init__
	"uuid.py" -> get_word_index
	"__init__.py" -> eval
	"codeop.py" -> Compile
	"__init__.py" -> "cls._discover_resolvers"
	"test_config.py" -> "pytest.mark.parametrize"
	"parse.py" -> "hostname.partition"
	"tarfile.py" -> hasattr
	"ssl.py" -> "context.load_default_certs"
	"test_helpers.py" -> MyFlask
	"test_testing.py" -> "client.open"
	"feedparser.py" -> "self._new_message"
	"__init__.py" -> "self.data.strip"
	"fnmatch.py" -> "stuff.replace"
	"typing.py" -> NotImplementedError
	"signal.py" -> "_signal.valid_signals"
	"feedparser.py" -> "epilogue.append"
	"__init__.py" -> "obj.append"
	"traceback.py" -> set
	"weakref.py" -> super
	"feedparser.py" -> attach
	"plistlib.py" -> TypeError
	"ssl.py" -> "self.set_default_verify_paths"
	"calendar.py" -> LocaleTextCalendar
	"dis.py" -> _Unknown
	"typing_route.py" -> "app.route"
	"__init__.py" -> "current_app.json.load"
	"cli.py" -> any
	"fractions.py" -> "dec.as_integer_ratio"
	"operator.py" -> TypeError
	"ipaddress.py" -> "cls._ip_int_from_string"
	"csv.py" -> filter
	"types.py" -> func
	"tarfile.py" -> "target.truncate"
	"pathlib.py" -> "suffix.startswith"
	"locale.py" -> ValueError
	"argparse.py" -> "self.print_usage"
	"subprocess.py" -> "_winapi.WaitForSingleObject"
	"test_signals.py" -> "client.session_transaction"
	"ctx.py" -> "self.pop"
	"__init__.py" -> "sio.close"
	"__init__.py" -> "_parser.State"
	"subprocess.py" -> replace
	"test_testing.py" -> "flask.Blueprint"
	"platform.py" -> super
	"test_json.py" -> decode
	"parser.py" -> "text.decode"
	"contextlib.py" -> isinstance
	"lzma.py" -> TypeError
	"shutil.py" -> FileNotFoundError
	"tempfile.py" -> "cls._rmtree"
	"parse.py" -> "name_value.split"
	"__init__.py" -> "self.at.rstrip"
	"test_config.py" -> "__file__.rsplit"
	"weakref.py" -> type
	"db.py" -> "db.executescript"
	"shutil.py" -> "name.startswith"
	"argparse.py" -> "group_map.get"
	"base64.py" -> max
	"enum.py" -> "simple_enum._member_map_.keys"
	"tarfile.py" -> "next.name.removesuffix"
	"__init__.py" -> "self.fmt_spec.match"
	"__init__.py" -> "self.handleError"
	"operator.py" -> obj
	"test_config.py" -> "f.write_text"
	"uuid.py" -> TypeError
	"test_signals.py" -> "client.get"
	"shutil.py" -> "src.endswith"
	"ssl.py" -> bytes
	"test_async.py" -> BlueprintError
	"dataclasses.py" -> _MISSING_TYPE
	"functools.py" -> reversed
	"helpers.py" -> _wz_abort
	"testing.py" -> str
	"typing.py" -> format
	"random.py" -> "self.seed"
	"test_basic.py" -> "called.append"
	"test_templating.py" -> macro
	"subprocess.py" -> _warn
	"test_request.py" -> "client.get"
	"__init__.py" -> chr
	"test_helpers.py" -> "flask.send_from_directory"
	"contextlib.py" -> typ
	"copy.py" -> <unknown_function>
	"argparse.py" -> "self.formatter_class"
	"__init__.py" -> "zf.writestr"
	"inspect.py" -> "blockfinder.tokeneater"
	"inspect.py" -> "param.replace"
	"lzma.py" -> hasattr
	"ipaddress.py" -> "IPv6Address.__eq__"
	"tokenize.py" -> "pseudomatch.span"
	"traceback.py" -> "output.append"
	"app.py" -> _endpoint_from_view_func
	"threading.py" -> _MainThread
	"zipfile.py" -> "self.fp.truncate"
	"traceback.py" -> "text.rstrip"
	"py_compile.py" -> "loader.path_stats"
	"test_cli.py" -> Blueprint
	"__init__.py" -> "logger.addHandler"
	"fnmatch.py" -> len
	"hashlib.py" -> "rkey.to_bytes"
	"pathlib.py" -> cf
	"shutil.py" -> "tarobj.extractall"
	"tempfile.py" -> "self._file.fileno"
	"__init__.py" -> "self._open"
	"textwrap.py" -> "text.splitlines"
	"pathlib.py" -> "yielded.clear"
	"inspect.py" -> "self._bind"
	"tokenize.py" -> "line.decode"
	"zipfile.py" -> "self._implied_dirs"
	"argparse.py" -> "self._get_default_metavar_for_positional"
	"sessions.py" -> super
	"__init__.py" -> set
	"test_views.py" -> "c.get"
	"calendar.py" -> "parser.error"
	"ssl.py" -> "_SSLMethod.__members__.items"
	"typing.py" -> "subargs.append"
	"argparse.py" -> "inserts.pop"
	"types.py" -> AttributeError
	"debughelpers.py" -> __init__
	"argparse.py" -> "seen_non_default_actions.add"
	"test_basic.py" -> Data
	"blog.py" -> fetchall
	"random.py" -> len
	"test_blueprints.py" -> "app.jinja_env.filters.keys"
	"ipaddress.py" -> list
	"tokenize.py" -> _builtin_open
	"provider.py" -> "fp.read"
	"zipfile.py" -> "x.rstrip"
	"gzip.py" -> "f.read"
	"feedparser.py" -> "bolmo.group"
	"ipaddress.py" -> "prefixlen_str.isascii"
	"warnings.py" -> "msg_lines.append"
	"blog.py" -> fetchone
	"argparse.py" -> "self._indent"
	"__init__.py" -> "_parser.SubPattern"
	"test_reqctx.py" -> "greenlets.append"
	"test_request.py" -> "app.test_client"
	"string.py" -> getattr
	"typing_extensions.py" -> _TypeGuardForm
	"feedparser.py" -> BufferedSubFile
	"code.py" -> InteractiveConsole
	"typing_extensions.py" -> getattr
	"datetime.py" -> "self._tzstr"
	"typing_extensions.py" -> bool
	"csv.py" -> "self.sniff"
	"test_basic.py" -> PrefixPathMiddleware
	"pathlib.py" -> "sys.audit"
	"locale.py" -> isinstance
	"views.py" -> "bp.get"
	"cli.py" -> isinstance
	"warnings.py" -> "category.rpartition"
	"blueprints.py" -> "app.blueprints.values"
	"__init__.py" -> "kwargs.keys"
	"platform.py" -> "result.extend"
	"zipfile.py" -> filter
	"scaffold.py" -> "self.after_request_funcs.setdefault"
	"test_reqctx.py" -> "flask.Flask"
	"random.py" -> int
	"subprocess.py" -> "fds_to_keep.add"
	"gzip.py" -> len
	"weakref.py" -> "info.weakref"
	"socket.py" -> "csock.connect"
	"zipfile.py" -> "member.filename.replace"
	"inspect.py" -> "line.lstrip"
	"test_blueprints.py" -> str
	"test_user_error_handler.py" -> "flask.abort"
	"fractions.py" -> bool
	"debughelpers.py" -> __getitem__
	"enum.py" -> "enum_class._value2member_map_.setdefault"
	"test_session_interface.py" -> MySessionInterface
	"tokenize.py" -> "sys.exit"
	"__init__.py" -> "name.rfind"
	"ssl.py" -> "verify_mode.__set__"
	"ipaddress.py" -> len
	"functools.py" -> repr
	"tag.py" -> to_python
	"templating.py" -> _render
	"argparse.py" -> repr
	"__init__.py" -> "section._replace"
	"ast.py" -> print
	"functools.py" -> update
	"test_user_error_handler.py" -> ForbiddenSubclassUnregistered
	"sessions.py" -> "self.should_set_cookie"
	"tarfile.py" -> "self.getmember"
	"subprocess.py" -> list
	"tokenize.py" -> "initial.isidentifier"
	"functools.py" -> "self.func"
	"argparse.py" -> update
	"enum.py" -> "self.__class__.__module__.split"
	"datetime.py" -> "self._local_timezone"
	"tokenize.py" -> "c.upper"
	"ssl.py" -> "minimum_version.__set__"
	"enum.py" -> ValueError
	"test_views.py" -> "client.open"
	"cli.py" -> with_appcontext
	"tokenize.py" -> "c_tokenizer.TokenizerIter"
	"datetime.py" -> getinitargs
	"zipfile.py" -> "ZipFile.__init__"
	"platform.py" -> "_pypy_sys_version_parser.match"
	"selectors.py" -> "ready.append"
	"statistics.py" -> "result.append"
	"conftest.py" -> "self._client.get"
	"zipfile.py" -> KeyError
	"cli.py" -> "ctx.exit"
	"ipaddress.py" -> split
	"fnmatch.py" -> str
	"threading.py" -> "self._started._at_fork_reinit"
	"subprocess.py" -> "self.stdout.close"
	"test_testing.py" -> "rv.get_json"
	"testing.py" -> _NamedTextIOWrapper
	"templating.py" -> explain_template_loading_attempts
	"test_reqctx.py" -> super
	"dis.py" -> "fields.append"
	"socket.py" -> gethostbyaddr
	"inspect.py" -> ValueError
	"zipfile.py" -> "args.create.pop"
	"traceback.py" -> getattr
	"conftest.py" -> "self._client.post"
	"feedparser.py" -> "root.get_content_maintype"
	"base64.py" -> upper
	"test_logging.py" -> has_level_handler
	"tarfile.py" -> ord
	"inspect.py" -> "named.items"
	"statistics.py" -> zip
	"test_async.py" -> "blueprint.route"
	"tarfile.py" -> round
	"tarfile.py" -> encode
	"inspect.py" -> "attrs.split"
	"test_blueprints.py" -> "bp.app_template_test"
	"py_compile.py" -> "filename.rstrip"
	"test_testing.py" -> EnvironBuilder
	"__init__.py" -> "child.lower"
	"test_blueprints.py" -> "backend.route"
	"subprocess.py" -> "fd.Close"
	"contextlib.py" -> "self._push_exit_callback"
	"shutil.py" -> any
	"calendar.py" -> enumerate
	"subprocess.py" -> "data.decode"
	"threading.py" -> Event
	"threading.py" -> "self._lock.__exit__"
	"selectors.py" -> "self._selector._fileobj_lookup"
	"subprocess.py" -> "self._get_devnull"
	"tarfile.py" -> "self.fileobj.write"
	"code.py" -> "self.runsource"
	"fractions.py" -> str
	"_strptime.py" -> "time.strftime"
	"ssl.py" -> "options.__set__"
	"base64.py" -> from_bytes
	"locale.py" -> "localename.split"
	"wrappers.py" -> BadRequest
	"traceback.py" -> "klass._extract_from_extended_frame_gen"
	"datetime.py" -> "tzinfo.__new__"
	"gzip.py" -> "output.write"
	"ipaddress.py" -> "addrs.extend"
	"debughelpers.py" -> isinstance
	"string.py" -> format
	"locale.py" -> "locale_alias.get"
	"ctx.py" -> "self.push"
	"tokenize.py" -> IndentationError
	"platform.py" -> "_sys_version_cache.get"
	"argparse.py" -> "confl_optionals.append"
	"factory.py" -> join
	"typing.py" -> hash
	"pathlib.py" -> "rel.split"
	"test_auth.py" -> "auth.logout"
	"subprocess.py" -> "process.communicate"
	"datetime.py" -> "other.utcoffset"
	"typing.py" -> "kwargs.items"
	"string.py" -> splitlines
	"inspect.py" -> <unknown_function>
	"test_cli.py" -> "late.cli.command"
	"locale.py" -> Error
	"blueprints.py" -> "self.deferred_functions.append"
	"locale.py" -> "new_val.append"
	"tarfile.py" -> "self.get_info"
	"tempfile.py" -> TypeError
	"argparse.py" -> "self.parse_known_args"
	"random.py" -> reversed
	"platform.py" -> "_Processor.get"
	"shutil.py" -> "seen.add"
	"zipfile.py" -> "self._read2"
	"tag.py" -> "self.order.append"
	"__init__.py" -> "self.handle"
	"test_cli.py" -> "cli.add_command"
	"datetime.py" -> "cls.fromtimestamp"
	"blueprints.py" -> super
	"test_blueprints.py" -> "rv.data.strip"
	"socket.py" -> "sock.connect"
	"parse.py" -> ValueError
	"glob.py" -> fsencode
	"__init__.py" -> getattr
	"tag.py" -> "value.items"
	"enum.py" -> isinstance
	"contextlib.py" -> RuntimeError
	"__init__.py" -> bool
	"tarfile.py" -> decode
	"locale.py" -> "d.update"
	"tarfile.py" -> min
	"bz2.py" -> "self._buffer.read"
	"datetime.py" -> super
	"warnings.py" -> "globals.setdefault"
	"rlcompleter.py" -> type
	"shutil.py" -> "path.insert"
	"lzma.py" -> format
	"__init__.py" -> PlaceHolder
	"tarfile.py" -> zip
	"ast.py" -> "node_or_string.lstrip"
	"platform.py" -> "_os_release_unescape.sub"
	"tempfile.py" -> hasattr
	"test_converters.py" -> "app.route"
	"warnings.py" -> rstrip
	"auth.py" -> fetchone
	"inspect.py" -> isinstance
	"uuid.py" -> format
	"shutil.py" -> "dst.endswith"
	"socket.py" -> "__all__.extend"
	"pathlib.py" -> "self.parent.mkdir"
	"gzip.py" -> "self._check_not_closed"
	"inspect.py" -> "specs.append"
	"uuid.py" -> "proc.communicate"
	"__init__.py" -> "self.data.extend"
	"test_basic.py" -> expect
	"tarfile.py" -> "self._create_header"
	"datetime.py" -> type
	"enum.py" -> property
	"__init__.py" -> _OrderedDictKeysView
	"test_signals.py" -> "flask.appcontext_popped.disconnect"
	"argparse.py" -> "formatter.end_section"
	"shutil.py" -> stat_func
	"test_json.py" -> http_date
	"test_logging.py" -> "handler.setLevel"
	"plistlib.py" -> "self._get_size"
	"__init__.py" -> "_parser.parse_template"
	"sessions.py" -> URLSafeTimedSerializer
	"provider.py" -> hasattr
	"tempfile.py" -> "file.getvalue"
	"lzma.py" -> "comp.compress"
	"conftest.py" -> "sys.modules.keys"
	"__init__.py" -> "self.emit"
	"threading.py" -> "self._lock._at_fork_reinit"
	"tokenize.py" -> "buffer.seek"
	"typing_extensions.py" -> "params.append"
	"socket.py" -> "_ss.close"
	"test_json.py" -> "flask.json.dumps"
	"__init__.py" -> "Sectioned.read"
	"enum.py" -> callable
	"dis.py" -> "code.co_lines"
	"test_signals.py" -> "flask.before_render_template.disconnect"
	"subprocess.py" -> isinstance
	"ipaddress.py" -> bit_length
	"__init__.py" -> "ep._for"
	"test_basic.py" -> "response.vary.update"
	"weakref.py" -> TypeError
	"argparse.py" -> "self._fill_text"
	"inspect.py" -> "new_params.values"
	"threading.py" -> "self._started.set"
	"logging.py" -> "logger.setLevel"
	"shutil.py" -> fsrc_read
	"cli.py" -> main
	"test_helpers.py" -> "called.append"
	"datetime.py" -> object
	"signals.py" -> "_signals.signal"
	"ssl.py" -> "self._context._wrap_socket"
	"app.py" -> "self.request_context"
	"enum.py" -> "source.items"
	"parse.py" -> "qs.count"
	"zipfile.py" -> open
	"config.py" -> "key.split"
	"helpers.py" -> "current_app._get_current_object"
	"weakref.py" -> "sys.exc_info"
	"dis.py" -> zip
	"subprocess.py" -> "_winapi.CreateProcess"
	"app.py" -> dict
	"parse.py" -> isinstance
	"typing_extensions.py" -> "_EXCLUDED_ATTRS.add"
	"test_logging.py" -> "client.get"
	"views.py" -> "result.get"
	"typing.py" -> all
	"weakref.py" -> hasattr
	"shutil.py" -> "fdst.fileno"
	"types.py" -> exec_body
	"test_blueprints.py" -> sorted
	"tarfile.py" -> endswith
	"warnings.py" -> range
	"gzip.py" -> "self.write"
	"zipfile.py" -> "self.root.namelist"
	"ctx.py" -> "app.create_url_adapter"
	"cli.py" -> "rows.append"
	"plistlib.py" -> "itertools.chain"
	"__init__.py" -> "self.data.remove"
	"test_async.py" -> AppError
	"tarfile.py" -> "self.fileobj.seek"
	"fractions.py" -> float
	"__init__.py" -> "self.logger.hasHandlers"
	"__init__.py" -> "dict.__eq__"
	"gzip.py" -> repr
	"test_basic.py" -> open
	"test_signals.py" -> "flask.before_render_template.connect"
	"ipaddress.py" -> "s1.subnets"
	"tarfile.py" -> "parser.exit"
	"debughelpers.py" -> "exc.new_url.partition"
	"parse.py" -> "url.rpartition"
	"__init__.py" -> render_template
	"getopt.py" -> len
	"enum.py" -> "self._name_.split"
	"testing.py" -> "resp.headers.getlist"
	"platform.py" -> hasattr
	"scaffold.py" -> "self.teardown_request_funcs.setdefault"
	"locale.py" -> "s.replace"
	"ssl.py" -> "self._sslobj.verify_client_post_handshake"
	"subprocess.py" -> "err_close_fds.append"
	"py_compile.py" -> "loader.source_to_code"
	"typing_extensions.py" -> print
	"cli.py" -> "info.load_app"
	"cli.py" -> find_app_by_string
	"ssl.py" -> "sock.detach"
	"selectors.py" -> "self._fd_to_key.values"
	"test_json_tag.py" -> "pytest.raises"
	"base64.py" -> translate
	"statistics.py" -> partials_get
	"dataclasses.py" -> _DataclassParams
	"tag.py" -> "self.untag"
	"__init__.py" -> "_sys._getframe"
	"enum.py" -> "classdict.get"
	"ast.py" -> "new_fstring_parts.append"
	"calendar.py" -> "HTMLCalendar.__init__"
	"typing_extensions.py" -> ParamSpecKwargs
	"functools.py" -> join
	"test_cli.py" -> "pytest.mark.parametrize"
	"templating.py" -> list
	"parse.py" -> "_asciire.split"
	"__init__.py" -> "self.logger.log"
	"test_views.py" -> "GetDeleteView.as_view"
	"argparse.py" -> join
	"bisect.py" -> key
	"test_testing.py" -> "app.register_blueprint"
	"inspect.py" -> "sys.exit"
	"tempfile.py" -> "self.file.__exit__"
	"cli.py" -> "ctx.ensure_object"
	"shutil.py" -> enumerate
	"typing.py" -> substfunc
	"__init__.py" -> "self.filter"
	"weakref.py" -> "pending.pop"
	"threading.py" -> "self.finished.wait"
	"test_db.py" -> "app.app_context"
	"pathlib.py" -> "self._make_child_relpath"
	"shlex.py" -> "self.pushback.appendleft"
	"test_user_error_handler.py" -> ParentException
	"argparse.py" -> strip
	"code.py" -> "InteractiveInterpreter.__init__"
	"weakref.py" -> "self.__class__"
	"hello.py" -> "app.route"
	"sync.py" -> "loop_executor.submit"
	"statistics.py" -> list
	"app.py" -> "self.full_dispatch_request"
	"plistlib.py" -> hash
	"typing.py" -> any
	"test_reqctx.py" -> "pytest.mark.skipif"
	"__init__.py" -> "other._key"
	"datetime.py" -> "date.fromordinal"
	"blueprints.py" -> "s.app.before_request_funcs.setdefault"
	"argparse.py" -> "self._subparsers._add_action"
	"ipaddress.py" -> "ip_str.split"
	"parse.py" -> "netloc.partition"
	"enum.py" -> "metacls._get_mixins_"
	"zipfile.py" -> "arcname.translate"
	"selectors.py" -> "self._key_from_fd"
	"ipaddress.py" -> "self._check_packed_address"
	"zipfile.py" -> "self._fpclose"
	"types.py" -> hasattr
	"calendar.py" -> "cal.formatyearpage"
	"test_helpers.py" -> "flask.send_file"
	"__init__.py" -> "self._format"
	"test_json.py" -> isinstance
	"blueprints.py" -> append
	"feedparser.py" -> "self._eofstack.append"
	"__init__.py" -> "match.group"
	"enum.py" -> "cls._create_"
	"shutil.py" -> "errors.append"
	"subprocess.py" -> "self._stdin_write"
	"traceback.py" -> print
	"tarfile.py" -> _LowLevelFile
	"test_helpers.py" -> generate
	"tag.py" -> decode
	"ctx.py" -> "_cv_request.reset"
	"test_async.py" -> "app.register_blueprint"
	"uuid.py" -> hash
	"argparse.py" -> "arg_string_pattern_parts.append"
	"feedparser.py" -> _factory
	"enum.py" -> "str.__new__"
	"db.py" -> decode
	"argparse.py" -> "self._expand_help"
	"conftest.py" -> AuthActions
	"cli.py" -> "self._load_plugin_commands"
	"templating.py" -> "result.update"
	"threading.py" -> _set_sentinel
	"threading.py" -> ValueError
	"testing.py" -> type
	"tarfile.py" -> "member.issym"
	"test_blueprints.py" -> "flask.Flask"
	"enum.py" -> "duplicates.append"
	"__init__.py" -> "self.metadata.get_all"
	"tempfile.py" -> format
	"uuid.py" -> _UuidCreate
	"tokenize.py" -> map
	"blueprints.py" -> "self.get_send_file_max_age"
	"test_views.py" -> "Index.as_view"
	"plistlib.py" -> "self.write_bytes"
	"datetime.py" -> cls
	"conftest.py" -> set
	"datetime.py" -> "hour.encode"
	"code.py" -> "self.resetbuffer"
	"locale.py" -> count
	"tarfile.py" -> "self.fileobj.seekable"
	"test_basic.py" -> "app.add_url_rule"
	"zipfile.py" -> "data.rfind"
	"threading.py" -> "_active.values"
	"selectors.py" -> "self._selector.modify"
	"inspect.py" -> "_filesbymodname.get"
	"test_signals.py" -> "flask.flash"
	"test_basic.py" -> "rv.close"
	"parse.py" -> "l.append"
	"ssl.py" -> "context.wrap_socket"
	"inspect.py" -> getter
	"tarfile.py" -> "self.create_ustar_header"
	"bisect.py" -> "a.insert"
	"config.py" -> "key.startswith"
	"test_basic.py" -> "app.url_map.is_endpoint_expecting"
	"traceback.py" -> normalize
	"helpers.py" -> "out.extend"
	"tag.py" -> tuple
	"tokenize.py" -> "indents.append"
	"sync.py" -> "task.cancelled"
	"shutil.py" -> "fdst.write"
	"test_cli.py" -> load_dotenv
	"socket.py" -> str
	"test_appctx.py" -> "flask.render_template_string"
	"views.py" -> AsyncResult
	"hashlib.py" -> len
	"ipaddress.py" -> "other.__class__"
	"zipfile.py" -> "zef_file.close"
	"hashlib.py" -> "fileobj.getbuffer"
	"ssl.py" -> "protos.extend"
	"dataclasses.py" -> "result.append"
	"test_helpers.py" -> "pytest.mark.parametrize"
	"linecache.py" -> list
	"tarfile.py" -> "pax_headers.get"
	"app.py" -> set
	"feedparser.py" -> "self._cur.get"
	"test_reqctx.py" -> EnvironBuilder
	"views.py" -> "request.method.lower"
	"tempfile.py" -> issubclass
	"shutil.py" -> "zip.open"
	"subprocess.py" -> "args.append"
	"gzip.py" -> "self._read_gzip_header"
	"gzip.py" -> "fname.endswith"
	"ssl.py" -> "sock.getsockopt"
	"test_config.py" -> "msg.startswith"
	"tokenize.py" -> rstrip
	"selectors.py" -> "self._selector_cls"
	"copy.py" -> "y.append"
	"test_reqctx.py" -> "request_ctx.copy"
	"__init__.py" -> "self.data.format"
	"sync.py" -> SyncToAsync
	"ast.py" -> inter
	"weakref.py" -> selfref
	"__init__.py" -> "_levelToName.get"
	"tarfile.py" -> "pax_headers.copy"
	"ipaddress.py" -> "_address_fmt_re.fullmatch"
	"__init__.py" -> "self.data.zfill"
	"db.py" -> "v.decode"
	"typing_app_decorators.py" -> Flask
	"cli.py" -> __import__
	"subprocess.py" -> bytearray
	"__init__.py" -> "self.normalize"
	"gzip.py" -> GzipFile
	"argparse.py" -> "self._whitespace_matcher.sub"
	"socket.py" -> "file.fileno"
	"inspect.py" -> id
	"tarfile.py" -> "self._proc_gnusparse_10"
	"tarfile.py" -> "self.fileobj.tell"
	"ast.py" -> "infile.read"
	"test_views.py" -> "c.open"
	"rlcompleter.py" -> TypeError
	"base64.py" -> func
	"__init__.py" -> "self.data.rstrip"
	"argparse.py" -> action_class
	"weakref.py" -> format
	"csv.py" -> "self._dict_to_list"
	"csv.py" -> "data.split"
	"__init__.py" -> "root.addHandler"
	"parser.py" -> "fp.read"
	"linecache.py" -> len
	"platform.py" -> getwindowsversion
	"tarfile.py" -> "s.decode"
	"tarfile.py" -> "member.replace"
	"test_helpers.py" -> "client.get"
	"__init__.py" -> "Distribution.from_name"
	"glob.py" -> "entry.is_dir"
	"base64.py" -> "out.append"
	"typing_extensions.py" -> AttributeError
	"tarfile.py" -> "self.cmp.compress"
	"ipaddress.py" -> NetmaskValueError
	"tarfile.py" -> ValueError
	"tokenize.py" -> "endmatch.end"
	"datetime.py" -> TypeError
	"subprocess.py" -> _time
	"uuid.py" -> all
	"copy.py" -> "y.__dict__.update"
	"test_json_tag.py" -> JSONTag
	"dis.py" -> list
	"inspect.py" -> "file.endswith"
	"__init__.py" -> "name.startswith"
	"test_cli.py" -> "obj.load_app"
	"views.py" -> <unknown_function>
	"sessions.py" -> NotImplementedError
	"argparse.py" -> "self._choices_actions.append"
	"argparse.py" -> "inserts.get"
	"sync.py" -> "call_result.result"
	"typing.py" -> callable
	"sessions.py" -> "self.get_cookie_httponly"
	"test_async.py" -> Blueprint
	"test_instance_config.py" -> "app.mkdir"
	"__init__.py" -> dict_delitem
	"platform.py" -> "_os_release_line.match"
	"app.py" -> find_package
	"tarfile.py" -> "name.encode"
	"test_cli.py" -> "merged.cli.command"
	"socket.py" -> "sock.setblocking"
	"dataclasses.py" -> "itertools.chain.from_iterable"
	"test_blueprints.py" -> "bp.errorhandler"
	"csv.py" -> zip
	"tempfile.py" -> "self._file.truncate"
	"shutil.py" -> "entry.stat"
	"plistlib.py" -> "fp.getvalue"
	"fractions.py" -> super
	"test_basic.py" -> "values.pop"
	"subprocess.py" -> "err_msg.decode"
	"ast.py" -> "todo.popleft"
	"test_signals.py" -> "recorded.append"
	"getopt.py" -> "opts.append"
	"scaffold.py" -> "self.before_request_funcs.setdefault"
	"ipaddress.py" -> "ip_str.partition"
	"ipaddress.py" -> IPv4Interface
	"lzma.py" -> LZMACompressor
	"uuid.py" -> SafeUUID
	"test_testing.py" -> "request.addfinalizer"
	"tag.py" -> "self.tag"
	"glob.py" -> list
	"test_basic.py" -> "flask.Response"
	"code.py" -> SyntaxError
	"provider.py" -> "o.__html__"
	"weakref.py" -> f
	"uuid.py" -> "hex.strip"
	"ipaddress.py" -> "octet_str.isascii"
	"random.py" -> bisect
	"test_basic.py" -> "app.endpoint"
	"__init__.py" -> Link
	"cli.py" -> "ctx.params.get"
	"__init__.py" -> "self.data.rindex"
	"helpers.py" -> "werkzeug.utils.send_file"
	"warnings.py" -> str
	"ssl.py" -> len
	"gzip.py" -> join
	"__init__.py" -> "norm_encoding.replace"
	"typing_extensions.py" -> "t.copy_with"
	"argparse.py" -> ArgumentTypeError
	"argparse.py" -> "self._iter_indented_subactions"
	"zipfile.py" -> "extra.append"
	"__init__.py" -> "path.rstrip"
	"locale.py" -> "code.replace"
	"typing.py" -> enumerate
	"__init__.py" -> "p.append"
	"fractions.py" -> type
	"blueprints.py" -> "self.app.add_url_rule"
	"ipaddress.py" -> AddressValueError
	"__init__.py" -> "self.run"
	"fnmatch.py" -> object
	"ipaddress.py" -> join
	"tarfile.py" -> <unknown_function>
	"inspect.py" -> vars
	"test_config.py" -> "msg.endswith"
	"dataclasses.py" -> "obj.items"
	"feedparser.py" -> str
	"weakref.py" -> "c.update"
	"shutil.py" -> "logger.info"
	"blueprints.py" -> "value.total_seconds"
	"subprocess.py" -> "self.stderr.close"
	"threading.py" -> "self.notify"
	"tarfile.py" -> "obj._proc_member"
	"parse.py" -> "self._decoded_counterpart"
	"blog.py" -> render_template
	"tarfile.py" -> "self.makedev"
	"_strptime.py" -> "_regex_cache.clear"
	"lzma.py" -> ValueError
	"__init__.py" -> "mp.current_process"
	"typing_extensions.py" -> "optional_keys.add"
	"test_cli.py" -> "app.add_url_rule"
	"functools.py" -> set
	"tempfile.py" -> "self._file.read"
	"types.py" -> "meta.__prepare__"
	"tokenize.py" -> SyntaxError
	"test_session_interface.py" -> get
	"test_basic.py" -> encode
	"testing.py" -> "self._copy_environ"
	"__init__.py" -> func
	"conftest.py" -> getattr
	"weakref.py" -> "gc.isenabled"
	"argparse.py" -> set
	"statistics.py" -> "root.next_minus"
	"subprocess.py" -> TimeoutExpired
	"test_auth.py" -> get_db
	"typing_extensions.py" -> "attr.startswith"
	"argparse.py" -> "dest.replace"
	"selectors.py" -> "self._fd_to_key.clear"
	"ssl.py" -> "self._check_connected"
	"app.py" -> "ctx.push"
	"traceback.py" -> FrameSummary
	"code.py" -> "self.showtraceback"
	"test_async.py" -> "response.get_data"
	"textwrap.py" -> "line.startswith"
	"weakref.py" -> "ref.__new__"
	"test_basic.py" -> "app.config.update"
	"string.py" -> "ids.append"
	"pathlib.py" -> hasattr
	"parse.py" -> "n.replace"
	"tarfile.py" -> isinstance
	"dis.py" -> hex
	"enum.py" -> "attrs.items"
	"__init__.py" -> "value.strip"
	"tempfile.py" -> FileNotFoundError
	"enum.py" -> "failed.sort"
	"__init__.py" -> "_nameToLevel.get"
	"copy.py" -> "_copy_dispatch.get"
	"argparse.py" -> "name.isidentifier"
	"inspect.py" -> "wrapped_sig.parameters.values"
	"argparse.py" -> "group_actions.add"
	"py_compile.py" -> "parser.exit"
	"test_blueprints.py" -> "bp.add_app_template_filter"
	"copy.py" -> "y.__setstate__"
	"rlcompleter.py" -> "self._callable_postfix"
	"__init__.py" -> _dedupe
	"zipfile.py" -> "result.append"
	"dataclasses.py" -> delattr
	"platform.py" -> "itertools.chain"
	"app.py" -> bool
	"types.py" -> issubclass
	"ipaddress.py" -> "s2.subnets"
	"parse.py" -> "attr.partition"
	"bz2.py" -> "self._buffer.peek"
	"subprocess.py" -> "sigset.append"
	"test_blueprints.py" -> "flask.Blueprint"
	"traceback.py" -> "te.format_exception_only"
	"rlcompleter.py" -> "m.group"
	"test_signals.py" -> get
	"__init__.py" -> "app.config.from_mapping"
	"functools.py" -> max
	"test_blog.py" -> "app.app_context"
	"test_templating.py" -> "app.test_client"
	"__init__.py" -> "base.__html__"
	"subprocess.py" -> "fh.read"
	"helpers.py" -> getattr
	"argparse.py" -> max
	"typing.py" -> _UnionGenericAlias
	"threading.py" -> atexit_call
	"helpers.py" -> bool
	"weakref.py" -> key
	"zipfile.py" -> "zf.testzip"
	"types.py" -> "self.__wrapped.throw"
	"dis.py" -> "instr._disassemble"
	"zipfile.py" -> "self._comp.compress"
	"__init__.py" -> "self.findCaller"
	"socket.py" -> "__all__.append"
	"__init__.py" -> AttributeError
	"zipfile.py" -> "self.getinfo"
	"ast.py" -> "todo.extend"
	"test_blueprints.py" -> append
	"scaffold.py" -> "self._get_exc_class_and_code"
	"inspect.py" -> dict
	"statistics.py" -> types_add
	"_strptime.py" -> "self.__calc_timezone"
	"traceback.py" -> "StackSummary._extract_from_extended_frame_gen"
	"ssl.py" -> "self.context._wrap_socket"
	"test_basic.py" -> "evts.append"
	"socket.py" -> "lsock.bind"
	"enum.py" -> "object.__dir__"
	"test_regression.py" -> "app.test_client"
	"__init__.py" -> "h.close"
	"test_reqctx.py" -> "app.config.update"
	"functools.py" -> partial
	"blueprints.py" -> "s.add_url_rule"
	"app.py" -> "self.create_jinja_environment"
	"test_basic.py" -> "flask.flash"
	"__init__.py" -> "time.strftime"
	"subprocess.py" -> "self.stdout_thread.is_alive"
	"config.py" -> __init__
	"weakref.py" -> "kwargs.items"
	"test_basic.py" -> "app.url_build_error_handlers.append"
	"lzma.py" -> memoryview
	"locale.py" -> "s.rstrip"
	"__init__.py" -> "self.data.title"
	"shutil.py" -> SameFileError
	"__init__.py" -> "_lock.release"
	"test_basic.py" -> "flask.g.get"
	"__init__.py" -> FreezableDefaultDict
	"inspect.py" -> next
	"parse.py" -> "netloc.isascii"
	"test_factory.py" -> "client.get"
	"types.py" -> tuple
	"copyreg.py" -> "base.__init__"
	"test_cli.py" -> locate_app
	"__init__.py" -> "value.split"
	"test_basic.py" -> "kwargs.get"
	"testing.py" -> TypeError
	"shlex.py" -> "self._pushback_chars.append"
	"datetime.py" -> NotImplementedError
	"hashlib.py" -> "algorithms_available.union"
	"test_helpers.py" -> "app.add_url_rule"
	"__init__.py" -> filter
	"enum.py" -> "metacls._find_new_"
	"feedparser.py" -> "root.is_multipart"
	"cli.py" -> "cli.list_commands"
	"__init__.py" -> "line.startswith"
	"zipfile.py" -> "itertools.chain.from_iterable"
	"dis.py" -> "labels.add"
	"__init__.py" -> StreamHandler
	"test_helpers.py" -> "rv.close"
	"inspect.py" -> add
	"calendar.py" -> "c.center"
	"views.py" -> "result.successful"
	"inspect.py" -> "results.sort"
	"test_reqctx.py" -> "ctx.pop"
	"app.py" -> AssertionError
	"__init__.py" -> "seen.add"
	"__init__.py" -> "self.__getstate__"
	"getopt.py" -> "shortopts.startswith"
	"csv.py" -> "rowdict.get"
	"testing.py" -> EnvironBuilder
	"tag.py" -> "value.__html__"
	"blueprints.py" -> "s.app.teardown_request_funcs.setdefault"
	"typing_extensions.py" -> "params.extend"
	"blueprints.py" -> "self.record_once"
	"threading.py" -> RuntimeError
	"app.py" -> with_traceback
	"datetime.py" -> "self.toordinal"
	"subprocess.py" -> map
	"parse.py" -> dict
	"tasks.py" -> "self.update_state"
	"__init__.py" -> "_cache.clear"
	"hashlib.py" -> __get_hash
	"test_testing.py" -> "flask.request._get_current_object"
	"statistics.py" -> "x.as_integer_ratio"
	"plistlib.py" -> "_FORMATS.values"
	"test_signals.py" -> "flask.message_flashed.disconnect"
	"tarfile.py" -> "self.fileobject"
	"test_helpers.py" -> write_text
	"base64.py" -> unpack
	"pathlib.py" -> "pattern_parts.append"
	"__init__.py" -> "slots.copy"
	"logging.py" -> "logger.addHandler"
	"tokenize.py" -> iter
	"subprocess.py" -> "selector.select"
	"__init__.py" -> KeyError
	"scaffold.py" -> is_relative_to
	"subprocess.py" -> classmethod
	"auth.py" -> render_template
	"calendar.py" -> write
	"argparse.py" -> "self.register"
	"pathlib.py" -> "selector.select_from"
	"functools.py" -> getattr
	"__init__.py" -> "app.config.from_prefixed_env"
	"ssl.py" -> "cert.get"
	"shutil.py" -> "sys.__stdout__.fileno"
	"threading.py" -> _time
	"dataclasses.py" -> exec
	"app.py" -> AppContext
	"argparse.py" -> getattr
	"argparse.py" -> "self._split_lines"
	"hashlib.py" -> "fileobj.readinto"
	"inspect.py" -> "self.visit"
	"operator.py" -> enumerate
	"subprocess.py" -> "self._input.encode"
	"calendar.py" -> list
	"blueprints.py" -> "bp_dict.items"
	"gzip.py" -> "self.compress.flush"
	"__init__.py" -> "self.infos.values"
	"__init__.py" -> parse
	"test_user_error_handler.py" -> type
	"threading.py" -> "self._lock.__enter__"
	"provider.py" -> http_date
	"inspect.py" -> "msg.format"
	"feedparser.py" -> "self.policy.handle_defect"
	"csv.py" -> list
	"ssl.py" -> SSLContext
	"typing.py" -> "base.__dict__.get"
	"random.py" -> set
	"enum.py" -> "str.__format__"
	"threading.py" -> id
	"subprocess.py" -> "_winapi.CreatePipe"
	"pathlib.py" -> "self._flavour.make_uri"
	"socket.py" -> "self._checkClosed"
	"parse.py" -> classmethod
	"__init__.py" -> "self._name_set"
	"dataclasses.py" -> dict_factory
	"test_async.py" -> "async_app.test_client"
	"testing.py" -> "input.encode"
	"threading.py" -> "lock.release"
	"cli.py" -> "kwargs.setdefault"
	"ast.py" -> "self.fill"
	"conftest.py" -> executescript
	"code.py" -> str
	"__init__.py" -> "self.__map.clear"
	"tarfile.py" -> "tf.add"
	"gzip.py" -> chr
	"app.py" -> get_load_dotenv
	"argparse.py" -> _ArgumentGroup
	"inspect.py" -> "target.partition"
	"pathlib.py" -> IndexError
	"gzip.py" -> "self._decompressor.decompress"
	"copyreg.py" -> "names.append"
	"test_helpers.py" -> "flask.redirect"
	"app.py" -> DispatchingJinjaLoader
	"app.py" -> "self.url_rule_class"
	"gzip.py" -> "self._buffer.close"
	"enum.py" -> "cls.__dict__.items"
	"ast.py" -> "self._type_ignores.clear"
	"ctx.py" -> <unknown_function>
	"cli.py" -> "f.read"
	"pathlib.py" -> encode
	"gzip.py" -> range
	"hashlib.py" -> bytearray
	"testing.py" -> getattr
	"ipaddress.py" -> "IPv6Address.__init__"
	"enum.py" -> setattr
	"test_logging.py" -> "app.test_request_context"
	"typing_extensions.py" -> "annotations.update"
	"provider.py" -> staticmethod
	"parse.py" -> DefragResult
	"enum.py" -> "metacls._find_data_repr_"
	"blueprints.py" -> "self.url_prefix.rstrip"
	"argparse.py" -> get_metavar
	"inspect.py" -> "parameters.pop"
	"platform.py" -> "mo.group"
	"config.py" -> isinstance
	"plistlib.py" -> "self._fp.tell"
	"shlex.py" -> _find_unsafe
	"threading.py" -> Lock
	"zipfile.py" -> "dirlist.remove"
	"base64.py" -> open
	"test_user_error_handler.py" -> "c.get"
	"ctx.py" -> "_cv_request.get"
	"__init__.py" -> "self.formatHeader"
	"ipaddress.py" -> set
	"tokenize.py" -> "last_line.strip"
	"test_signals.py" -> "calls.append"
	"ast.py" -> encode
	"test_user_error_handler.py" -> "bp.errorhandler"
	"blog.py" -> "db.commit"
	"enum.py" -> "names.replace"
	"__init__.py" -> "record.name.find"
	"datetime.py" -> "self._tzinfo.dst"
	"plistlib.py" -> "self._fp.seek"
	"datetime.py" -> abs
	"ssl.py" -> "sock.fileno"
	"copy.py" -> getattr
	"getopt.py" -> type
	"zipfile.py" -> "data.encode"
	"test_async.py" -> "blueprint.errorhandler"
	"__init__.py" -> "_default_encoder.iterencode"
	"__init__.py" -> "filename.partition"
	"test_blueprints.py" -> "flask.render_template_string"
	"locale.py" -> len
	"test_signals.py" -> isinstance
	"test_cli.py" -> zip
	"random.py" -> max
	"calendar.py" -> "_months.insert"
	"cli.py" -> len
	"socket.py" -> super
	"codeop.py" -> str
	"__init__.py" -> lstrip
	"dataclasses.py" -> <unknown_function>
	"ast.py" -> "self.buffered"
	"argparse.py" -> NotImplementedError
	"copyreg.py" -> "cls.__new__"
	"plistlib.py" -> "self._flatten"
	"enum.py" -> "cls._missing_"
	"bz2.py" -> "self._compressor.compress"
	"calendar.py" -> "self.formatday"
	"hashlib.py" -> "inner.copy"
	"test_logging.py" -> "wsgi_errors_stream._get_current_object"
	"app.py" -> "request_tearing_down.send"
	"argparse.py" -> "match.groups"
	"__init__.py" -> "chars.append"
	"tarfile.py" -> exception
	"threading.py" -> "_dangling.add"
	"copyreg.py" -> getattr
	"calendar.py" -> IllegalWeekdayError
	"fractions.py" -> TypeError
	"typing_route.py" -> "app.add_url_rule"
	"datetime.py" -> "self._tzinfo.utcoffset"
	"test_instance_config.py" -> "monkeypatch.syspath_prepend"
	"cli.py" -> show_server_banner
	"enum.py" -> _EnumDict
	"parse.py" -> "port.isdigit"
	"threading.py" -> _allocate_lock
	"argparse.py" -> "self._container._add_action"
	"ast.py" -> Constant
	"locale.py" -> int
	"enum.py" -> "self.fget"
	"typing_extensions.py" -> hasattr
	"blueprints.py" -> "options.pop"
	"argparse.py" -> "option_strings.append"
	"conftest.py" -> "request_ctx._get_current_object"
	"zipfile.py" -> "self.root._name_set"
	"__init__.py" -> JSONDecodeError
	"typing.py" -> "subargs.extend"
	"test_basic.py" -> "app.app_context"
	"wrappers.py" -> super
	"parse.py" -> "safe.encode"
	"zipfile.py" -> list
	"uuid.py" -> "word.split"
	"test_basic.py" -> get
	"pathlib.py" -> zip
	"tarfile.py" -> id
	"pathlib.py" -> "self._flavour.join_parsed_parts"
	"platform.py" -> any
	"uuid.py" -> bytes
	"__init__.py" -> "self.data.count"
	"feedparser.py" -> "self._msgstack.pop"
	"test_user_error_handler.py" -> "app.errorhandler"
	"tempfile.py" -> _TemporaryFileWrapper
	"enum.py" -> "members.append"
	"enum.py" -> "simple_member_dict.keys"
	"threading.py" -> "lock.acquire"
	"dis.py" -> "labels.append"
	"typing.py" -> frozenset
	"__init__.py" -> "field_names.replace"
	"rlcompleter.py" -> "words.update"
	"tarfile.py" -> "member.isdir"
	"platform.py" -> ValueError
	"random.py" -> "n.bit_length"
	"test_appctx.py" -> "app.app_context"
	"ast.py" -> decode
	"parse.py" -> range
	"test_json_tag.py" -> "s.register"
	"tempfile.py" -> "newfile.write"
	"fractions.py" -> "a.from_float"
	"tarfile.py" -> "tarinfo.islnk"
	"tempfile.py" -> _RandomNameSequence
	"shutil.py" -> RegistryError
	"__init__.py" -> "self.__repr.format"
	"test_cli.py" -> FlaskGroup
	"dataclasses.py" -> "locals.update"
	"zipfile.py" -> "self.NameToInfo.get"
	"parse.py" -> quote_via
	"__init__.py" -> "self._style.format"
	"traceback.py" -> "row.append"
	"socket.py" -> object
	"ast.py" -> "self._precedences.get"
	"ast.py" -> zip
	"subprocess.py" -> "self.terminate"
	"test_subclassing.py" -> "app.route"
	"enum.py" -> "missing_names.append"
	"ast.py" -> "unparser.visit"
	"test_regression.py" -> "flask.redirect"
	"__init__.py" -> "self._fixupChildren"
	"socket.py" -> "self.fileno"
	"__init__.py" -> "_handlerList.append"
	"ssl.py" -> bytearray
	"warnings.py" -> "filters.remove"
	"__init__.py" -> open
	"helpers.py" -> "session.pop"
	"sync.py" -> "SyncToAsync.thread_sensitive_context.get"
	"test_converters.py" -> "client.get"
	"pathlib.py" -> tuple
	"provider.py" -> isinstance
	"socket.py" -> "self._sock.recv_into"
	"datetime.py" -> hash
	"pathlib.py" -> "self.is_dir"
	"test_config.py" -> "app.config.from_pyfile"
	"warnings.py" -> "registry.clear"
	"__init__.py" -> "_nameToLevel.copy"
	"test_blueprints.py" -> MyBlueprint
	"functools.py" -> RLock
	"templating.py" -> "current_app._get_current_object"
	"locale.py" -> str
	"contextlib.py" -> "self._old_cwd.pop"
	"test_async.py" -> "pytest.fixture"
	"sync.py" -> AsyncToSync
	"parse.py" -> "qs.split"
	"ast.py" -> "expr.startswith"
	"subprocess.py" -> "errpipe_data.split"
	"test_basic.py" -> "gc.disable"
	"helpers.py" -> "current_app.url_for"
	"bz2.py" -> "self._buffer.readlines"
	"gzip.py" -> "parser.add_argument"
	"zipfile.py" -> "itertools.islice"
	"__init__.py" -> "pattern.translate"
	"threading.py" -> "_sys.settrace"
	"csv.py" -> "extrasaction.lower"
	"fractions.py" -> "self.__class__"
	"__init__.py" -> "self.data.format_map"
	"calendar.py" -> LocaleHTMLCalendar
	"shutil.py" -> LookupError
	"weakref.py" -> "self.data.get"
	"test_db.py" -> "db.execute"
	"string.py" -> "self.get_field"
	"typing_extensions.py" -> _type_repr
	"blueprints.py" -> "self._merge_blueprint_funcs"
	"locale.py" -> _setlocale
	"argparse.py" -> "match.group"
	"plistlib.py" -> "text.replace"
	"ast.py" -> "self.interleave"
	"feedparser.py" -> super
	"random.py" -> "self.gammavariate"
	"pathlib.py" -> "self._parse_args"
	"tarfile.py" -> "next._block"
	"lzma.py" -> "comp.flush"
	"enum.py" -> len
	"argparse.py" -> setdefault
	"inspect.py" -> "pat.match"
	"locale.py" -> "defmod.lower"
	"socket.py" -> "self._accept"
	"inspect.py" -> "a.append"
	"subprocess.py" -> "selector.unregister"
	"calendar.py" -> funcs
	"helpers.py" -> "current_app.aborter"
	"__init__.py" -> "_str_formatter.parse"
	"__init__.py" -> "root.manager._clear_cache"
	"shutil.py" -> list
	"enum.py" -> "enumeration._member_map_.items"
	"tarfile.py" -> EOFHeaderError
	"tarfile.py" -> "self.name.rstrip"
	"typing.py" -> "sys._getframe"
	"warnings.py" -> type
	"inspect.py" -> BlockFinder
	"__init__.py" -> "kwargs.pop"
	"socket.py" -> "self.gettimeout"
	"gzip.py" -> getattr
	"parse.py" -> "bs.decode"
	"dataclasses.py" -> repr
	"test_blueprints.py" -> "bp.endpoint"
	"tarfile.py" -> "self.pax_headers.copy"
	"ipaddress.py" -> getattr
	"textwrap.py" -> "text.split"
	"inspect.py" -> "base.__dict__.items"
	"inspect.py" -> items
	"shutil.py" -> "fsrc.fileno"
	"plistlib.py" -> "self.parser.ParseFile"
	"app.py" -> "url_adapter.build"
	"inspect.py" -> "kwargs.update"
	"__init__.py" -> "self.update"
	"auth.py" -> "db.commit"
	"reprlib.py" -> list
	"__init__.py" -> "sys.exc_info"
	"statistics.py" -> map
	"test_appctx.py" -> ValueError
	"fractions.py" -> "m.group"
	"tempfile.py" -> "self._check"
	"__init__.py" -> "self.logger.isEnabledFor"
	"threading.py" -> "thread._reset_internal_locks"
	"argparse.py" -> "self._parse_known_args"
	"test_async.py" -> Flask
	"selectors.py" -> "self.unregister"
	"__init__.py" -> hasattr
	"tarfile.py" -> OutsideDestinationError
	"__init__.py" -> "self.linefmt.format"
	"test_blueprints.py" -> "app.register_blueprint"
	"ssl.py" -> "self.getpeername"
	"gzip.py" -> "self.fileobj.flush"
	"datetime.py" -> "object.utcoffset"
	"inspect.py" -> iter
	"dataclasses.py" -> Field
	"tarfile.py" -> "name.split"
	"app.py" -> "endpoint.rpartition"
	"ast.py" -> replace
	"textwrap.py" -> "self._wrap_chunks"
	"test_reqctx.py" -> "flask.has_request_context"
	"test_views.py" -> "client.get"
	"enum.py" -> "cls._numeric_repr_"
	"typing_route.py" -> encode
	"random.py" -> NotImplementedError
	"zipfile.py" -> "self.root.resolve_dir"
	"app.py" -> func
	"tarfile.py" -> filter_function
	"testing.py" -> _find_binary_reader
	"conf.py" -> get_version
	"feedparser.py" -> object
	"_strptime.py" -> "locale_time.a_weekday.index"
	"__init__.py" -> "app.add_url_rule"
	"typing_extensions.py" -> _FinalForm
	"weakref.py" -> callback
	"ssl.py" -> "self._sslobj.write"
	"config.py" -> RuntimeError
	"__init__.py" -> "self._base"
	"calendar.py" -> toordinal
	"inspect.py" -> "wrapped_sig.replace"
	"tokenize.py" -> sorted
	"gzip.py" -> "self._init_read"
	"inspect.py" -> formatvalue
	"test_views.py" -> "BetterIndex.as_view"
	"ast.py" -> "_const_types_not.get"
	"tag.py" -> "tag.check"
	"argparse.py" -> "self._mutually_exclusive_groups.append"
	"ssl.py" -> "self.sslsocket_class._create"
	"__init__.py" -> parsebytes
	"ipaddress.py" -> "ips.append"
	"calendar.py" -> repr
	"subprocess.py" -> "env.items"
	"uuid.py" -> "hex.replace"
	"datetime.py" -> all
	"functools.py" -> "abcs.remove"
	"typing_extensions.py" -> _RequiredForm
	"pathlib.py" -> "self.is_absolute"
	"ctx.py" -> "app_ctx.push"
	"cli.py" -> "_env_file_option.handle_parse_result"
	"cli.py" -> "ctx.invoke"
	"debughelpers.py" -> with_traceback
	"conftest.py" -> AttributeError
	"functools.py" -> "args.extend"
	"conftest.py" -> "mp.delenv"
	"test_basic.py" -> "app.inject_url_defaults"
	"uuid.py" -> count
	"typing.py" -> dir
	"tarfile.py" -> dict
	"dis.py" -> join
	"cli.py" -> interactive_hook
	"inspect.py" -> "dict_attr.__get__"
	"argparse.py" -> "args.extend"
	"ssl.py" -> join
	"types.py" -> isinstance
	"random.py" -> _repeat
	"zipfile.py" -> "dest.write"
	"__init__.py" -> "self.formatMessage"
	"__init__.py" -> CodecRegistryError
	"ctx.py" -> RuntimeError
	"datetime.py" -> "self.__reduce_ex__"
	"enum.py" -> str
	"test_basic.py" -> "self.app"
	"test_views.py" -> "app.test_client"
	"test_blueprints.py" -> "evts.append"
	"_strptime.py" -> ValueError
	"app.py" -> "self.url_map.bind_to_environ"
	"inspect.py" -> "self._signature.parameters.items"
	"__init__.py" -> "self.__class__"
	"typing_extensions.py" -> "attrs.add"
	"pathlib.py" -> "entry.is_dir"
	"blueprints.py" -> "options.setdefault"
	"threading.py" -> "self._is_owned"
	"test_basic.py" -> isinstance
	"views.py" -> jsonify
	"traceback.py" -> klass
	"csv.py" -> "items.sort"
	"argparse.py" -> "self._get_value"
	"enum.py" -> "self._last_values.append"
	"datetime.py" -> "tz.fromutc"
	"tarfile.py" -> ExtractError
	"inspect.py" -> str
	"statistics.py" -> "partials.items"
	"lzma.py" -> "self._buffer.read1"
	"test_templating.py" -> "app.add_template_filter"
	"threading.py" -> sys_exc_info
	"parse.py" -> int
	"parser.py" -> "BytesParser.parse"
	"argparse.py" -> "self._get_formatter"
	"__init__.py" -> "self._tpl.substitute"
	"csv.py" -> "charFrequency.get"
	"calendar.py" -> "self.yeardays2calendar"
	"socket.py" -> gethostname
	"blueprints.py" -> any
	"shutil.py" -> fsrc_readinto
	"tarfile.py" -> "target.seek"
	"shutil.py" -> <unknown_function>
	"enum.py" -> "object.__new__"
	"app.py" -> super
	"test_json.py" -> "kwargs.setdefault"
	"test_user_error_handler.py" -> "app.route"
	"inspect.py" -> _ClassFinder
	"pathlib.py" -> "rest.encode"
	"subprocess.py" -> _WaitForSingleObject
	"tokenize.py" -> "parser.parse_args"
	"argparse.py" -> "self._get_default_metavar_for_optional"
	"sync.py" -> "task.exception"
	"string.py" -> "result.append"
	"app.py" -> InternalServerError
	"warnings.py" -> "mod.match"
	"typing_extensions.py" -> issubclass
	"parse.py" -> "scheme.lower"
	"tarfile.py" -> "self._posix_split_name"
	"blueprints.py" -> "blueprint.register"
	"__init__.py" -> getregentry
	"tarfile.py" -> "time.localtime"
	"tarfile.py" -> "self._proc_pax"
	"locale.py" -> lower
	"ast.py" -> "_const_node_type_names.items"
	"inspect.py" -> "dict.get"
	"templating.py" -> set
	"cli.py" -> lower
	"reprlib.py" -> <unknown_function>
	"__init__.py" -> "logger.getEffectiveLevel"
	"threading.py" -> "self._block.release"
	"test_basic.py" -> "client.delete"
	"argparse.py" -> "self._get_values"
	"parse.py" -> "bytes.fromhex"
	"dis.py" -> dict
	"ssl.py" -> dict
	"statistics.py" -> range
	"pathlib.py" -> "self.exists"
	"test_factory.py" -> create_app
	"app.py" -> "self.inject_url_defaults"
	"inspect.py" -> "self.stack.pop"
	"csv.py" -> "charFrequency.keys"
	"auth.py" -> "session.get"
	"datetime.py" -> "_time.strftime"
	"uuid.py" -> "stdout.readline"
	"templating.py" -> "before_render_template.send"
	"ast.py" -> list
	"locale.py" -> "__all__.append"
	"string.py" -> "self._invalid"
	"random.py" -> "self.setstate"
	"feedparser.py" -> "self._cur.get_boundary"
	"app.py" -> "rv.update"
	"helpers.py" -> "session.get"
	"socket.py" -> TypeError
	"__init__.py" -> mapping_get
	"inspect.py" -> "roots.append"
	"threading.py" -> "self._release"
	"tarfile.py" -> "fileobj.getcomptype"
	"zipfile.py" -> "self.write"
	"contextlib.py" -> "self._old_targets.pop"
	"test_testing.py" -> "flask.redirect"
	"__init__.py" -> "_sys.intern"
	"feedparser.py" -> "self._lines.popleft"
	"helpers.py" -> filter
	"blog.py" -> execute
	"ssl.py" -> "self._encode_hostname"
	"locale.py" -> sorted
	"cli.py" -> sorted
	"subprocess.py" -> "p.kill"
	"tokenize.py" -> "single_quoted.add"
	"textwrap.py" -> "self.wordsep_simple_re.split"
	"parse.py" -> str
	"weakref.py" -> "dict.items"
	"dis.py" -> next
	"textwrap.py" -> "self._split"
	"blueprints.py" -> "self.options.get"
	"ssl.py" -> Options
	"argparse.py" -> "formatter.add_arguments"
	"_strptime.py" -> isinstance
	"copy.py" -> "x.items"
	"fractions.py" -> abs
	"test_user_error_handler.py" -> getattr
	"selectors.py" -> set
	"ast.py" -> "self.maybe_newline"
	"typing_extensions.py" -> tuple
	"tempfile.py" -> "self.file.close"
	"tag.py" -> dumps
	"ast.py" -> Tuple
	"ssl.py" -> "self._sslobj.cipher"
	"textwrap.py" -> "_leading_whitespace_re.findall"
	"zipfile.py" -> "sys.exit"
	"sync.py" -> "self.deadlock_context.get"
	"test_reqctx.py" -> "buffer.append"
	"socket.py" -> "self._sock.fileno"
	"traceback.py" -> "c.isspace"
	"copyreg.py" -> "name.startswith"
	"enum.py" -> "cls._value2member_map_.get"
	"test_basic.py" -> "flask.get_flashed_messages"
	"feedparser.py" -> "boundaryre.match"
	"__init__.py" -> "itertools.filterfalse"
	"test_request.py" -> "client.post"
	"__init__.py" -> "atexit.register"
	"pathlib.py" -> ValueError
	"traceback.py" -> "result.append"
	"inspect.py" -> "self.stack.append"
	"glob.py" -> next
	"calendar.py" -> IllegalMonthError
	"typing_extensions.py" -> "ns.get"
	"typing.py" -> list
	"hashlib.py" -> set
	"statistics.py" -> "sxx_partials.items"
	"typing.py" -> "cls.__init__"
	"traceback.py" -> decode
	"__init__.py" -> encode
	"subprocess.py" -> "process.kill"
	"test_json.py" -> X
	"tarfile.py" -> "self._read"
	"templating.py" -> "app.create_global_jinja_loader"
	"tarfile.py" -> "fileobj.close"
	"argparse.py" -> "parts.append"
	"parser.py" -> "self.parser.parsestr"
	"dis.py" -> rstrip
	"bz2.py" -> isinstance
	"traceback.py" -> zip
	"app.py" -> "self.session_interface.save_session"
	"ast.py" -> "self.delimit"
	"random.py" -> print
	"inspect.py" -> "new_params.move_to_end"
	"tarfile.py" -> range
	"threading.py" -> "threads.update"
	"zipfile.py" -> "self._comp.flush"
	"tarfile.py" -> setattr
	"copy.py" -> func
	"subprocess.py" -> "attribute_list.get"
	"selectors.py" -> max
	"test_views.py" -> "c.put"
	"tarfile.py" -> "name.tell"
	"gzip.py" -> OSError
	"tarfile.py" -> "tar.getmembers"
	"traceback.py" -> "sys._getframe"
	"testing.py" -> "self.app.json.dumps"
	"zipfile.py" -> "self._fileobj.seek"
	"shutil.py" -> ignore
	"plistlib.py" -> "self.add_object"
	"tempfile.py" -> FileExistsError
	"pathlib.py" -> "cls._flavour.join"
	"cli.py" -> "self.create_app"
	"test_templating.py" -> CustomFlask
	"traceback.py" -> "te.format"
	"subprocess.py" -> "_winapi.TerminateProcess"
	"bz2.py" -> "self._check_not_closed"
	"typing.py" -> len
	"argparse.py" -> "long_option_strings.append"
	"gzip.py" -> BadGzipFile
	"ssl.py" -> "self.load_verify_locations"
	"socket.py" -> "sock.setsockopt"
	"tempfile.py" -> _allocate_lock
	"test_reqctx.py" -> run
	"rlcompleter.py" -> "text.strip"
	"socket.py" -> error
	"statistics.py" -> LinearRegression
	"dataclasses.py" -> join
	"pathlib.py" -> <unknown_function>
	"calendar.py" -> a
	"test_views.py" -> "c.post"
	"test_blueprints.py" -> "child.route"
	"__init__.py" -> "formatter.vformat"
	"subprocess.py" -> "self.stdout_thread.join"
	"tempfile.py" -> "self._file.writable"
	"test_blueprints.py" -> "bp.route"
	"tempfile.py" -> "newfile.buffer.write"
	"test_json.py" -> str
	"argparse.py" -> "self._get_positional_actions"
	"test_signals.py" -> "flask.got_request_exception.connect"
	"contextlib.py" -> type
	"templating.py" -> "_cv_app.get"
	"rlcompleter.py" -> callable
	"socket.py" -> "sock.sendmsg"
	"signal.py" -> "_signal.sigwait"
	"debughelpers.py" -> sorted
	"warnings.py" -> TypeError
	"argparse.py" -> "help.strip"
	"test_logging.py" -> "logger.setLevel"
	"signal.py" -> int
	"shlex.py" -> "self.wordchars.translate"
	"ast.py" -> "node.value.replace"
	"dataclasses.py" -> "cls.__dict__.get"
	"zipfile.py" -> "fpin.tell"
	"plistlib.py" -> "self.write_dict"
	"ast.py" -> <unknown_function>
	"enum.py" -> "qualname.endswith"
	"__init__.py" -> decode
	"py_compile.py" -> FileExistsError
	"templating.py" -> "loader.list_templates"
	"__init__.py" -> f
	"zipfile.py" -> bytearray
	"feedparser.py" -> "self._input.close"
	"threading.py" -> len
	"test_blueprints.py" -> "app.app_context"
	"inspect.py" -> "parameters.append"
	"app.py" -> "self.config_class"
	"tag.py" -> next
	"sync.py" -> "self.thread_sensitive_context.get"
	"test_templating.py" -> "flask.get_template_attribute"
	"__init__.py" -> zip
	"functools.py" -> _CacheInfo
	"conftest.py" -> "app.test_client"
	"textwrap.py" -> "lines.append"
	"pathlib.py" -> isinstance
	"__init__.py" -> "self._keep_positive"
	"socket.py" -> getdefaulttimeout
	"zipfile.py" -> "zinfo._encodeFilenameFlags"
	"enum.py" -> sorted
	"threading.py" -> "self._stop"
	"warnings.py" -> hasattr
	"dis.py" -> range
	"uuid.py" -> replace
	"ssl.py" -> range
	"string.py" -> "self.parse"
	"__init__.py" -> _map
	"test_basic.py" -> RuntimeError
	"__init__.py" -> "sys._getframe"
	"functools.py" -> "found.append"
	"test_db.py" -> get_db
	"traceback.py" -> "tb.tb_frame.clear"
	"enum.py" -> "interesting.add"
	"calendar.py" -> join
	"test_signals.py" -> "flask.render_template"
	"typing_extensions.py" -> "tvars.extend"
	"ssl.py" -> "self._sslobj.getpeercert"
	"zipfile.py" -> "self.at.endswith"
	"csv.py" -> join
	"subprocess.py" -> "sys.audit"
	"conftest.py" -> open
	"plistlib.py" -> UID
	"test_templating.py" -> len
	"pathlib.py" -> "self._flavour.casefold_parts"
	"enum.py" -> "enum_class._flag_mask_.bit_length"
	"random.py" -> selected_add
	"shlex.py" -> open
	"__init__.py" -> tuple
	"__init__.py" -> "self._load_json"
	"dataclasses.py" -> dict
	"zipfile.py" -> "arcname.replace"
	"pathlib.py" -> property
	"_strptime.py" -> "base.__setitem__"
	"shutil.py" -> fdst_write
	"__init__.py" -> "fields.add"
	"plistlib.py" -> "self.indent.replace"
	"socket.py" -> "fds.frombytes"
	"typing.py" -> <unknown_function>
	"test_cli.py" -> ScriptInfo
	"__init__.py" -> "self.is_dir"
	"traceback.py" -> "_ctx.indent"
	"auth.py" -> execute
	"py_compile.py" -> "tbtext.replace"
	"plistlib.py" -> "self.write_value"
	"config.py" -> "key.removeprefix"
	"__init__.py" -> "self.dist.locate_file"
	"argparse.py" -> "_option_strings.append"
	"functools.py" -> "cache.clear"
	"selectors.py" -> "self.register"
	"zipfile.py" -> "self._writecheck"
	"argparse.py" -> "self._add_item"
	"locale.py" -> "norm_encoding.lower"
	"zipfile.py" -> "self.filelist.append"
	"tarfile.py" -> "self.next"
	"subprocess.py" -> "_winapi.GetExitCodeProcess"
	"parse.py" -> "hostname.lower"
	"signals.py" -> Namespace
	"subprocess.py" -> CalledProcessError
	"subprocess.py" -> "args.extend"
	"ast.py" -> "self.get_precedence"
	"pathlib.py" -> "cls._from_parts"
	"dataclasses.py" -> map
	"tarfile.py" -> "self.zlib.compressobj"
	"provider.py" -> "self._prepare_response_obj"
	"test_blueprints.py" -> "blue.register_error_handler"
	"test_logging.py" -> "pytestconfig.pluginmanager.unregister"
	"tarfile.py" -> "self.map.append"
	"app.py" -> "rv.globals.update"
	"config.py" -> "key.isupper"
	"__init__.py" -> _warnings_showwarning
	"inspect.py" -> Arguments
	"ctx.py" -> "self.app.app_context"
	"subprocess.py" -> sorted
	"test_config.py" -> "app.config.from_file"
	"gzip.py" -> "parser.parse_args"
	"pathlib.py" -> "self._select_from"
	"test_templating.py" -> _TestHandler
	"__init__.py" -> "self.infos.freeze"
	"hashlib.py" -> getattr
	"shutil.py" -> bytearray
	"shlex.py" -> "self.read_token"
	"threading.py" -> Condition
	"test_views.py" -> "flask.make_response"
	"scaffold.py" -> "self.add_url_rule"
	"test_templating.py" -> "app.jinja_env.globals.keys"
	"test_blueprints.py" -> "grandchild.errorhandler"
	"subprocess.py" -> "ver.split"
	"threading.py" -> str
	"tempfile.py" -> "dirlist.extend"
	"test_testing.py" -> "app.test_request_context"
	"socket.py" -> format
	"calendar.py" -> dict
	"inspect.py" -> "func.__qualname__.split"
	"app.py" -> "self.add_template_test"
	"inspect.py" -> "parser.parse_args"
	"testing.py" -> "builder.close"
	"typing.py" -> reversed
	"csv.py" -> dict
	"platform.py" -> "_ver_output.match"
	"contextlib.py" -> "self._create_exit_wrapper"
	"lzma.py" -> "self._check_can_write"
	"blueprints.py" -> "state.url_prefix.rstrip"
	"app.py" -> "self.config.get"
	"cli.py" -> "app_name.strip"
	"plistlib.py" -> "self.get_data"
	"argparse.py" -> "self._ChoicesPseudoAction"
	"argparse.py" -> "params.get"
	"threading.py" -> "Thread.__init__"
	"plistlib.py" -> "self.data.append"
	"tarfile.py" -> "self._decode_pax_field"
	"logging.py" -> has_level_handler
	"ipaddress.py" -> "cls._ip_int_from_prefix"
	"ast.py" -> "self.write"
	"copy.py" -> "slotstate.items"
	"contextlib.py" -> "self._old_targets.append"
	"linecache.py" -> "filename.startswith"
	"csv.py" -> map
	"feedparser.py" -> "self._cur.get_content_type"
	"tempfile.py" -> "file.detach"
	"parse.py" -> "nv.append"
	"csv.py" -> next
	"datetime.py" -> bytes
	"linecache.py" -> getattr
	"zipfile.py" -> join
	"tarfile.py" -> int
	"platform.py" -> "vms_lib.getsyi"
	"pathlib.py" -> "idx.indices"
	"threading.py" -> reversed
	"hashlib.py" -> from_bytes
	"__init__.py" -> Module
	"inspect.py" -> "object.__dict__.items"
	"debughelpers.py" -> super
	"feedparser.py" -> "self._eofstack.pop"
	"__init__.py" -> "self._path.joinpath"
	"argparse.py" -> "invocations.append"
	"typing_extensions.py" -> staticmethod
	"plistlib.py" -> len
	"zipfile.py" -> "self.root.open"
	"__init__.py" -> Counter
	"test_helpers.py" -> "app.send_static_file"
	"dis.py" -> "parser.add_argument"
	"feedparser.py" -> "msg.set_default_type"
	"typing.py" -> ParamSpecArgs
	"zipfile.py" -> "self._zipfile.filelist.append"
	"operator.py" -> len
	"app.py" -> "sys.exc_info"
	"tokenize.py" -> match
	"bisect.py" -> len
	"tarfile.py" -> "self._get_filter_function"
	"__init__.py" -> "c.isalnum"
	"tempfile.py" -> getvalue
	"threading.py" -> "self._bootstrap_inner"
	"test_helpers.py" -> FakePath
	"typing.py" -> "annotations.keys"
	"threading.py" -> "self._block.locked"
	"argparse.py" -> "option_string.startswith"
	"typing_extensions.py" -> ValueError
	"traceback.py" -> list
	"sync.py" -> "executor.shutdown"
	"zipfile.py" -> ZipInfo
	"shutil.py" -> getpwnam
	"lzma.py" -> len
	"argparse.py" -> "action.help.strip"
	"reprlib.py" -> "pieces.append"
	"__init__.py" -> "self.data.endswith"
	"scaffold.py" -> "import_name.partition"
	"debughelpers.py" -> type
	"enum.py" -> super
	"statistics.py" -> StatisticsError
	"gzip.py" -> "do.decompress"
	"calendar.py" -> rstrip
	"__init__.py" -> "_chain.from_iterable"
	"base64.py" -> "input.read"
	"textwrap.py" -> "self._split_chunks"
	"uuid.py" -> len
	"helpers.py" -> hasattr
	"plistlib.py" -> split
	"__init__.py" -> _unique
	"testing.py" -> "old_env.items"
	"dis.py" -> items
	"copy.py" -> copier
	"fractions.py" -> ValueError
	"app.py" -> "self.aborter_class"
	"test_templating.py" -> "rv.data.split"
	"test_blueprints.py" -> "grandchild.route"
	"typing.py" -> "_overload_registry.clear"
	"provider.py" -> "dump_args.setdefault"
	"platform.py" -> "info.strip"
	"ssl.py" -> "hostname_remainder.lower"
	"typing.py" -> repr
	"ssl.py" -> "self._real_connect"
	"lzma.py" -> "self._check_can_read"
	"cli.py" -> "self.split_envvar_value"
	"ssl.py" -> getattr
	"inspect.py" -> super
	"cli.py" -> eval
	"dis.py" -> bool
	"plistlib.py" -> total_seconds
	"test_blueprints.py" -> "parent.register_blueprint"
	"textwrap.py" -> any
	"tokenize.py" -> "result.add"
	"argparse.py" -> "action.format_usage"
	"enum.py" -> type
	"argparse.py" -> open
	"tarfile.py" -> str
	"blueprints.py" -> "app.cli.add_command"
	"pathlib.py" -> "name.endswith"
	"tarfile.py" -> "self.fileobj.read"
	"test_json.py" -> "flask.request.get_json"
	"typing_extensions.py" -> "_DefaultMixin.__init__"
	"__init__.py" -> pass_none
	"ast.py" -> _Unparser
	"base64.py" -> ValueError
	"test_session_interface.py" -> "request_ctx.match_request"
	"inspect.py" -> strip
	"inspect.py" -> Traceback
	"dataclasses.py" -> set
	"__init__.py" -> get
	"uuid.py" -> split
	"getopt.py" -> print
	"selectors.py" -> "self._selector.register"
	"warnings.py" -> format
	"__init__.py" -> "self.data.casefold"
	"__init__.py" -> "self.usesTime"
	"socket.py" -> "csock.setblocking"
	"argparse.py" -> "self._get_help_string"
	"feedparser.py" -> "self.readline"
	"parser.py" -> "Parser.parse"
	"inspect.py" -> type
	"traceback.py" -> "itertools.islice"
	"__init__.py" -> "self.root._name_set"
	"tarfile.py" -> "sys.getfilesystemencoding"
	"codeop.py" -> compile
	"views.py" -> decorator
	"pathlib.py" -> RuntimeError
	"ast.py" -> "args.append"
	"zipfile.py" -> "self._zinfo.FileHeader"
	"plistlib.py" -> <unknown_function>
	"parse.py" -> "resolved_path.pop"
	"traceback.py" -> ValueError
	"views.py" -> "tasks.block.delay"
	"zipfile.py" -> map
	"zipfile.py" -> LZMADecompressor
	"argparse.py" -> "extras.append"
	"operator.py" -> <unknown_function>
	"zipfile.py" -> "self._decomp.decompress"
	"ast.py" -> "type.__instancecheck__"
	"datetime.py" -> "other.toordinal"
	"datetime.py" -> "self._cmp"
	"__init__.py" -> "self.formatTime"
	"testing.py" -> open
	"textwrap.py" -> "line.strip"
	"argparse.py" -> "self._get_positional_kwargs"
	"types.py" -> next
	"__init__.py" -> "self.locate"
	"bz2.py" -> "self._fp.write"
	"subprocess.py" -> "startupinfo.copy"
	"inspect.py" -> "code.co_positions"
	"reprlib.py" -> join
	"base64.py" -> curr_clear
	"__init__.py" -> "self.exists"
	"socket.py" -> "self._sock._decref_socketios"
	"tarfile.py" -> _FileInFile
	"test_user_error_handler.py" -> "bp.route"
	"typing_extensions.py" -> isinstance
	"test_converters.py" -> url_for
	"calendar.py" -> range
	"subprocess.py" -> child_exception_type
	"conf.py" -> set_classes
	"test_cli.py" -> invoke
	"warnings.py" -> issubclass
	"statistics.py" -> "counts.values"
	"shlex.py" -> "self.pop_source"
	"statistics.py" -> float
	"inspect.py" -> object
	"subprocess.py" -> type
	"shutil.py" -> "name.split"
	"csv.py" -> range
	"zipfile.py" -> "self._file.tell"
	"_strptime.py" -> "found.groupdict"
	"test_basic.py" -> "r.set_cookie"
	"threading.py" -> "self.finished.set"
	"shutil.py" -> "fn.stat"
	"dis.py" -> str
	"__init__.py" -> "self._read_files_distinfo"
	"warnings.py" -> "filters.append"
	"argparse.py" -> "_sys.exit"
	"_strptime.py" -> "format.index"
	"plistlib.py" -> "raw.startswith"
	"test_regression.py" -> Foo
	"shutil.py" -> "zip.infolist"
	"threading.py" -> "_sys.setprofile"
	"testing.py" -> "extra.pop"
	"__init__.py" -> "self.log"
	"base64.py" -> "chunks.append"
	"test_blueprints.py" -> "child.register_blueprint"
	"threading.py" -> "self._started.is_set"
	"feedparser.py" -> "self._last.get_content_maintype"
	"config.py" -> "dict.__repr__"
	"test_cli.py" -> "app.cli.command"
	"functools.py" -> hasattr
	"parse.py" -> "path.split"
	"bz2.py" -> join
	"datetime.py" -> "other._getstate"
	"subprocess.py" -> "gids.append"
	"__init__.py" -> "s.decode"
	"test_testing.py" -> len
	"tarfile.py" -> AbsoluteLinkError
	"socket.py" -> "sock.close"
	"sync.py" -> func
	"tarfile.py" -> "tarfile.pax_headers.copy"
	"ssl.py" -> strptime
	"test_basic.py" -> "flask.session.setdefault"
	"config.py" -> len
	"threading.py" -> "__all__.append"
	"ssl.py" -> "protos.append"
	"shutil.py" -> dict
	"tarfile.py" -> "self._dbg"
	"enum.py" -> "redirect.__set_name__"
	"inspect.py" -> "sigcls.from_callable"
	"__init__.py" -> ValueError
	"cli.py" -> "current_app.url_map.iter_rules"
	"base64.py" -> isinstance
	"base64.py" -> memoryview
	"typing.py" -> "required_keys.add"
	"ipaddress.py" -> "IPv4Address.__eq__"
	"tarfile.py" -> "self.__write"
	"tarfile.py" -> SpecialFileError
	"cli.py" -> get_debug_flag
	"__init__.py" -> "strm.read"
	"cli.py" -> load_app
	"test_cli.py" -> "nested.cli.command"
	"sync.py" -> "call_result.set_exception"
	"argparse.py" -> "self.formatter._dedent"
	"app.py" -> "self.should_ignore_error"
	"types.py" -> "kwds.pop"
	"cli.py" -> compile
	"blog.py" -> redirect
	"sync.py" -> Local
	"calendar.py" -> max
	"uuid.py" -> "object.__setattr__"
	"ssl.py" -> "cert_ipaddress.rstrip"
	"typing.py" -> "bases.index"
	"app.py" -> "self.trap_http_exception"
	"__init__.py" -> "other.items"
	"blueprints.py" -> "s.app.after_request_funcs.setdefault"
	"socket.py" -> "sock.settimeout"
	"traceback.py" -> isinstance
	"enum.py" -> "data_types.add"
	"subprocess.py" -> "result.extend"
	"csv.py" -> "quotes.get"
	"subprocess.py" -> CompletedProcess
	"__init__.py" -> "low.endswith"
	"tarfile.py" -> "self.chmod"
	"feedparser.py" -> "EMPTYSTRING.join"
	"test_json.py" -> loads
	"zipfile.py" -> "self.at.rstrip"
	"dataclasses.py" -> "_thread.get_ident"
	"locale.py" -> "locale_encoding_alias.items"
	"parser.py" -> Parser
	"typing_extensions.py" -> "new_parameters.append"
	"test_basic.py" -> "flask.session.clear"
	"statistics.py" -> sorted
	"tarfile.py" -> "obj.name.endswith"
	"gzip.py" -> lstrip
	"ctx.py" -> "self.__dict__.setdefault"
	"feedparser.py" -> "NLCRE_bol.match"
	"uuid.py" -> "time.time_ns"
	"datetime.py" -> ord
	"typing.py" -> globals
	"datetime.py" -> round
	"ssl.py" -> _SSLMethod
	"textwrap.py" -> "text.strip"
	"typing.py" -> ForwardRef
	"__init__.py" -> "self.validation_pattern.search"
	"argparse.py" -> "self._get_option_tuples"
	"plistlib.py" -> "s.encode"
	"locale.py" -> TypeError
	"ctx.py" -> iter
	"test_logging.py" -> "stream.getvalue"
	"threading.py" -> "waiters.remove"
	"plistlib.py" -> "d.items"
	"test_json_tag.py" -> isinstance
	"ctx.py" -> "self.url_adapter.match"
	"provider.py" -> "kwargs.setdefault"
	"test_basic.py" -> "app.test_request_context"
	"inspect.py" -> "sig.replace"
	"copy.py" -> hasattr
	"zipfile.py" -> "self._decompressor.decompress"
	"test_json.py" -> super
	"__init__.py" -> "self.data.reverse"
	"__init__.py" -> <unknown_function>
	"threading.py" -> "self._waiters.remove"
	"app.py" -> "builder.get_environ"
	"bz2.py" -> "decomp.decompress"
	"test_cli.py" -> find_best_app
	"calendar.py" -> "parser.add_argument_group"
	"signal.py" -> "_signal.signal"
	"scaffold.py" -> lower
	"tarfile.py" -> "self.create_pax_header"
	"argparse.py" -> parsers_class
	"enum.py" -> append
	"zipfile.py" -> range
	"sessions.py" -> "self.get_signing_serializer"
	"testing.py" -> "app.session_interface.open_session"
	"contextlib.py" -> getattr
	"gzip.py" -> "fp.tell"
	"code.py" -> "self.runcode"
	"test_cli.py" -> "current_app._get_current_object"
	"tarfile.py" -> _StreamProxy
	"test_basic.py" -> "flask.abort"
	"plistlib.py" -> repr
	"test_subclassing.py" -> "app.test_client"
	"test_appctx.py" -> "app.test_request_context"
	"zipfile.py" -> set
	"dataclasses.py" -> bool
	"conftest.py" -> decode
	"ssl.py" -> CertificateError
	"tempfile.py" -> "file.write"
	"operator.py" -> repr
	"copyreg.py" -> hasattr
	"enum.py" -> cls
	"feedparser.py" -> "self._parsegen"
	"plistlib.py" -> update
	"inspect.py" -> append
	"ast.py" -> join
	"enum.py" -> "cls._iter_member_"
	"tag.py" -> str
	"multiapp.py" -> Flask
	"enum.py" -> "simple_dict.keys"
	"ast.py" -> "self.get_type_comment"
	"calendar.py" -> "parser.add_argument"
	"conftest.py" -> create_app
	"uuid.py" -> "line.rstrip"
	"string.py" -> "used_args.add"
	"pathlib.py" -> "self.stat"
	"__init__.py" -> isinstance
	"app.py" -> "request_started.send"
	"textwrap.py" -> enumerate
	"zipfile.py" -> "self._extract_member"
	"__init__.py" -> PathDistribution
	"typing.py" -> prepare
	"pathlib.py" -> "name.split"
	"parse.py" -> "scheme.strip"
	"provider.py" -> len
	"tempfile.py" -> "self._finalizer.detach"
	"uuid.py" -> repr
	"lzma.py" -> LZMAError
	"__init__.py" -> "self.data.find"
	"datetime.py" -> "self.replace"
	"test_cli.py" -> "custom.cli.command"
	"sync.py" -> "loop.shutdown_asyncgens"
	"blueprints.py" -> "options.get"
	"textwrap.py" -> "chunk.rfind"
	"cli.py" -> "headers.append"
	"app.py" -> "ctx.pop"
	"test_reqctx.py" -> "app.test_request_context"
	"gzip.py" -> open
	"functools.py" -> "registry.keys"
	"tarfile.py" -> sorted
	"calendar.py" -> "self.iterweekdays"
	"test_cli.py" -> "capsys.readouterr"
	"app.py" -> "required_methods.add"
	"__init__.py" -> "spec.partition"
	"ctx.py" -> AssertionError
	"calendar.py" -> "self.itermonthdates"
	"argparse.py" -> "action_conflicts.setdefault"
	"test_views.py" -> "ChildView.as_view"
	"sessions.py" -> "response.set_cookie"
	"test_request.py" -> AssertionError
	"zipfile.py" -> _Tellable
	"parse.py" -> "_ALWAYS_SAFE.union"
	"db.py" -> "g.pop"
	"csv.py" -> items
	"inspect.py" -> ClosureVars
	"base64.py" -> "sys.exit"
	"functools.py" -> "abstract_bases.append"
	"__init__.py" -> property
	"subprocess.py" -> append
	"zipfile.py" -> max
	"test_user_error_handler.py" -> KeyError
	"__init__.py" -> "self._style.usesTime"
	"pathlib.py" -> "self._make_child"
	"inspect.py" -> "self.generic_visit"
	"_strptime.py" -> "msg.format"
	"tempfile.py" -> "_once_lock.acquire"
	"platform.py" -> "f.read"
	"types.py" -> "self.fget"
	"test_config.py" -> "monkeypatch.setattr"
	"typing.py" -> cached
	"typing.py" -> join
	"__init__.py" -> "handlers.remove"
	"__init__.py" -> Context
	"weakref.py" -> len
	"statistics.py" -> most_common
	"__init__.py" -> "self.lock.release"
	"zipfile.py" -> "self.mkdir"
	"__init__.py" -> "self.data.startswith"
	"cli.py" -> getattr
	"parse.py" -> append
	"__init__.py" -> "self._style.validate"
	"weakref.py" -> "self._registry.pop"
	"zipfile.py" -> LargeZipFile
	"tokenize.py" -> format
	"plistlib.py" -> "self.end_element"
	"ast.py" -> dict
	"tarfile.py" -> "buf.count"
	"cli.py" -> "ctx.get_parameter_source"
	"contextlib.py" -> _enter
	"test_json_tag.py" -> "s.dumps"
	"typing.py" -> "cls.__dict__.get"
	"helpers.py" -> "kwargs.get"
	"conftest.py" -> "request_ctx.pop"
	"conftest.py" -> "mp.undo"
	"datetime.py" -> "self.dst"
	"inspect.py" -> "name.isidentifier"
	"shlex.py" -> shlex
	"test_basic.py" -> "values.setdefault"
	"platform.py" -> len
	"shutil.py" -> set
	"tempfile.py" -> "self.file.__enter__"
	"ast.py" -> "self._write_str_avoiding_backslashes"
	"app.py" -> response
	"cli.py" -> "ep.load"
	"threading.py" -> "self._block._at_fork_reinit"
	"test_user_error_handler.py" -> "pytest.mark.parametrize"
	"__init__.py" -> "self.data.split"
	"tarfile.py" -> "tarinfo.tobuf"
	"threading.py" -> "self._waiters.clear"
	"plistlib.py" -> "_dateParser.match"
	"enum.py" -> TypeError
	"glob.py" -> "sys.audit"
	"getopt.py" -> "prog_args.append"
	"argparse.py" -> match_partial
	"platform.py" -> "m.groups"
	"auth.py" -> redirect
	"tarfile.py" -> "parser.parse_args"
	"ast.py" -> map
	"__init__.py" -> "self.legacy_normalize"
	"platform.py" -> "sys_version.startswith"
	"zipfile.py" -> "self._next"
	"tarfile.py" -> "self.__read"
	"ast.py" -> next
	"selectors.py" -> "self.close"
	"reprlib.py" -> set
	"traceback.py" -> _Anchors
	"app.py" -> "options.pop"
	"__init__.py" -> "_compiler.compile"
	"dis.py" -> sorted
	"rlcompleter.py" -> dir
	"platform.py" -> iter
	"test_config.py" -> "pytest.raises"
	"threading.py" -> _DummyThread
	"__init__.py" -> "dist.read_text"
	"inspect.py" -> TypeError
	"bz2.py" -> "self._buffer.tell"
	"zipfile.py" -> "parser.add_argument"
	"platform.py" -> split
	"tarfile.py" -> func
	"platform.py" -> int
	"test_json.py" -> "flask.json.dump"
	"test_json_tag.py" -> "s.loads"
	"testing.py" -> "self._output.write"
	"csv.py" -> "self._guess_delimiter"
	"inspect.py" -> "old_params.items"
	"py_compile.py" -> str
	"gzip.py" -> hasattr
	"parse.py" -> "bs.rstrip"
	"tempfile.py" -> "self._file.readable"
	"test_cli.py" -> "runner.invoke"
	"tarfile.py" -> "targetpath.replace"
	"zipfile.py" -> "directory_name.endswith"
	"feedparser.py" -> "NLCRE_eol.search"
	"dis.py" -> rjust
	"typing.py" -> dict
	"typing_extensions.py" -> "required_keys.update"
	"tempfile.py" -> "self.cleanup"
	"feedparser.py" -> "mo.group"
	"pathlib.py" -> rstrip
	"bz2.py" -> "self._buffer.close"
	"test_logging.py" -> Exception
	"zipfile.py" -> "self._compressor.flush"
	"weakref.py" -> "self._Info"
	"pathlib.py" -> "self._from_parts"
	"gzip.py" -> "self.compress.compress"
	"csv.py" -> str
	"shutil.py" -> max
	"test_user_error_handler.py" -> "client.get"
	"calendar.py" -> "cal.formatmonth"
	"enum.py" -> "names.append"
	"test_user_error_handler.py" -> CustomException
	"calendar.py" -> _localized_month
	"plistlib.py" -> globals
	"app.py" -> "self.async_to_sync"
	"csv.py" -> "line.count"
	"views.py" -> super
	"__init__.py" -> "d.update"
	"test_helpers.py" -> next
	"calendar.py" -> "self.monthdatescalendar"
	"tokenize.py" -> "enc.startswith"
	"locale.py" -> "encoding.replace"
	"templating.py" -> generate
	"test_reqctx.py" -> CustomFlask
	"traceback.py" -> "exceptions.append"
	"argparse.py" -> "result.append"
	"inspect.py" -> ArgInfo
	"subprocess.py" -> TypeError
	"typing_extensions.py" -> _ConcatenateGenericAlias
	"__init__.py" -> Flask
	"ast.py" -> "self._function_helper"
	"reprlib.py" -> max
	"fnmatch.py" -> "fixed.append"
	"plistlib.py" -> "pieces.append"
	"locale.py" -> "decimal_point.join"
	"app.py" -> FormDataRoutingRedirect
	"plistlib.py" -> "value.to_bytes"
	"enum.py" -> "classdict.items"
	"zipfile.py" -> "self._encodeFilenameFlags"
	"statistics.py" -> "root.as_integer_ratio"
	"argparse.py" -> zip
	"socket.py" -> memoryview
	"tarfile.py" -> CompressionError
	"conftest.py" -> init_db
	"dis.py" -> "parser.parse_args"
	"subprocess.py" -> "self._make_inheritable"
	"test_testing.py" -> "appcontext_popped.connected_to"
	"ssl.py" -> "context.set_ciphers"
	"logging.py" -> "logger.getEffectiveLevel"
	"ast.py" -> "self.visit"
	"templating.py" -> "loader.get_source"
	"_strptime.py" -> "format_regex.match"
	"conf.py" -> "packaging.version.parse"
	"parse.py" -> TypeError
	"__init__.py" -> "self._search_paths"
	"cli.py" -> "self.add_command"
	"enum.py" -> "cls.__new__"
	"linecache.py" -> "filename.endswith"
	"subprocess.py" -> hasattr
	"test_user_error_handler.py" -> "app.test_client"
	"subprocess.py" -> _waitpid
	"test_appctx.py" -> len
	"inspect.py" -> _ParameterKind
	"argparse.py" -> "kwargs.get"
	"tarfile.py" -> super
	"typing_extensions.py" -> _ConcatenateForm
	"tempfile.py" -> "self._closer.close"
	"test_basic.py" -> "app.run"
	"plistlib.py" -> "self._fp.write"
	"typing_extensions.py" -> "parameters.extend"
	"test_templating.py" -> "c.get"
	"__init__.py" -> "Sectioned.section_pairs"
	"ipaddress.py" -> "obj._get_address_key"
	"calendar.py" -> "spacing.join"
	"threading.py" -> "tlock.release"
	"selectors.py" -> "self._readers.add"
	"functools.py" -> tuple
	"inspect.py" -> "sys.modules.get"
	"platform.py" -> "_ironpython_sys_version_parser.match"
	"textwrap.py" -> "indent.startswith"
	"__init__.py" -> "name.endswith"
	"test_reqctx.py" -> "flask.request.url.endswith"
	"ipaddress.py" -> IPv4Address
	"lzma.py" -> "self._buffer.readline"
	"typing_extensions.py" -> "own_annotations.items"
	"zipfile.py" -> "fileobj.tell"
	"operator.py" -> _abs
	"base64.py" -> "_B32_ENCODE_DOCSTRING.format"
	"test_basic.py" -> "rv.headers.get"
	"lzma.py" -> "self._check_can_seek"
	"pathlib.py" -> range
	"tarfile.py" -> "name.seek"
	"__init__.py" -> "_lock.acquire"
	"typing.py" -> _TypedDictMeta
	"copy.py" -> issubclass
	"app.py" -> "self.url_map.bind"
	"tarfile.py" -> "self._load"
	"app.py" -> "self.url_map_class"
	"auth.py" -> "session.clear"
	"ssl.py" -> "ss.append"
	"random.py" -> "a.encode"
	"ssl.py" -> VerifyMode
	"calendar.py" -> center
	"tarfile.py" -> type
	"gzip.py" -> "self._buffer.peek"
	"test_regression.py" -> "c.get"
	"_strptime.py" -> "self.pattern"
	"random.py" -> "a.decode"
	"tarfile.py" -> "self.gettarinfo"
	"string.py" -> join
	"zipfile.py" -> "self.fp.tell"
	"typing_extensions.py" -> "self._getitem"
	"test_session_interface.py" -> "app.get"
	"test_basic.py" -> "app.json.loads"
	"testing.py" -> get_request
	"config.py" -> sorted
	"enum.py" -> "classdict.update"
	"socket.py" -> "b.detach"
	"copy.py" -> zip
	"pathlib.py" -> "self.lstat"
	"ssl.py" -> "self.close"
	"test_reqctx.py" -> meh
	"csv.py" -> "self._guess_quote_and_delimiter"
	"ast.py" -> setattr
	"ssl.py" -> "self._sendfile_use_send"
	"plistlib.py" -> join
	"zipfile.py" -> "self._fileobj.read"
	"calendar.py" -> "self.formatweek"
	"operator.py" -> join
	"typing_extensions.py" -> __arg
	"ipaddress.py" -> "address.to_bytes"
	"parser.py" -> "feedparser.close"
	"ctx.py" -> "self.__dict__.get"
	"__init__.py" -> "slots.pop"
	"testing.py" -> "app.session_interface.save_session"
	"locale.py" -> "match.group"
	"tarfile.py" -> "self.tarinfo.fromtarfile"
	"dis.py" -> "entries.append"
	"plistlib.py" -> "start.decode"
	"cli.py" -> "dotenv.dotenv_values"
	"test_cli.py" -> "cli.command"
	"debughelpers.py" -> DebugFilesKeyError
	"typing.py" -> _LiteralGenericAlias
	"tarfile.py" -> object
	"random.py" -> IndexError
	"lzma.py" -> join
	"locale.py" -> abs
	"pathlib.py" -> "part.lstrip"
	"test_basic.py" -> str
	"argparse.py" -> "parser.exit"
	"datetime.py" -> list
	"__init__.py" -> "Handler.__init__"
	"blueprints.py" -> extend
	"random.py" -> ord
	"shutil.py" -> "posix._fcopyfile"
	"inspect.py" -> __get__
	"subprocess.py" -> "_active.remove"
	"copy.py" -> tuple
	"__init__.py" -> "value.endswith"
	"uuid.py" -> join
	"calendar.py" -> "self.monthdays2calendar"
	"app.py" -> "self.handle_http_exception"
	"scaffold.py" -> "self.register_error_handler"
	"calendar.py" -> "self.formatweekheader"
	"plistlib.py" -> groupdict
	"traceback.py" -> "note.split"
	"string.py" -> "_string.formatter_parser"
	"csv.py" -> float
	"traceback.py" -> "frame_summary.line.lstrip"
	"blueprints.py" -> "bp_url_prefix.lstrip"
	"argparse.py" -> "formatter.format_help"
	"rlcompleter.py" -> len
	"datetime.py" -> "self._tzinfo.tzname"
	"contextlib.py" -> "self._create_async_cb_wrapper"
	"test_request.py" -> "app.get"
	"test_regression.py" -> "app.errorhandler"
	"glob.py" -> "magic_check.sub"
	"_strptime.py" -> int
	"bz2.py" -> "self._compressor.flush"
	"__init__.py" -> "other.joinpath"
	"zipfile.py" -> "filename.replace"
	"argparse.py" -> "formatter.start_section"
	"functools.py" -> cache_len
	"signal.py" -> set
	"socket.py" -> "self._check_sendfile_params"
	"test_json.py" -> "json.dumps"
	"dis.py" -> type
	"typing.py" -> set
	"test_blueprints.py" -> MyFunctionException
	"_strptime.py" -> "time.tzset"
	"__init__.py" -> "current_app.json.loads"
	"threading.py" -> _start_new_thread
	"app.py" -> __init__
	"ipaddress.py" -> IndexError
	"helpers.py" -> "gen.close"
	"gzip.py" -> encode
	"test_session_interface.py" -> "flask.Flask"
	"sync.py" -> "sys.exc_info"
	"datetime.py" -> len
	"parse.py" -> "scheme.replace"
	"app.py" -> "options.setdefault"
	"tarfile.py" -> "self._get_extract_tarinfo"
	"linecache.py" -> "cache.clear"
	"shlex.py" -> ValueError
	"csv.py" -> colType
	"fnmatch.py" -> "result.append"
	"platform.py" -> repr
	"gzip.py" -> "builtins.open"
	"testing.py" -> "app.session_interface.is_null_session"
	"feedparser.py" -> "self._partial.truncate"
	"plistlib.py" -> dict
	"warnings.py" -> "arg.split"
	"string.py" -> "Template.__init_subclass__"
	"socket.py" -> "file.seek"
	"enum.py" -> "self.fset"
	"cli.py" -> "dotenv.find_dotenv"
	"sync.py" -> hasattr
	"datetime.py" -> "year.encode"
	"testing.py" -> replace
	"test_json.py" -> "app.route"
	"string.py" -> map
	"test_helpers.py" -> "flask.url_for"
	"scaffold.py" -> rstrip
	"helpers.py" -> _split_blueprint_path
	"gzip.py" -> "self.fileobj.write"
	"socket.py" -> startswith
	"ast.py" -> "self._for_helper"
	"locale.py" -> print
	"parse.py" -> "x.encode"
	"tarfile.py" -> "self.getmembers"
	"sync.py" -> "self.main_event_loop.call_soon_threadsafe"
	"ipaddress.py" -> "nets.append"
	"__init__.py" -> EntryPoint
	"threading.py" -> set
	"inspect.py" -> format
	"datetime.py" -> "dt.dst"
	"typing_route.py" -> jsonify
	"test_views.py" -> "CountInit.as_view"
	"test_cli.py" -> bool
	"test_reqctx.py" -> greenlet
	"locale.py" -> "code.partition"
	"app.py" -> ValueError
	"threading.py" -> "Semaphore.__init__"
	"tarfile.py" -> "TarFile.open"
	"ast.py" -> "new_values.append"
	"uuid.py" -> dict
	"operator.py" -> map
	"ssl.py" -> "context.load_verify_locations"
	"typing_extensions.py" -> classmethod
	"warnings.py" -> callable
	"tarfile.py" -> "fileobj.seek"
	"__init__.py" -> "self.lookup.cache_clear"
	"__init__.py" -> "self.eggs.freeze"
	"subprocess.py" -> _PopenSelector
	"tarfile.py" -> bltn_open
	"argparse.py" -> "action_header.endswith"
	"app.py" -> "blueprint.register"
	"weakref.py" -> "self.data.setdefault"
	"test_cli.py" -> "monkeypatch.chdir"
	"tarfile.py" -> SubsequentHeaderError
	"tag.py" -> loads
	"test_signals.py" -> "flask.Flask"
	"weakref.py" -> "self.data.popitem"
	"__init__.py" -> vars
	"tarfile.py" -> "self._proc_sparse"
	"parser.py" -> "self.parse"
	"pathlib.py" -> "path.as_posix"
	"test_testing.py" -> "app.cli.command"
	"test_blueprints.py" -> "app.test_request_context"
	"__init__.py" -> "self.data.splitlines"
	"sync.py" -> "task.cancel"
	"ssl.py" -> "self._sslobj.pending"
	"datetime.py" -> "mytz.utcoffset"
	"ast.py" -> "parser.add_argument"
	"test_testing.py" -> "client.post"
	"auth.py" -> check_password_hash
	"fractions.py" -> Fraction
	"sessions.py" -> "self.get_cookie_samesite"
	"shutil.py" -> "sys.platform.startswith"
	"gzip.py" -> EOFError
	"functools.py" -> _HashedSeq
	"functools.py" -> get
	"__init__.py" -> "DistributionFinder.Context"
	"dataclasses.py" -> func
	"weakref.py" -> ref
	"argparse.py" -> get
	"__init__.py" -> IsADirectoryError
	"parse.py" -> "match.groups"
	"subprocess.py" -> "self.stdin.close"
	"enum.py" -> auto
	"__init__.py" -> "celery_app.config_from_object"
	"shlex.py" -> "self.pushback.popleft"
	"argparse.py" -> match_argument
	"conf.py" -> reference
	"subprocess.py" -> format
	"test_signals.py" -> "flask.appcontext_tearing_down.connect"
	"tarfile.py" -> "fileobj.fileno"
	"ipaddress.py" -> min
	"views.py" -> __init_subclass__
	"inspect.py" -> issubclass
	"random.py" -> tuple
	"getopt.py" -> "o.startswith"
	"views.py" -> "request.form.get"
	"test_blueprints.py" -> "bp2.get"
	"threading.py" -> max
	"datetime.py" -> <unknown_function>
	"dis.py" -> Instruction
	"parse.py" -> "bracketed.partition"
	"feedparser.py" -> enumerate
	"argparse.py" -> list
	"pathlib.py" -> iter
	"test_json.py" -> "DefaultJSONProvider.default"
	"traceback.py" -> next
	"enum.py" -> "enum_class._member_type_"
	"shlex.py" -> isinstance
	"tasks.py" -> range
	"parse.py" -> format
	"parse.py" -> "url.find"
	"test_appctx.py" -> repr
	"statistics.py" -> TypeError
	"config.py" -> type
	"calendar.py" -> "parser.parse_args"
	"zipfile.py" -> _ZipWriteFile
	"ssl.py" -> DefaultVerifyPaths
	"test_instance_config.py" -> "flask.Flask"
	"app.py" -> "_cv_request.get"
	"argparse.py" -> "self._current_section.items.append"
	"test_appctx.py" -> "flask.g.pop"
	"uuid.py" -> rstrip
	"hashlib.py" -> "fileobj.readable"
	"reprlib.py" -> "self.repr_instance"
	"statistics.py" -> NormalDist
	"typing_route.py" -> range
	"subprocess.py" -> issubclass
	"gzip.py" -> "g.close"
	"tempfile.py" -> "self._file.close"
	"zipfile.py" -> "self.fp.write"
	"helpers.py" -> "_cv_request.get"
	"tokenize.py" -> any
	"parse.py" -> "_hostprog.match"
	"string.py" -> ascii
	"test_signals.py" -> "flask.request_started.connect"
	"test_async.py" -> "pytest.importorskip"
	"test_regression.py" -> "flask.url_for"
	"pathlib.py" -> "sys.intern"
	"app.py" -> isinstance
	"fnmatch.py" -> replace
	"ctx.py" -> type
	"subprocess.py" -> min
	"app.py" -> "self.session_interface.is_null_session"
	"shutil.py" -> SpecialFileError
	"test_auth.py" -> "pytest.mark.parametrize"
	"__init__.py" -> dict
	"testing.py" -> "app.response_class"
	"inspect.py" -> FrameInfo
	"_strptime.py" -> "locale_time.f_weekday.index"
	"test_converters.py" -> join
	"feedparser.py" -> "self._lines.appendleft"
	"test_basic.py" -> method_route
	"inspect.py" -> "itertools.chain"
	"subprocess.py" -> "data.replace"
	"test_signals.py" -> "flask.request_finished.connect"
	"app.py" -> "self._find_error_handler"
	"ctx.py" -> "_cv_app.reset"
	"tarfile.py" -> "tarinfo.issym"
	"__init__.py" -> "self.select"
	"contextlib.py" -> "self.gen.throw"
	"enum.py" -> "bltns.bin"
	"enum.py" -> "cls._member_map_.values"
	"datetime.py" -> "fmt.format"
	"__init__.py" -> "root.debug"
	"selectors.py" -> "self._selector.poll"
	"tempfile.py" -> join
	"typing.py" -> getattr
	"test_cli.py" -> "monkeypatch.setitem"
	"typing_extensions.py" -> setattr
	"functools.py" -> ValueError
	"feedparser.py" -> "self._msgstack.append"
	"typing.py" -> bool
	"socket.py" -> "name.strip"
	"subprocess.py" -> "inst._internal_poll"
	"conftest.py" -> "pytest.fixture"
	"__init__.py" -> map
	"test_views.py" -> "client.head"
	"argparse.py" -> ValueError
	"selectors.py" -> hasattr
	"__init__.py" -> next
	"ipaddress.py" -> "parts.pop"
	"pathlib.py" -> str
	"gzip.py" -> "group.add_argument"
	"base64.py" -> "b.startswith"
	"ast.py" -> "self._source.extend"
	"plistlib.py" -> range
	"selectors.py" -> "selector_obj.close"
	"tokenize.py" -> "_itertools.chain"
	"datetime.py" -> "cls.utcfromtimestamp"
	"__init__.py" -> "handler._at_fork_reinit"
	"test_templating.py" -> "app.route"
	"__init__.py" -> "self.data.swapcase"
	"subprocess.py" -> "self._internal_poll"
	"app.py" -> _wz_redirect
	"ctx.py" -> object
	"zipfile.py" -> "zinfo.FileHeader"
	"test_basic.py" -> sorted
	"typing_route.py" -> show
	"__init__.py" -> "self._read_files_egginfo_installed"
	"test_config.py" -> "app.config.from_prefixed_env"
	"parse.py" -> "url.replace"
	"__init__.py" -> classmethod
	"functools.py" -> "self.dispatcher.register"
	"enum.py" -> hash
	"test_auth.py" -> "client.get"
	"cli.py" -> "app.cli.get_command"
	"contextlib.py" -> _GeneratorContextManager
	"tarfile.py" -> "prefix.encode"
	"tarfile.py" -> "self._proc_gnusparse_00"
	"tarfile.py" -> TypeError
	"codeop.py" -> "line.strip"
	"app.py" -> callable
	"base64.py" -> "b.endswith"
	"ast.py" -> "self.traverse"
	"tarfile.py" -> "self._handle_fatal_error"
	"tempfile.py" -> "self._file.readinto1"
	"tempfile.py" -> "self._file.readinto"
	"test_regression.py" -> "app.route"
	"calendar.py" -> different_locale
	"warnings.py" -> RuntimeError
	"socket.py" -> "self._real_close"
	"uuid.py" -> range
	"shutil.py" -> "sys.audit"
	"pathlib.py" -> "object.__new__"
	"threading.py" -> "self._set_native_id"
	"bz2.py" -> "self._buffer.seek"
	"test_cli.py" -> "pytest.raises"
	"__init__.py" -> "current_app.json.dumps"
	"test_json.py" -> splitlines
	"inspect.py" -> hash
	"ssl.py" -> "context._encode_hostname"
	"test_basic.py" -> "app.get"
	"test_basic.py" -> run_test
	"ast.py" -> "self._type_ignores.get"
	"test_config.py" -> "app.config.get_namespace"
	"selectors.py" -> "key._replace"
	"enum.py" -> "name.startswith"
	"zipfile.py" -> "path.rstrip"
	"functools.py" -> <unknown_function>
	"shlex.py" -> "self.filestack.appendleft"
	"provider.py" -> type
	"test_views.py" -> "client.post"
	"statistics.py" -> gauss
	"argparse.py" -> <unknown_function>
	"test_config.py" -> "monkeypatch.setenv"
	"zipfile.py" -> "parser.parse_args"
	"test_instance_config.py" -> "installed_path.mkdir"
	"threading.py" -> get_ident
	"tarfile.py" -> "value.rstrip"
	"traceback.py" -> range
	"test_reqctx.py" -> "app.full_dispatch_request"
	"plistlib.py" -> "self._read_refs"
	"argparse.py" -> "self._root_section.format_help"
	"parser.py" -> "Parser.parsestr"
	"random.py" -> "self.randrange"
	"ipaddress.py" -> "IPv4Address.__lt__"
	"test_helpers.py" -> str
	"test_helpers.py" -> AssertionError
	"plistlib.py" -> max
	"testing.py" -> "self._input.read"
	"__init__.py" -> "self._key"
	"enum.py" -> "cls._member_map_.items"
	"__init__.py" -> dict_setitem
	"traceback.py" -> "fnames.add"
	"dis.py" -> compile
	"ssl.py" -> "certs.extend"
	"tarfile.py" -> "self.utime"
	"statistics.py" -> "X.cdf"
	"weakref.py" -> "cls._registry.items"
	"bz2.py" -> "mode.replace"
	"ipaddress.py" -> IPv6Network
	"ctx.py" -> "appcontext_pushed.send"
	"__init__.py" -> "msg.format"
	"__init__.py" -> "self.data.istitle"
	"functools.py" -> isinstance
	"scaffold.py" -> get_root_path
	"weakref.py" -> "self._scrub_removals"
	"plistlib.py" -> "self.simple_element"
	"copyreg.py" -> ValueError
	"argparse.py" -> isinstance
	"argparse.py" -> "args_file.read"
	"__init__.py" -> "StreamHandler.__init__"
	"test_async.py" -> "test_client.get"
	"tokenize.py" -> TokenError
	"dataclasses.py" -> "locals.keys"
	"textwrap.py" -> sum
	"test_async.py" -> "app.errorhandler"
	"lzma.py" -> "self._fp.close"
	"_strptime.py" -> sorted
	"dis.py" -> TypeError
	"ssl.py" -> "self.sslobject_class._create"
	"blueprints.py" -> _endpoint_from_view_func
	"threading.py" -> "self.is_alive"
	"platform.py" -> strip
	"argparse.py" -> "self._check_conflict"
	"__init__.py" -> "cls._convert_egg_info_reqs_to_simple_reqs"
	"subprocess.py" -> FileNotFoundError
	"zipfile.py" -> _dedupe
	"random.py" -> list
	"argparse.py" -> "self._group_actions.remove"
	"enum.py" -> v_repr
	"debughelpers.py" -> all
	"tokenize.py" -> "endprog.match"
	"app.py" -> Flask
	"zipfile.py" -> "self.close"
	"weakref.py" -> "gc.enable"
	"__init__.py" -> "fmt.find"
	"bz2.py" -> "self._buffer.seekable"
	"lzma.py" -> "self.readable"
	"typing_extensions.py" -> "tvars.append"
	"app.py" -> RequestContext
	"test_signals.py" -> "flask.got_request_exception.disconnect"
	"traceback.py" -> "_ctx.emit"
	"socket.py" -> SocketIO
	"test_basic.py" -> "flask.Flask"
	"inspect.py" -> "srch_cls.__getattr__"
	"hashlib.py" -> "loop.to_bytes"
	"dis.py" -> hasattr
	"pathlib.py" -> "self.chmod"
	"plistlib.py" -> "self.begin_element"
	"string.py" -> "self.vformat"
	"ssl.py" -> hasattr
	"test_user_error_handler.py" -> ForbiddenSubclassRegistered
	"plistlib.py" -> "p.parse"
	"typing_extensions.py" -> "hint.items"
	"shutil.py" -> "path.rstrip"
	"plistlib.py" -> "header.startswith"
	"socket.py" -> "a.detach"
	"threading.py" -> "tlock.locked"
	"textwrap.py" -> "reversed_chunks.pop"
	"typing_route.py" -> iter
	"calendar.py" -> "sys.getdefaultencoding"
	"test_templating.py" -> MyFlask
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> super
	"test_blueprints.py" -> "app.jinja_env.globals.keys"
	"test_basic.py" -> "flask.session.pop"
	"types.py" -> _GeneratorWrapper
	"warnings.py" -> _OptionError
	"ctx.py" -> "app.request_class"
	"tarfile.py" -> "self._handle_nonfatal_error"
	"test_cli.py" -> prepare_import
	"parse.py" -> _Quoter
	"templating.py" -> "template_rendered.send"
	"blueprints.py" -> "self.error_handler_spec.items"
	"test_helpers.py" -> "pytest.raises"
	"test_cli.py" -> "subgroup.command"
	"parse.py" -> "hostname.startswith"
	"tarfile.py" -> "tarinfo.isdir"
	"ipaddress.py" -> "self._check_int_address"
	"linecache.py" -> "cache.keys"
	"test_instance_config.py" -> create_namespace
	"datetime.py" -> "args.append"
	"copy.py" -> isinstance
	"datetime.py" -> "self.__setstate"
	"plistlib.py" -> "self._getrefnum"
	"tokenize.py" -> "self.tokens.append"
	"__init__.py" -> "root.critical"
	"enum.py" -> "enum_class._unhashable_values_.append"
	"views.py" -> NotImplementedError
	"tarfile.py" -> ReadError
	"shutil.py" -> func
	"testing.py" -> "self._input.readline"
	"fractions.py" -> len
	"app.py" -> "self.finalize_request"
	"warnings.py" -> "s.strip"
	"getopt.py" -> "unique_match.endswith"
	"code.py" -> "self.buffer.append"
	"_strptime.py" -> "current_format.replace"
	"signal.py" -> "name.isupper"
	"_strptime.py" -> "time.struct_time"
	"random.py" -> ValueError
	"plistlib.py" -> getattr
	"test_helpers.py" -> "rv.data.strip"
	"test_templating.py" -> "monkeypatch.setattr"
	"shlex.py" -> "s.replace"
	"types.py" -> type
	"tarfile.py" -> "obj.name.rstrip"
	"app.py" -> RuntimeError
	"operator.py" -> getattr
	"copyreg.py" -> isinstance
	"lzma.py" -> "self._fp.fileno"
	"cli.py" -> CertParamType
	"typing.py" -> "params.append"
	"app.py" -> processor
	"textwrap.py" -> len
	"tarfile.py" -> "sparse.append"
	"__init__.py" -> _StderrHandler
	"config.py" -> compile
	"ssl.py" -> "self._sslobj.read"
	"helpers.py" -> RuntimeError
	"ipaddress.py" -> "IPv6Address.__lt__"
	"test_basic.py" -> type
	"pathlib.py" -> "self._format_parsed_parts"
	"test_testing.py" -> "flask.url_for"
	"parse.py" -> "hostinfo.partition"
	"fractions.py" -> int
	"argparse.py" -> "self.add_mutually_exclusive_group"
	"enum.py" -> any
	"threading.py" -> "self.release"
	"pathlib.py" -> "self._flavour.is_reserved"
	"threading.py" -> "self._cond.wait_for"
	"uuid.py" -> getattr
	"pathlib.py" -> "f.write"
	"test_helpers.py" -> "flask.stream_with_context"
	"shutil.py" -> "filename.endswith"
	"gzip.py" -> ValueError
	"blueprints.py" -> "rule.lstrip"
	"test_basic.py" -> "gc.enable"
	"sessions.py" -> dict
	"statistics.py" -> issubclass
	"tokenize.py" -> startswith
	"testing.py" -> ScriptInfo
	"ipaddress.py" -> ValueError
	"tarfile.py" -> "match.groups"
	"enum.py" -> filter
	"textwrap.py" -> "self.wordsep_re.split"
	"socket.py" -> "self._sendfile_use_sendfile"
	"types.py" -> object
	"textwrap.py" -> "dict.fromkeys"
	"csv.py" -> "modes.items"
	"subprocess.py" -> "self.stderr_thread.start"
	"conf.py" -> "app.add_role"
	"warnings.py" -> __import__
	"textwrap.py" -> split
	"inspect.py" -> any
	"__init__.py" -> "self.manager.getLogger"
	"__init__.py" -> "text.splitlines"
	"ssl.py" -> "context.load_cert_chain"
	"dataclasses.py" -> "base_fields.values"
	"types.py" -> "self.__wrapped.close"
	"test_templating.py" -> "pytest.raises"
	"gzip.py" -> hex
	"inspect.py" -> "class_finder.visit"
	"typing.py" -> "ann.items"
	"enum.py" -> "last_values.append"
	"socket.py" -> "sock.recvmsg"
	"threading.py" -> "self._set_ident"
	"testing.py" -> repr
	"ipaddress.py" -> hex
	"test_basic.py" -> "c.get"
	"string.py" -> str
	"typing_route.py" -> render_template
	"datetime.py" -> "_DAYS_BEFORE_MONTH.append"
	"traceback.py" -> iter
	"test_db.py" -> "pytest.raises"
	"base64.py" -> tobytes
	"typing_extensions.py" -> str
	"typing_extensions.py" -> AssertionError
	"ctx.py" -> "ctx.copy"
	"tarfile.py" -> format
	"__init__.py" -> "self._next"
	"subprocess.py" -> "_winapi.GetFileType"
	"__init__.py" -> "value.startswith"
	"typing.py" -> print
	"__init__.py" -> "root.log"
	"zipfile.py" -> "self._name_set"
	"__init__.py" -> action
	"subprocess.py" -> "self._posix_spawn"
	"enum.py" -> "enum_class._member_names_.append"
	"_strptime.py" -> super
	"uuid.py" -> int_
	"ctx.py" -> "sys.exc_info"
	"shutil.py" -> "path.split"
	"test_testing.py" -> "app.route"
	"subprocess.py" -> "process.poll"
	"tarfile.py" -> _Stream
	"ast.py" -> "c.isprintable"
	"lzma.py" -> "results.append"
	"dataclasses.py" -> InitVar
	"test_cli.py" -> "self.expect_order"
	"__init__.py" -> Manager
	"typing.py" -> ParamSpecKwargs
	"copy.py" -> Error
	"random.py" -> isinstance
	"tasks.py" -> shared_task
	"zipfile.py" -> "fp.read"
	"subprocess.py" -> ValueError
	"__init__.py" -> "self.formatFooter"
	"cli.py" -> enumerate
	"_strptime.py" -> "self.__seqToRE"
	"test_templating.py" -> "app.add_template_test"
	"cli.py" -> load_dotenv
	"shutil.py" -> "entry.is_symlink"
	"test_reqctx.py" -> get_cookie_name
	"make_celery.py" -> create_app
	"cli.py" -> "run_command.params.insert"
	"_strptime.py" -> type
	"test_cli.py" -> "cli.group"
	"__init__.py" -> "f.filter"
	"gzip.py" -> "g.write"
	"tarfile.py" -> "member.path.lstrip"
	"threading.py" -> print
	"tokenize.py" -> "_itertools.permutations"
	"__init__.py" -> "cls.discover"
	"subprocess.py" -> "self._handle_exitstatus"
	"fractions.py" -> divmod
	"fractions.py" -> complex
	"templating.py" -> "app.jinja_env.from_string"
	"argparse.py" -> type_func
	"reprlib.py" -> "builtins.repr"
	"feedparser.py" -> "preamble.append"
	"enum.py" -> "cls._iter_member_by_value_"
	"uuid.py" -> "part.rjust"
	"blueprints.py" -> join
	"py_compile.py" -> compile
	"functools.py" -> RuntimeError
	"signal.py" -> "name.startswith"
	"gzip.py" -> "self._fp.prepend"
	"base64.py" -> "s.translate"
	"test_templating.py" -> "flask.stream_template_string"
	"gzip.py" -> isinstance
	"ast.py" -> "parser.parse_args"
	"inspect.py" -> "self.parameters.values"
	"zipfile.py" -> unpack
	"gzip.py" -> memoryview
	"test_async.py" -> "app.route"
	"dataclasses.py" -> hasattr
	"parse.py" -> "url.lstrip"
	"weakref.py" -> set
	"ipaddress.py" -> isinstance
	"string.py" -> "self.pattern.sub"
	"__init__.py" -> iter
	"test_basic.py" -> "client.open"
	"datetime.py" -> join
	"traceback.py" -> str
	"csv.py" -> "delims.get"
	"inspect.py" -> "l.encode"
	"tarfile.py" -> "s.find"
	"warnings.py" -> "self._module._filters_mutated"
	"tarfile.py" -> "parser.add_mutually_exclusive_group"
	"ssl.py" -> "sock.gettimeout"
	"ipaddress.py" -> "cls._compress_hextets"
	"types.py" -> meta
	"__init__.py" -> int
	"dis.py" -> format
	"helpers.py" -> "current_app.response_class"
	"provider.py" -> TypeError
	"zipfile.py" -> "self._close"
	"test_appctx.py" -> "app.errorhandler"
	"config.py" -> getattr
	"sessions.py" -> TaggedJSONSerializer
	"zipfile.py" -> "self._sanitize_windows_name"
	"ctx.py" -> "self.__class__"
	"platform.py" -> "_WIN32_CLIENT_RELEASES.get"
	"cli.py" -> "extra.pop"
	"testing.py" -> "self._new_contexts.pop"
	"views.py" -> "result.ready"
	"locale.py" -> "thousands_sep.join"
	"inspect.py" -> predicate
	"scaffold.py" -> _find_package_path
	"__init__.py" -> "cls._implied_dirs"
	"weakref.py" -> _atomic_removal
	"tarfile.py" -> AbsolutePathError
	"enum.py" -> "metacls.__new__"
	"test_basic.py" -> "flask.Blueprint"
	"zipfile.py" -> "self._decompressor.flush"
	"views.py" -> Blueprint
	"test_user_error_handler.py" -> ChildExceptionUnregistered
	"test_cli.py" -> "app.test_cli_runner"
	"subprocess.py" -> "_winapi.DuplicateHandle"
	"sessions.py" -> "response.vary.add"
	"argparse.py" -> "parser._get_formatter"
	"shlex.py" -> "self.instream.read"
	"zipfile.py" -> "compressor_names.get"
	"test_appctx.py" -> "flask.current_app._get_current_object"
	"fractions.py" -> fallback_operator
	"subprocess.py" -> "self._execute_child"
	"tokenize.py" -> "_itertools.repeat"
	"dataclasses.py" -> is_type_predicate
	"plistlib.py" -> "self.stack.append"
	"app.py" -> handler
	"test_reqctx.py" -> "test_client.get"
	"__init__.py" -> "self.data.index"
	"subprocess.py" -> _WIFSTOPPED
	"debughelpers.py" -> "app.logger.info"
	"blueprints.py" -> "self.add_app_template_test"
	"blueprints.py" -> AppGroup
	"argparse.py" -> "option_string.split"
	"blueprints.py" -> "s.app.url_value_preprocessors.setdefault"
	"dataclasses.py" -> "repr_running.add"
	"ipaddress.py" -> "self._ip_int_from_string"
	"subprocess.py" -> memoryview
	"zipfile.py" -> "self.__repr.format"
	"__init__.py" -> "self.error"
	"app.py" -> "self.add_template_filter"
	"testing.py" -> "self._context_stack.enter_context"
	"typing_extensions.py" -> "nm_tpl.__init_subclass__"
	"typing.py" -> func
	"copyreg.py" -> "name.endswith"
	"platform.py" -> "output.decode"
	"subprocess.py" -> "self._close_pipe_fds"
	"getopt.py" -> list
	"debughelpers.py" -> enumerate
	"threading.py" -> "self._acquire_restore"
	"provider.py" -> "self._app.response_class"
	"sync.py" -> "self.main_event_loop.is_running"
	"plistlib.py" -> "values.append"
	"ssl.py" -> decode
	"cli.py" -> import_string
	"__init__.py" -> str
	"platform.py" -> max
	"inspect.py" -> callable
	"conf.py" -> "words.strip"
	"tempfile.py" -> "dirlist.append"
	"__init__.py" -> "_aliases.get"
	"__init__.py" -> "celery_app.set_default"
	"test_helpers.py" -> "flask.Flask"
	"ssl.py" -> "pem_cert_string.strip"
	"platform.py" -> TypeError
	"argparse.py" -> _MutuallyExclusiveGroup
	"typing_extensions.py" -> "type.__new__"
	"__init__.py" -> "s.opengroup"
	"sessions.py" -> "self.get_cookie_secure"
	"functools.py" -> "self.keywords.items"
	"typing.py" -> "new_args.extend"
	"tempfile.py" -> getattr
	"ast.py" -> super
	"enum.py" -> "name.lower"
	"blog.py" -> get_post
	"cli.py" -> app_factory
	"inspect.py" -> "Signature.from_callable"
	"__init__.py" -> relative_to
	"tarfile.py" -> "group.add_argument"
	"globals.py" -> LocalProxy
	"pathlib.py" -> type
	"tarfile.py" -> "structs.append"
	"cli.py" -> attr
	"enum.py" -> enumerate
	"test_basic.py" -> "pytest.mark.skipif"
	"socket.py" -> list
	"app.py" -> "cli.load_dotenv"
	"csv.py" -> "self.writerow"
	"test_templating.py" -> "app.template_global"
	"subprocess.py" -> "buffer.append"
	"typing.py" -> "self._make_substitution"
	"cli.py" -> is_running_from_reloader
	"__init__.py" -> _tuple
	"tempfile.py" -> "self._file.isatty"
	"copy.py" -> id
	"random.py" -> _accumulate
	"selectors.py" -> "self._select"
	"linecache.py" -> endswith
	"__init__.py" -> "self.converter"
	"conftest.py" -> "mp.setenv"
	"argparse.py" -> "self.format_usage"
	"inspect.py" -> enumerate
	"threading.py" -> "self._exit"
	"traceback.py" -> "exc.format_exception_only"
	"tarfile.py" -> LinkOutsideDestinationError
	"app.py" -> "self.make_default_options_response"
	"functools.py" -> "format_string.format"
	"typing_extensions.py" -> "parameters.append"
	"argparse.py" -> "optionals.append"
	"__init__.py" -> celery_init_app
	"test_helpers.py" -> "MyView.as_view"
	"auth.py" -> view
	"templating.py" -> _stream
	"gzip.py" -> "sys.exit"
	"zipfile.py" -> "self._fileobj.write"
	"testing.py" -> invoke
	"helpers.py" -> next
	"argparse.py" -> vars
	"sessions.py" -> "self.get_cookie_partitioned"
	"inspect.py" -> "framelist.append"
	"typing.py" -> AttributeError
	"ssl.py" -> "hostname.partition"
	"rlcompleter.py" -> eval
	"locale.py" -> "k.replace"
	"tarfile.py" -> "member.islnk"
	"textwrap.py" -> "self._handle_long_word"
	"threading.py" -> "_limbo.clear"
	"tarfile.py" -> "self._create_pax_generic_header"
	"uuid.py" -> _generate_time_safe
	"__init__.py" -> "self.data.isprintable"
	"socket.py" -> len
	"test_cli.py" -> "monkeypatch.setenv"
	"enum.py" -> etype
	"statistics.py" -> repeat
	"zipfile.py" -> "fp.close"
	"__init__.py" -> "self.createLock"
	"statistics.py" -> "root.next_plus"
	"tarfile.py" -> "time.time"
	"types.py" -> TypeError
	"typing_extensions.py" -> "optional_keys.update"
	"pathlib.py" -> "parsed.append"
	"typing_extensions.py" -> original_new
	"test_cli.py" -> "monkeypatch._setitem.append"
	"subprocess.py" -> "to_close.append"
	"zipfile.py" -> "self._fileobj.tell"
	"test_templating.py" -> "called.append"
	"selectors.py" -> SelectorKey
	"views.py" -> "methods.add"
	"contextlib.py" -> "self.thing.close"
	"glob.py" -> "itertools.chain"
	"operator.py" -> "args.extend"
	"_strptime.py" -> cls
	"gzip.py" -> "decompressed_members.append"
	"ast.py" -> "attr.startswith"
	"__init__.py" -> "self.zip_children"
	"random.py" -> "self.sample"
	"subprocess.py" -> "warnopts.remove"
	"test_basic.py" -> TypeError
	"inspect.py" -> Parameter
	"zipfile.py" -> hasattr
	"shutil.py" -> open
	"test_json.py" -> "flask.json.load"
	"ssl.py" -> endswith
	"typing.py" -> "all_params.remove"
	"tarfile.py" -> "next._apply_pax_info"
	"__init__.py" -> "self.acquire"
	"weakref.py" -> bool
	"platform.py" -> "cls.__new__"
	"pathlib.py" -> "self.casefold"
	"dataclasses.py" -> "itertools.filterfalse"
	"ssl.py" -> title
	"ctx.py" -> "ctx.app.ensure_sync"
	"getopt.py" -> "opt.index"
	"zipfile.py" -> "fname.decode"
	"test_appctx.py" -> Exception
	"gzip.py" -> "self._write_gzip_header"
	"datetime.py" -> "self._name_from_offset"
	"typing.py" -> "t.copy_with"
	"_strptime.py" -> TimeRE
	"__init__.py" -> "_lock._at_fork_reinit"
	"dis.py" -> "lines.append"
	"test_testing.py" -> "pytest.raises"
	"argparse.py" -> "self._dedent"
	"hashlib.py" -> new
	"platform.py" -> getattr
	"argparse.py" -> "parser._print_message"
	"feedparser.py" -> "self._cur.get_content_maintype"
	"functools.py" -> "self._make_unbound_method"
	"subprocess.py" -> "env_list.append"
	"enum.py" -> "failed.append"
	"test_signals.py" -> "flask.request_finished.disconnect"
	"pathlib.py" -> successor_select
	"sync.py" -> isinstance
	"_strptime.py" -> "self.__calc_weekday"
	"wrappers.py" -> on_json_loading_failed
	"test_blueprints.py" -> test_request_context
	"argparse.py" -> "nargs_errors.get"
	"_strptime.py" -> "base.__init__"
	"sync.py" -> "SyncToAsync.thread_sensitive_context.reset"
	"typing.py" -> "optional_keys.add"
	"ipaddress.py" -> "other.subnet_of"
	"feedparser.py" -> "self._input.push_eof_matcher"
	"plistlib.py" -> P
	"__init__.py" -> always_iterable
	"functools.py" -> dict
	"app.py" -> "rv.headers.update"
	"zipfile.py" -> "path.at.rstrip"
	"cli.py" -> locate_app
	"tarfile.py" -> "dst.write"
	"tarfile.py" -> "pwd.getpwuid"
	"argparse.py" -> dict
	"test_basic.py" -> MyException
	"test_basic.py" -> "app.route"
	"argparse.py" -> "self._get_optional_kwargs"
	"typing.py" -> "attr.startswith"
	"hashlib.py" -> "icpy.update"
	"tarfile.py" -> "self.name.encode"
	"blog.py" -> get_db
	"test_reqctx.py" -> Exception
	"__init__.py" -> float
	"feedparser.py" -> ateof
	"test_basic.py" -> "rv.headers.get_all"
	"uuid.py" -> "self.int.to_bytes"
	"traceback.py" -> sorted
	"statistics.py" -> ValueError
	"rlcompleter.py" -> set
	"zipfile.py" -> "self.__class__"
	"app.py" -> "context.update"
	"gzip.py" -> "self._add_read_data"
	"testing.py" -> "self._update_cookies_from_response"
	"inspect.py" -> ClassFoundException
	"test_json.py" -> "client.get"
	"pathlib.py" -> lstrip
	"test_async.py" -> "test_client.post"
	"test_appctx.py" -> "app.route"
	"functools.py" -> map
	"argparse.py" -> "self._registries.setdefault"
	"parse.py" -> "_portprog.fullmatch"
	"functools.py" -> next
	"plistlib.py" -> "self.file.write"
	"enum.py" -> "classdict.pop"
	"shlex.py" -> "self.sourcehook"
	"__init__.py" -> "zf.namelist"
	"argparse.py" -> "arg_string.split"
	"datetime.py" -> range
	"argparse.py" -> map
	"conf.py" -> "text.endswith"
	"cli.py" -> "_app_option.handle_parse_result"
	"pathlib.py" -> "self._pathcls._from_parsed_parts"
	"__init__.py" -> "self.filters.append"
	"sessions.py" -> bool
	"calendar.py" -> encode
	"reprlib.py" -> user_function
	"subprocess.py" -> "selector.get_map"
	"argparse.py" -> "action.container._remove_action"
	"ast.py" -> "self._write_docstring_and_traverse_body"
	"random.py" -> to_bytes
	"shutil.py" -> "sys.exc_info"
	"subprocess.py" -> bytes
	"selectors.py" -> ValueError
	"inspect.py" -> formatvarkw
	"reprlib.py" -> Repr
	"copyreg.py" -> "cls.__dict__.get"
	"enum.py" -> isdigit
	"traceback.py" -> StackSummary
	"__init__.py" -> "self.locate_file"
	"traceback.py" -> "self._line.strip"
	"functools.py" -> classmethod
	"_strptime.py" -> TypeError
	"logging.py" -> "default_handler.setFormatter"
	"warnings.py" -> len
	"test_helpers.py" -> "monkeypatch.setenv"
	"testing.py" -> dict
	"cli.py" -> get_command
	"csv.py" -> "metaFrequency.get"
	"sync.py" -> callable
	"_strptime.py" -> LocaleTime
	"threading.py" -> "lock.locked"
	"test_blueprints.py" -> join
	"typing_extensions.py" -> _AnnotatedAlias
	"inspect.py" -> "line.expandtabs"
	"shutil.py" -> hasattr
	"test_blueprints.py" -> MyDecoratorException
	"gzip.py" -> id
	"__init__.py" -> "self.data.lstrip"
	"app.py" -> "self.teardown_appcontext_funcs.append"
	"__init__.py" -> "self.stream.flush"
	"warnings.py" -> "registry.get"
	"feedparser.py" -> len
	"fractions.py" -> "self.from_float"
	"warnings.py" -> "file.write"
	"dataclasses.py" -> zip
	"__init__.py" -> "path.locate"
	"gzip.py" -> "fileobj.write"
	"test_reqctx.py" -> "app.route"
	"hashlib.py" -> ValueError
	"argparse.py" -> "parser.print_help"
	"parse.py" -> bytes
	"platform.py" -> "match.groups"
	"app.py" -> send_from_directory
	"subprocess.py" -> RuntimeError
	"datetime.py" -> "other.replace"
	"tarfile.py" -> "source.seek"
	"ssl.py" -> "view.cast"
	"reprlib.py" -> hasattr
	"templating.py" -> "_cv_request.get"
	"plistlib.py" -> "self._read_object"
	"shutil.py" -> "formats.sort"
	"argparse.py" -> "self._group_actions.append"
	"app.py" -> "self.make_config"
	"warnings.py" -> int
	"threading.py" -> "self.finished.is_set"
	"typing_extensions.py" -> _ExtensionsSpecialForm
	"inspect.py" -> "self.arguments.items"
	"copyreg.py" -> getstate
	"ssl.py" -> server_name_callback
	"weakref.py" -> "self._commit_removals"
	"test_reqctx.py" -> index
	"__init__.py" -> sorted
	"enum.py" -> "base.__dict__.get"
	"fnmatch.py" -> join
	"__init__.py" -> "self.data.rfind"
	"bz2.py" -> TypeError
	"datetime.py" -> converter
	"dataclasses.py" -> tuple
	"test_blueprints.py" -> "bp.app_template_global"
	"__init__.py" -> "self.data.center"
	"threading.py" -> predicate
	"platform.py" -> format
	"inspect.py" -> "unbound_names.add"
	"tarfile.py" -> "t.append"
	"traceback.py" -> func
	"code.py" -> "sys.excepthook"
	"ipaddress.py" -> "IPv4Address.__init__"
	"uuid.py" -> "keywords.index"
	"string.py" -> super
	"platform.py" -> "sys.platform.startswith"
	"test_user_error_handler.py" -> Forbidden
	"typing_extensions.py" -> super
	"calendar.py" -> min
	"threading.py" -> "waiter.release"
	"calendar.py" -> f
	"pathlib.py" -> "p.stat"
	"tarfile.py" -> "self.name.endswith"
	"statistics.py" -> isinstance
	"csv.py" -> min
	"dataclasses.py" -> "ns.get"
	"test_basic.py" -> "app.post"
	"__init__.py" -> "_compile_repl.cache_clear"
	"bz2.py" -> hasattr
	"enum.py" -> "value.bit_length"
	"app.py" -> "self.shell_context_processors.append"
	"typing.py" -> "attr.endswith"
	"hashlib.py" -> <unknown_function>
	"testing.py" -> rstrip
	"dis.py" -> "self.opname.ljust"
	"cli.py" -> "sys.path.insert"
	"test_views.py" -> "pytest.raises"
	"inspect.py" -> "doc.expandtabs"
	"__init__.py" -> PackageNotFoundError
	"zipfile.py" -> "itertools.filterfalse"
	"typing.py" -> "params.extend"
	"typing_extensions.py" -> type
	"reprlib.py" -> "repr_running.add"
	"tokenize.py" -> replace
	"flask.py" -> Flask
	"ipaddress.py" -> "self.subnets"
	"test_blog.py" -> "auth.login"
	"socket.py" -> "C.startswith"
	"selectors.py" -> isinstance
	"testing.py" -> "text_input.readline"
	"__init__.py" -> "FastLookup.make"
	"__init__.py" -> "root.warning"
	"operator.py" -> "a.__index__"
	"plistlib.py" -> "_controlCharPat.search"
	"shutil.py" -> copy_function
	"enum.py" -> "self.fdel"
	"enum.py" -> "simple_value.replace"
	"test_blueprints.py" -> "errors.app_errorhandler"
	"statistics.py" -> "plus.as_integer_ratio"
	"lzma.py" -> "self._buffer.read"
	"__init__.py" -> "self._name_from_stem"
	"textwrap.py" -> join
	"__init__.py" -> "self.formatStack"
	"random.py" -> "self.getstate"
	"ssl.py" -> "self._sslobj.compression"
	"ctx.py" -> "appcontext_popped.send"
	"ast.py" -> compile
	"datetime.py" -> "_time.localtime"
	"csv.py" -> "self._validate"
	"enum.py" -> "enumeration.__members__.items"
	"app.py" -> "self.json_provider_class"
	"shutil.py" -> "ignored_names.extend"
	"app.py" -> "self.response_class.force_type"
	"hashlib.py" -> isinstance
	"functools.py" -> setattr
	"argparse.py" -> "parser.parse_known_args"
	"shlex.py" -> len
	"argparse.py" -> range
	"weakref.py" -> "self.copy"
	"pathlib.py" -> TypeError
	"__init__.py" -> wr
	"app.py" -> "self.make_aborter"
	"zipfile.py" -> "filename.find"
	"datetime.py" -> _IsoCalendarDate
	"ssl.py" -> "self.settimeout"
	"textwrap.py" -> strip
	"ast.py" -> "possible_quotes.sort"
	"types.py" -> "self.fset"
	"argparse.py" -> setattr
	"typing.py" -> TypeVar
	"ipaddress.py" -> "int.from_bytes"
	"tarfile.py" -> "self._getmember"
	"threading.py" -> _count
	"test_testing.py" -> "bp.route"
	"typing_extensions.py" -> "type.__subclasscheck__"
	"enum.py" -> "failed_member.append"
	"linecache.py" -> <unknown_function>
	"_strptime.py" -> _thread_allocate_lock
	"ssl.py" -> ValueError
	"plistlib.py" -> "value.encode"
	"tempfile.py" -> "_sys.audit"
	"typing_extensions.py" -> object
	"test_templating.py" -> "client.get"
	"__init__.py" -> "self.isEnabledFor"
	"tempfile.py" -> "self._file.seek"
	"__init__.py" -> "admin.route"
	"test_blueprints.py" -> "app.errorhandler"
	"rlcompleter.py" -> getattr
	"feedparser.py" -> "self._partial.readlines"
	"selectors.py" -> "self._writers.discard"
	"functools.py" -> "kwds.items"
	"warnings.py" -> reversed
	"_strptime.py" -> "self.__calc_month"
	"dataclasses.py" -> "repr_running.discard"
	"test_basic.py" -> "app.register_blueprint"
	"test_helpers.py" -> get_debug_flag
	"tag.py" -> "self.order.insert"
	"contextlib.py" -> "self.__exit__"
	"shlex.py" -> "dict.fromkeys"
	"functools.py" -> cache_get
	"app.py" -> len
	"fractions.py" -> _index
	"feedparser.py" -> reversed
	"threading.py" -> "self._tstate_lock.acquire"
	"traceback.py" -> type
	"ssl.py" -> "dn.lower"
	"sync.py" -> RuntimeError
	"app.py" -> "self.add_url_rule"
	"subprocess.py" -> count
	"datetime.py" -> getattr
	"locale.py" -> "groups.reverse"
	"tarfile.py" -> "regex.match"
	"test_cli.py" -> "app_runner.invoke"
	"cli.py" -> FlaskGroup
	"parse.py" -> "self._encoded_counterpart"
	"random.py" -> map
	"plistlib.py" -> "result.extend"
	"statistics.py" -> enumerate
	"typing.py" -> "annotations.update"
	"__init__.py" -> "stream.close"
	"cli.py" -> "e.format_message"
	"ast.py" -> hasattr
	"zipfile.py" -> min
	"helpers.py" -> "kwargs.update"
	"__init__.py" -> "self.data.sort"
	"platform.py" -> OSError
	"typing_extensions.py" -> "default_names.append"
	"typing_extensions.py" -> _LiteralForm
	"__init__.py" -> "_bootstrap._gcd_import"
	"inspect.py" -> frozenset
	"test_request.py" -> "app.app_context"
	"enum.py" -> "enum_class._member_map_.items"
	"sync.py" -> "loop.close"
	"parse.py" -> _coerce_result
	"__init__.py" -> FileHandler
	"__init__.py" -> EntryPoints
	"tempfile.py" -> "self._file.__iter__"
	"tarfile.py" -> "self._init_read_gz"
	"app.py" -> int
	"traceback.py" -> "code.co_positions"
	"parse.py" -> "r.append"
	"copy.py" -> setattr
	"sessions.py" -> setdefault
	"cli.py" -> list_commands
	"helpers.py" -> iter
	"conftest.py" -> old_get_loader
	"config.py" -> "self.items"
	"code.py" -> "self.showsyntaxerror"
	"tag.py" -> http_date
	"zipfile.py" -> "zinfo.is_dir"
	"__init__.py" -> "_parser.expand_template"
	"__init__.py" -> Prepared
	"socket.py" -> "lsock.getsockname"
	"tarfile.py" -> "self._apply_pax_info"
	"platform.py" -> print
	"locale.py" -> replace
	"argparse.py" -> "self._format_args"
	"__init__.py" -> super
	"ssl.py" -> "pem_cert_string.startswith"
	"threading.py" -> "_shutdown_locks.clear"
	"zipfile.py" -> "zf.printdir"
	"helpers.py" -> "current_app.make_response"
	"_strptime.py" -> "_regex_cache.get"
	"weakref.py" -> "itertools.count"
	"pathlib.py" -> "self.__class__"
	"tokenize.py" -> list
	"enum.py" -> "self.__class__.mro"
	"ipaddress.py" -> map
	"tarfile.py" -> callable
	"ipaddress.py" -> next
	"__init__.py" -> "self._make"
	"sessions.py" -> "response.delete_cookie"
	"socket.py" -> file_read
	"subprocess.py" -> "pwd.getpwnam"
	"zipfile.py" -> "self._compressor.compress"
	"subprocess.py" -> "self.stdin.write"
	"argparse.py" -> "text.splitlines"
	"socket.py" -> "exceptions.append"
	"zipfile.py" -> "self.is_dir"
	"db.py" -> "db.close"
	"typing.py" -> hasattr
	"tempfile.py" -> output_type
	"dis.py" -> isinstance
	"ssl.py" -> isinstance
	"inspect.py" -> "result.append"
	"enum.py" -> "members.keys"
	"__init__.py" -> "record.getMessage"
	"__init__.py" -> type
	"ast.py" -> "self.__class__"
	"__init__.py" -> "self.data.join"
	"argparse.py" -> "self._get_args"
	"sync.py" -> iscoroutinefunction
	"weakref.py" -> "info.func"
	"test_blueprints.py" -> "backend.errorhandler"
	"__init__.py" -> "new.update"
	"subprocess.py" -> "self.wait"
	"blog.py" -> flash
	"tokenize.py" -> "self.add_whitespace"
	"app.py" -> "self.ensure_sync"
	"enum.py" -> "sys._getframe"
	"conftest.py" -> "monkeypatch.setattr"
	"_strptime.py" -> "_TimeRE_cache.compile"
	"argparse.py" -> action
	"subprocess.py" -> "self.stdout.read"
	"parse.py" -> frozenset
	"tarfile.py" -> "members.index"
	"ast.py" -> "self._write_fstring_inner"
	"contextlib.py" -> "self._create_async_exit_wrapper"
	"inspect.py" -> "file.startswith"
	"tokenize.py" -> len
	"test_reqctx.py" -> "test_client.post"
	"textwrap.py" -> "margin.startswith"
	"base64.py" -> decoded_append
	"glob.py" -> isinstance
	"test_js_example.py" -> "template_rendered.connected_to"
	"tokenize.py" -> "out.encode"
	"dis.py" -> "COMPILER_FLAG_NAMES.get"
	"test_user_error_handler.py" -> "app.register_error_handler"
	"contextlib.py" -> "self._old_cwd.append"
	"socket.py" -> os_sendfile
	"__init__.py" -> "mod.__name__.split"
	"shutil.py" -> min
	"parser.py" -> "self.parser.parse"
	"tarfile.py" -> "self.read"
	"tarfile.py" -> "self._check"
	"socket.py" -> "sys.platform.lower"
	"views.py" -> "bp.post"
	"tempfile.py" -> "self.close"
	"zipfile.py" -> "group.add_argument"
	"templating.py" -> "self._get_source_explained"
	"linecache.py" -> "cache.pop"
	"ast.py" -> "self.set_precedence"
	"__init__.py" -> object
	"typing.py" -> "self.copy_with"
	"test_user_error_handler.py" -> "self.Custom"
	"gzip.py" -> "self._fp.read"
	"cli.py" -> group
	"__init__.py" -> partition
	"fnmatch.py" -> range
	"test_testing.py" -> "eb.input_stream.read"
	"enum.py" -> "cls._get_mixins_"
	"functools.py" -> items
	"threading.py" -> "self._lock.release"
	"sessions.py" -> "app.permanent_session_lifetime.total_seconds"
	"typing.py" -> "self.__class__"
	"zipfile.py" -> "self._file.read"
	"argparse.py" -> items
	"datetime.py" -> "sys.platform.startswith"
	"code.py" -> input
	"functools.py" -> "registry.get"
	"ast.py" -> "self.items_view"
	"warnings.py" -> lower
	"test_blueprints.py" -> "flask.url_for"
	"tag.py" -> "self.to_json"
	"calendar.py" -> repeat
	"ssl.py" -> callback
	"tokenize.py" -> TokenInfo
	"__init__.py" -> _tuplegetter
	"fractions.py" -> cls
	"app.py" -> reversed
	"wrappers.py" -> _load_form_data
	"__init__.py" -> "self.data.removesuffix"
	"feedparser.py" -> lower
	"typing_extensions.py" -> values
	"random.py" -> range
	"__init__.py" -> "current_app.json.dump"
	"functools.py" -> iter
	"pathlib.py" -> NotImplementedError
	"test_cli.py" -> "app.register_blueprint"
	"ctx.py" -> "session_interface.make_null_session"
	"test_converters.py" -> "value.split"
	"calendar.py" -> "self.monthdayscalendar"
	"argparse.py" -> iter
	"bz2.py" -> "comp.compress"
	"zipfile.py" -> FileNotFoundError
	"selectors.py" -> RuntimeError
	"test_user_error_handler.py" -> ChildExceptionRegistered
	"argparse.py" -> "action_tuples.append"
	"__init__.py" -> "_strip_tags_re.sub"
	"fnmatch.py" -> "pat.find"
	"argparse.py" -> "self._parse_optional"
	"dataclasses.py" -> ValueError
	"ipaddress.py" -> "cls._prefix_from_ip_string"
	"py_compile.py" -> PyCompileError
	"enum.py" -> dir
	"subprocess.py" -> "self._get_handles"
	"functools.py" -> "cache.get"
	"test_basic.py" -> parse_date
	"argparse.py" -> "line.append"
	"zipfile.py" -> "zf.extractall"
	"locale.py" -> list
	"plistlib.py" -> "_DumbXMLWriter.__init__"
	"cli.py" -> list
	"test_templating.py" -> "flask.render_template_string"
	"sync.py" -> "context.get"
	"cli.py" -> "self.path_type"
	"dis.py" -> enumerate
	"socket.py" -> "self.getpeername"
	"tempfile.py" -> "newfile.seek"
	"typing.py" -> "res.append"
	"datetime.py" -> "timezone._create"
	"test_basic.py" -> "app.url_map.add"
	"__init__.py" -> "fp.read"
	"traceback.py" -> "queue.pop"
	"blueprints.py" -> "s.app.template_context_processors.setdefault"
	"enum.py" -> replace
	"config.py" -> load
	"zipfile.py" -> "self.filename.encode"
	"traceback.py" -> "queue.extend"
	"hashlib.py" -> "outer.update"
	"textwrap.py" -> "text.expandtabs"
	"inspect.py" -> "sys.getrecursionlimit"
	"ctx.py" -> "_cv_request.set"
	"tarfile.py" -> bytes
	"testing.py" -> bool
	"tag.py" -> isinstance
	"fractions.py" -> "f.as_integer_ratio"
	"ipaddress.py" -> range
	"subprocess.py" -> "time.sleep"
	"__init__.py" -> "self.callHandlers"
	"copy.py" -> len
	"app.py" -> chain
	"typing.py" -> "self.__subclasscheck__"
	"pathlib.py" -> format
	"selectors.py" -> "self._selector.unregister"
	"__init__.py" -> "self.flush"
	"calendar.py" -> TextCalendar
	"parse.py" -> "url.rfind"
	"gzip.py" -> _GzipReader
	"test_blueprints.py" -> "app.route"
	"typing.py" -> "hints.items"
	"test_config.py" -> isinstance
	"testing.py" -> "sys.stdout.write"
	"shutil.py" -> endswith
	"typing_extensions.py" -> "object.__hash__"
	"contextlib.py" -> <unknown_function>
	"__init__.py" -> "self._log"
	"pathlib.py" -> _PosixFlavour
	"test_helpers.py" -> "flask.Response"
	"argparse.py" -> "self.error"
	"tempfile.py" -> "self._file.readline"
	"blueprints.py" -> "self.view_functions.items"
	"selectors.py" -> "self._selector.control"
	"typing_extensions.py" -> TypeError
	"tempfile.py" -> "self._file.detach"
	"pathlib.py" -> "yielded.add"
	"typing.py" -> "name.rpartition"
	"test_blueprints.py" -> Rule
	"__init__.py" -> "self.data.isascii"
	"test_testing.py" -> "client.session_transaction"
	"testing.py" -> "cli.main"
	"code.py" -> "sys.stderr.write"
	"enum.py" -> delattr
	"tarfile.py" -> "self.tarinfo.create_pax_global_header"
	"test_blog.py" -> "pytest.mark.parametrize"
	"hashlib.py" -> globals
	"csv.py" -> ValueError
	"argparse.py" -> str
	"test_signals.py" -> "flask.appcontext_pushed.disconnect"
	"__init__.py" -> "state.copy"
	"test_basic.py" -> "bp.route"
	"test_blueprints.py" -> "frontend.route"
	"test_subclassing.py" -> Exception
	"ast.py" -> "c.encode"
	"base64.py" -> "bytes.maketrans"
	"traceback.py" -> "str.encode"
	"traceback.py" -> "frame_summary.line.strip"
	"inspect.py" -> Attribute
	"test_async.py" -> "pytest.mark.parametrize"
	"dataclasses.py" -> "cls_annotations.items"
	"test_testing.py" -> "client.get"
	"sessions.py" -> "self.null_session_class"
	"weakref.py" -> "ref.__eq__"
	"__init__.py" -> "sio.write"
	"tarfile.py" -> TruncatedHeaderError
	"__init__.py" -> "logger._cache.clear"
	"__init__.py" -> append
	"test_views.py" -> "Index1.as_view"
	"ast.py" -> "self.require_parens"
	"selectors.py" -> "self._writers.add"
	"subprocess.py" -> "self._try_wait"
	"tag.py" -> callable
	"auth.py" -> flash
	"test_blueprints.py" -> "sideend.route"
	"copyreg.py" -> int
	"typing.py" -> "base.__dict__.keys"
	"tokenize.py" -> "sys.stderr.write"
	"dataclasses.py" -> isinstance
	"test_basic.py" -> NotFound
	"test_session_interface.py" -> "app.test_client"
	"hashlib.py" -> "ocpy.update"
	"zipfile.py" -> "self._write_end_record"
	"sync.py" -> "loop.call_exception_handler"
	"base64.py" -> TypeError
	"platform.py" -> "_platform_cache.get"
	"operator.py" -> hasattr
	"__init__.py" -> cls
	"__init__.py" -> "self.data.rjust"
	"__init__.py" -> "h.acquire"
	"__init__.py" -> "logger.warning"
	"__init__.py" -> _dict
	"parse.py" -> replace
	"typing.py" -> "attrs.add"
	"test_templating.py" -> "app.template_test"
	"ast.py" -> f
	"test_blog.py" -> "client.get"
	"zipfile.py" -> "self.exists"
	"tarfile.py" -> EmptyHeaderError
	"reprlib.py" -> "repr_running.discard"
	"platform.py" -> filter
	"statistics.py" -> "counts.items"
	"typing_extensions.py" -> "f_globals.get"
	"subprocess.py" -> "__all__.extend"
	"traceback.py" -> TypeError
	"pathlib.py" -> "flavour.compile_pattern"
	"code.py" -> "self.write"
	"test_testing.py" -> "app.test_client"
	"uuid.py" -> hasattr
	"parse.py" -> UnicodeError
	"dis.py" -> RuntimeError
	"subprocess.py" -> "c2pread.Detach"
	"test_appctx.py" -> "called.append"
	"glob.py" -> bytes
	"feedparser.py" -> "self._partial.write"
	"views.py" -> "tasks.process.delay"
	"__init__.py" -> "self.field_spec.match"
	"test_js_example.py" -> "response.get_json"
	"cli.py" -> <unknown_function>
	"__init__.py" -> "self.most_common"
	"zipfile.py" -> LZMACompressor
	"enum.py" -> list
	"linecache.py" -> "fp.readlines"
	"test_helpers.py" -> "app.open_resource"
	"traceback.py" -> "sys.exc_info"
	"templating.py" -> "app.jinja_env.get_or_select_template"
	"zipfile.py" -> "self.open"
	"csv.py" -> "self.writer.writerow"
	"statistics.py" -> groupby
	"weakref.py" -> KeyError
	"socket.py" -> "lsock.close"
	"_strptime.py" -> weekday
	"shutil.py" -> "entry.is_dir"
	"string.py" -> "self.check_unused_args"
	"test_signals.py" -> "app.test_client"
	"conf.py" -> ProjectLink
	"inspect.py" -> "global_ns.get"
	"rlcompleter.py" -> "words.add"
	"threading.py" -> "self._enter"
	"socket.py" -> "selector.register"
	"calendar.py" -> isinstance
	"test_reqctx.py" -> SessionError
	"traceback.py" -> hasattr
	"contextlib.py" -> "self._push_cm_exit"
	"typing.py" -> issubclass
	"pathlib.py" -> "self._split_extended_path"
	"plistlib.py" -> "value.items"
	"config.py" -> open
	"ast.py" -> tuple
	"testing.py" -> "self.get_default_prog_name"
	"threading.py" -> "self.wait"
	"inspect.py" -> list
	"zipfile.py" -> "fpin.seek"
	"__init__.py" -> "name.isidentifier"
	"operator.py" -> "attr.split"
	"ssl.py" -> "self.do_handshake"
	"typing.py" -> min
	"argparse.py" -> conflict_handler
	"__init__.py" -> "self.data.isspace"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self._readbuffer.find"
	"warnings.py" -> join
	"feedparser.py" -> "self._cur.defects.append"
	"warnings.py" -> WarningMessage
	"base64.py" -> "s.upper"
	"__init__.py" -> resolve
	"locale.py" -> "formatted.split"
	"test_async.py" -> "app.test_client"
	"argparse.py" -> "parts.extend"
	"typing.py" -> zip
	"__init__.py" -> "base.rpartition"
	"inspect.py" -> stop
	"zipfile.py" -> "strm.read"
	"app.py" -> "server_name.partition"
	"codeop.py" -> repr
	"tokenize.py" -> "self.compat"
	"calendar.py" -> property
	"typing.py" -> _GenericAlias
	"zipfile.py" -> "endrec.append"
	"test_config.py" -> Flask
	"test_cli.py" -> "request.addfinalizer"
	"copyreg.py" -> "object.__new__"
	"statistics.py" -> "self.inv_cdf"
	"helpers.py" -> "loader.get_filename"
	"tarfile.py" -> "s.strip"
	"tarfile.py" -> "self._proc_gnusparse_01"
	"inspect.py" -> "wrapped_sig.bind_partial"
	"plistlib.py" -> OverflowError
	"__init__.py" -> TypeError
	"auth.py" -> generate_password_hash
	"functools.py" -> mycmp
	"locale.py" -> "localename.lower"
	"test_basic.py" -> "recwarn.pop"
	"tarfile.py" -> "self.makelink"
	"views.py" -> frozenset
	"inspect.py" -> len
	"argparse.py" -> "self._negative_number_matcher.match"
	"test_views.py" -> common_test
	"dataclasses.py" -> _KW_ONLY_TYPE
	"pathlib.py" -> hash
	"typing.py" -> "params.index"
	"ipaddress.py" -> "m.groups"
	"__init__.py" -> "self.values"
	"__init__.py" -> "_at_fork_reinit_lock_weakset.add"
	"weakref.py" -> "self._pending_removals.append"
	"typing.py" -> tuple
	"enum.py" -> split
	"ipaddress.py" -> iter
	"gzip.py" -> int
	"__init__.py" -> "self.process"
	"lzma.py" -> "self._buffer.peek"
	"shlex.py" -> "self.wordchars.maketrans"
	"inspect.py" -> "kwo_params.values"
	"blueprints.py" -> func
	"inspect.py" -> "itertools.islice"
	"__init__.py" -> "self.escape"
	"subprocess.py" -> "self._on_error_fd_closer"
	"feedparser.py" -> "self._factory"
	"tokenize.py" -> lower
	"pathlib.py" -> "part.find"
	"ipaddress.py" -> int
	"app.py" -> "self.wsgi_app"
	"__init__.py" -> iterencode
	"ast.py" -> "lines.append"
	"rlcompleter.py" -> "self.global_matches"
	"socket.py" -> "addrlist.append"
	"reprlib.py" -> "self.repr1"
	"dis.py" -> "co.co_positions"
	"typing_extensions.py" -> "name.rpartition"
	"__init__.py" -> "pattern.finditer"
	"typing.py" -> "ns.get"
	"app.py" -> "self.handle_exception"
	"typing_extensions.py" -> "Buffer.register"
	"test_basic.py" -> "exc_info.value.get_description"
	"inspect.py" -> split
	"feedparser.py" -> "self._lines.extend"
	"calendar.py" -> "self.itermonthdays3"
	"test_basic.py" -> weak
	"threading.py" -> "self._cond.notify_all"
	"socket.py" -> "sock.listen"
	"__init__.py" -> "self._fmt.format"
	"__init__.py" -> "app.route"
	"ssl.py" -> msg_enum
	"config.py" -> import_string
	"subprocess.py" -> len
	"zipfile.py" -> ZipExtFile
	"tarfile.py" -> "pwd.getpwnam"
	"test_testing.py" -> hasattr
	"test_signals.py" -> "flask.request_started.disconnect"
	"plistlib.py" -> "self._write_size"
	"zipfile.py" -> "self.fp.flush"
	"rlcompleter.py" -> "matches.append"
	"subprocess.py" -> "stack.callback"
	"argparse.py" -> "action_conflicts.get"
	"ast.py" -> "self._write_docstring"
	"_strptime.py" -> "z.startswith"
	"functools.py" -> "typ.__subclasses__"
	"threading.py" -> "_limbo.values"
	"_strptime.py" -> isoweekday
	"getopt.py" -> range
	"__init__.py" -> "self.data.islower"
	"shutil.py" -> ValueError
	"cli.py" -> ScriptInfo
	"app.py" -> "self.url_map.add"
	"zipfile.py" -> isinstance
	"__init__.py" -> "f_globals.get"
	"cli.py" -> "rows.insert"
	"datetime.py" -> "self._mktime"
	"zipfile.py" -> memoryview
	"__init__.py" -> "path.at.rstrip"
	"ast.py" -> "self.get_raw_docstring"
	"cli.py" -> SeparatedPathType
	"enum.py" -> <unknown_function>
	"fractions.py" -> monomorphic_operator
	"ssl.py" -> "_PROTOCOL_NAMES.get"
	"__init__.py" -> parsestr
	"datetime.py" -> "self._to_microseconds"
	"test_blueprints.py" -> "pytest.raises"
	"subprocess.py" -> "_winapi.CloseHandle"
	"parse.py" -> len
	"__init__.py" -> "frontend.route"
	"test_js_example.py" -> "client.post"
	"app.py" -> "self.response_class"
	"test_testing.py" -> "rv.close"
	"locale.py" -> repr
	"subprocess.py" -> split
	"scaffold.py" -> issubclass
	"cli.py" -> super_convert
	"config.py" -> "mappings.update"
	"subprocess.py" -> int
	"tarfile.py" -> "targetpath.rstrip"
	"calendar.py" -> "sys.exit"
	"plistlib.py" -> encode
	"tarfile.py" -> "buf.split"
	"enum.py" -> "flag_mask.bit_length"
	"dis.py" -> "int.from_bytes"
	"threading.py" -> _CRLock
	"argparse.py" -> sorted
	"ipaddress.py" -> IPv6Interface
	"_strptime.py" -> "found_dict.get"
	"__init__.py" -> "sys.modules.get"
	"glob.py" -> "magic_check_bytes.sub"
	"ipaddress.py" -> "to_merge.pop"
	"scaffold.py" -> f
	"test_basic.py" -> "pytest.mark.parametrize"
	"ipaddress.py" -> str
	"glob.py" -> "magic_check_bytes.search"
	"ipaddress.py" -> AssertionError
	"ssl.py" -> "self.send"
	"datetime.py" -> "object.tzname"
	"subprocess.py" -> "stderr.fileno"
	"enum.py" -> "mcls._find_data_type_"
	"platform.py" -> "winreg.QueryValueEx"
	"__init__.py" -> "self.namelist"
	"conftest.py" -> "app.test_cli_runner"
	"socket.py" -> set
	"shutil.py" -> "ext.lower"
	"test_reqctx.py" -> FailingSessionInterface
	"shutil.py" -> "srcentry.is_dir"
	"sync.py" -> "event_loop.is_running"
	"subprocess.py" -> _WSTOPSIG
	"test_auth.py" -> "client.post"
	"pathlib.py" -> "pwd.getpwuid"
	"zipfile.py" -> "buffer.append"
	"__init__.py" -> "self.data.upper"
	"db.py" -> "app.cli.add_command"
	"__init__.py" -> "self._read_egg_info_reqs"
	"platform.py" -> "System.getProperty"
	"lzma.py" -> "builtins.open"
	"calendar.py" -> "self.formatyear"
	"fractions.py" -> op
	"__init__.py" -> "self.filters.remove"
	"test_blueprints.py" -> "answer_bp.route"
	"calendar.py" -> "TextCalendar.__init__"
	"__init__.py" -> "self.warning"
	"test_async.py" -> "app.add_url_rule"
	"warnings.py" -> "msg.match"
	"threading.py" -> _counter
	"calendar.py" -> "cal.formatyear"
	"test_auth.py" -> fetchone
	"test_cli.py" -> "run_command.make_context"
	"bz2.py" -> ValueError
	"tempfile.py" -> "self._file.flush"
	"enum.py" -> reversed
	"tarfile.py" -> "self.tarinfo"
	"platform.py" -> open
	"base64.py" -> format
	"__init__.py" -> "low.rpartition"
	"types.py" -> callable
	"test_blueprints.py" -> "blue.errorhandler"
	"fractions.py" -> ZeroDivisionError
	"ast.py" -> "self.delimit_if"
	"textwrap.py" -> "chunks.reverse"
	"traceback.py" -> TracebackException
	"test_basic.py" -> "client.get"
	"__init__.py" -> "m.group"
	"debughelpers.py" -> _dump_loader_info
	"socket.py" -> "self.getsockname"
	"rlcompleter.py" -> "seen.add"
	"inspect.py" -> "expline.lstrip"
	"app.py" -> type
	"textwrap.py" -> "self.placeholder.lstrip"
	"inspect.py" -> reversed
	"enum.py" -> "checked_value.replace"
	"cli.py" -> "sorts.append"
	"pathlib.py" -> "parts.append"
	"subprocess.py" -> "self.send_signal"
	"__init__.py" -> _OrderedDictValuesView
	"feedparser.py" -> "self._input.push"
	"traceback.py" -> format
	"argparse.py" -> "self._pop_action_class"
	"random.py" -> floor
	"subprocess.py" -> "_active.append"
	"socket.py" -> enum_klass
	"argparse.py" -> "new_arg_strings.append"
	"shutil.py" -> isinstance
	"__init__.py" -> _OrderedDictItemsView
	"tokenize.py" -> "_itertools.product"
	"shutil.py" -> memoryview
	"test_appctx.py" -> "client.get"
	"scaffold.py" -> "options.pop"
	"sync.py" -> "loop_future.result"
	"dataclasses.py" -> id
	"argparse.py" -> "self._read_args_from_files"
	"enum.py" -> bit_length
	"test_helpers.py" -> "app.app_context"
	"__init__.py" -> "self.manager._clear_cache"
	"enum.py" -> "checked_enum._member_map_.keys"
	"plistlib.py" -> zip
	"tarfile.py" -> "self.makefifo"
	"tarfile.py" -> "next.isdir"
	"datetime.py" -> "_time.struct_time"
	"datetime.py" -> "self.__getstate__"
	"plistlib.py" -> "ValueError.__init__"
	"test_json.py" -> len
	"argparse.py" -> func
	"subprocess.py" -> "_winapi.GetCurrentProcess"
	"types.py" -> enumerate
	"__init__.py" -> "root.setLevel"
	"ssl.py" -> map
	"__init__.py" -> "name.rpartition"
	"types.py" -> "_c.close"
	"pathlib.py" -> "self.open"
	"helpers.py" -> "val.lower"
	"platform.py" -> "m.end"
	"zipfile.py" -> "self.read"
	"shutil.py" -> "nt._getdiskusage"
	"datetime.py" -> timezone
	"__init__.py" -> NotImplementedError
	"locale.py" -> "windows_locale.get"
	"__init__.py" -> Lookup
	"subprocess.py" -> "err_close_fds.extend"
	"test_signals.py" -> "flask.redirect"
	"debughelpers.py" -> repr
	"ipaddress.py" -> "to_merge.append"
	"ssl.py" -> "self._load_windows_store_certs"
	"test_cli.py" -> "app.url_map.iter_rules"
	"tarfile.py" -> "tarinfo.isfifo"
	"test_basic.py" -> "app.test_client"
	"glob.py" -> glob_in_dir
	"weakref.py" -> "self.update"
	"test_instance_config.py" -> write_text
	"sync.py" -> "self.main_wrap"
	"code.py" -> join
	"config.py" -> "self.get_converter"
	"traceback.py" -> "te.print"
	"zipfile.py" -> "self._read1"
	"sessions.py" -> "self.get_cookie_domain"
	"cli.py" -> "template.format"
	"gzip.py" -> "self._buffer.seek"
	"hashlib.py" -> range
	"test_reqctx.py" -> "client.get"
	"shutil.py" -> chmod_func
	"plistlib.py" -> tuple
	"test_json.py" -> "dict.fromkeys"
	"traceback.py" -> issubclass
	"argparse.py" -> Namespace
	"operator.py" -> tuple
	"test_testing.py" -> "flask.session.get"
	"__init__.py" -> "self.data.isdigit"
	"tarfile.py" -> "match.end"
	"__init__.py" -> "Filterer.__init__"
	"typing_extensions.py" -> "deprecation_msg.format"
	"statistics.py" -> sum
	"enum.py" -> repr
	"__init__.py" -> "self.data.ljust"
	"test_blueprints.py" -> "app.url_map.add"
	"argparse.py" -> "items.extend"
	"dis.py" -> "linestarts.get"
	"ssl.py" -> "_msg_callback.__set__"
	"shutil.py" -> callable
	"zipfile.py" -> "fileobj.seekable"
	"__init__.py" -> "self.lookup"
	"tokenize.py" -> join
	"subprocess.py" -> "msvcrt.open_osfhandle"
	"test_logging.py" -> "pytest.fixture"
	"ssl.py" -> "dn.partition"
	"statistics.py" -> "Y.cdf"
	"tempfile.py" -> "self._file.read1"
	"ast.py" -> ValueError
	"bz2.py" -> memoryview
	"tag.py" -> "tag.tag"
	"__init__.py" -> format
	"lzma.py" -> "self._compressor.compress"
	"test_views.py" -> "app.add_url_rule"
	"calendar.py" -> "s.center"
	"random.py" -> "self.getrandbits"
	"__init__.py" -> bstartswith
	"parse.py" -> "resolved_path.append"
	"random.py" -> "self.normalvariate"
	"__init__.py" -> "app.config.update"
	"__init__.py" -> "app.register_blueprint"
	"inspect.py" -> repr
	"argparse.py" -> "nargs_pattern.replace"
	"locale.py" -> globals
	"gzip.py" -> "mode.replace"
	"dis.py" -> "output.getvalue"
	"traceback.py" -> "StackSummary.from_list"
	"functools.py" -> super
	"test_testing.py" -> "builder.get_environ"
	"threading.py" -> list
	"parse.py" -> ParseResult
	"argparse.py" -> super
	"__init__.py" -> NullHandler
	"test_cli.py" -> isinstance
	"test_reqctx.py" -> "app.test_client"
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"shlex.py" -> "self.instream.close"
	"tarfile.py" -> "self._find_link_target"
	"test_blog.py" -> "db.execute"
	"debughelpers.py" -> "request.form.getlist"
	"zipfile.py" -> bytes
	"dataclasses.py" -> "cls_dict.pop"
	"typing_extensions.py" -> hash
	"__init__.py" -> "stream.read"
	"__init__.py" -> "EntryPoints._from_text_for"
	"zipfile.py" -> "name.endswith"
	"typing_extensions.py" -> "kwargs.items"
	"blueprints.py" -> lstrip
	"test_user_error_handler.py" -> str
	"socket.py" -> getattr
	"__init__.py" -> "Logger.__init__"
	"typing.py" -> _UnpackGenericAlias
	"functools.py" -> type
	"inspect.py" -> "self._bound_arguments_cls"
	"test_regression.py" -> rpartition
	"app.py" -> "got_request_exception.send"
	"shutil.py" -> Error
	"gzip.py" -> "self.file.read"
	"textwrap.py" -> print
	"argparse.py" -> type
	"__init__.py" -> issubclass
	"functools.py" -> "kwds.values"
	"base64.py" -> print
	"fractions.py" -> hash
	"typing.py" -> ValueError
	"zipfile.py" -> "self._open_to_write"
	"traceback.py" -> "_seen.add"
	"argparse.py" -> "self._defaults.update"
	"_strptime.py" -> enumerate
	"ast.py" -> "sep.join"
	"argparse.py" -> "self._has_negative_number_optionals.append"
	"code.py" -> "self.raw_input"
	"shlex.py" -> "self.instream.readline"
	"tarfile.py" -> "info.items"
	"zipfile.py" -> RuntimeError
	"__init__.py" -> "self.release"
	"contextlib.py" -> "self._exit_callbacks.append"
	"pathlib.py" -> "cls._flavour.parse_parts"
	"testing.py" -> super
	"__init__.py" -> "StreamHandler.emit"
	"platform.py" -> "_libc_search.search"
	"tarfile.py" -> sum
	"inspect.py" -> RewriteSymbolics
	"codeop.py" -> "source.split"
	"pathlib.py" -> memoryview
	"__init__.py" -> "c.update"
	"_strptime.py" -> "locale_time.a_month.index"
	"shutil.py" -> "logger.debug"
	"test_testing.py" -> decode
	"parse.py" -> repr
	"enum.py" -> "last_values.sort"
	"argparse.py" -> "self.add_argument_group"
	"__init__.py" -> "self.copy"
	"__init__.py" -> self_get
	"random.py" -> digest
	"inspect.py" -> "new_params.pop"
	"statistics.py" -> len
	"typing_extensions.py" -> "self._raise_attribute_error"
	"bz2.py" -> _builtin_open
	"ipaddress.py" -> sorted
	"functools.py" -> object
	"test_templating.py" -> "app.jinja_env.tests.keys"
	"sync.py" -> "SyncToAsync.thread_sensitive_context.set"
	"textwrap.py" -> "chunks.pop"
	"enum.py" -> _proto_member
	"sessions.py" -> "self.get_expiration_time"
	"csv.py" -> count
	"getopt.py" -> "Exception.__init__"
	"test_helpers.py" -> "flask.helpers.make_response"
	"ast.py" -> isinstance
	"subprocess.py" -> STARTUPINFO
	"app.py" -> "self.json.response"
	"templating.py" -> "self._get_source_fast"
	"inspect.py" -> "args.append"
	"testing.py" -> "rv.update"
	"__init__.py" -> RootLogger
	"app.py" -> cls
	"__init__.py" -> "Logger.manager.getLogger"
	"reprlib.py" -> "typename.split"
	"selectors.py" -> len
	"__init__.py" -> ImportError
	"statistics.py" -> iter
	"threading.py" -> hex
	"cli.py" -> join
	"__init__.py" -> ModuleNotFoundError
	"copy.py" -> type
	"__init__.py" -> "itertools.chain"
	"argparse.py" -> "result.extend"
	"types.py" -> "co.replace"
	"__init__.py" -> _starmap
	"blueprints.py" -> open
	"app.py" -> "self.get_send_file_max_age"
	"hashlib.py" -> "ocpy.digest"
	"helpers.py" -> "werkzeug.utils.send_from_directory"
	"parse.py" -> "port.isascii"
	"ssl.py" -> "months.index"
	"__init__.py" -> "self.lock._at_fork_reinit"
	"tarfile.py" -> list
	"threading.py" -> "_active.clear"
	"tarfile.py" -> "self._extract_one"
	"app.py" -> "self.make_response"
	"contextlib.py" -> next
	"__init__.py" -> "self.data.replace"
	"random.py" -> func
	"shutil.py" -> "name.endswith"
	"ctx.py" -> "self._cv_tokens.pop"
	"feedparser.py" -> "headers.append"
	"ast.py" -> property
	"test_user_error_handler.py" -> "pytest.raises"
	"pathlib.py" -> "p.lower"
	"test_views.py" -> "flask.Response"
	"copyreg.py" -> "c.__name__.lstrip"
	"socket.py" -> "self._checkWritable"
	"threading.py" -> "stderr.flush"
	"platform.py" -> "_ironpython26_sys_version_parser.match"
	"ctx.py" -> "self._cv_tokens.append"
	"parse.py" -> lower
	"selectors.py" -> iter
	"test_helpers.py" -> isinstance
	"__init__.py" -> sizeof
	"socket.py" -> "self._checkReadable"
	"ipaddress.py" -> "subnets.get"
	"zipfile.py" -> "zef_file.read"
	"ssl.py" -> "self._sslobj.shared_ciphers"
	"copyreg.py" -> type
	"hashlib.py" -> "inner.update"
	"__init__.py" -> Blueprint
	"parse.py" -> "query.items"
	"selectors.py" -> int
	"contextlib.py" -> classmethod
	"datetime.py" -> "self.isoformat"
	"test_basic.py" -> client_method
	"string.py" -> "field_name.isdigit"
	"argparse.py" -> "self._add_container_actions"
	"dis.py" -> _ExceptionTableEntry
	"string.py" -> "mo.group"
	"typing.py" -> isinstance
	"subprocess.py" -> "self.stderr_thread.is_alive"
	"typing_extensions.py" -> all
	"dataclasses.py" -> classmethod
	"weakref.py" -> "atexit.register"
	"tarfile.py" -> "self.extractfile"
	"cli.py" -> find_best_app
	"warnings.py" -> getattr
	"sync.py" -> "SyncToAsync.get_current_task"
	"cli.py" -> "data.items"
	"zipfile.py" -> "filename.decode"
	"base64.py" -> "input.readline"
	"subprocess.py" -> "self.stdout_thread.start"
	"signal.py" -> "_signal.sigpending"
	"inspect.py" -> globals
	"inspect.py" -> "fname.endswith"
	"sync.py" -> "AsyncToSync.launch_map.get"
	"app.py" -> get_debug_flag
	"cli.py" -> "current_app._get_current_object"
	"__init__.py" -> "finder.invalidate_caches"
	"tarfile.py" -> len
	"__init__.py" -> "self.data.rpartition"
	"blog.py" -> abort
	"textwrap.py" -> TextWrapper
	"test_cli.py" -> Flask
	"dis.py" -> Positions
	"cli.py" -> parse_args
	"platform.py" -> "_component_re.split"
	"tarfile.py" -> "name.rstrip"
	"test_helpers.py" -> gen
	"__init__.py" -> hash
	"zipfile.py" -> "x._decodeExtra"
	"scaffold.py" -> ValueError
	"typing.py" -> "self.__getitem_inner__"
	"__init__.py" -> "kwargs.items"
	"shutil.py" -> "tarobj.close"
	"hashlib.py" -> "cache.get"
	"rlcompleter.py" -> "matches.sort"
	"typing_route.py" -> stream_template
	"test_cli.py" -> "output.splitlines"
	"_strptime.py" -> "found.end"
	"test_templating.py" -> <unknown_function>
	"__init__.py" -> "self.loggerDict.values"
	"parse.py" -> quoter
	"typing.py" -> _CallableGenericAlias
	"config.py" -> dir
	"gzip.py" -> "self.file.seek"
	"gzip.py" -> "self._buffer.readline"
	"__init__.py" -> "section.partition"
	"csv.py" -> "regexp.findall"
	"subprocess.py" -> Handle
	"test_request.py" -> Request
	"test_views.py" -> "Index2.as_view"
	"subprocess.py" -> "process.wait"
	"ast.py" -> enumerate
	"__init__.py" -> FileNotFoundError
	"socket.py" -> TimeoutError
	"inspect.py" -> "object.__getattribute__"
	"tarfile.py" -> split
	"subprocess.py" -> "exception_name.decode"
	"app.py" -> TypeError
	"rlcompleter.py" -> hasattr
	"random.py" -> super
	"__init__.py" -> UserDict
	"importerrorapp.py" -> ImportError
	"selectors.py" -> selector
	"threading.py" -> "self._cond.notify"
	"calendar.py" -> "textgroup.add_argument"
	"zipfile.py" -> IsADirectoryError
	"__init__.py" -> "time.time"
	"types.py" -> "self.fdel"
	"blueprints.py" -> hasattr
	"statistics.py" -> divmod
	"test_basic.py" -> "pytest.warns"
	"tarfile.py" -> "parser.format_help"
	"test_cli.py" -> get_version
	"warnings.py" -> "a.startswith"
	"string.py" -> "mo.start"
	"debughelpers.py" -> join
	"codeop.py" -> compiler
	"app.py" -> "context.copy"
	"shutil.py" -> "zip.close"
	"tempfile.py" -> "_once_lock.release"
	"uuid.py" -> "int_.from_bytes"
	"typing_extensions.py" -> any
	"plistlib.py" -> "data.decode"
	"reprlib.py" -> id
	"feedparser.py" -> "self._pop_message"
	"test_templating.py" -> isinstance
	"string.py" -> ValueError
	"parse.py" -> "url.encode"
	"datetime.py" -> hasattr
	"enum.py" -> "self._generate_next_value"
	"shutil.py" -> "src.stat"
	"__init__.py" -> "self.data.lower"
	"__init__.py" -> "self.data.isdecimal"
	"random.py" -> type
	"ipaddress.py" -> "self._split_addr_prefix"
	"app.py" -> EnvironBuilder
	"conftest.py" -> LimitedLoader
	"pathlib.py" -> startswith
	"threading.py" -> "_shutdown_locks.add"
	"test_views.py" -> f
	"string.py" -> "self.get_value"
	"zipfile.py" -> "self.writepy"
	"subprocess.py" -> "errread.Detach"
	"conf.py" -> rsplit
	"gzip.py" -> super
	"plistlib.py" -> ValueError
	"tokenize.py" -> set
	"base64.py" -> "encoded.translate"
	"dis.py" -> len
	"csv.py" -> "dq_regexp.search"
	"enum.py" -> join
	"test_basic.py" -> "flask.session.get"
	"ssl.py" -> "self._sslobj.do_handshake"
	"cli.py" -> "current_app.make_shell_context"
	"operator.py" -> ValueError
	"ipaddress.py" -> super
	"weakref.py" -> KeyedRef
	"string.py" -> "s.split"
	"bisect.py" -> ValueError
	"cli.py" -> NoAppException
	"test_blueprints.py" -> "bp.app_template_filter"
	"cli.py" -> "rows.sort"
	"base64.py" -> packI
	"ssl.py" -> "context._wrap_bio"
	"pathlib.py" -> "self.successor._select_from"
	"tarfile.py" -> "numbytes.append"
	"ipaddress.py" -> "obj._get_networks_key"
	"debughelpers.py" -> "loader.__dict__.items"
	"test_basic.py" -> "flask.make_response"
	"scaffold.py" -> "self.route"
	"__init__.py" -> "dict.pop"
	"threading.py" -> local_print
	"dataclasses.py" -> "cls.__dict__.items"
	"test_blueprints.py" -> "pytest.mark.parametrize"
	"contextlib.py" -> setattr
	"test_reqctx.py" -> "app.request_context"
	"inspect.py" -> join
	"datetime.py" -> "self.strftime"
	"pathlib.py" -> bytes
	"enum.py" -> "cls.__dict__.get"
	"__init__.py" -> "app.app_context"
	"argparse.py" -> "action.dest.upper"
	"db.py" -> init_db
	"dis.py" -> iter
	"dataclasses.py" -> setattr
	"scaffold.py" -> isinstance
	"blueprints.py" -> "value.items"
	"_strptime.py" -> "locale_time.f_month.index"
	"uuid.py" -> ValueError
	"argparse.py" -> "required_actions.append"
	"ipaddress.py" -> type
	"app.py" -> "self.logger.error"
	"shutil.py" -> PermissionError
	"tarfile.py" -> "tarinfo.isreg"
	"app.py" -> "value.total_seconds"
	"app.py" -> "_cv_app.get"
	"cli.py" -> _called_with_wrong_args
	"tokenize.py" -> "ut.untokenize"
	"bz2.py" -> "comp.flush"
	"socket.py" -> OSError
	"copy.py" -> append
	"datetime.py" -> datetime
	"signal.py" -> "_signal.pthread_sigmask"
	"__init__.py" -> "self.subtract"
	"csv.py" -> "columnTypes.keys"
	"enum.py" -> "gnv_last_values.append"
	"templating.py" -> "self.app.iter_blueprints"
	"_strptime.py" -> "self.__calc_am_pm"
	"zipfile.py" -> filterfunc
	"test_basic.py" -> "data.strip"
	"selectors.py" -> "self._selector.fileno"
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> divmod
	"app.py" -> "request_finished.send"
	"__init__.py" -> "FastPath.__new__.cache_clear"
	"__init__.py" -> all
	"tarfile.py" -> "cls.taropen"
	"linecache.py" -> "module_globals.get"
	"random.py" -> randbelow
	"test_json.py" -> CustomProvider
	"platform.py" -> tuple
	"test_reqctx.py" -> "flask.session.get"
	"helpers.py" -> "sys.modules.get"
	"__init__.py" -> FileHash
	"subprocess.py" -> join
	"helpers.py" -> _prepare_send_file_kwargs
	"__init__.py" -> "params.values"
	"app.py" -> getattr
	"__init__.py" -> "self.items"
	"ctx.py" -> request_close
	"test_signals.py" -> "flask.message_flashed.connect"
	"test_blueprints.py" -> "client.get"
	"tarfile.py" -> reversed
	"__init__.py" -> "_bootstrap._find_spec"
	"functools.py" -> user_function
	"testing.py" -> "app_root.lstrip"
	"enum.py" -> dict
	"statistics.py" -> "x.is_finite"
	"string.py" -> isinstance
	"reprlib.py" -> islice
	"csv.py" -> "columnTypes.items"
	"subprocess.py" -> SubprocessError
	"datetime.py" -> OverflowError
	"socket.py" -> selector_select
	"functools.py" -> TypeError
	"app.py" -> url_func
	"linecache.py" -> "data.splitlines"
	"typing_extensions.py" -> "deduped_pairs.remove"
	"subprocess.py" -> "self._filter_handle_list"
	"argparse.py" -> TypeError
	"argparse.py" -> "kwargs.pop"
	"helpers.py" -> "flashes.append"
	"base64.py" -> "acc.to_bytes"
	"textwrap.py" -> "w.fill"
	"feedparser.py" -> "NLCRE.match"
	"parse.py" -> join
	"db.py" -> "f.read"
	"feedparser.py" -> "self._call_parse"
	"code.py" -> "parser.add_argument"
	"__init__.py" -> "self._implied_dirs"
	"plistlib.py" -> isinstance
	"contextlib.py" -> "self.gen.athrow"
	"zipfile.py" -> "time.localtime"
	"datetime.py" -> "self.utcoffset"
	"test_reqctx.py" -> "builder.get_environ"
	"ctx.py" -> "self.app.do_teardown_appcontext"
	"random.py" -> "cum_counts.pop"
	"calendar.py" -> "s.rstrip"
	"statistics.py" -> "m.bit_length"
	"operator.py" -> isinstance
	"ssl.py" -> str
	"test_basic.py" -> View
	"db.py" -> get_db
	"__init__.py" -> "self.open"
	"parse.py" -> strip
	"cli.py" -> range
	"tarfile.py" -> "self.chown"
	"code.py" -> "self.compile"
	"signal.py" -> "_signal.getsignal"
	"config.py" -> "mappings.items"
	"platform.py" -> "version.split"
	"tarfile.py" -> StreamError
	"feedparser.py" -> "eolmo.group"
	"traceback.py" -> "self._load_lines"
	"socket.py" -> "csock.close"
	"__init__.py" -> _len
	"contextlib.py" -> "self._create_cb_wrapper"
	"__init__.py" -> proxy
	"typing_extensions.py" -> _UnpackForm
	"weakref.py" -> "sys.excepthook"
	"ast.py" -> "Constant.__new__"
	"cli.py" -> set
	"app.py" -> ImmutableDict
	"lzma.py" -> isinstance
	"argparse.py" -> hasattr
	"pathlib.py" -> "self.relative_to"
	"datetime.py" -> "cls._fromtimestamp"
	"test_blueprints.py" -> "app.test_client"
	"tag.py" -> len
	"string.py" -> "self.convert_field"
	"ssl.py" -> "dn.count"
	"__init__.py" -> any
	"contextlib.py" -> _AsyncGeneratorContextManager
	"testing.py" -> "sys.stdin.read"
	"argparse.py" -> "formatter.add_usage"
	"ipaddress.py" -> IPv6Address
	"plistlib.py" -> "lst.append"
	"_strptime.py" -> "am_pm.append"
	"tokenize.py" -> "parser.add_argument"
	"zipfile.py" -> ZipFile
	"tarfile.py" -> "s.encode"
	"uuid.py" -> isinstance
	"_strptime.py" -> frozenset
	"test_json.py" -> "dt.astimezone"
	"dataclasses.py" -> _FIELD_BASE
	"gzip.py" -> "fp.read"
	"test_basic.py" -> "app.json.response"
	"ssl.py" -> "self.context.wrap_socket"
	"sessions.py" -> "request.cookies.get"
	"test_user_error_handler.py" -> "flask.Flask"
	"sessions.py" -> "keys.extend"
	"ast.py" -> Load
	"pathlib.py" -> "name.upper"
	"test_blog.py" -> get_db
	"sync.py" -> "cvar.set"
	"config.py" -> exec
	"test_config.py" -> len
	"tempfile.py" -> "self._file.seekable"
	"rlcompleter.py" -> "atexit.register"
	"feedparser.py" -> "self._parse_headers"
	"test_signals.py" -> len
	"typing_extensions.py" -> callable
	"lzma.py" -> "self._check_not_closed"
	"ast.py" -> "self.block"
	"app.py" -> NotImplementedError
	"parser.py" -> "fp.detach"
	"tag.py" -> iter
	"test_appctx.py" -> "flask.g.get"
	"argparse.py" -> "self._check_value"
	"ctx.py" -> len
	"test_json_tag.py" -> "self.serializer.tag"
	"parse.py" -> isalpha
	"testing.py" -> "sys.exc_info"
	"cli.py" -> "module.__dict__.values"
	"helpers.py" -> "name.rpartition"
	"enum.py" -> "classdict.setdefault"
	"csv.py" -> sum
	"conftest.py" -> "app.config.update"
	"ast.py" -> "self._write_constant"
	"bz2.py" -> "self._buffer.read1"
	"testing.py" -> hasattr
	"datetime.py" -> "other.as_integer_ratio"
	"parse.py" -> partition
	"argparse.py" -> "self._optionals._add_action"
	"subprocess.py" -> "selector.register"
	"signal.py" -> globals
	"fnmatch.py" -> match
	"threading.py" -> "self._action"
	"blog.py" -> Blueprint
	"datetime.py" -> "t.utcoffset"
	"platform.py" -> "_sys_version_parser.match"
	"zipfile.py" -> "zf.write"
	"test_json.py" -> "client.post"
	"typing.py" -> "required_keys.update"
	"tempfile.py" -> "file.close"
	"ssl.py" -> TLSVersion
	"cli.py" -> max
	"inspect.py" -> eval
	"threading.py" -> "self.is_set"
	"csv.py" -> "delims.keys"
	"app.py" -> run_simple
	"locale.py" -> "locale_encoding_alias.setdefault"
	"shutil.py" -> "errors.extend"
	"test_json_tag.py" -> "pytest.mark.parametrize"
	"testing.py" -> "self._request_from_builder_args"
	"copyreg.py" -> TypeError
	"warnings.py" -> print
	"ipaddress.py" -> "self._reverse_pointer"
	"codeop.py" -> getattr
	"dataclasses.py" -> len
	"__init__.py" -> JSONDecoder
	"textwrap.py" -> "self._munge_whitespace"
	"hashlib.py" -> "password.translate"
	"__init__.py" -> "c.isascii"
	"helpers.py" -> "current_app.redirect"
	"test_user_error_handler.py" -> InternalServerError
	"ssl.py" -> "hostname.decode"
	"tag.py" -> tag_class
	"enum.py" -> gnv
	"typing_route.py" -> Flask
	"typing.py" -> _ConcatenateGenericAlias
	"socket.py" -> socket
	"testing.py" -> "self._input.readlines"
	"tarfile.py" -> InvalidHeaderError
	"__init__.py" -> "_py39compat.ep_matches"
	"ssl.py" -> "sslsock.getpeercert"
	"enum.py" -> "data_types.pop"
	"random.py" -> perf_counter
	"contextlib.py" -> "self._recreate_cm"
	"provider.py" -> "self.dumps"
	"__init__.py" -> "__file__.replace"
	"shutil.py" -> "tar.add"
	"shutil.py" -> "srcentry.is_symlink"
	"zipfile.py" -> _SharedFile
	"socket.py" -> "C.isupper"
	"ctx.py" -> "ctx._after_request_functions.append"
	"__init__.py" -> "db.init_app"
	"test_basic.py" -> replace
	"sessions.py" -> "self.session_class"
	"wrappers.py" -> "endpoint.rpartition"
	"functools.py" -> "mro.append"
	"tempfile.py" -> ValueError
	"test_logging.py" -> "pytestconfig.pluginmanager.register"
	"uuid.py" -> UUID
	"typing_extensions.py" -> _UnpackAlias
	"test_testing.py" -> "_cv_request.get"
	"base64.py" -> enumerate
	"tarfile.py" -> "self.add"
	"test_blueprints.py" -> "app.jinja_env.list_templates"
	"__init__.py" -> "_compiler.isstring"
	"dis.py" -> repr
	"ssl.py" -> "dn_remainder.lower"
	"inspect.py" -> cls
	"feedparser.py" -> "self._partial.seek"
	"ctx.py" -> "session_interface.open_session"
	"templating.py" -> "template.render"
	"socket.py" -> "self.close"
	"weakref.py" -> list
	"test_config.py" -> str
	"enum.py" -> range
	"socket.py" -> "self._sendfile_use_send"
	"weakref.py" -> self_wr
	"datetime.py" -> min
	"__init__.py" -> "zip_path.root.namelist"
	"ast.py" -> traverser
	"pathlib.py" -> "self.cwd"
	"argparse.py" -> "self.exit"
	"calendar.py" -> len
	"ipaddress.py" -> "net.supernet"
	"ipaddress.py" -> "self._address_class"
	"test_testing.py" -> isinstance
	"enum.py" -> set
	"threading.py" -> "self._cond._at_fork_reinit"
	"typing.py" -> "own_annotations.items"
	"inspect.py" -> "other._hash_basis"
	"feedparser.py" -> "self._input.pop_eof_matcher"
	"shutil.py" -> "_UNPACK_FORMATS.items"
	"zipfile.py" -> "pathsep.join"
	"__init__.py" -> "inst.__dict__.update"
	"csv.py" -> len
	"ssl.py" -> _TLSContentType
	"tarfile.py" -> "offsets.append"
	"inspect.py" -> "self._parameters.values"
	"tokenize.py" -> Untokenizer
	"platform.py" -> "release.split"
	"platform.py" -> list
	"hashlib.py" -> digest
	"inspect.py" -> range
	"tokenize.py" -> "first.startswith"
	"typing.py" -> vars
	"enum.py" -> "metacls.__prepare__"
	"shutil.py" -> "zf.write"
	"datetime.py" -> "t._getstate"
	"weakref.py" -> "gc.disable"
	"__init__.py" -> "_bootstrap._setup"
	"subprocess.py" -> "stdin.fileno"
	"typing.py" -> "self._getitem"
	"operator.py" -> hint
	"inspect.py" -> set
	"test_blueprints.py" -> "rv.close"
	"locale.py" -> items
	"ast.py" -> frozenset
	"tarfile.py" -> bytearray
	"blog.py" -> "bp.route"
	"random.py" -> TypeError
	"testing.py" -> "self._context_stack.close"
	"zipfile.py" -> "self._update_crc"
	"__init__.py" -> "self.data.isupper"
	"selectors.py" -> "selector_obj.poll"
	"textwrap.py" -> patsearch
	"ssl.py" -> "hostname.lower"
	"enum.py" -> "first_enum._generate_next_value_"
	"ssl.py" -> "dnsnames.append"
	"sessions.py" -> get
	"types.py" -> _C
	"socket.py" -> "self._sock.send"
	"__init__.py" -> as_posix
	"cli.py" -> bool
	"__init__.py" -> callable
	"dataclasses.py" -> str
	"zipfile.py" -> "self._init"
	"datetime.py" -> tuple
	"ipaddress.py" -> "prefixlen_str.isdigit"
	"tarfile.py" -> "self.addfile"
	"string.py" -> "_string.formatter_field_name_split"
	"random.py" -> hasattr
	"enum.py" -> max
	"enum.py" -> Exception
	"shlex.py" -> print
	"threading.py" -> "_shutdown_locks.difference_update"
	"copyreg.py" -> "_inverted_registry.get"
	"gzip.py" -> TypeError
	"_strptime.py" -> replace
	"test_basic.py" -> Submount
	"subprocess.py" -> set
	"ast.py" -> "_Precedence.TEST.next"
	"functools.py" -> format
	"parse.py" -> chr
	"operator.py" -> getter
	"enum.py" -> "_order_.replace"
	"ipaddress.py" -> TypeError
	"platform.py" -> "s.decode"
	"ast.py" -> "_Precedence.BOR.next"
	"argparse.py" -> format
	"tarfile.py" -> "arcname.replace"
	"__init__.py" -> "name.lower"
	"tempfile.py" -> isinstance
	"cli.py" -> "cli.main"
	"base64.py" -> bytes
	"types.py" -> list
	"inspect.py" -> Exception
	"inspect.py" -> max
	"zipfile.py" -> "f.read"
	"blueprints.py" -> "self.make_setup_state"
	"test_blueprints.py" -> "forbidden_bp.route"
	"argparse.py" -> splitlines
	"datetime.py" -> "tstr.find"
	"__init__.py" -> enumerate
	"threading.py" -> "self._target"
	"test_subclassing.py" -> SuppressedFlask
	"weakref.py" -> "other.items"
	"selectors.py" -> "self.get_map"
	"tarfile.py" -> "next.isreg"
	"glob.py" -> "magic_check.search"
	"enum.py" -> "cls._member_type_.__new__"
	"test_async.py" -> "AsyncView.as_view"
	"test_testing.py" -> ScriptInfo
	"dataclasses.py" -> "object.__setattr__"
	"weakref.py" -> "self.data.items"
	"auth.py" -> Blueprint
	"__init__.py" -> "self.data.capitalize"
	"inspect.py" -> "text.removeprefix"
	"__init__.py" -> "root.removeHandler"
	"sessions.py" -> __init__
	"__init__.py" -> "current_app.json.response"
	"argparse.py" -> "self._parser_class"
	"test_basic.py" -> list
	"typing_error_handler.py" -> Flask
	"uuid.py" -> getter
	"ast.py" -> "self._str_literal_helper"
	"test_basic.py" -> "app.response_class"
	"app.py" -> "request_ctx._get_current_object"
	"tokenize.py" -> readline
	"test_config.py" -> "app.config.from_envvar"
	"__init__.py" -> EscapeFormatter
	"selectors.py" -> super
	"locale.py" -> "groups.append"
	"test_blueprints.py" -> template_string
	"ipaddress.py" -> "self._split_scope_id"
	"ssl.py" -> "d.encode"
	"statistics.py" -> type
	"sessions.py" -> "self.get_cookie_name"
	"tarfile.py" -> "self._block"
	"zipfile.py" -> len
	"feedparser.py" -> "lastvalue.append"
	"test_user_error_handler.py" -> "flask.Blueprint"
	"ssl.py" -> _create_stdlib_context
	"parser.py" -> "feedparser.feed"
	"warnings.py" -> "parts.append"
	"typing.py" -> _CallableType
	"tokenize.py" -> "match.group"
	"enum.py" -> _auto_null
	"conftest.py" -> "request.addfinalizer"
	"test_appctx.py" -> list
	"functools.py" -> issubclass
	"shlex.py" -> "self.push_source"
	"sessions.py" -> staticmethod
	"plistlib.py" -> id
	"weakref.py" -> <unknown_function>
	"wrappers.py" -> attach_enctype_error_multidict
	"types.py" -> len
	"app.py" -> get_host
	"__init__.py" -> Celery
	"argparse.py" -> "self.parse_known_intermixed_args"
	"__init__.py" -> "self.root.namelist"
	"argparse.py" -> "items.append"
	"warnings.py" -> category
	"tarfile.py" -> "stream.close"
	"contextlib.py" -> "self._push_async_cm_exit"
	"inspect.py" -> "names.append"
	"argparse.py" -> min
	"parse.py" -> isascii
	"tarfile.py" -> "self.cmp.flush"
	"threading.py" -> "self._cond.wait"
	"test_reqctx.py" -> get
	"operator.py" -> "self._call"
	"test_blueprints.py" -> "values.pop"
	"selectors.py" -> "self._fd_to_key.pop"
	"sessions.py" -> __getitem__
	"test_basic.py" -> len
	"plistlib.py" -> "writer.write"
	"gzip.py" -> "fname.encode"
	"ast.py" -> "self.do_visit_try"
	"typing_extensions.py" -> "base.__dict__.get"
	"test_blueprints.py" -> parse_cache_control_header
	"argparse.py" -> "self._long_break_matcher.sub"
	"typing.py" -> classmethod
	"cli.py" -> run_simple
	"parse.py" -> "_typeprog.match"
	"traceback.py" -> _ExceptionPrintContext
	"inspect.py" -> "parser.add_argument"
	"datetime.py" -> "dt.utcoffset"
	"pathlib.py" -> "part.replace"
	"py_compile.py" -> "sys.stderr.write"
	"test_json.py" -> "app.json.dumps"
	"test_blueprints.py" -> "parent.errorhandler"
	"__init__.py" -> "m.end"
	"tarfile.py" -> "s.insert"
	"blueprints.py" -> deferred
	"weakref.py" -> isinstance
	"ipaddress.py" -> "self.__class__"
	"provider.py" -> "self.loads"
	"threading.py" -> "self.function"
	"test_blueprints.py" -> "bp.get"
	"tarfile.py" -> join
	"feedparser.py" -> "self._cur.set_raw"
	"test_signals.py" -> "flask.template_rendered.connect"
	"enum.py" -> getattr
	"conftest.py" -> "app.app_context"
	"dataclasses.py" -> "body_lines.append"
	"enum.py" -> bool
	"test_templating.py" -> dict
	"traceback.py" -> id
	"calendar.py" -> "self.formatmonthname"
	"argparse.py" -> "extras.extend"
	"parse.py" -> "bpath.split"
	"test_config.py" -> "app.config.from_object"
	"copy.py" -> "memo.get"
	"test_json.py" -> range
	"__init__.py" -> _logRecordFactory
	"platform.py" -> uname_result
	"ssl.py" -> "self._checkClosed"
	"threading.py" -> "self._invoke_excepthook"
	"blueprints.py" -> "state.add_url_rule"
	"lzma.py" -> "self._fp.write"
	"locale.py" -> "code.index"
	"test_user_error_handler.py" -> "self.report_error"
	"tokenize.py" -> print
	"feedparser.py" -> "line.startswith"
	"inspect.py" -> getattr
	"tokenize.py" -> "self._replace"
	"inspect.py" -> bool
	"auth.py" -> "bp.route"
	"cli.py" -> get_load_dotenv
	"contextlib.py" -> "self._exit_callbacks.pop"
	"random.py" -> "self._randbelow"
	"ctx.py" -> "self.match_request"
	"__init__.py" -> "self.__class__.__new__"
	"warnings.py" -> "line.strip"
	"pathlib.py" -> "s.startswith"
	"feedparser.py" -> "headerRE.match"
	"test_templating.py" -> "flask.render_template"
	"testing.py" -> "kwargs.get"
	"shutil.py" -> len
	"types.py" -> <unknown_function>
	"bz2.py" -> "self._check_can_write"
	"test_views.py" -> "client.delete"
	"fractions.py" -> pow
	"test_helpers.py" -> "app.test_request_context"
	"feedparser.py" -> "self._input.unreadline"
	"testing.py" -> "self.make_env"
	"threading.py" -> "self._set_tstate_lock"
	"functools.py" -> make_key
	"__init__.py" -> "self.__class__.__missing__"
	"importerrorapp.py" -> Flask
	"test_basic.py" -> <unknown_function>
	"traceback.py" -> "frame_summary.locals.items"
	"shlex.py" -> "self.get_token"
	"__init__.py" -> "self.data.translate"
	"test_basic.py" -> "rv.data.decode"
	"reprlib.py" -> len
	"_strptime.py" -> len
	"plistlib.py" -> "int.from_bytes"
	"conftest.py" -> "sys.modules.pop"
	"inspect.py" -> "sys.modules.copy"
	"subprocess.py" -> "key.fileobj.close"
	"test_helpers.py" -> "flask.abort"
	"argparse.py" -> "self._positionals._add_action"
	"sessions.py" -> isinstance
	"__init__.py" -> _Link
	"app.py" -> "item.upper"
	"ctx.py" -> "self.app.do_teardown_request"
	"subprocess.py" -> getattr
	"argparse.py" -> super_init
	"inspect.py" -> FullArgSpec
	"threading.py" -> "self._started.wait"
	"functools.py" -> "dispatch_cache.clear"
	"subprocess.py" -> bool
	"csv.py" -> repr
	"shutil.py" -> int
	"tarfile.py" -> "cls._create_header"
	"cli.py" -> "params.append"
	"zipfile.py" -> "self._fileobj.close"
	"__init__.py" -> "_bootstrap_external._set_bootstrap_module"
	"ssl.py" -> super
	"functools.py" -> "self.dispatcher.dispatch"
	"cli.py" -> setdefault
	"typing_route.py" -> "RenderTemplateView.as_view"
	"functools.py" -> hash
	"argparse.py" -> "lines.append"
	"__init__.py" -> open_func
	"test_blueprints.py" -> "test.route"
	"locale.py" -> "categories.items"
	"ast.py" -> "cls._fields.index"
	"ast.py" -> delattr
	"__init__.py" -> "path.children"
	"scaffold.py" -> next
	"__init__.py" -> _MarkupEscapeHelper
	"subprocess.py" -> "stdout.fileno"
	"typing_extensions.py" -> frozenset
	"blueprints.py" -> __init__
	"plistlib.py" -> handler
	"zipfile.py" -> "self._RealGetContents"
	"ipaddress.py" -> NotImplementedError
	"weakref.py" -> "cls._select_for_exit"
	"argparse.py" -> "seen_actions.add"
	"test_blueprints.py" -> "bp.add_app_template_test"
	"py_compile.py" -> "loader.get_data"
	"weakref.py" -> "L.sort"
	"shutil.py" -> _ntuple_diskusage
	"__init__.py" -> "cls._from_text"
	"inspect.py" -> "results.append"
	"fractions.py" -> round
	"fractions.py" -> "numerator.as_integer_ratio"
	"plistlib.py" -> "self._write_object"
	"sync.py" -> TypeError
	"typing.py" -> setattr
	"parse.py" -> bool
	"app.py" -> "filename.endswith"
	"code.py" -> "parser.parse_args"
	"views.py" -> "key.upper"
	"bz2.py" -> len
	"helpers.py" -> stream_with_context
	"traceback.py" -> "exc.stack.format"
	"__init__.py" -> "self.root._cache.clear"
	"locale.py" -> lookup
	"__init__.py" -> OrderedDict
	"enum.py" -> "interesting.discard"
	"app.py" -> "cli.AppGroup"
	"test_reqctx.py" -> PathAwareSessionInterface
	"test_appctx.py" -> isinstance
	"textwrap.py" -> ord
	"parse.py" -> SplitResult
	"zipfile.py" -> "self._init_decrypter"
	"helpers.py" -> generator_or_function
	"platform.py" -> "_WIN32_SERVER_RELEASES.get"
	"contextlib.py" -> "self.__aexit__"
	"debughelpers.py" -> "info.append"
	"argparse.py" -> "self.format_help"
	"gzip.py" -> format
	"bz2.py" -> "self._check_can_read"
	"blueprints.py" -> ValueError
	"test_cli.py" -> len
	"typing.py" -> SyntaxError
	"test_cli.py" -> dotenv_not_available
	"statistics.py" -> cls
	"tokenize.py" -> "endpats.get"
	"typing.py" -> _alias
	"threading.py" -> range
	"scaffold.py" -> "site_folder.lower"
	"ipaddress.py" -> format
	"selectors.py" -> "fileobj.fileno"
	"pathlib.py" -> list
	"shutil.py" -> str
	"__init__.py" -> "_cache.get"
	"platform.py" -> "sys.exit"
	"__init__.py" -> "cls.read"
	"lzma.py" -> "decomp.decompress"
	"test_db.py" -> "runner.invoke"
	"db.py" -> "current_app.open_resource"
	"argparse.py" -> "formatter.add_text"
	"test_appctx.py" -> "flask.g.setdefault"
	"datetime.py" -> ValueError
	"keyword.py" -> frozenset
	"helpers.py" -> "message_flashed.send"
	"datetime.py" -> "time_comps.append"
	"helpers.py" -> generator
	"__init__.py" -> "self.data.isidentifier"
	"random.py" -> min
	"locale.py" -> "_percent_re.sub"
	"pathlib.py" -> "f.read"
	"subprocess.py" -> "self._waitpid_lock.release"
	"inspect.py" -> "new_arguments.append"
	"weakref.py" -> "self._meth_type"
	"platform.py" -> "l.append"
	"rlcompleter.py" -> "nspace.items"
	"signal.py" -> enum_klass
	"traceback.py" -> isspace
	"pathlib.py" -> "self.with_name"
	"tarfile.py" -> "cls.frombuf"
	"__init__.py" -> tuple_new
	"inspect.py" -> "self._hash_basis"
	"cli.py" -> prepare_import
	"argparse.py" -> "self._action_groups.append"
	"test_config.py" -> "flask.Flask"
	"tasks.py" -> "time.sleep"
	"tarfile.py" -> "pax_headers.items"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"tarfile.py" -> "self.members.append"
	"config.py" -> "k.startswith"
	"statistics.py" -> set
	"views.py" -> cls
	"dis.py" -> get_name
	"parse.py" -> "url.split"
	"templating.py" -> "result.add"
	"subprocess.py" -> _waitstatus_to_exitcode
	"_strptime.py" -> "regex_chars.sub"
	"conftest.py" -> "monkeypatch.syspath_prepend"
	"ssl.py" -> "self._sslobj.get_channel_binding"
	"lzma.py" -> LZMADecompressor
	"contextlib.py" -> func
	"test_regression.py" -> "flask.abort"
	"typing_extensions.py" -> "sys._getframe"
	"__init__.py" -> "_parser.parse"
	"pathlib.py" -> len
	"ipaddress.py" -> "cls._HEX_DIGITS.issuperset"
	"hello.py" -> Flask
	"blueprints.py" -> <unknown_function>
	"threading.py" -> hook
	"templating.py" -> "attempts.append"
	"parse.py" -> "user.partition"
	"gzip.py" -> "parser.add_mutually_exclusive_group"
	"socket.py" -> hasattr
	"datetime.py" -> "newformat.append"
	"ctx.py" -> "_cv_app.set"
	"pathlib.py" -> "parent_path._make_child_relpath"
	"__init__.py" -> "path.search"
	"functools.py" -> all
	"views.py" -> set
	"shutil.py" -> "srcentry.stat"
	"plistlib.py" -> "self._objlist.append"
	"textwrap.py" -> zip
	"ast.py" -> len
	"test_basic.py" -> repr
	"debughelpers.py" -> "buf.append"
	"app.py" -> "appcontext_tearing_down.send"
	"test_async.py" -> "AsyncMethodView.as_view"
	"sync.py" -> getattr
	"dataclasses.py" -> "obj.__class__"
	"inspect.py" -> "comments.append"
	"test_blog.py" -> "client.post"
	"__init__.py" -> "_strip_comments_re.sub"
	"test_config.py" -> "pytest.importorskip"
	"pathlib.py" -> "self.splitroot"
	"inspect.py" -> "sig.parameters.values"
	"tarfile.py" -> cls
	"tokenize.py" -> "indents.pop"
	"argparse.py" -> "self.formatter._indent"
	"test_helpers.py" -> "f.read"
	"ast.py" -> "operator_precedence.next"
	"weakref.py" -> "self.data.values"
	"__init__.py" -> "_winapi.GetACP"
	"inspect.py" -> "match.group"
	"test_logging.py" -> "app.logger.error"
	"sessions.py" -> "s.loads"
	"rlcompleter.py" -> isinstance
	"tarfile.py" -> "tarfile.fileobj.tell"
	"statistics.py" -> max
	"plistlib.py" -> "self._fp.read"
	"test_js_example.py" -> "pytest.mark.parametrize"
	"ssl.py" -> "self.gettimeout"
	"pathlib.py" -> _PathParents
	"subprocess.py" -> "self.stderr_thread.join"
	"shutil.py" -> "cmd.lower"
	"blueprints.py" -> isinstance
	"socket.py" -> "sock.bind"
	"test_blog.py" -> fetchone
	"__init__.py" -> __import__
	"test_cli.py" -> str
	"ast.py" -> iter
	"traceback.py" -> "stack.reverse"
	"app.py" -> "builder.close"
	"base64.py" -> "_B32_DECODE_DOCSTRING.format"
	"test_basic.py" -> Forbidden
	"__init__.py" -> resolver
	"subprocess.py" -> "file_actions.append"
	"__init__.py" -> "self.data.rsplit"
	"locale.py" -> "norm_encoding.replace"
	"argparse.py" -> "self._defaults.get"
	"dataclasses.py" -> _HAS_DEFAULT_FACTORY_CLASS
	"parse.py" -> "netloc.rpartition"
	"ast.py" -> "_const_node_type_names.get"
	"datetime.py" -> isinstance
	"argparse.py" -> "dest_option_string.lstrip"
	"enum.py" -> "self._value_.bit_count"
	"tokenize.py" -> "blank_re.match"
	"copy.py" -> reductor
	"__init__.py" -> "self.handlers.remove"
	"app.py" -> "rv.allow.update"
	"subprocess.py" -> _GetExitCodeProcess
	"csv.py" -> "delims.items"
	"tempfile.py" -> "self.rng.choices"
	"sync.py" -> CurrentThreadExecutor
	"__init__.py" -> "_adapters.Message"
	"tarfile.py" -> "self._init_write_gz"
	"__init__.py" -> "sio.getvalue"
	"socket.py" -> "self.__class__"
	"sync.py" -> "self.deadlock_context.set"
	"test_basic.py" -> lower
	"weakref.py" -> id
	"locale.py" -> func
	"tempfile.py" -> "self._file.readlines"
	"feedparser.py" -> "self.policy.header_source_parse"
	"pathlib.py" -> "self.match"
	"__init__.py" -> "self.data.isalnum"
	"ast.py" -> "self.visit_FormattedValue"
	"inspect.py" -> OSError
	"functools.py" -> any
	"zipfile.py" -> sorted
	"test_json.py" -> strftime
	"test_js_example.py" -> "client.get"
	"ctx.py" -> "self.__dict__.pop"
	"argparse.py" -> any
	"tarfile.py" -> "self._extract_member"
	"test_cli.py" -> MockCtx
	"inspect.py" -> "ann.items"
	"argparse.py" -> get_subactions
	"hashlib.py" -> TypeError
	"tarfile.py" -> "error_msgs.append"
	"subprocess.py" -> "fh.close"
	"__init__.py" -> "Distribution.discover"
	"testing.py" -> __init__
	"statistics.py" -> "n.bit_length"
	"lzma.py" -> "self._buffer.tell"
	"provider.py" -> "fp.write"
	"__init__.py" -> "lastResort.handle"
	"sessions.py" -> RuntimeError
	"dataclasses.py" -> type
	"_strptime.py" -> toordinal
	"fractions.py" -> "a._richcmp"
	"__init__.py" -> "mod.getaliases"
	"dis.py" -> cls
	"dataclasses.py" -> "_MODULE_IDENTIFIER_RE.match"
	"subprocess.py" -> "bs_buf.append"
	"test_json.py" -> "flask.jsonify"
	"ctx.py" -> "app.app_ctx_globals_class"
	"inspect.py" -> print
	"calendar.py" -> "self.itermonthdays2"
	"argparse.py" -> "self.add_argument"
	"csv.py" -> thisType
	"plistlib.py" -> "self.writeln"
	"blueprints.py" -> "bp_options.copy"
	"tarfile.py" -> "tarinfo.ischr"
	"lzma.py" -> "self._buffer.close"
	"zipfile.py" -> "self.tell"
	"enum.py" -> "self._iter_member_"
	"testing.py" -> "ctx.request.host.partition"
	"tarfile.py" -> max
	"config.py" -> "self.from_mapping"
	"helpers.py" -> _wz_redirect
	"hashlib.py" -> hasattr
	"operator.py" -> "self._kwargs.items"
	"__init__.py" -> "m.groupdict"
	"shutil.py" -> "_ARCHIVE_FORMATS.items"
	"views.py" -> "app.route"
	"ipaddress.py" -> hash
	"__init__.py" -> "self.logger.getEffectiveLevel"
	"subprocess.py" -> OSError
	"pathlib.py" -> "s.lower"
	"enum.py" -> "auto_valued.append"
	"_strptime.py" -> "found_dict.keys"
	"app.py" -> "self._get_exc_class_and_code"
	"__init__.py" -> _proxy
	"tarfile.py" -> "directories.sort"
	"py_compile.py" -> join
	"plistlib.py" -> "line.encode"
	"tarfile.py" -> "tarfile.fileobj.read"
	"test_user_error_handler.py" -> "app.register_blueprint"
	"inspect.py" -> "args.extend"
	"calendar.py" -> super
	"zipfile.py" -> "FastLookup.make"
	"testing.py" -> ValueError
	"argparse.py" -> "actions.index"
	"ssl.py" -> "self._set_npn_protocols"
	"dis.py" -> set
	"__init__.py" -> "self.scanner.scanner"
	"statistics.py" -> "sx_partials.items"
	"inspect.py" -> "suffixes.sort"
	"pathlib.py" -> reversed
	"calendar.py" -> "htmlgroup.add_argument"
	"enum.py" -> "missing.append"
	"gzip.py" -> "self._read_eof"
	"plistlib.py" -> "keys.append"
	"typing_extensions.py" -> sum
	"base64.py" -> "s.rstrip"
	"__init__.py" -> "self.logger._log"
	"app.py" -> "self.log_exception"
	"tokenize.py" -> toks_append
	"gzip.py" -> "time.time"
	"ipaddress.py" -> "self._explode_shorthand_ip_string"
	"test_json.py" -> "x.strip"
	"config.py" -> "key.lower"
	"cli.py" -> super
	"types.py" -> globals
	"test_auth.py" -> execute
	"gzip.py" -> _PaddedFile
	"test_testing.py" -> jsonify
	"ipaddress.py" -> "self._is_subnet_of"
	"hashlib.py" -> "outer.copy"
	"bz2.py" -> BZ2File
	"shutil.py" -> "__all__.append"
	"tempfile.py" -> _TemporaryFileCloser
	"subprocess.py" -> "self._translate_newlines"
	"_strptime.py" -> lower
	"tarfile.py" -> "src.read"
	"csv.py" -> type
	"statistics.py" -> "minus.as_integer_ratio"
	"factory.py" -> Flask
	"conftest.py" -> Flask
	"threading.py" -> "self._wait_for_tstate_lock"
	"typing.py" -> str
	"selectors.py" -> getattr
	"typing.py" -> AssertionError
	"test_templating.py" -> "app.run"
	"shutil.py" -> sorted
	"test_blueprints.py" -> "app.jinja_env.tests.keys"
	"tarfile.py" -> "directories.append"
	"datetime.py" -> "time_string.removeprefix"
	"__init__.py" -> "itertools.chain.from_iterable"
	"test_request.py" -> "app.errorhandler"
	"test_json_tag.py" -> replace
	"rlcompleter.py" -> "self.attr_matches"
	"views.py" -> getattr
	"contextlib.py" -> "self.thing.aclose"
	"app.py" -> open
	"typing_extensions.py" -> _Sentinel
	"weakref.py" -> WeakKeyDictionary
	"test_views.py" -> parse_set_header
	"parse.py" -> "host.rpartition"
	"inspect.py" -> "kwonlyargs.append"
	"tempfile.py" -> map
	"tarfile.py" -> "parser.add_argument"
	"platform.py" -> join
	"tempfile.py" -> next
	"getopt.py" -> GetoptError
	"calendar.py" -> HTMLCalendar
	"dis.py" -> max
	"__init__.py" -> "self.__map.pop"
	"tarfile.py" -> "self.isreg"
	"socket.py" -> "lsock.listen"
	"subprocess.py" -> "_winapi.GetStdHandle"
	"cli.py" -> "rv.update"
	"__init__.py" -> Pair
	"reprlib.py" -> sorted
	"test_basic.py" -> "client.head"
	"ssl.py" -> TypeError
	"test_subclassing.py" -> get
	"typing_extensions.py" -> list
	"subprocess.py" -> "flag_opt_map.items"
	"tempfile.py" -> classmethod
	"test_json.py" -> "rv.data.strip"
	"test_testing.py" -> "runner.invoke"
	"locale.py" -> "_percent_re.match"
	"plistlib.py" -> "valRefs.append"
	"test_templating.py" -> "app.jinja_env.filters.keys"
	"threading.py" -> "self._block.acquire"
	"argparse.py" -> "self._get_nargs_pattern"
	"calendar.py" -> "self.formatweekday"
	"test_json.py" -> ObjectWithHTML
	"enum.py" -> "value.replace"
	"tarfile.py" -> "member.isreg"
	"test_templating.py" -> "app.template_filter"
	"__init__.py" -> replace
	"tempfile.py" -> "self._file.tell"
	"hashlib.py" -> "icpy.digest"
	"__init__.py" -> exists
	"pathlib.py" -> _WindowsFlavour
	"tarfile.py" -> getattr
	"conftest.py" -> "rv.mkdir"
	"testing.py" -> isinstance
	"test_basic.py" -> ForbiddenSubclass
	"tarfile.py" -> bool
	"argparse.py" -> "text.strip"
	"test_json.py" -> "flask.json.loads"
	"uuid.py" -> "path_dirs.extend"
	"gzip.py" -> "self.fileobj.fileno"
	"blueprints.py" -> "self.add_app_template_filter"
	"textwrap.py" -> "_whitespace_only_re.sub"
	"datetime.py" -> "self.tzname"
	"sessions.py" -> dumps
	"__init__.py" -> "self._read_dist_info_reqs"
	"string.py" -> len
	"app.py" -> "self.auto_find_instance_path"
	"weakref.py" -> dict
	"argparse.py" -> "arg_strings.append"
	"dis.py" -> "names.append"
	"enum.py" -> bin
	"__init__.py" -> "s.startswith"
	"test_templating.py" -> str
	"functools.py" -> callable
	"typing_extensions.py" -> len
	"test_subclassing.py" -> "out.getvalue"
	"inspect.py" -> expandtabs
	"ast.py" -> repr
	"logging.py" -> any
	"inspect.py" -> "itertools.zip_longest"
	"fractions.py" -> "_RATIONAL_FORMAT.match"
	"__init__.py" -> "Pair.parse"
	"subprocess.py" -> "self.lpAttributeList.copy"
	"argparse.py" -> callable
	"test_blueprints.py" -> "bp.register_blueprint"
	"inspect.py" -> "posonlyargs.append"
	"test_basic.py" -> "client.post"
	"enum.py" -> "metacls._check_for_existing_members_"
	"zipfile.py" -> "self.fp.seek"
	"argparse.py" -> "self._get_kwargs"
	"lzma.py" -> LZMAFile
	"enum.py" -> "members.sort"
	"argparse.py" -> "conflicts.extend"
	"test_basic.py" -> KeyboardInterrupt
	"test_db.py" -> str
	"traceback.py" -> _Sentinel
	"dis.py" -> "x.__dict__.items"
	"blueprints.py" -> RuntimeError
	"inspect.py" -> formatarg
	"platform.py" -> dict
	"sync.py" -> "SyncToAsync.context_to_thread_executor.pop"
	"__init__.py" -> "self.handlers.append"
	"weakref.py" -> "self.data.pop"
	"uuid.py" -> "line.lower"
	"inspect.py" -> visit
	"test_converters.py" -> "app.test_request_context"
	"socket.py" -> min
	"ipaddress.py" -> "parts.append"
	"test_blueprints.py" -> <unknown_function>
	"hashlib.py" -> "digestobj.update"
	"enum.py" -> "__dict__.update"
	"zipfile.py" -> type
	"platform.py" -> "_ver_stages.get"
	"test_regression.py" -> str
	"socket.py" -> "exceptions.clear"
	"plistlib.py" -> "file.write"
	"weakref.py" -> next
	"lzma.py" -> "self._compressor.flush"
	"datetime.py" -> "cls._create"
	"__init__.py" -> "child.split"
	"templating.py" -> "self._iter_loaders"
	"enum.py" -> AttributeError
	"locale.py" -> "perc.group"
	"typing.py" -> "_cleanups.append"
	"ssl.py" -> "verify_flags.__set__"
	"inspect.py" -> "filename.endswith"
	"enum.py" -> "member_names.append"
	"__init__.py" -> "self.__update"
	"traceback.py" -> "rtext.lstrip"
	"tarfile.py" -> "fileobj.tell"
	"__init__.py" -> text_encoding
	"functools.py" -> enumerate
	"weakref.py" -> "self._registry.get"
	"test_db.py" -> "monkeypatch.setattr"
	"test_templating.py" -> "monkeypatch.setitem"
	"blog.py" -> "db.execute"
	"platform.py" -> map
	"argparse.py" -> enumerate
	"__init__.py" -> sum
	"test_templating.py" -> "data.splitlines"
	"ssl.py" -> "cls.__new__"
	"typing.py" -> "new_args.append"
	"selectors.py" -> format
	"base64.py" -> len
	"plistlib.py" -> int
	"blueprints.py" -> "state.app.errorhandler"
	"inspect.py" -> AttributeError
	"shutil.py" -> "tar.close"
	"__init__.py" -> "_default_decoder.decode"
	"gzip.py" -> "self._buffer.read"
	"views.py" -> render_template
	"__main__.py" -> main
	"csv.py" -> "rowdict.keys"
	"ipaddress.py" -> "cls._prefix_from_prefix_string"
	"typing.py" -> "nm_tpl.__init_subclass__"
	"app.py" -> is_running_from_reloader
	"__init__.py" -> "base.endswith"
	"datetime.py" -> "s.replace"
	"app.py" -> "self.add_template_global"
	"test_blueprints.py" -> isinstance
	"gzip.py" -> "myfileobj.close"
	"tarfile.py" -> "self.makefile"
	"ipaddress.py" -> any
	"plistlib.py" -> "keyRefs.append"
	"dataclasses.py" -> values
	"py_compile.py" -> "msg.format"
	"blueprints.py" -> "self.add_app_template_global"
	"traceback.py" -> len
	"selectors.py" -> "self._selector.close"
	"__init__.py" -> "self.pattern.match"
	"typing.py" -> "type.__new__"
	"textwrap.py" -> ValueError
	"tempfile.py" -> range
	"parse.py" -> "obj.encode"
	"cli.py" -> lstrip
	"__init__.py" -> "self.logger.setLevel"
	"fnmatch.py" -> "chunks.append"
	"inspect.py" -> _get_signature_of
	"__init__.py" -> _zip
	"uuid.py" -> int
	"tempfile.py" -> setattr
	"calendar.py" -> "weeks.append"
	"tarfile.py" -> "self.makeunknown"
	"pathlib.py" -> "self._flavour.parse_parts"
	"zipfile.py" -> "fpin.read"
	"blueprints.py" -> "app.cli.commands.update"
	"types.py" -> dict
	"tempfile.py" -> "file.tell"
	"datetime.py" -> "other._to_microseconds"
	"code.py" -> "sys.exc_info"
	"threading.py" -> "self._lock.acquire"
	"test_blueprints.py" -> "flask.g.setdefault"
	"glob.py" -> getattr
	"__init__.py" -> "kwargs.setdefault"
	"copyreg.py" -> callable
	"app.py" -> "values.update"
	"__init__.py" -> list
	"testing.py" -> "self._add_cookies_to_wsgi"
	"test_basic.py" -> dict
	"fnmatch.py" -> isinstance
	"bz2.py" -> "self._buffer.readline"
	"dataclasses.py" -> "name.isidentifier"
	"code.py" -> "self.push"
	"__init__.py" -> "value.__html_format__"
	"bz2.py" -> "self._check_can_seek"
	"_strptime.py" -> "whitespace_replacement.sub"
	"typing.py" -> "parameters.append"
	"subprocess.py" -> "self._remaining_time"
	"cli.py" -> "params.extend"
	"datetime.py" -> push
	"testing.py" -> "app.config.get"
	"contextlib.py" -> cb
	"enum.py" -> "num.bit_length"
	"test_helpers.py" -> Wrapper
	"test_json.py" -> FixedOffset
	"tarfile.py" -> "tf.extractall"
	"__init__.py" -> "self._fixupParents"
	"__init__.py" -> "self.data.append"
	"blueprints.py" -> "self.record"
	"_strptime.py" -> join
	"csv.py" -> chr
	"__init__.py" -> "self.data.encode"
	"argparse.py" -> "self._format_action"
	"__init__.py" -> "self.__cast"
	"zipfile.py" -> "fp.seek"
	"testing.py" -> "builder.get_request"
	"parse.py" -> AttributeError
	"textwrap.py" -> "w.wrap"
	"tarfile.py" -> "self.zlib.decompressobj"
	"inspect.py" -> "processed.add"
	"__init__.py" -> "self.eggs.values"
	"locale.py" -> "_percent_re.finditer"
	"dataclasses.py" -> user_function
	"ipaddress.py" -> "cls._prefix_from_ip_int"
	"contextlib.py" -> TypeError
	"ipaddress.py" -> "self._make_netmask"
	"hashlib.py" -> f
	"copyreg.py" -> "_extension_registry.get"
	"threading.py" -> get_native_id
	"cli.py" -> "ctx.update"
	"ssl.py" -> NotImplementedError
	"dataclasses.py" -> TypeError
	"pathlib.py" -> "self.as_posix"
	"tarfile.py" -> "tf.list"
	"test_signals.py" -> "app.route"
	"reprlib.py" -> type
	"subprocess.py" -> filter
	"tarfile.py" -> "t.close"
	"typing.py" -> "optional_keys.update"
	"base64.py" -> "output.write"
	"argparse.py" -> "self._get_handler"
	"__init__.py" -> len
	"cli.py" -> "sorts.index"
	"fractions.py" -> isinstance
	"uuid.py" -> str
	"contextlib.py" -> "sys.exc_info"
	"test_user_error_handler.py" -> NotFound
	"types.py" -> "self.__wrapped.send"
	"__init__.py" -> "self.data.copy"
	"cli.py" -> open
	"pathlib.py" -> scandir
	"ipaddress.py" -> "subnets.values"
	"typing.py" -> _TupleType
	"threading.py" -> "self.notify_all"
	"argparse.py" -> "self._join_parts"
	"zipfile.py" -> "arcname.split"
	"plistlib.py" -> "self.stack.pop"
	"__init__.py" -> "itertools.islice"
	"threading.py" -> "self._release_save"
	"typing.py" -> "new_params.append"
	"test_basic.py" -> "app.errorhandler"
	"views.py" -> "methods.update"
	"blueprints.py" -> "s.app.url_default_functions.setdefault"
	"warnings.py" -> "sys._getframe"
	"parse.py" -> filter
	"subprocess.py" -> "self.stdin.flush"
	"tag.py" -> "self.register"
	"cli.py" -> "module_name.append"
	"ctx.py" -> "_cv_app.get"
	"parse.py" -> "x.decode"
	"__init__.py" -> "dict.fromkeys"
	"tarfile.py" -> "match.group"
	"__init__.py" -> split
	"ctx.py" -> "object.__repr__"
	"parse.py" -> "urlsplit.cache_clear"
	"testing.py" -> _get_werkzeug_version
	"tag.py" -> getattr
	"zipfile.py" -> "self._get_codename"
	"copyreg.py" -> "base.__new__"
	"ssl.py" -> format
	"tarfile.py" -> "cls._create_payload"
	"app.py" -> "self.raise_routing_exception"
	"__init__.py" -> "value.__html__"
	"tarfile.py" -> "self.buf.startswith"
	"typing_extensions.py" -> ParamSpecArgs
	"zipfile.py" -> append
	"__init__.py" -> "self._read_files_egginfo_sources"
	"weakref.py" -> "self._func_ref"
	"ipaddress.py" -> "ip_int.to_bytes"
	"typing.py" -> "self._determine_new_args"
	"statistics.py" -> hash
	"csv.py" -> max
	"tarfile.py" -> "self.cmp.decompress"
	"typing_extensions.py" -> "type.__hash__"
	"ctx.py" -> "app_ctx.pop"
	"subprocess.py" -> "p.wait"
	"testing.py" -> RuntimeError
	"ctx.py" -> getattr
	"__init__.py" -> "self._fmt.find"
	"ipaddress.py" -> IPv4Network
	"argparse.py" -> "action.option_strings.remove"
	"auth.py" -> "db.execute"
	"zipfile.py" -> cls
	"__init__.py" -> "ph.loggerMap.keys"
	"cli.py" -> "row.append"
	"gzip.py" -> "self.readall"
	"traceback.py" -> "operator_str.lstrip"
	"traceback.py" -> reversed
	"__init__.py" -> "hdlr.handle"
	"contextlib.py" -> "self.__class__"
	"cli.py" -> "kwargs.pop"
	"__init__.py" -> "self.data.partition"
	"zipfile.py" -> chr
	"tarfile.py" -> OSError
	"typing_extensions.py" -> "_overload_registry.clear"
	"ast.py" -> "unparser.set_precedence"
	"string.py" -> repr
	"ast.py" -> "_Precedence.CMP.next"
	"dataclasses.py" -> "sys.modules.get"
	"pathlib.py" -> "self._iterate_directories"
	"inspect.py" -> lstrip
	"argparse.py" -> "self._Section"
	"__init__.py" -> PackagePath
	"blueprints.py" -> dict
	"typing_extensions.py" -> repr
	"test_basic.py" -> "app.json.dumps"
	"cli.py" -> "sys.exc_info"
	"selectors.py" -> _SelectorMapping
	"threading.py" -> "waiter.acquire"
	"gzip.py" -> "self._init_write"
	"typing_extensions.py" -> "_PROTO_ALLOWLIST.get"
	"feedparser.py" -> "parts.pop"
	"test_basic.py" -> "response.vary.add"
	"subprocess.py" -> "self._waitpid_lock.acquire"
	"shlex.py" -> "self.filestack.popleft"
	"helpers.py" -> __import__
	"weakref.py" -> WeakValueDictionary
	"locale.py" -> hasattr
	"inspect.py" -> "classes.sort"
	"__init__.py" -> "self.root.resolve_dir"
	"dataclasses.py" -> getattr
	"tarfile.py" -> "mode.split"
	"feedparser.py" -> endswith
	"lzma.py" -> "self._buffer.seek"
	"locale.py" -> "_locale._getdefaultlocale"
	"base64.py" -> "s.encode"
	"typing.py" -> _AnnotatedAlias
	"threading.py" -> "self.run"
	"tarfile.py" -> print
	"sync.py" -> "call_result.set_result"
	"py_compile.py" -> "parser.add_argument"
	"traceback.py" -> "self.indent"
	"plistlib.py" -> float
	"test_testing.py" -> "rv.get_data"
	"argparse.py" -> "sup.__init__"
	"test_request.py" -> "app.post"
	"tarfile.py" -> "self.zlib.crc32"
	"feedparser.py" -> "lines.append"
	"test_testing.py" -> str
	"typing.py" -> "t._evaluate"
	"ssl.py" -> "self._set_alpn_protocols"
	"inspect.py" -> "lines.pop"
	"copyreg.py" -> base
	"__init__.py" -> complex
	"ipaddress.py" -> enumerate
	"test_signals.py" -> "flask.appcontext_popped.connect"
	"threading.py" -> "_threading_atexits.append"
	"datetime.py" -> map
	"typing_extensions.py" -> t
	"app.py" -> "self.process_response"
	"textwrap.py" -> "self.wrap"
	"argparse.py" -> "new_arg_strings.extend"
	"warnings.py" -> fw
	"base64.py" -> repr
	"gzip.py" -> "mode.startswith"
	"shlex.py" -> "self._pushback_chars.pop"
	"argparse.py" -> "self.convert_arg_line_to_args"
	"ast.py" -> type
	"argparse.py" -> superinit
	"test_helpers.py" -> StaticFileApp
	"__init__.py" -> "self.data.expandtabs"
	"cli.py" -> "ctx.with_resource"
	"subprocess.py" -> "self._save_input"
	"zipfile.py" -> "str.maketrans"
	"argparse.py" -> "self.__dict__.items"
	"__init__.py" -> reversed
	"ssl.py" -> "self._sslobj.version"
	"random.py" -> Random
	"lzma.py" -> "mode.replace"
	"sync.py" -> "loop.run_until_complete"
	"copyreg.py" -> "_extension_cache.clear"
	"pathlib.py" -> _TerminatingSelector
	"fnmatch.py" -> bytes
	"__init__.py" -> "fmt.format"
	"ssl.py" -> VerifyFlags
	"__init__.py" -> "root.info"
	"shutil.py" -> "fn.is_symlink"
	"plistlib.py" -> "self.write_array"
	"test_blueprints.py" -> "blueprint.send_static_file"
	"plistlib.py" -> InvalidFileException
	"__init__.py" -> "self.glob"
	"__init__.py" -> "sys.stderr.write"
	"traceback.py" -> repr
	"conftest.py" -> "leaks.append"
	"scaffold.py" -> "folder.lower"
	"test_views.py" -> "View.as_view"
	"zipfile.py" -> TypeError
	"pathlib.py" -> partition
	"typing.py" -> super
	"tarfile.py" -> "name.startswith"
	"platform.py" -> "winreg.OpenKeyEx"
	"app.py" -> "self.logger.exception"
	"test_basic.py" -> "flask.url_for"
	"argparse.py" -> "self._metavar_formatter"
	"templating.py" -> stream_with_context
	"blog.py" -> url_for
	"warnings.py" -> "message.format"
	"test_json_tag.py" -> Foo
	"app.py" -> "cli.show_server_banner"
	"__init__.py" -> "self.data.removeprefix"
	"sync.py" -> "self.get_current_task"
	"threading.py" -> "self._tstate_lock._at_fork_reinit"
	"enum.py" -> "member.__init__"
	"ipaddress.py" -> "octet_str.isdigit"
	"dis.py" -> print
	"bz2.py" -> "size.__index__"
	"lzma.py" -> "self._buffer.seekable"
	"argparse.py" -> ArgumentError
	"test_config.py" -> common_object_test
	"__init__.py" -> "self.read_text"
	"test_templating.py" -> "flask.Flask"
	"conftest.py" -> "app.test_request_context"
	"test_appctx.py" -> "flask.url_for"
	"plistlib.py" -> sorted
	"typing.py" -> type
	"typing_extensions.py" -> "type.__instancecheck__"
	"socket.py" -> ValueError
	"__init__.py" -> "self.getEffectiveLevel"
	"__init__.py" -> "self.lock.acquire"
	"__init__.py" -> "dict.clear"
	"datetime.py" -> "self.timetuple"
	"platform.py" -> "_os_release_cache.copy"
	"traceback.py" -> "queue.append"
	"shlex.py" -> "lexer.get_token"
	"__init__.py" -> "self.data.insert"
	"tarfile.py" -> "cls._create_pax_generic_header"
	"subprocess.py" -> "self._wait"
	"test_user_error_handler.py" -> isinstance
	"traceback.py" -> "self.format"
	"__init__.py" -> "Prepared.legacy_normalize"
	"enum.py" -> new_member
	"wrappers.py" -> _split_blueprint_path
	"test_json.py" -> "pytest.mark.parametrize"
	"_strptime.py" -> "self.__calc_date_time"
	"pathlib.py" -> "_Selector.__init__"
	"typing_extensions.py" -> "required_keys.add"
	"__init__.py" -> JSONEncoder
	"_strptime.py" -> range
	"parse.py" -> "userinfo.partition"
	"fnmatch.py" -> "s.replace"
	"views.py" -> "current_app.ensure_sync"
	"conftest.py" -> "monkeypatch.MonkeyPatch"
	"parser.py" -> "feedparser._set_headersonly"
	"test_views.py" -> "Index3.as_view"
	"__init__.py" -> "rv.__dict__.update"
	"__init__.py" -> "_bootstrap._exec"
	"ipaddress.py" -> "cls._parse_hextet"
	"__init__.py" -> "app.config.from_pyfile"
	"warnings.py" -> "onceregistry.get"
	"inspect.py" -> "kwargs.pop"
	"plistlib.py" -> "self._dict_type"
	"test_reqctx.py" -> "flask.url_for"
	"__init__.py" -> repr
	"provider.py" -> str
	"feedparser.py" -> "self._parse"
	"warnings.py" -> "filters.insert"
	"typing_app_decorators.py" -> Response
	"py_compile.py" -> "Exception.__init__"
	"enum.py" -> hasattr
	"tag.py" -> "self._untag_scan"
	"warnings.py" -> list
	"dis.py" -> "name.startswith"
	"__init__.py" -> "self.formatException"
	"ssl.py" -> "name.startswith"
	"inspect.py" -> "kwdefaults.get"
	"__init__.py" -> update
	"textwrap.py" -> "self._fix_sentence_endings"
	"inspect.py" -> "sys.exc_info"
	"platform.py" -> V
	"shutil.py" -> "pathext_source.split"
	"__init__.py" -> union
	"subprocess.py" -> "p2cwrite.Detach"
	"tokenize.py" -> "triple_quoted.add"
	"base64.py" -> bytearray
	"zipfile.py" -> "ZipInfo.from_file"
	"pathlib.py" -> "parsed.reverse"
	"__init__.py" -> "m.update"
	"sessions.py" -> "self.get_cookie_path"
	"argparse.py" -> "self._add_action"
	"test_basic.py" -> Rule
	"getopt.py" -> isinstance
	"inspect.py" -> hasattr
	"shutil.py" -> TypeError
	"subprocess.py" -> "self._check_timeout"
	"selectors.py" -> "self._fileobj_lookup"
	"feedparser.py" -> "line.find"
}
