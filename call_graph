// Call Graph
digraph {
	rankdir=TB
	node [shape=box]
	"test_basic.py" -> "pytest.mark.skipif"
	"test_basic.py" -> python_implementation
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> sorted
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> sorted
	"test_basic.py" -> getattr
	"test_basic.py" -> getattr
	"test_basic.py" -> method_route
	"test_basic.py" -> client_method
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.get"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> <unknown_function>
	"test_basic.py" -> "app.route"
	"test_basic.py" -> open
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> <unknown_function>
	"test_basic.py" -> "app.route"
	"test_basic.py" -> open
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> sorted
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> sorted
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "client.head"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.delete"
	"test_basic.py" -> sorted
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> sorted
	"test_basic.py" -> "client.head"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.delete"
	"test_basic.py" -> sorted
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> sorted
	"test_basic.py" -> "client.head"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.delete"
	"test_basic.py" -> sorted
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "rv.data.decode"
	"test_basic.py" -> "app.url_map.add"
	"test_basic.py" -> Submount
	"test_basic.py" -> Rule
	"test_basic.py" -> Rule
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.url_map.add"
	"test_basic.py" -> Submount
	"test_basic.py" -> Rule
	"test_basic.py" -> Rule
	"test_basic.py" -> "app.endpoint"
	"test_basic.py" -> "app.endpoint"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "self.app"
	"test_basic.py" -> PrefixPathMiddleware
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.session.pop"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "app.config.update"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> lower
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> expect_exception
	"test_basic.py" -> expect_exception
	"test_basic.py" -> "app.post"
	"test_basic.py" -> dict
	"test_basic.py" -> "app.get"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "re.search"
	"test_basic.py" -> parse_date
	"test_basic.py" -> "match.group"
	"test_basic.py" -> "datetime.now"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "re.search"
	"test_basic.py" -> repr
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> replace
	"test_basic.py" -> "datetime.now"
	"test_basic.py" -> "uuid.uuid4"
	"test_basic.py" -> Markup
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> type
	"test_basic.py" -> type
	"test_basic.py" -> Markup
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> str
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "rv.headers.get"
	"test_basic.py" -> run_test
	"test_basic.py" -> run_test
	"test_basic.py" -> run_test
	"test_basic.py" -> run_test
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.session.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.session.setdefault"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.session.clear"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "response.vary.add"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "response.vary.update"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> "rv.headers.get_all"
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> expect
	"test_basic.py" -> "app.get"
	"test_basic.py" -> "app.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.flash"
	"test_basic.py" -> "flask.flash"
	"test_basic.py" -> list
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> "flask.flash"
	"test_basic.py" -> "flask.flash"
	"test_basic.py" -> "flask.flash"
	"test_basic.py" -> Markup
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> list
	"test_basic.py" -> Markup
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> len
	"test_basic.py" -> list
	"test_basic.py" -> Markup
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> list
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> list
	"test_basic.py" -> Markup
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.get_flashed_messages"
	"test_basic.py" -> len
	"test_basic.py" -> Markup
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "evts.append"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "data.strip"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> type
	"test_basic.py" -> "called.append"
	"test_basic.py" -> TypeError
	"test_basic.py" -> type
	"test_basic.py" -> "called.append"
	"test_basic.py" -> TypeError
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "called.append"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "flask.abort"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.abort"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> KeyboardInterrupt
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> isinstance
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> MyException
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> isinstance
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> isinstance
	"test_basic.py" -> isinstance
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> ForbiddenSubclass
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.abort"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> Forbidden
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.abort"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "exc_info.errisinstance"
	"test_basic.py" -> "exc_info.value.get_description"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "flask.abort"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.errorhandler"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> str
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> encode
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.response_class"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> NotFound
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> encode
	"test_basic.py" -> "client.get"
	"test_basic.py" -> encode
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "rv.headers.getlist"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> str
	"test_basic.py" -> str
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> str
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> str
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.jsonify"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "app.json.response"
	"test_basic.py" -> "rv.data.strip"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "flask.make_response"
	"test_basic.py" -> "flask.jsonify"
	"test_basic.py" -> make_dataclass
	"test_basic.py" -> "app.json.dumps"
	"test_basic.py" -> Data
	"test_basic.py" -> "app.json.loads"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "flask.jsonify"
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> RuntimeError
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.url_build_error_handlers.append"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.url_build_error_handlers.append"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "rv.data.strip"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> get
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> get
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> open
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> open
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> Path
	"test_basic.py" -> open
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> get
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "c.get"
	"test_basic.py" -> "rv.close"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> repr
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.warns"
	"test_basic.py" -> nullcontext
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "warnings.catch_warnings"
	"test_basic.py" -> "warnings.filterwarnings"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "kwargs.get"
	"test_basic.py" -> "monkeypatch.setattr"
	"test_basic.py" -> "app.run"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "app.url_map.is_endpoint_expecting"
	"test_basic.py" -> "values.setdefault"
	"test_basic.py" -> "values.pop"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.Blueprint"
	"test_basic.py" -> "bp.route"
	"test_basic.py" -> "app.register_blueprint"
	"test_basic.py" -> dict
	"test_basic.py" -> "app.inject_url_defaults"
	"test_basic.py" -> dict
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> "monkeypatch.setattr"
	"test_basic.py" -> "pytest.raises"
	"test_basic.py" -> "client.post"
	"test_basic.py" -> str
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.test_request_context"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "flask.url_for"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.g.get"
	"test_basic.py" -> "flask.g.get"
	"test_basic.py" -> "flask.g.get"
	"test_basic.py" -> sorted
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "app.test_client"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "warnings.catch_warnings"
	"test_basic.py" -> "warnings.filterwarnings"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> "app.add_url_rule"
	"test_basic.py" -> View
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "monkeypatch.setattr"
	"test_basic.py" -> "app.run"
	"test_basic.py" -> "monkeypatch.setattr"
	"test_basic.py" -> "app.run"
	"test_basic.py" -> "monkeypatch.setattr"
	"test_basic.py" -> "app.run"
	"test_basic.py" -> "pytest.mark.parametrize"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "app.app_context"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "flask.Response"
	"test_basic.py" -> "r.set_cookie"
	"test_basic.py" -> "app.route"
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> "recwarn.pop"
	"test_basic.py" -> str
	"test_basic.py" -> "client.get"
	"test_basic.py" -> len
	"test_basic.py" -> "gc.disable"
	"test_basic.py" -> "flask.Flask"
	"test_basic.py" -> "weakref.ref"
	"test_basic.py" -> weak
	"test_basic.py" -> weak
	"test_basic.py" -> "gc.enable"
	"__init__.py" -> "enum._simple_enum"
	"__init__.py" -> match
	"__init__.py" -> _compile
	"__init__.py" -> fullmatch
	"__init__.py" -> _compile
	"__init__.py" -> search
	"__init__.py" -> _compile
	"__init__.py" -> sub
	"__init__.py" -> _compile
	"__init__.py" -> subn
	"__init__.py" -> _compile
	"__init__.py" -> split
	"__init__.py" -> _compile
	"__init__.py" -> findall
	"__init__.py" -> _compile
	"__init__.py" -> finditer
	"__init__.py" -> _compile
	"__init__.py" -> _compile
	"__init__.py" -> "_cache.clear"
	"__init__.py" -> "_compile_repl.cache_clear"
	"__init__.py" -> "warnings.warn"
	"__init__.py" -> "warnings.catch_warnings"
	"__init__.py" -> "warnings.simplefilter"
	"__init__.py" -> _compile
	"__init__.py" -> chr
	"__init__.py" -> isinstance
	"__init__.py" -> "pattern.translate"
	"__init__.py" -> str
	"__init__.py" -> encode
	"__init__.py" -> "pattern.translate"
	"__init__.py" -> type
	"__init__.py" -> "_compiler.compile"
	"__init__.py" -> type
	"__init__.py" -> match
	"__init__.py" -> "_compiler.compile"
	"__init__.py" -> isinstance
	"__init__.py" -> type
	"__init__.py" -> isinstance
	"__init__.py" -> ValueError
	"__init__.py" -> "_compiler.isstring"
	"__init__.py" -> TypeError
	"__init__.py" -> "warnings.warn"
	"__init__.py" -> "_compiler.compile"
	"__init__.py" -> len
	"__init__.py" -> next
	"__init__.py" -> iter
	"__init__.py" -> type
	"__init__.py" -> "_parser.parse_template"
	"__init__.py" -> "functools.lru_cache"
	"__init__.py" -> "_parser.parse_template"
	"__init__.py" -> "_parser.expand_template"
	"__init__.py" -> _compile_repl
	"__init__.py" -> len
	"__init__.py" -> "_parser.expand_template"
	"__init__.py" -> "copyreg.pickle"
	"__init__.py" -> isinstance
	"__init__.py" -> "_parser.State"
	"__init__.py" -> "s.opengroup"
	"__init__.py" -> "p.append"
	"__init__.py" -> "_parser.SubPattern"
	"__init__.py" -> "_parser.parse"
	"__init__.py" -> "s.closegroup"
	"__init__.py" -> "_parser.SubPattern"
	"__init__.py" -> "_compiler.compile"
	"__init__.py" -> "self.scanner.scanner"
	"__init__.py" -> match
	"__init__.py" -> "m.end"
	"__init__.py" -> callable
	"__init__.py" -> action
	"__init__.py" -> "m.group"
	"__init__.py" -> append
	"warnings.py" -> WarningMessage
	"warnings.py" -> _showwarnmsg_impl
	"warnings.py" -> WarningMessage
	"warnings.py" -> _formatwarnmsg_impl
	"warnings.py" -> _formatwarnmsg
	"warnings.py" -> "file.write"
	"warnings.py" -> "linecache.getline"
	"warnings.py" -> "line.strip"
	"warnings.py" -> "tracemalloc.is_tracing"
	"warnings.py" -> "tracemalloc.get_object_traceback"
	"warnings.py" -> "linecache.getline"
	"warnings.py" -> "line.strip"
	"warnings.py" -> callable
	"warnings.py" -> TypeError
	"warnings.py" -> sw
	"warnings.py" -> _showwarnmsg_impl
	"warnings.py" -> fw
	"warnings.py" -> _formatwarnmsg_impl
	"warnings.py" -> isinstance
	"warnings.py" -> isinstance
	"warnings.py" -> issubclass
	"warnings.py" -> isinstance
	"warnings.py" -> isinstance
	"warnings.py" -> "re.compile"
	"warnings.py" -> "re.compile"
	"warnings.py" -> _add_filter
	"warnings.py" -> isinstance
	"warnings.py" -> _add_filter
	"warnings.py" -> "filters.remove"
	"warnings.py" -> "filters.insert"
	"warnings.py" -> "filters.append"
	"warnings.py" -> _filters_mutated
	"warnings.py" -> _filters_mutated
	"warnings.py" -> _setoption
	"warnings.py" -> print
	"warnings.py" -> "arg.split"
	"warnings.py" -> len
	"warnings.py" -> _OptionError
	"warnings.py" -> len
	"warnings.py" -> "parts.append"
	"warnings.py" -> "s.strip"
	"warnings.py" -> _getaction
	"warnings.py" -> _getcategory
	"warnings.py" -> "re.escape"
	"warnings.py" -> "re.escape"
	"warnings.py" -> int
	"warnings.py" -> _OptionError
	"warnings.py" -> filterwarnings
	"warnings.py" -> "a.startswith"
	"warnings.py" -> _OptionError
	"warnings.py" -> "category.rpartition"
	"warnings.py" -> __import__
	"warnings.py" -> _OptionError
	"warnings.py" -> getattr
	"warnings.py" -> _OptionError
	"warnings.py" -> issubclass
	"warnings.py" -> _OptionError
	"warnings.py" -> _is_internal_frame
	"warnings.py" -> isinstance
	"warnings.py" -> isinstance
	"warnings.py" -> issubclass
	"warnings.py" -> TypeError
	"warnings.py" -> format
	"warnings.py" -> type
	"warnings.py" -> _is_internal_frame
	"warnings.py" -> "sys._getframe"
	"warnings.py" -> "sys._getframe"
	"warnings.py" -> "sys._getframe"
	"warnings.py" -> range
	"warnings.py" -> _next_external_frame
	"warnings.py" -> "globals.setdefault"
	"warnings.py" -> warn_explicit
	"warnings.py" -> int
	"warnings.py" -> lower
	"warnings.py" -> "registry.get"
	"warnings.py" -> "registry.clear"
	"warnings.py" -> isinstance
	"warnings.py" -> str
	"warnings.py" -> category
	"warnings.py" -> "registry.get"
	"warnings.py" -> "msg.match"
	"warnings.py" -> issubclass
	"warnings.py" -> "mod.match"
	"warnings.py" -> "linecache.getlines"
	"warnings.py" -> "onceregistry.get"
	"warnings.py" -> "registry.get"
	"warnings.py" -> RuntimeError
	"warnings.py" -> WarningMessage
	"warnings.py" -> _showwarnmsg
	"warnings.py" -> "args.append"
	"warnings.py" -> "args.append"
	"warnings.py" -> type
	"warnings.py" -> join
	"warnings.py" -> RuntimeError
	"warnings.py" -> "self._module._filters_mutated"
	"warnings.py" -> simplefilter
	"warnings.py" -> RuntimeError
	"warnings.py" -> "self._module._filters_mutated"
	"warnings.py" -> RuntimeError
	"warnings.py" -> "message.format"
	"warnings.py" -> warn
	"warnings.py" -> reversed
	"warnings.py" -> "linecache.getline"
	"warnings.py" -> "msg_lines.append"
	"warnings.py" -> "traceback.format_list"
	"warnings.py" -> list
	"warnings.py" -> extract
	"warnings.py" -> rstrip
	"warnings.py" -> join
	"warnings.py" -> warn
	"warnings.py" -> _processoptions
	"warnings.py" -> hasattr
	"warnings.py" -> filterwarnings
	"warnings.py" -> simplefilter
	"warnings.py" -> simplefilter
	"warnings.py" -> simplefilter
	"warnings.py" -> simplefilter
	"tracemalloc.py" -> abs
	"tracemalloc.py" -> abs
	"tracemalloc.py" -> hash
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> _format_size
	"tracemalloc.py" -> _format_size
	"tracemalloc.py" -> hash
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> _format_size
	"tracemalloc.py" -> _format_size
	"tracemalloc.py" -> _format_size
	"tracemalloc.py" -> abs
	"tracemalloc.py" -> abs
	"tracemalloc.py" -> "new_group.items"
	"tracemalloc.py" -> "old_group.pop"
	"tracemalloc.py" -> StatisticDiff
	"tracemalloc.py" -> StatisticDiff
	"tracemalloc.py" -> "statistics.append"
	"tracemalloc.py" -> "old_group.items"
	"tracemalloc.py" -> StatisticDiff
	"tracemalloc.py" -> "statistics.append"
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> hash
	"tracemalloc.py" -> "Sequence.__init__"
	"tracemalloc.py" -> tuple
	"tracemalloc.py" -> reversed
	"tracemalloc.py" -> len
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> tuple
	"tracemalloc.py" -> Frame
	"tracemalloc.py" -> Frame
	"tracemalloc.py" -> hash
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> str
	"tracemalloc.py" -> tuple
	"tracemalloc.py" -> reversed
	"tracemalloc.py" -> "lines.append"
	"tracemalloc.py" -> strip
	"tracemalloc.py" -> "linecache.getline"
	"tracemalloc.py" -> "lines.append"
	"tracemalloc.py" -> _get_object_traceback
	"tracemalloc.py" -> Traceback
	"tracemalloc.py" -> Traceback
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> hash
	"tracemalloc.py" -> _format_size
	"tracemalloc.py" -> _format_size
	"tracemalloc.py" -> "Sequence.__init__"
	"tracemalloc.py" -> len
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> tuple
	"tracemalloc.py" -> Trace
	"tracemalloc.py" -> Trace
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> len
	"tracemalloc.py" -> "os.path.normcase"
	"tracemalloc.py" -> "filename.endswith"
	"tracemalloc.py" -> __init__
	"tracemalloc.py" -> super
	"tracemalloc.py" -> _normalize_filename
	"tracemalloc.py" -> _normalize_filename
	"tracemalloc.py" -> "fnmatch.fnmatch"
	"tracemalloc.py" -> "self._match_frame_impl"
	"tracemalloc.py" -> any
	"tracemalloc.py" -> "self._match_frame_impl"
	"tracemalloc.py" -> "self._match_frame"
	"tracemalloc.py" -> "self._match_traceback"
	"tracemalloc.py" -> __init__
	"tracemalloc.py" -> super
	"tracemalloc.py" -> _Traces
	"tracemalloc.py" -> open
	"tracemalloc.py" -> "pickle.dump"
	"tracemalloc.py" -> open
	"tracemalloc.py" -> "pickle.load"
	"tracemalloc.py" -> any
	"tracemalloc.py" -> "trace_filter._match"
	"tracemalloc.py" -> any
	"tracemalloc.py" -> "trace_filter._match"
	"tracemalloc.py" -> isinstance
	"tracemalloc.py" -> TypeError
	"tracemalloc.py" -> type
	"tracemalloc.py" -> "include_filters.append"
	"tracemalloc.py" -> "exclude_filters.append"
	"tracemalloc.py" -> "self._filter_trace"
	"tracemalloc.py" -> "self.traces._traces.copy"
	"tracemalloc.py" -> Snapshot
	"tracemalloc.py" -> ValueError
	"tracemalloc.py" -> ValueError
	"tracemalloc.py" -> Traceback
	"tracemalloc.py" -> Statistic
	"tracemalloc.py" -> Traceback
	"tracemalloc.py" -> Statistic
	"tracemalloc.py" -> "self._group_by"
	"tracemalloc.py" -> list
	"tracemalloc.py" -> "grouped.values"
	"tracemalloc.py" -> "statistics.sort"
	"tracemalloc.py" -> "self._group_by"
	"tracemalloc.py" -> "old_snapshot._group_by"
	"tracemalloc.py" -> _compare_grouped_stats
	"tracemalloc.py" -> "statistics.sort"
	"tracemalloc.py" -> is_tracing
	"tracemalloc.py" -> RuntimeError
	"tracemalloc.py" -> _get_traces
	"tracemalloc.py" -> get_traceback_limit
	"tracemalloc.py" -> Snapshot
	"pickle.py" -> "__all__.append"
	"pickle.py" -> "__all__.extend"
	"pickle.py" -> dir
	"pickle.py" -> "re.match"
	"pickle.py" -> "io.BytesIO"
	"pickle.py" -> "self.current_frame.tell"
	"pickle.py" -> "self.commit_frame"
	"pickle.py" -> "f.tell"
	"pickle.py" -> "f.getbuffer"
	"pickle.py" -> len
	"pickle.py" -> write
	"pickle.py" -> pack
	"pickle.py" -> len
	"pickle.py" -> write
	"pickle.py" -> "io.BytesIO"
	"pickle.py" -> "self.current_frame.write"
	"pickle.py" -> "self.file_write"
	"pickle.py" -> "self.commit_frame"
	"pickle.py" -> write
	"pickle.py" -> write
	"pickle.py" -> "self.current_frame.readinto"
	"pickle.py" -> len
	"pickle.py" -> len
	"pickle.py" -> "self.file_read"
	"pickle.py" -> len
	"pickle.py" -> UnpicklingError
	"pickle.py" -> len
	"pickle.py" -> "self.file_read"
	"pickle.py" -> "self.current_frame.read"
	"pickle.py" -> "self.file_read"
	"pickle.py" -> len
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.file_read"
	"pickle.py" -> "self.current_frame.readline"
	"pickle.py" -> "self.file_readline"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.file_readline"
	"pickle.py" -> "self.current_frame.read"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "io.BytesIO"
	"pickle.py" -> "self.file_read"
	"pickle.py" -> "name.split"
	"pickle.py" -> AttributeError
	"pickle.py" -> format
	"pickle.py" -> getattr
	"pickle.py" -> AttributeError
	"pickle.py" -> format
	"pickle.py" -> getattr
	"pickle.py" -> items
	"pickle.py" -> "sys.modules.copy"
	"pickle.py" -> _getattribute
	"pickle.py" -> "x.bit_length"
	"pickle.py" -> "x.to_bytes"
	"pickle.py" -> "int.from_bytes"
	"pickle.py" -> ValueError
	"pickle.py" -> ValueError
	"pickle.py" -> TypeError
	"pickle.py" -> _Framer
	"pickle.py" -> int
	"pickle.py" -> "self.memo.clear"
	"pickle.py" -> hasattr
	"pickle.py" -> PicklingError
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "self.framer.start_framing"
	"pickle.py" -> "self.save"
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.framer.end_framing"
	"pickle.py" -> id
	"pickle.py" -> len
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.put"
	"pickle.py" -> id
	"pickle.py" -> pack
	"pickle.py" -> pack
	"pickle.py" -> encode
	"pickle.py" -> repr
	"pickle.py" -> pack
	"pickle.py" -> pack
	"pickle.py" -> encode
	"pickle.py" -> repr
	"pickle.py" -> "self.framer.commit_frame"
	"pickle.py" -> "self.persistent_id"
	"pickle.py" -> "self.save_pers"
	"pickle.py" -> "self.memo.get"
	"pickle.py" -> id
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.get"
	"pickle.py" -> getattr
	"pickle.py" -> reduce
	"pickle.py" -> type
	"pickle.py" -> "self.dispatch.get"
	"pickle.py" -> f
	"pickle.py" -> get
	"pickle.py" -> getattr
	"pickle.py" -> reduce
	"pickle.py" -> issubclass
	"pickle.py" -> "self.save_global"
	"pickle.py" -> getattr
	"pickle.py" -> reduce
	"pickle.py" -> getattr
	"pickle.py" -> reduce
	"pickle.py" -> PicklingError
	"pickle.py" -> isinstance
	"pickle.py" -> "self.save_global"
	"pickle.py" -> isinstance
	"pickle.py" -> PicklingError
	"pickle.py" -> len
	"pickle.py" -> PicklingError
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> "self.save"
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.write"
	"pickle.py" -> encode
	"pickle.py" -> str
	"pickle.py" -> PicklingError
	"pickle.py" -> isinstance
	"pickle.py" -> PicklingError
	"pickle.py" -> callable
	"pickle.py" -> PicklingError
	"pickle.py" -> getattr
	"pickle.py" -> hasattr
	"pickle.py" -> PicklingError
	"pickle.py" -> format
	"pickle.py" -> PicklingError
	"pickle.py" -> format
	"pickle.py" -> save
	"pickle.py" -> save
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> partial
	"pickle.py" -> save
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> hasattr
	"pickle.py" -> PicklingError
	"pickle.py" -> PicklingError
	"pickle.py" -> save
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> save
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> id
	"pickle.py" -> write
	"pickle.py" -> "self.get"
	"pickle.py" -> id
	"pickle.py" -> "self.memoize"
	"pickle.py" -> "self._batch_appends"
	"pickle.py" -> "self._batch_setitems"
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> save
	"pickle.py" -> save
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> write
	"pickle.py" -> write
	"pickle.py" -> "self.write"
	"pickle.py" -> type
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> encode_long
	"pickle.py" -> len
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "self.write"
	"pickle.py" -> encode
	"pickle.py" -> repr
	"pickle.py" -> "self.write"
	"pickle.py" -> encode
	"pickle.py" -> repr
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "self.write"
	"pickle.py" -> encode
	"pickle.py" -> repr
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> str
	"pickle.py" -> len
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "self._write_large_bytes"
	"pickle.py" -> pack
	"pickle.py" -> "self._write_large_bytes"
	"pickle.py" -> pack
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "self.memoize"
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> bytes
	"pickle.py" -> len
	"pickle.py" -> "self._write_large_bytes"
	"pickle.py" -> pack
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "self.memoize"
	"pickle.py" -> PicklingError
	"pickle.py" -> "obj.raw"
	"pickle.py" -> PicklingError
	"pickle.py" -> bool
	"pickle.py" -> "self._buffer_callback"
	"pickle.py" -> "self.save_bytes"
	"pickle.py" -> "m.tobytes"
	"pickle.py" -> "self.save_bytearray"
	"pickle.py" -> "m.tobytes"
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.write"
	"pickle.py" -> "obj.encode"
	"pickle.py" -> len
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "self._write_large_bytes"
	"pickle.py" -> pack
	"pickle.py" -> "self._write_large_bytes"
	"pickle.py" -> pack
	"pickle.py" -> "self.write"
	"pickle.py" -> pack
	"pickle.py" -> "obj.replace"
	"pickle.py" -> "obj.replace"
	"pickle.py" -> "obj.replace"
	"pickle.py" -> "obj.replace"
	"pickle.py" -> "obj.replace"
	"pickle.py" -> "self.write"
	"pickle.py" -> "obj.encode"
	"pickle.py" -> "self.memoize"
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.write"
	"pickle.py" -> len
	"pickle.py" -> save
	"pickle.py" -> id
	"pickle.py" -> "self.get"
	"pickle.py" -> id
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.memoize"
	"pickle.py" -> write
	"pickle.py" -> save
	"pickle.py" -> id
	"pickle.py" -> "self.get"
	"pickle.py" -> id
	"pickle.py" -> write
	"pickle.py" -> write
	"pickle.py" -> write
	"pickle.py" -> "self.memoize"
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.memoize"
	"pickle.py" -> "self._batch_appends"
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> iter
	"pickle.py" -> list
	"pickle.py" -> islice
	"pickle.py" -> len
	"pickle.py" -> write
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.write"
	"pickle.py" -> "self.memoize"
	"pickle.py" -> "self._batch_setitems"
	"pickle.py" -> "obj.items"
	"pickle.py" -> save
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> iter
	"pickle.py" -> list
	"pickle.py" -> islice
	"pickle.py" -> len
	"pickle.py" -> write
	"pickle.py" -> save
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> save
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> list
	"pickle.py" -> write
	"pickle.py" -> "self.memoize"
	"pickle.py" -> iter
	"pickle.py" -> list
	"pickle.py" -> islice
	"pickle.py" -> len
	"pickle.py" -> write
	"pickle.py" -> save
	"pickle.py" -> write
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> list
	"pickle.py" -> write
	"pickle.py" -> save
	"pickle.py" -> id
	"pickle.py" -> write
	"pickle.py" -> "self.get"
	"pickle.py" -> id
	"pickle.py" -> write
	"pickle.py" -> "self.memoize"
	"pickle.py" -> getattr
	"pickle.py" -> whichmodule
	"pickle.py" -> __import__
	"pickle.py" -> _getattribute
	"pickle.py" -> PicklingError
	"pickle.py" -> PicklingError
	"pickle.py" -> "_extension_registry.get"
	"pickle.py" -> write
	"pickle.py" -> pack
	"pickle.py" -> write
	"pickle.py" -> pack
	"pickle.py" -> write
	"pickle.py" -> pack
	"pickle.py" -> "name.rpartition"
	"pickle.py" -> "self.save"
	"pickle.py" -> "self.save"
	"pickle.py" -> write
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> write
	"pickle.py" -> bytes
	"pickle.py" -> bytes
	"pickle.py" -> write
	"pickle.py" -> bytes
	"pickle.py" -> bytes
	"pickle.py" -> PicklingError
	"pickle.py" -> "self.memoize"
	"pickle.py" -> type
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> type
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> type
	"pickle.py" -> "self.save_reduce"
	"pickle.py" -> "self.save_global"
	"pickle.py" -> iter
	"pickle.py" -> hasattr
	"pickle.py" -> UnpicklingError
	"pickle.py" -> _Unframer
	"pickle.py" -> read
	"pickle.py" -> isinstance
	"pickle.py" -> <unknown_function>
	"pickle.py" -> "self.metastack.pop"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.read"
	"pickle.py" -> ValueError
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> ValueError
	"pickle.py" -> "self._unframer.load_frame"
	"pickle.py" -> decode
	"pickle.py" -> "self.readline"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.persistent_load"
	"pickle.py" -> "self.stack.pop"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.persistent_load"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.readline"
	"pickle.py" -> int
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.append"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.readline"
	"pickle.py" -> "self.append"
	"pickle.py" -> int
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> decode_long
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> decode_long
	"pickle.py" -> "self.append"
	"pickle.py" -> float
	"pickle.py" -> "self.readline"
	"pickle.py" -> "self.append"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> "value.decode"
	"pickle.py" -> "self.readline"
	"pickle.py" -> len
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.append"
	"pickle.py" -> "self._decode_string"
	"pickle.py" -> "codecs.escape_decode"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self._decode_string"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> str
	"pickle.py" -> "self.readline"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.append"
	"pickle.py" -> str
	"pickle.py" -> "self.read"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.append"
	"pickle.py" -> str
	"pickle.py" -> "self.read"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.read"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> bytearray
	"pickle.py" -> "self.readinto"
	"pickle.py" -> "self.append"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> next
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.append"
	"pickle.py" -> memoryview
	"pickle.py" -> "m.toreadonly"
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self._decode_string"
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> str
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> "self.append"
	"pickle.py" -> tuple
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.append"
	"pickle.py" -> set
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> "self.append"
	"pickle.py" -> frozenset
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> range
	"pickle.py" -> len
	"pickle.py" -> "self.append"
	"pickle.py" -> isinstance
	"pickle.py" -> hasattr
	"pickle.py" -> klass
	"pickle.py" -> TypeError
	"pickle.py" -> str
	"pickle.py" -> "sys.exc_info"
	"pickle.py" -> "klass.__new__"
	"pickle.py" -> "self.append"
	"pickle.py" -> decode
	"pickle.py" -> "self.readline"
	"pickle.py" -> decode
	"pickle.py" -> "self.readline"
	"pickle.py" -> "self.find_class"
	"pickle.py" -> "self._instantiate"
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> "args.pop"
	"pickle.py" -> "self._instantiate"
	"pickle.py" -> "self.stack.pop"
	"pickle.py" -> "self.stack.pop"
	"pickle.py" -> "cls.__new__"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.stack.pop"
	"pickle.py" -> "self.stack.pop"
	"pickle.py" -> "self.stack.pop"
	"pickle.py" -> "cls.__new__"
	"pickle.py" -> "self.append"
	"pickle.py" -> decode
	"pickle.py" -> "self.readline"
	"pickle.py" -> decode
	"pickle.py" -> "self.readline"
	"pickle.py" -> "self.find_class"
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.stack.pop"
	"pickle.py" -> "self.stack.pop"
	"pickle.py" -> type
	"pickle.py" -> type
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.append"
	"pickle.py" -> "self.find_class"
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.get_extension"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.get_extension"
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.get_extension"
	"pickle.py" -> "_extension_cache.get"
	"pickle.py" -> "self.append"
	"pickle.py" -> "_inverted_registry.get"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> ValueError
	"pickle.py" -> "self.find_class"
	"pickle.py" -> "self.append"
	"pickle.py" -> "sys.audit"
	"pickle.py" -> __import__
	"pickle.py" -> _getattribute
	"pickle.py" -> getattr
	"pickle.py" -> "stack.pop"
	"pickle.py" -> func
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> "self.append"
	"pickle.py" -> int
	"pickle.py" -> "self.readline"
	"pickle.py" -> "self.append"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> "self.append"
	"pickle.py" -> UnpicklingError
	"pickle.py" -> int
	"pickle.py" -> "self.readline"
	"pickle.py" -> ValueError
	"pickle.py" -> "self.read"
	"pickle.py" -> ValueError
	"pickle.py" -> unpack
	"pickle.py" -> "self.read"
	"pickle.py" -> ValueError
	"pickle.py" -> len
	"pickle.py" -> "stack.pop"
	"pickle.py" -> "list.append"
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> extend
	"pickle.py" -> append
	"pickle.py" -> "stack.pop"
	"pickle.py" -> "stack.pop"
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> range
	"pickle.py" -> len
	"pickle.py" -> "self.pop_mark"
	"pickle.py" -> isinstance
	"pickle.py" -> "set_obj.update"
	"pickle.py" -> add
	"pickle.py" -> "stack.pop"
	"pickle.py" -> getattr
	"pickle.py" -> setstate
	"pickle.py" -> isinstance
	"pickle.py" -> len
	"pickle.py" -> "state.items"
	"pickle.py" -> type
	"pickle.py" -> intern
	"pickle.py" -> "slotstate.items"
	"pickle.py" -> setattr
	"pickle.py" -> "self.metastack.append"
	"pickle.py" -> "self.stack.pop"
	"pickle.py" -> _Stop
	"pickle.py" -> dump
	"pickle.py" -> _Pickler
	"pickle.py" -> "io.BytesIO"
	"pickle.py" -> dump
	"pickle.py" -> _Pickler
	"pickle.py" -> "f.getvalue"
	"pickle.py" -> isinstance
	"pickle.py" -> load
	"pickle.py" -> _Unpickler
	"pickle.py" -> isinstance
	"pickle.py" -> TypeError
	"pickle.py" -> "io.BytesIO"
	"pickle.py" -> load
	"pickle.py" -> _Unpickler
	"pickle.py" -> "doctest.testmod"
	"pickle.py" -> "argparse.ArgumentParser"
	"pickle.py" -> "parser.add_argument"
	"pickle.py" -> "argparse.FileType"
	"pickle.py" -> "parser.add_argument"
	"pickle.py" -> "parser.add_argument"
	"pickle.py" -> "parser.parse_args"
	"pickle.py" -> _test
	"pickle.py" -> "parser.print_help"
	"pickle.py" -> load
	"pickle.py" -> "pprint.pprint"
	"fnmatch.py" -> "os.path.normcase"
	"fnmatch.py" -> "os.path.normcase"
	"fnmatch.py" -> fnmatchcase
	"fnmatch.py" -> isinstance
	"fnmatch.py" -> str
	"fnmatch.py" -> translate
	"fnmatch.py" -> bytes
	"fnmatch.py" -> translate
	"fnmatch.py" -> "re.compile"
	"fnmatch.py" -> "functools.lru_cache"
	"fnmatch.py" -> "os.path.normcase"
	"fnmatch.py" -> _compile_pattern
	"fnmatch.py" -> match
	"fnmatch.py" -> "result.append"
	"fnmatch.py" -> match
	"fnmatch.py" -> "os.path.normcase"
	"fnmatch.py" -> "result.append"
	"fnmatch.py" -> _compile_pattern
	"fnmatch.py" -> match
	"fnmatch.py" -> object
	"fnmatch.py" -> len
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> "stuff.replace"
	"fnmatch.py" -> "pat.find"
	"fnmatch.py" -> "chunks.append"
	"fnmatch.py" -> "chunks.append"
	"fnmatch.py" -> range
	"fnmatch.py" -> len
	"fnmatch.py" -> join
	"fnmatch.py" -> replace
	"fnmatch.py" -> "s.replace"
	"fnmatch.py" -> "re.sub"
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> "re.escape"
	"fnmatch.py" -> len
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> "fixed.append"
	"fnmatch.py" -> join
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> add
	"fnmatch.py" -> join
	"linecache.py" -> "cache.clear"
	"linecache.py" -> getlines
	"linecache.py" -> len
	"linecache.py" -> len
	"linecache.py" -> updatecache
	"linecache.py" -> clearcache
	"linecache.py" -> list
	"linecache.py" -> "cache.keys"
	"linecache.py" -> len
	"linecache.py" -> "os.stat"
	"linecache.py" -> "cache.pop"
	"linecache.py" -> "cache.pop"
	"linecache.py" -> len
	"linecache.py" -> "cache.pop"
	"linecache.py" -> "filename.startswith"
	"linecache.py" -> "filename.endswith"
	"linecache.py" -> "os.stat"
	"linecache.py" -> lazycache
	"linecache.py" -> <unknown_function>
	"linecache.py" -> len
	"linecache.py" -> "data.splitlines"
	"linecache.py" -> "os.path.isabs"
	"linecache.py" -> "os.path.join"
	"linecache.py" -> "os.stat"
	"linecache.py" -> "tokenize.open"
	"linecache.py" -> "fp.readlines"
	"linecache.py" -> endswith
	"linecache.py" -> len
	"linecache.py" -> "filename.startswith"
	"linecache.py" -> "filename.endswith"
	"linecache.py" -> "module_globals.get"
	"linecache.py" -> "module_globals.get"
	"linecache.py" -> getattr
	"linecache.py" -> "functools.partial"
	"traceback.py" -> format
	"traceback.py" -> "StackSummary.from_list"
	"traceback.py" -> print
	"traceback.py" -> format
	"traceback.py" -> "StackSummary.from_list"
	"traceback.py" -> print_list
	"traceback.py" -> extract_tb
	"traceback.py" -> format
	"traceback.py" -> extract_tb
	"traceback.py" -> "StackSummary._extract_from_extended_frame_gen"
	"traceback.py" -> _walk_tb_with_full_positions
	"traceback.py" -> _Sentinel
	"traceback.py" -> ValueError
	"traceback.py" -> isinstance
	"traceback.py" -> TypeError
	"traceback.py" -> type
	"traceback.py" -> _parse_value_tb
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> "te.print"
	"traceback.py" -> _parse_value_tb
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> list
	"traceback.py" -> "te.format"
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> list
	"traceback.py" -> "te.format_exception_only"
	"traceback.py" -> _safe_string
	"traceback.py" -> func
	"traceback.py" -> print_exception
	"traceback.py" -> "sys.exc_info"
	"traceback.py" -> join
	"traceback.py" -> format_exception
	"traceback.py" -> "sys.exc_info"
	"traceback.py" -> hasattr
	"traceback.py" -> ValueError
	"traceback.py" -> print_exception
	"traceback.py" -> "sys._getframe"
	"traceback.py" -> print_list
	"traceback.py" -> extract_stack
	"traceback.py" -> "sys._getframe"
	"traceback.py" -> format_list
	"traceback.py" -> extract_stack
	"traceback.py" -> "sys._getframe"
	"traceback.py" -> "StackSummary.extract"
	"traceback.py" -> walk_stack
	"traceback.py" -> "stack.reverse"
	"traceback.py" -> "tb.tb_frame.clear"
	"traceback.py" -> repr
	"traceback.py" -> "locals.items"
	"traceback.py" -> isinstance
	"traceback.py" -> isinstance
	"traceback.py" -> iter
	"traceback.py" -> format
	"traceback.py" -> "linecache.getline"
	"traceback.py" -> "self._line.strip"
	"traceback.py" -> "sys._getframe"
	"traceback.py" -> _get_code_position
	"traceback.py" -> "code.co_positions"
	"traceback.py" -> next
	"traceback.py" -> "itertools.islice"
	"traceback.py" -> "klass._extract_from_extended_frame_gen"
	"traceback.py" -> extended_frame_gen
	"traceback.py" -> getattr
	"traceback.py" -> "itertools.islice"
	"traceback.py" -> "collections.deque"
	"traceback.py" -> klass
	"traceback.py" -> set
	"traceback.py" -> "fnames.add"
	"traceback.py" -> "linecache.lazycache"
	"traceback.py" -> "result.append"
	"traceback.py" -> FrameSummary
	"traceback.py" -> "linecache.checkcache"
	"traceback.py" -> StackSummary
	"traceback.py" -> isinstance
	"traceback.py" -> "result.append"
	"traceback.py" -> "result.append"
	"traceback.py" -> FrameSummary
	"traceback.py" -> "row.append"
	"traceback.py" -> format
	"traceback.py" -> "frame_summary.line.strip"
	"traceback.py" -> "row.append"
	"traceback.py" -> format
	"traceback.py" -> len
	"traceback.py" -> len
	"traceback.py" -> "frame_summary.line.lstrip"
	"traceback.py" -> _byte_offset_to_character_offset
	"traceback.py" -> _byte_offset_to_character_offset
	"traceback.py" -> suppress
	"traceback.py" -> _extract_caret_anchors_from_line_segment
	"traceback.py" -> len
	"traceback.py" -> len
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> "row.append"
	"traceback.py" -> sorted
	"traceback.py" -> "frame_summary.locals.items"
	"traceback.py" -> "row.append"
	"traceback.py" -> format
	"traceback.py" -> join
	"traceback.py" -> "self.format_frame_summary"
	"traceback.py" -> "result.append"
	"traceback.py" -> "result.append"
	"traceback.py" -> "result.append"
	"traceback.py" -> "str.encode"
	"traceback.py" -> len
	"traceback.py" -> decode
	"traceback.py" -> "collections.namedtuple"
	"traceback.py" -> "ast.parse"
	"traceback.py" -> len
	"traceback.py" -> _byte_offset_to_character_offset
	"traceback.py" -> normalize
	"traceback.py" -> normalize
	"traceback.py" -> len
	"traceback.py" -> len
	"traceback.py" -> "operator_str.lstrip"
	"traceback.py" -> len
	"traceback.py" -> isspace
	"traceback.py" -> _Anchors
	"traceback.py" -> normalize
	"traceback.py" -> normalize
	"traceback.py" -> normalize
	"traceback.py" -> normalize
	"traceback.py" -> _Anchors
	"traceback.py" -> set
	"traceback.py" -> "self.indent"
	"traceback.py" -> isinstance
	"traceback.py" -> "textwrap.indent"
	"traceback.py" -> "textwrap.indent"
	"traceback.py" -> set
	"traceback.py" -> "_seen.add"
	"traceback.py" -> id
	"traceback.py" -> "StackSummary._extract_from_extended_frame_gen"
	"traceback.py" -> _walk_tb_with_full_positions
	"traceback.py" -> _safe_string
	"traceback.py" -> getattr
	"traceback.py" -> issubclass
	"traceback.py" -> str
	"traceback.py" -> str
	"traceback.py" -> "self._load_lines"
	"traceback.py" -> "queue.pop"
	"traceback.py" -> id
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> id
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> isinstance
	"traceback.py" -> TracebackException
	"traceback.py" -> type
	"traceback.py" -> "exceptions.append"
	"traceback.py" -> "queue.append"
	"traceback.py" -> "queue.append"
	"traceback.py" -> "queue.extend"
	"traceback.py" -> zip
	"traceback.py" -> cls
	"traceback.py" -> type
	"traceback.py" -> isinstance
	"traceback.py" -> _format_final_exc_line
	"traceback.py" -> isinstance
	"traceback.py" -> issubclass
	"traceback.py" -> _format_final_exc_line
	"traceback.py" -> "self._format_syntax_error"
	"traceback.py" -> isinstance
	"traceback.py" -> _safe_string
	"traceback.py" -> "note.split"
	"traceback.py" -> _safe_string
	"traceback.py" -> format
	"traceback.py" -> format
	"traceback.py" -> "text.rstrip"
	"traceback.py" -> "rtext.lstrip"
	"traceback.py" -> len
	"traceback.py" -> len
	"traceback.py" -> format
	"traceback.py" -> "c.isspace"
	"traceback.py" -> format
	"traceback.py" -> join
	"traceback.py" -> format
	"traceback.py" -> _ExceptionPrintContext
	"traceback.py" -> "output.append"
	"traceback.py" -> "output.append"
	"traceback.py" -> reversed
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "exc.stack.format"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "exc.format_exception_only"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "exc.stack.format"
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "exc.format_exception_only"
	"traceback.py" -> len
	"traceback.py" -> range
	"traceback.py" -> "_ctx.indent"
	"traceback.py" -> format
	"traceback.py" -> "_ctx.emit"
	"traceback.py" -> "_ctx.indent"
	"traceback.py" -> "self.format"
	"traceback.py" -> print
	"ast.py" -> isinstance
	"ast.py" -> compile
	"ast.py" -> isinstance
	"ast.py" -> parse
	"ast.py" -> "node_or_string.lstrip"
	"ast.py" -> isinstance
	"ast.py" -> getattr
	"ast.py" -> ValueError
	"ast.py" -> isinstance
	"ast.py" -> type
	"ast.py" -> _raise_malformed_node
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> _convert_num
	"ast.py" -> isinstance
	"ast.py" -> _convert_num
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> tuple
	"ast.py" -> map
	"ast.py" -> isinstance
	"ast.py" -> list
	"ast.py" -> map
	"ast.py" -> isinstance
	"ast.py" -> set
	"ast.py" -> map
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> set
	"ast.py" -> isinstance
	"ast.py" -> len
	"ast.py" -> len
	"ast.py" -> _raise_malformed_node
	"ast.py" -> dict
	"ast.py" -> zip
	"ast.py" -> map
	"ast.py" -> map
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> _convert_signed_num
	"ast.py" -> _convert_num
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> _convert_signed_num
	"ast.py" -> _convert
	"ast.py" -> isinstance
	"ast.py" -> type
	"ast.py" -> getattr
	"ast.py" -> getattr
	"ast.py" -> _format
	"ast.py" -> "args.append"
	"ast.py" -> "args.append"
	"ast.py" -> getattr
	"ast.py" -> getattr
	"ast.py" -> _format
	"ast.py" -> "args.append"
	"ast.py" -> len
	"ast.py" -> join
	"ast.py" -> "sep.join"
	"ast.py" -> isinstance
	"ast.py" -> "sep.join"
	"ast.py" -> _format
	"ast.py" -> repr
	"ast.py" -> isinstance
	"ast.py" -> TypeError
	"ast.py" -> isinstance
	"ast.py" -> _format
	"ast.py" -> getattr
	"ast.py" -> hasattr
	"ast.py" -> "attr.startswith"
	"ast.py" -> setattr
	"ast.py" -> hasattr
	"ast.py" -> getattr
	"ast.py" -> hasattr
	"ast.py" -> getattr
	"ast.py" -> iter_child_nodes
	"ast.py" -> _fix
	"ast.py" -> _fix
	"ast.py" -> walk
	"ast.py" -> isinstance
	"ast.py" -> getattr
	"ast.py" -> getattr
	"ast.py" -> getattr
	"ast.py" -> getattr
	"ast.py" -> iter_fields
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> TypeError
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "inspect.cleandoc"
	"ast.py" -> len
	"ast.py" -> len
	"ast.py" -> "lines.append"
	"ast.py" -> "lines.append"
	"ast.py" -> _splitlines_no_ff
	"ast.py" -> decode
	"ast.py" -> encode
	"ast.py" -> _pad_whitespace
	"ast.py" -> decode
	"ast.py" -> encode
	"ast.py" -> decode
	"ast.py" -> encode
	"ast.py" -> decode
	"ast.py" -> encode
	"ast.py" -> "lines.insert"
	"ast.py" -> "lines.append"
	"ast.py" -> join
	"ast.py" -> deque
	"ast.py" -> "todo.popleft"
	"ast.py" -> "todo.extend"
	"ast.py" -> iter_child_nodes
	"ast.py" -> getattr
	"ast.py" -> visitor
	"ast.py" -> iter_fields
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "self.visit"
	"ast.py" -> isinstance
	"ast.py" -> "self.visit"
	"ast.py" -> "_const_node_type_names.get"
	"ast.py" -> type
	"ast.py" -> "_const_node_type_names.items"
	"ast.py" -> isinstance
	"ast.py" -> getattr
	"ast.py" -> "warnings.warn"
	"ast.py" -> visitor
	"ast.py" -> "self.generic_visit"
	"ast.py" -> iter_fields
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "self.visit"
	"ast.py" -> isinstance
	"ast.py" -> "new_values.extend"
	"ast.py" -> "new_values.append"
	"ast.py" -> isinstance
	"ast.py" -> "self.visit"
	"ast.py" -> delattr
	"ast.py" -> setattr
	"ast.py" -> hasattr
	"ast.py" -> property
	"ast.py" -> property
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "_const_types_not.get"
	"ast.py" -> "type.__instancecheck__"
	"ast.py" -> "cls._fields.index"
	"ast.py" -> len
	"ast.py" -> TypeError
	"ast.py" -> Constant
	"ast.py" -> "Constant.__new__"
	"ast.py" -> Constant
	"ast.py" -> "Constant.__new__"
	"ast.py" -> type
	"ast.py" -> type
	"ast.py" -> type
	"ast.py" -> type
	"ast.py" -> Tuple
	"ast.py" -> list
	"ast.py" -> Load
	"ast.py" -> hasattr
	"ast.py" -> property
	"ast.py" -> repr
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> auto
	"ast.py" -> "self.__class__"
	"ast.py" -> _simple_enum
	"ast.py" -> iter
	"ast.py" -> f
	"ast.py" -> next
	"ast.py" -> inter
	"ast.py" -> f
	"ast.py" -> len
	"ast.py" -> traverser
	"ast.py" -> "self.write"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.maybe_newline"
	"ast.py" -> "self.write"
	"ast.py" -> "self._source.extend"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.delimit"
	"ast.py" -> nullcontext
	"ast.py" -> "self.delimit_if"
	"ast.py" -> "self.get_precedence"
	"ast.py" -> "self._precedences.get"
	"ast.py" -> isinstance
	"ast.py" -> len
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "self._type_ignores.get"
	"ast.py" -> isinstance
	"ast.py" -> "self.traverse"
	"ast.py" -> visit
	"ast.py" -> super
	"ast.py" -> "self.traverse"
	"ast.py" -> join
	"ast.py" -> "self.get_raw_docstring"
	"ast.py" -> "self._write_docstring"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self._write_docstring_and_traverse_body"
	"ast.py" -> "self._type_ignores.clear"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.get_type_comment"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.delimit_if"
	"ast.py" -> isinstance
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.write"
	"ast.py" -> ValueError
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> ValueError
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.do_visit_try"
	"ast.py" -> "self.do_visit_try"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.maybe_newline"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.delimit_if"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self._write_docstring_and_traverse_body"
	"ast.py" -> "self._function_helper"
	"ast.py" -> "self._function_helper"
	"ast.py" -> "self.maybe_newline"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.get_type_comment"
	"ast.py" -> "self._write_docstring_and_traverse_body"
	"ast.py" -> "self._for_helper"
	"ast.py" -> "self._for_helper"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.get_type_comment"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> len
	"ast.py" -> isinstance
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.block"
	"ast.py" -> "self.get_type_comment"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.block"
	"ast.py" -> "self.get_type_comment"
	"ast.py" -> "self.traverse"
	"ast.py" -> "c.isprintable"
	"ast.py" -> decode
	"ast.py" -> "c.encode"
	"ast.py" -> join
	"ast.py" -> map
	"ast.py" -> repr
	"ast.py" -> next
	"ast.py" -> "possible_quotes.sort"
	"ast.py" -> len
	"ast.py" -> "self._str_literal_helper"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.buffered"
	"ast.py" -> "self._write_fstring_inner"
	"ast.py" -> "self._write_str_avoiding_backslashes"
	"ast.py" -> join
	"ast.py" -> "self.buffered"
	"ast.py" -> "self._write_fstring_inner"
	"ast.py" -> "fstring_parts.append"
	"ast.py" -> join
	"ast.py" -> isinstance
	"ast.py" -> list
	"ast.py" -> "self._str_literal_helper"
	"ast.py" -> "new_fstring_parts.append"
	"ast.py" -> join
	"ast.py" -> "self.write"
	"ast.py" -> isinstance
	"ast.py" -> "self._write_fstring_inner"
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> replace
	"ast.py" -> "node.value.replace"
	"ast.py" -> "self.write"
	"ast.py" -> isinstance
	"ast.py" -> "self.visit_FormattedValue"
	"ast.py" -> ValueError
	"ast.py" -> <unknown_function>
	"ast.py" -> type
	"ast.py" -> "unparser.set_precedence"
	"ast.py" -> "_Precedence.TEST.next"
	"ast.py" -> "unparser.visit"
	"ast.py" -> "self.delimit"
	"ast.py" -> unparse_inner
	"ast.py" -> ValueError
	"ast.py" -> "expr.startswith"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> chr
	"ast.py" -> "self.write"
	"ast.py" -> "self._write_fstring_inner"
	"ast.py" -> "self.write"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.write"
	"ast.py" -> "self._write_str_avoiding_backslashes"
	"ast.py" -> isinstance
	"ast.py" -> "self.write"
	"ast.py" -> replace
	"ast.py" -> replace
	"ast.py" -> repr
	"ast.py" -> isinstance
	"ast.py" -> "self._write_str_avoiding_backslashes"
	"ast.py" -> "self.write"
	"ast.py" -> repr
	"ast.py" -> isinstance
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.items_view"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self._write_constant"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "_Precedence.TEST.next"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "_Precedence.TEST.next"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> write_key_value_pair
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> zip
	"ast.py" -> "self.delimit_if"
	"ast.py" -> len
	"ast.py" -> "self.get_precedence"
	"ast.py" -> "self.items_view"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> frozenset
	"ast.py" -> "self.require_parens"
	"ast.py" -> "operator_precedence.next"
	"ast.py" -> "operator_precedence.next"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "_Precedence.CMP.next"
	"ast.py" -> "self.traverse"
	"ast.py" -> zip
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "operator_precedence.next"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> isinstance
	"ast.py" -> isinstance
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> isinstance
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> is_non_empty_tuple
	"ast.py" -> "self.items_view"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> len
	"ast.py" -> len
	"ast.py" -> enumerate
	"ast.py" -> zip
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> len
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> zip
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.write"
	"ast.py" -> "self.buffered"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.fill"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.block"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self._write_constant"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> zip
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.delimit"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> zip
	"ast.py" -> "self.write"
	"ast.py" -> "self.write"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "self.traverse"
	"ast.py" -> "self.write"
	"ast.py" -> "self.require_parens"
	"ast.py" -> "self.set_precedence"
	"ast.py" -> "_Precedence.BOR.next"
	"ast.py" -> "self.interleave"
	"ast.py" -> "self.write"
	"ast.py" -> _Unparser
	"ast.py" -> "unparser.visit"
	"ast.py" -> "argparse.ArgumentParser"
	"ast.py" -> "parser.add_argument"
	"ast.py" -> "argparse.FileType"
	"ast.py" -> "parser.add_argument"
	"ast.py" -> "parser.add_argument"
	"ast.py" -> "parser.add_argument"
	"ast.py" -> "parser.add_argument"
	"ast.py" -> "parser.parse_args"
	"ast.py" -> "infile.read"
	"ast.py" -> parse
	"ast.py" -> print
	"ast.py" -> dump
	"ast.py" -> main
	"contextlib.py" -> classmethod
	"contextlib.py" -> "_collections_abc._check_methods"
	"contextlib.py" -> classmethod
	"contextlib.py" -> "_collections_abc._check_methods"
	"contextlib.py" -> "self._recreate_cm"
	"contextlib.py" -> func
	"contextlib.py" -> wraps
	"contextlib.py" -> "self._recreate_cm"
	"contextlib.py" -> func
	"contextlib.py" -> wraps
	"contextlib.py" -> func
	"contextlib.py" -> getattr
	"contextlib.py" -> type
	"contextlib.py" -> "self.__class__"
	"contextlib.py" -> next
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> next
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> typ
	"contextlib.py" -> "self.gen.throw"
	"contextlib.py" -> isinstance
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> anext
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> anext
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> typ
	"contextlib.py" -> "self.gen.athrow"
	"contextlib.py" -> isinstance
	"contextlib.py" -> RuntimeError
	"contextlib.py" -> _GeneratorContextManager
	"contextlib.py" -> wraps
	"contextlib.py" -> _AsyncGeneratorContextManager
	"contextlib.py" -> wraps
	"contextlib.py" -> "self.thing.close"
	"contextlib.py" -> "self.thing.aclose"
	"contextlib.py" -> "self._old_targets.append"
	"contextlib.py" -> getattr
	"contextlib.py" -> setattr
	"contextlib.py" -> setattr
	"contextlib.py" -> "self._old_targets.pop"
	"contextlib.py" -> issubclass
	"contextlib.py" -> MethodType
	"contextlib.py" -> callback
	"contextlib.py" -> deque
	"contextlib.py" -> <unknown_function>
	"contextlib.py" -> type
	"contextlib.py" -> deque
	"contextlib.py" -> type
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "self._push_cm_exit"
	"contextlib.py" -> type
	"contextlib.py" -> TypeError
	"contextlib.py" -> _enter
	"contextlib.py" -> "self._push_cm_exit"
	"contextlib.py" -> "self._create_cb_wrapper"
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "self._create_exit_wrapper"
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "self._exit_callbacks.append"
	"contextlib.py" -> "sys.exc_info"
	"contextlib.py" -> "self._exit_callbacks.pop"
	"contextlib.py" -> cb
	"contextlib.py" -> "sys.exc_info"
	"contextlib.py" -> _fix_exception_context
	"contextlib.py" -> "self.__exit__"
	"contextlib.py" -> MethodType
	"contextlib.py" -> callback
	"contextlib.py" -> type
	"contextlib.py" -> TypeError
	"contextlib.py" -> _enter
	"contextlib.py" -> "self._push_async_cm_exit"
	"contextlib.py" -> type
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "self._push_async_cm_exit"
	"contextlib.py" -> "self._create_async_cb_wrapper"
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "self.__aexit__"
	"contextlib.py" -> "self._create_async_exit_wrapper"
	"contextlib.py" -> "self._push_exit_callback"
	"contextlib.py" -> "sys.exc_info"
	"contextlib.py" -> "self._exit_callbacks.pop"
	"contextlib.py" -> cb
	"contextlib.py" -> cb
	"contextlib.py" -> "sys.exc_info"
	"contextlib.py" -> _fix_exception_context
	"contextlib.py" -> "self._old_cwd.append"
	"contextlib.py" -> "os.getcwd"
	"contextlib.py" -> "os.chdir"
	"contextlib.py" -> "os.chdir"
	"contextlib.py" -> "self._old_cwd.pop"
	"textwrap.py" -> "dict.fromkeys"
	"textwrap.py" -> map
	"textwrap.py" -> ord
	"textwrap.py" -> "re.escape"
	"textwrap.py" -> "re.compile"
	"textwrap.py" -> "re.compile"
	"textwrap.py" -> "re.compile"
	"textwrap.py" -> "text.expandtabs"
	"textwrap.py" -> "text.translate"
	"textwrap.py" -> "self.wordsep_re.split"
	"textwrap.py" -> "self.wordsep_simple_re.split"
	"textwrap.py" -> len
	"textwrap.py" -> patsearch
	"textwrap.py" -> len
	"textwrap.py" -> "chunk.rfind"
	"textwrap.py" -> any
	"textwrap.py" -> "cur_line.append"
	"textwrap.py" -> "cur_line.append"
	"textwrap.py" -> "reversed_chunks.pop"
	"textwrap.py" -> ValueError
	"textwrap.py" -> len
	"textwrap.py" -> len
	"textwrap.py" -> "self.placeholder.lstrip"
	"textwrap.py" -> ValueError
	"textwrap.py" -> "chunks.reverse"
	"textwrap.py" -> len
	"textwrap.py" -> strip
	"textwrap.py" -> len
	"textwrap.py" -> "cur_line.append"
	"textwrap.py" -> "chunks.pop"
	"textwrap.py" -> len
	"textwrap.py" -> "self._handle_long_word"
	"textwrap.py" -> sum
	"textwrap.py" -> map
	"textwrap.py" -> strip
	"textwrap.py" -> len
	"textwrap.py" -> len
	"textwrap.py" -> len
	"textwrap.py" -> strip
	"textwrap.py" -> "lines.append"
	"textwrap.py" -> join
	"textwrap.py" -> strip
	"textwrap.py" -> len
	"textwrap.py" -> "cur_line.append"
	"textwrap.py" -> "lines.append"
	"textwrap.py" -> join
	"textwrap.py" -> len
	"textwrap.py" -> rstrip
	"textwrap.py" -> len
	"textwrap.py" -> len
	"textwrap.py" -> "lines.append"
	"textwrap.py" -> "self.placeholder.lstrip"
	"textwrap.py" -> "self._munge_whitespace"
	"textwrap.py" -> "self._split"
	"textwrap.py" -> "self._split_chunks"
	"textwrap.py" -> "self._fix_sentence_endings"
	"textwrap.py" -> "self._wrap_chunks"
	"textwrap.py" -> join
	"textwrap.py" -> "self.wrap"
	"textwrap.py" -> TextWrapper
	"textwrap.py" -> "w.wrap"
	"textwrap.py" -> TextWrapper
	"textwrap.py" -> "w.fill"
	"textwrap.py" -> TextWrapper
	"textwrap.py" -> "w.fill"
	"textwrap.py" -> join
	"textwrap.py" -> split
	"textwrap.py" -> "text.strip"
	"textwrap.py" -> "re.compile"
	"textwrap.py" -> "re.compile"
	"textwrap.py" -> "_whitespace_only_re.sub"
	"textwrap.py" -> "_leading_whitespace_re.findall"
	"textwrap.py" -> "indent.startswith"
	"textwrap.py" -> "margin.startswith"
	"textwrap.py" -> enumerate
	"textwrap.py" -> zip
	"textwrap.py" -> "text.split"
	"textwrap.py" -> "line.startswith"
	"textwrap.py" -> "re.sub"
	"textwrap.py" -> "line.strip"
	"textwrap.py" -> "text.splitlines"
	"textwrap.py" -> predicate
	"textwrap.py" -> join
	"textwrap.py" -> prefixed_lines
	"textwrap.py" -> print
	"textwrap.py" -> dedent
	"__init__.py" -> "_collections_abc.MutableSequence.register"
	"__init__.py" -> reversed
	"__init__.py" -> reversed
	"__init__.py" -> reversed
	"__init__.py" -> _Link
	"__init__.py" -> _proxy
	"__init__.py" -> "self.__update"
	"__init__.py" -> Link
	"__init__.py" -> proxy
	"__init__.py" -> dict_setitem
	"__init__.py" -> dict_delitem
	"__init__.py" -> "self.__map.pop"
	"__init__.py" -> "self.__map.clear"
	"__init__.py" -> "dict.clear"
	"__init__.py" -> KeyError
	"__init__.py" -> "dict.pop"
	"__init__.py" -> len
	"__init__.py" -> sizeof
	"__init__.py" -> sizeof
	"__init__.py" -> sizeof
	"__init__.py" -> sizeof
	"__init__.py" -> _OrderedDictKeysView
	"__init__.py" -> _OrderedDictItemsView
	"__init__.py" -> _OrderedDictValuesView
	"__init__.py" -> object
	"__init__.py" -> "dict.pop"
	"__init__.py" -> "self.__map.pop"
	"__init__.py" -> KeyError
	"__init__.py" -> list
	"__init__.py" -> "self.items"
	"__init__.py" -> _recursive_repr
	"__init__.py" -> "self.__getstate__"
	"__init__.py" -> isinstance
	"__init__.py" -> "state.copy"
	"__init__.py" -> "slots.copy"
	"__init__.py" -> vars
	"__init__.py" -> OrderedDict
	"__init__.py" -> "state.pop"
	"__init__.py" -> "slots.pop"
	"__init__.py" -> iter
	"__init__.py" -> "self.items"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> cls
	"__init__.py" -> isinstance
	"__init__.py" -> "dict.__eq__"
	"__init__.py" -> all
	"__init__.py" -> map
	"__init__.py" -> "dict.__eq__"
	"__init__.py" -> "self.update"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "new.update"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "new.update"
	"__init__.py" -> property
	"__init__.py" -> _itemgetter
	"__init__.py" -> isinstance
	"__init__.py" -> split
	"__init__.py" -> "field_names.replace"
	"__init__.py" -> list
	"__init__.py" -> map
	"__init__.py" -> "_sys.intern"
	"__init__.py" -> str
	"__init__.py" -> set
	"__init__.py" -> enumerate
	"__init__.py" -> "name.isidentifier"
	"__init__.py" -> _iskeyword
	"__init__.py" -> "name.startswith"
	"__init__.py" -> "seen.add"
	"__init__.py" -> type
	"__init__.py" -> TypeError
	"__init__.py" -> "name.isidentifier"
	"__init__.py" -> ValueError
	"__init__.py" -> _iskeyword
	"__init__.py" -> ValueError
	"__init__.py" -> set
	"__init__.py" -> "name.startswith"
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> "seen.add"
	"__init__.py" -> tuple
	"__init__.py" -> len
	"__init__.py" -> len
	"__init__.py" -> TypeError
	"__init__.py" -> dict
	"__init__.py" -> reversed
	"__init__.py" -> list
	"__init__.py" -> zip
	"__init__.py" -> reversed
	"__init__.py" -> reversed
	"__init__.py" -> tuple
	"__init__.py" -> map
	"__init__.py" -> len
	"__init__.py" -> join
	"__init__.py" -> join
	"__init__.py" -> eval
	"__init__.py" -> tuple_new
	"__init__.py" -> _len
	"__init__.py" -> TypeError
	"__init__.py" -> len
	"__init__.py" -> "self._make"
	"__init__.py" -> _map
	"__init__.py" -> ValueError
	"__init__.py" -> list
	"__init__.py" -> _dict
	"__init__.py" -> _zip
	"__init__.py" -> _tuple
	"__init__.py" -> enumerate
	"__init__.py" -> "_sys.intern"
	"__init__.py" -> _tuplegetter
	"__init__.py" -> type
	"__init__.py" -> "f_globals.get"
	"__init__.py" -> "_sys._getframe"
	"__init__.py" -> mapping_get
	"__init__.py" -> __init__
	"__init__.py" -> super
	"__init__.py" -> "self.update"
	"__init__.py" -> sum
	"__init__.py" -> "self.values"
	"__init__.py" -> sorted
	"__init__.py" -> "self.items"
	"__init__.py" -> _itemgetter
	"__init__.py" -> "heapq.nlargest"
	"__init__.py" -> "self.items"
	"__init__.py" -> _itemgetter
	"__init__.py" -> "_chain.from_iterable"
	"__init__.py" -> _starmap
	"__init__.py" -> "self.items"
	"__init__.py" -> NotImplementedError
	"__init__.py" -> isinstance
	"__init__.py" -> "iterable.items"
	"__init__.py" -> self_get
	"__init__.py" -> update
	"__init__.py" -> super
	"__init__.py" -> _count_elements
	"__init__.py" -> "self.update"
	"__init__.py" -> isinstance
	"__init__.py" -> "iterable.items"
	"__init__.py" -> self_get
	"__init__.py" -> self_get
	"__init__.py" -> "self.subtract"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> dict
	"__init__.py" -> __delitem__
	"__init__.py" -> super
	"__init__.py" -> dict
	"__init__.py" -> "self.most_common"
	"__init__.py" -> dict
	"__init__.py" -> isinstance
	"__init__.py" -> all
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> all
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> all
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> "other.items"
	"__init__.py" -> isinstance
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> "other.items"
	"__init__.py" -> isinstance
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> "other.items"
	"__init__.py" -> isinstance
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> Counter
	"__init__.py" -> "self.items"
	"__init__.py" -> "self.items"
	"__init__.py" -> "other.items"
	"__init__.py" -> "self._keep_positive"
	"__init__.py" -> "other.items"
	"__init__.py" -> "self._keep_positive"
	"__init__.py" -> "other.items"
	"__init__.py" -> "self._keep_positive"
	"__init__.py" -> "self.items"
	"__init__.py" -> "self._keep_positive"
	"__init__.py" -> list
	"__init__.py" -> KeyError
	"__init__.py" -> "self.__missing__"
	"__init__.py" -> len
	"__init__.py" -> union
	"__init__.py" -> set
	"__init__.py" -> reversed
	"__init__.py" -> "d.update"
	"__init__.py" -> "dict.fromkeys"
	"__init__.py" -> iter
	"__init__.py" -> any
	"__init__.py" -> any
	"__init__.py" -> join
	"__init__.py" -> map
	"__init__.py" -> _recursive_repr
	"__init__.py" -> cls
	"__init__.py" -> "dict.fromkeys"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> copy
	"__init__.py" -> "m.update"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> KeyError
	"__init__.py" -> popitem
	"__init__.py" -> KeyError
	"__init__.py" -> pop
	"__init__.py" -> KeyError
	"__init__.py" -> clear
	"__init__.py" -> update
	"__init__.py" -> isinstance
	"__init__.py" -> "self.copy"
	"__init__.py" -> update
	"__init__.py" -> isinstance
	"__init__.py" -> dict
	"__init__.py" -> reversed
	"__init__.py" -> "m.update"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.update"
	"__init__.py" -> "self.update"
	"__init__.py" -> len
	"__init__.py" -> hasattr
	"__init__.py" -> "self.__class__.__missing__"
	"__init__.py" -> KeyError
	"__init__.py" -> iter
	"__init__.py" -> repr
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__.__new__"
	"__init__.py" -> "inst.__dict__.update"
	"__init__.py" -> copy
	"__init__.py" -> UserDict
	"__init__.py" -> "self.data.copy"
	"__init__.py" -> "copy.copy"
	"__init__.py" -> "c.update"
	"__init__.py" -> cls
	"__init__.py" -> type
	"__init__.py" -> type
	"__init__.py" -> isinstance
	"__init__.py" -> list
	"__init__.py" -> repr
	"__init__.py" -> "self.__cast"
	"__init__.py" -> "self.__cast"
	"__init__.py" -> "self.__cast"
	"__init__.py" -> "self.__cast"
	"__init__.py" -> "self.__cast"
	"__init__.py" -> isinstance
	"__init__.py" -> len
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> type
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> list
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> type
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> list
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> type
	"__init__.py" -> list
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__.__new__"
	"__init__.py" -> "inst.__dict__.update"
	"__init__.py" -> "self.data.append"
	"__init__.py" -> "self.data.insert"
	"__init__.py" -> "self.data.pop"
	"__init__.py" -> "self.data.remove"
	"__init__.py" -> "self.data.clear"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.count"
	"__init__.py" -> "self.data.index"
	"__init__.py" -> "self.data.reverse"
	"__init__.py" -> "self.data.sort"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.data.extend"
	"__init__.py" -> "self.data.extend"
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> str
	"__init__.py" -> str
	"__init__.py" -> repr
	"__init__.py" -> int
	"__init__.py" -> float
	"__init__.py" -> complex
	"__init__.py" -> hash
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> len
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> str
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> str
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> str
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.capitalize"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.casefold"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.center"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.data.count"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.removeprefix"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.removesuffix"
	"__init__.py" -> "self.data.encode"
	"__init__.py" -> "self.data.endswith"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.expandtabs"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.data.find"
	"__init__.py" -> "self.data.format"
	"__init__.py" -> "self.data.format_map"
	"__init__.py" -> "self.data.index"
	"__init__.py" -> "self.data.isalpha"
	"__init__.py" -> "self.data.isalnum"
	"__init__.py" -> "self.data.isascii"
	"__init__.py" -> "self.data.isdecimal"
	"__init__.py" -> "self.data.isdigit"
	"__init__.py" -> "self.data.isidentifier"
	"__init__.py" -> "self.data.islower"
	"__init__.py" -> "self.data.isnumeric"
	"__init__.py" -> "self.data.isprintable"
	"__init__.py" -> "self.data.isspace"
	"__init__.py" -> "self.data.istitle"
	"__init__.py" -> "self.data.isupper"
	"__init__.py" -> "self.data.join"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.ljust"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.lower"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.lstrip"
	"__init__.py" -> "self.data.partition"
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.replace"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.data.rfind"
	"__init__.py" -> "self.data.rindex"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.rjust"
	"__init__.py" -> "self.data.rpartition"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.rstrip"
	"__init__.py" -> "self.data.split"
	"__init__.py" -> "self.data.rsplit"
	"__init__.py" -> "self.data.splitlines"
	"__init__.py" -> "self.data.startswith"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.strip"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.swapcase"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.title"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.translate"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.upper"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.data.zfill"
	"enum.py" -> hasattr
	"enum.py" -> hasattr
	"enum.py" -> hasattr
	"enum.py" -> len
	"enum.py" -> len
	"enum.py" -> isinstance
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> "qualname.endswith"
	"enum.py" -> len
	"enum.py" -> len
	"enum.py" -> "name.startswith"
	"enum.py" -> TypeError
	"enum.py" -> isinstance
	"enum.py" -> setattr
	"enum.py" -> setattr
	"enum.py" -> isinstance
	"enum.py" -> ValueError
	"enum.py" -> list
	"enum.py" -> _iter_bits_lsb
	"enum.py" -> "num.bit_length"
	"enum.py" -> replace
	"enum.py" -> "bltns.bin"
	"enum.py" -> "bltns.bin"
	"enum.py" -> len
	"enum.py" -> "text.split"
	"enum.py" -> enumerate
	"enum.py" -> enumerate
	"enum.py" -> join
	"enum.py" -> _auto_null
	"enum.py" -> AttributeError
	"enum.py" -> AttributeError
	"enum.py" -> "self.fget"
	"enum.py" -> AttributeError
	"enum.py" -> "self.fset"
	"enum.py" -> AttributeError
	"enum.py" -> "self.fdel"
	"enum.py" -> delattr
	"enum.py" -> isinstance
	"enum.py" -> "enum_class._new_member_"
	"enum.py" -> "enum_class._new_member_"
	"enum.py" -> hasattr
	"enum.py" -> "enum_class._member_type_"
	"enum.py" -> TypeError
	"enum.py" -> "enum_member.__init__"
	"enum.py" -> len
	"enum.py" -> issubclass
	"enum.py" -> _is_single_bit
	"enum.py" -> "enum_class._flag_mask_.bit_length"
	"enum.py" -> "enum_class._member_map_.items"
	"enum.py" -> issubclass
	"enum.py" -> "enum_class._member_names_.append"
	"enum.py" -> issubclass
	"enum.py" -> _is_single_bit
	"enum.py" -> "enum_class._member_names_.append"
	"enum.py" -> "base.__dict__.get"
	"enum.py" -> isinstance
	"enum.py" -> hasattr
	"enum.py" -> hasattr
	"enum.py" -> hasattr
	"enum.py" -> property
	"enum.py" -> "redirect.__set_name__"
	"enum.py" -> setattr
	"enum.py" -> setattr
	"enum.py" -> "enum_class._value2member_map_.setdefault"
	"enum.py" -> "enum_class._unhashable_values_.append"
	"enum.py" -> __init__
	"enum.py" -> super
	"enum.py" -> _is_internal_class
	"enum.py" -> "warnings.warn"
	"enum.py" -> _is_private
	"enum.py" -> _is_sunder
	"enum.py" -> ValueError
	"enum.py" -> TypeError
	"enum.py" -> isinstance
	"enum.py" -> setattr
	"enum.py" -> isinstance
	"enum.py" -> split
	"enum.py" -> "value.replace"
	"enum.py" -> list
	"enum.py" -> set
	"enum.py" -> set
	"enum.py" -> ValueError
	"enum.py" -> _is_dunder
	"enum.py" -> TypeError
	"enum.py" -> isinstance
	"enum.py" -> _is_descriptor
	"enum.py" -> TypeError
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> type
	"enum.py" -> any
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> "self._generate_next_value"
	"enum.py" -> len
	"enum.py" -> "self._last_values.append"
	"enum.py" -> "auto_valued.append"
	"enum.py" -> tuple
	"enum.py" -> "self._last_values.append"
	"enum.py" -> __setitem__
	"enum.py" -> super
	"enum.py" -> "members.keys"
	"enum.py" -> "more_members.items"
	"enum.py" -> "metacls._check_for_existing_members_"
	"enum.py" -> _EnumDict
	"enum.py" -> "metacls._get_mixins_"
	"enum.py" -> getattr
	"enum.py" -> __new__
	"enum.py" -> super
	"enum.py" -> append
	"enum.py" -> "classdict.setdefault"
	"enum.py" -> "classdict.pop"
	"enum.py" -> set
	"enum.py" -> ValueError
	"enum.py" -> join
	"enum.py" -> repr
	"enum.py" -> "classdict.pop"
	"enum.py" -> dict
	"enum.py" -> "classdict.items"
	"enum.py" -> "metacls._get_mixins_"
	"enum.py" -> "metacls._find_new_"
	"enum.py" -> _proto_member
	"enum.py" -> "metacls._find_data_repr_"
	"enum.py" -> getattr
	"enum.py" -> __new__
	"enum.py" -> super
	"enum.py" -> "classdict.update"
	"enum.py" -> TypeError
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> setattr
	"enum.py" -> issubclass
	"enum.py" -> getattr
	"enum.py" -> setattr
	"enum.py" -> isinstance
	"enum.py" -> split
	"enum.py" -> "_order_.replace"
	"enum.py" -> issubclass
	"enum.py" -> delattr
	"enum.py" -> delattr
	"enum.py" -> delattr
	"enum.py" -> delattr
	"enum.py" -> delattr
	"enum.py" -> issubclass
	"enum.py" -> sorted
	"enum.py" -> _is_single_bit
	"enum.py" -> TypeError
	"enum.py" -> "cls.__new__"
	"enum.py" -> "cls._create_"
	"enum.py" -> isinstance
	"enum.py" -> "warnings.warn"
	"enum.py" -> TypeError
	"enum.py" -> type
	"enum.py" -> isinstance
	"enum.py" -> AttributeError
	"enum.py" -> __delattr__
	"enum.py" -> super
	"enum.py" -> set
	"enum.py" -> "interesting.add"
	"enum.py" -> "interesting.add"
	"enum.py" -> sorted
	"enum.py" -> sorted
	"enum.py" -> set
	"enum.py" -> dir
	"enum.py" -> _is_dunder
	"enum.py" -> AttributeError
	"enum.py" -> AttributeError
	"enum.py" -> len
	"enum.py" -> MappingProxyType
	"enum.py" -> issubclass
	"enum.py" -> reversed
	"enum.py" -> "cls.__dict__.get"
	"enum.py" -> AttributeError
	"enum.py" -> __setattr__
	"enum.py" -> super
	"enum.py" -> "cls._get_mixins_"
	"enum.py" -> "metacls.__prepare__"
	"enum.py" -> isinstance
	"enum.py" -> split
	"enum.py" -> "names.replace"
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> enumerate
	"enum.py" -> "first_enum._generate_next_value_"
	"enum.py" -> "last_values.append"
	"enum.py" -> "names.append"
	"enum.py" -> isinstance
	"enum.py" -> "sys._getframe"
	"enum.py" -> _make_class_unpicklable
	"enum.py" -> "metacls.__new__"
	"enum.py" -> "source.items"
	"enum.py" -> filter
	"enum.py" -> "members.sort"
	"enum.py" -> "members.sort"
	"enum.py" -> type
	"enum.py" -> <unknown_function>
	"enum.py" -> _simple_enum
	"enum.py" -> global_enum
	"enum.py" -> "__dict__.update"
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> "mcls._check_for_existing_members_"
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> "mcls._find_data_type_"
	"enum.py" -> isinstance
	"enum.py" -> set
	"enum.py" -> set
	"enum.py" -> "base_chain.add"
	"enum.py" -> isinstance
	"enum.py" -> "data_types.add"
	"enum.py" -> isinstance
	"enum.py" -> "data_types.add"
	"enum.py" -> len
	"enum.py" -> TypeError
	"enum.py" -> "data_types.pop"
	"enum.py" -> "classdict.get"
	"enum.py" -> getattr
	"enum.py" -> type
	"enum.py" -> "cls._member_map_.values"
	"enum.py" -> "cls._missing_"
	"enum.py" -> isinstance
	"enum.py" -> issubclass
	"enum.py" -> isinstance
	"enum.py" -> ValueError
	"enum.py" -> TypeError
	"enum.py" -> isinstance
	"enum.py" -> "last_values.sort"
	"enum.py" -> "warnings.warn"
	"enum.py" -> reversed
	"enum.py" -> v_repr
	"enum.py" -> set
	"enum.py" -> set
	"enum.py" -> "object.__dir__"
	"enum.py" -> getattr
	"enum.py" -> "interesting.add"
	"enum.py" -> "self.__class__.mro"
	"enum.py" -> "cls.__dict__.items"
	"enum.py" -> isinstance
	"enum.py" -> "interesting.add"
	"enum.py" -> "interesting.discard"
	"enum.py" -> "interesting.add"
	"enum.py" -> sorted
	"enum.py" -> set
	"enum.py" -> "str.__format__"
	"enum.py" -> str
	"enum.py" -> hash
	"enum.py" -> len
	"enum.py" -> TypeError
	"enum.py" -> len
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> len
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> len
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> str
	"enum.py" -> "str.__new__"
	"enum.py" -> "name.lower"
	"enum.py" -> auto
	"enum.py" -> auto
	"enum.py" -> auto
	"enum.py" -> auto
	"enum.py" -> cls
	"enum.py" -> _iter_bits_lsb
	"enum.py" -> cls
	"enum.py" -> "cls._value2member_map_.get"
	"enum.py" -> max
	"enum.py" -> _high_bit
	"enum.py" -> TypeError
	"enum.py" -> _iter_bits_lsb
	"enum.py" -> "cls._value2member_map_.get"
	"enum.py" -> sorted
	"enum.py" -> "cls._iter_member_by_value_"
	"enum.py" -> isinstance
	"enum.py" -> ValueError
	"enum.py" -> max
	"enum.py" -> "value.bit_length"
	"enum.py" -> "flag_mask.bit_length"
	"enum.py" -> ValueError
	"enum.py" -> bin
	"enum.py" -> bin
	"enum.py" -> max
	"enum.py" -> "value.bit_length"
	"enum.py" -> ValueError
	"enum.py" -> ValueError
	"enum.py" -> bin
	"enum.py" -> "object.__new__"
	"enum.py" -> "cls._member_type_.__new__"
	"enum.py" -> hasattr
	"enum.py" -> "cls._iter_member_"
	"enum.py" -> "members.append"
	"enum.py" -> "cls._member_map_.items"
	"enum.py" -> "members.append"
	"enum.py" -> join
	"enum.py" -> ValueError
	"enum.py" -> "cls._numeric_repr_"
	"enum.py" -> "cls._value2member_map_.setdefault"
	"enum.py" -> isinstance
	"enum.py" -> TypeError
	"enum.py" -> type
	"enum.py" -> "self._iter_member_"
	"enum.py" -> "self._value_.bit_count"
	"enum.py" -> v_repr
	"enum.py" -> v_repr
	"enum.py" -> bool
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> "self.__class__"
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> "self.__class__"
	"enum.py" -> isinstance
	"enum.py" -> isinstance
	"enum.py" -> "self.__class__"
	"enum.py" -> "self.__class__"
	"enum.py" -> "self.__class__"
	"enum.py" -> isinstance
	"enum.py" -> "value.bit_length"
	"enum.py" -> "enumeration.__members__.items"
	"enum.py" -> "duplicates.append"
	"enum.py" -> join
	"enum.py" -> ValueError
	"enum.py" -> _high_bit
	"enum.py" -> "self.__class__.__module__.split"
	"enum.py" -> "self.__class__.__module__.split"
	"enum.py" -> _is_single_bit
	"enum.py" -> join
	"enum.py" -> "self.name.split"
	"enum.py" -> "self._name_.split"
	"enum.py" -> isdigit
	"enum.py" -> "name.append"
	"enum.py" -> "name.append"
	"enum.py" -> join
	"enum.py" -> issubclass
	"enum.py" -> issubclass
	"enum.py" -> "__dict__.update"
	"enum.py" -> "cls.__dict__.get"
	"enum.py" -> issubclass
	"enum.py" -> "cls.__dict__.items"
	"enum.py" -> _is_dunder
	"enum.py" -> _is_private
	"enum.py" -> _is_sunder
	"enum.py" -> _is_descriptor
	"enum.py" -> "cls.__dict__.get"
	"enum.py" -> type
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> setattr
	"enum.py" -> issubclass
	"enum.py" -> "attrs.items"
	"enum.py" -> isinstance
	"enum.py" -> gnv
	"enum.py" -> len
	"enum.py" -> property
	"enum.py" -> "redirect.__set_name__"
	"enum.py" -> setattr
	"enum.py" -> isinstance
	"enum.py" -> new_member
	"enum.py" -> new_member
	"enum.py" -> "member.__init__"
	"enum.py" -> property
	"enum.py" -> "redirect.__set_name__"
	"enum.py" -> setattr
	"enum.py" -> len
	"enum.py" -> _is_single_bit
	"enum.py" -> "member_names.append"
	"enum.py" -> "gnv_last_values.append"
	"enum.py" -> bit_length
	"enum.py" -> sorted
	"enum.py" -> "attrs.items"
	"enum.py" -> isinstance
	"enum.py" -> gnv
	"enum.py" -> len
	"enum.py" -> property
	"enum.py" -> "redirect.__set_name__"
	"enum.py" -> setattr
	"enum.py" -> isinstance
	"enum.py" -> new_member
	"enum.py" -> new_member
	"enum.py" -> "member.__init__"
	"enum.py" -> len
	"enum.py" -> property
	"enum.py" -> "redirect.__set_name__"
	"enum.py" -> setattr
	"enum.py" -> "member_names.append"
	"enum.py" -> "gnv_last_values.append"
	"enum.py" -> _simple_enum
	"enum.py" -> issubclass
	"enum.py" -> issubclass
	"enum.py" -> TypeError
	"enum.py" -> "enumeration.__members__.items"
	"enum.py" -> "duplicates.append"
	"enum.py" -> join
	"enum.py" -> ValueError
	"enum.py" -> set
	"enum.py" -> len
	"enum.py" -> min
	"enum.py" -> max
	"enum.py" -> range
	"enum.py" -> _high_bit
	"enum.py" -> _high_bit
	"enum.py" -> "missing.append"
	"enum.py" -> range
	"enum.py" -> "missing.append"
	"enum.py" -> Exception
	"enum.py" -> ValueError
	"enum.py" -> join
	"enum.py" -> str
	"enum.py" -> "enumeration._member_map_.items"
	"enum.py" -> list
	"enum.py" -> _iter_bits_lsb
	"enum.py" -> "missing_names.append"
	"enum.py" -> reduce
	"enum.py" -> len
	"enum.py" -> join
	"enum.py" -> _is_single_bit
	"enum.py" -> ValueError
	"enum.py" -> list
	"enum.py" -> "checked_dict.keys"
	"enum.py" -> list
	"enum.py" -> "simple_dict.keys"
	"enum.py" -> set
	"enum.py" -> list
	"enum.py" -> "checked_enum._member_map_.keys"
	"enum.py" -> list
	"enum.py" -> "simple_enum._member_map_.keys"
	"enum.py" -> set
	"enum.py" -> "failed.append"
	"enum.py" -> "failed.append"
	"enum.py" -> callable
	"enum.py" -> isinstance
	"enum.py" -> replace
	"enum.py" -> "checked_value.replace"
	"enum.py" -> replace
	"enum.py" -> "simple_value.replace"
	"enum.py" -> "failed.append"
	"enum.py" -> "failed.append"
	"enum.py" -> "failed.sort"
	"enum.py" -> "failed.append"
	"enum.py" -> "failed.append"
	"enum.py" -> list
	"enum.py" -> "checked_member_dict.keys"
	"enum.py" -> list
	"enum.py" -> "simple_member_dict.keys"
	"enum.py" -> set
	"enum.py" -> "failed_member.append"
	"enum.py" -> "failed_member.append"
	"enum.py" -> "failed_member.append"
	"enum.py" -> "failed.append"
	"enum.py" -> join
	"enum.py" -> getattr
	"enum.py" -> getattr
	"enum.py" -> hasattr
	"enum.py" -> "failed.append"
	"enum.py" -> TypeError
	"enum.py" -> join
	"enum.py" -> "source.items"
	"enum.py" -> filter
	"enum.py" -> "members.sort"
	"enum.py" -> "members.sort"
	"enum.py" -> etype
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> _cell_factory
	"types.py" -> type
	"types.py" -> _g
	"types.py" -> _c
	"types.py" -> type
	"types.py" -> "_c.close"
	"types.py" -> _ag
	"types.py" -> type
	"types.py" -> type
	"types.py" -> _C
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> object
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> resolve_bases
	"types.py" -> prepare_class
	"types.py" -> exec_body
	"types.py" -> meta
	"types.py" -> list
	"types.py" -> enumerate
	"types.py" -> isinstance
	"types.py" -> hasattr
	"types.py" -> "base.__mro_entries__"
	"types.py" -> isinstance
	"types.py" -> TypeError
	"types.py" -> len
	"types.py" -> tuple
	"types.py" -> dict
	"types.py" -> "kwds.pop"
	"types.py" -> type
	"types.py" -> isinstance
	"types.py" -> _calculate_meta
	"types.py" -> hasattr
	"types.py" -> "meta.__prepare__"
	"types.py" -> type
	"types.py" -> issubclass
	"types.py" -> issubclass
	"types.py" -> TypeError
	"types.py" -> bool
	"types.py" -> getattr
	"types.py" -> AttributeError
	"types.py" -> AttributeError
	"types.py" -> "self.fget"
	"types.py" -> AttributeError
	"types.py" -> "self.fset"
	"types.py" -> AttributeError
	"types.py" -> "self.fdel"
	"types.py" -> <unknown_function>
	"types.py" -> type
	"types.py" -> <unknown_function>
	"types.py" -> type
	"types.py" -> <unknown_function>
	"types.py" -> type
	"types.py" -> getattr
	"types.py" -> getattr
	"types.py" -> "self.__wrapped.send"
	"types.py" -> "self.__wrapped.throw"
	"types.py" -> "self.__wrapped.close"
	"types.py" -> next
	"types.py" -> callable
	"types.py" -> TypeError
	"types.py" -> getattr
	"types.py" -> "co.replace"
	"types.py" -> func
	"types.py" -> isinstance
	"types.py" -> isinstance
	"types.py" -> _GeneratorWrapper
	"types.py" -> "functools.wraps"
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> type
	"types.py" -> globals
	"functools.py" -> getattr
	"functools.py" -> setattr
	"functools.py" -> update
	"functools.py" -> getattr
	"functools.py" -> getattr
	"functools.py" -> partial
	"functools.py" -> __lt__
	"functools.py" -> type
	"functools.py" -> __lt__
	"functools.py" -> type
	"functools.py" -> __lt__
	"functools.py" -> type
	"functools.py" -> __le__
	"functools.py" -> type
	"functools.py" -> __le__
	"functools.py" -> type
	"functools.py" -> __le__
	"functools.py" -> type
	"functools.py" -> __gt__
	"functools.py" -> type
	"functools.py" -> __gt__
	"functools.py" -> type
	"functools.py" -> __gt__
	"functools.py" -> type
	"functools.py" -> __ge__
	"functools.py" -> type
	"functools.py" -> __ge__
	"functools.py" -> type
	"functools.py" -> __ge__
	"functools.py" -> type
	"functools.py" -> getattr
	"functools.py" -> getattr
	"functools.py" -> ValueError
	"functools.py" -> max
	"functools.py" -> setattr
	"functools.py" -> mycmp
	"functools.py" -> mycmp
	"functools.py" -> mycmp
	"functools.py" -> mycmp
	"functools.py" -> mycmp
	"functools.py" -> object
	"functools.py" -> iter
	"functools.py" -> next
	"functools.py" -> TypeError
	"functools.py" -> function
	"functools.py" -> callable
	"functools.py" -> TypeError
	"functools.py" -> hasattr
	"functools.py" -> __new__
	"functools.py" -> super
	"functools.py" -> "self.func"
	"functools.py" -> type
	"functools.py" -> repr
	"functools.py" -> "args.extend"
	"functools.py" -> repr
	"functools.py" -> "args.extend"
	"functools.py" -> "self.keywords.items"
	"functools.py" -> type
	"functools.py" -> join
	"functools.py" -> join
	"functools.py" -> recursive_repr
	"functools.py" -> type
	"functools.py" -> isinstance
	"functools.py" -> TypeError
	"functools.py" -> len
	"functools.py" -> TypeError
	"functools.py" -> len
	"functools.py" -> callable
	"functools.py" -> isinstance
	"functools.py" -> isinstance
	"functools.py" -> isinstance
	"functools.py" -> TypeError
	"functools.py" -> tuple
	"functools.py" -> type
	"functools.py" -> dict
	"functools.py" -> callable
	"functools.py" -> hasattr
	"functools.py" -> TypeError
	"functools.py" -> format
	"functools.py" -> isinstance
	"functools.py" -> join
	"functools.py" -> map
	"functools.py" -> join
	"functools.py" -> format
	"functools.py" -> "self.keywords.items"
	"functools.py" -> "format_string.format"
	"functools.py" -> "self.func"
	"functools.py" -> getattr
	"functools.py" -> get
	"functools.py" -> partial
	"functools.py" -> __get__
	"functools.py" -> "self._make_unbound_method"
	"functools.py" -> getattr
	"functools.py" -> classmethod
	"functools.py" -> isinstance
	"functools.py" -> namedtuple
	"functools.py" -> hash
	"functools.py" -> object
	"functools.py" -> "kwds.items"
	"functools.py" -> tuple
	"functools.py" -> type
	"functools.py" -> tuple
	"functools.py" -> type
	"functools.py" -> "kwds.values"
	"functools.py" -> len
	"functools.py" -> type
	"functools.py" -> _HashedSeq
	"functools.py" -> isinstance
	"functools.py" -> callable
	"functools.py" -> isinstance
	"functools.py" -> _lru_cache_wrapper
	"functools.py" -> update_wrapper
	"functools.py" -> TypeError
	"functools.py" -> _lru_cache_wrapper
	"functools.py" -> update_wrapper
	"functools.py" -> object
	"functools.py" -> RLock
	"functools.py" -> user_function
	"functools.py" -> make_key
	"functools.py" -> cache_get
	"functools.py" -> user_function
	"functools.py" -> make_key
	"functools.py" -> cache_get
	"functools.py" -> user_function
	"functools.py" -> cache_len
	"functools.py" -> _CacheInfo
	"functools.py" -> cache_len
	"functools.py" -> "cache.clear"
	"functools.py" -> <unknown_function>
	"functools.py" -> lru_cache
	"functools.py" -> RuntimeError
	"functools.py" -> "result.append"
	"functools.py" -> enumerate
	"functools.py" -> reversed
	"functools.py" -> hasattr
	"functools.py" -> len
	"functools.py" -> list
	"functools.py" -> list
	"functools.py" -> list
	"functools.py" -> issubclass
	"functools.py" -> any
	"functools.py" -> issubclass
	"functools.py" -> "abstract_bases.append"
	"functools.py" -> "abcs.remove"
	"functools.py" -> _c3_mro
	"functools.py" -> _c3_mro
	"functools.py" -> _c3_mro
	"functools.py" -> _c3_merge
	"functools.py" -> set
	"functools.py" -> hasattr
	"functools.py" -> isinstance
	"functools.py" -> issubclass
	"functools.py" -> is_related
	"functools.py" -> is_strict_base
	"functools.py" -> set
	"functools.py" -> "typ.__subclasses__"
	"functools.py" -> issubclass
	"functools.py" -> "found.append"
	"functools.py" -> "mro.append"
	"functools.py" -> "found.sort"
	"functools.py" -> "mro.append"
	"functools.py" -> _c3_mro
	"functools.py" -> _compose_mro
	"functools.py" -> "registry.keys"
	"functools.py" -> issubclass
	"functools.py" -> RuntimeError
	"functools.py" -> format
	"functools.py" -> "registry.get"
	"functools.py" -> "weakref.WeakKeyDictionary"
	"functools.py" -> get_cache_token
	"functools.py" -> "dispatch_cache.clear"
	"functools.py" -> _find_impl
	"functools.py" -> get_origin
	"functools.py" -> isinstance
	"functools.py" -> _is_union_type
	"functools.py" -> all
	"functools.py" -> isinstance
	"functools.py" -> get_args
	"functools.py" -> _is_valid_dispatch_type
	"functools.py" -> register
	"functools.py" -> TypeError
	"functools.py" -> getattr
	"functools.py" -> TypeError
	"functools.py" -> next
	"functools.py" -> iter
	"functools.py" -> items
	"functools.py" -> get_type_hints
	"functools.py" -> _is_valid_dispatch_type
	"functools.py" -> _is_union_type
	"functools.py" -> TypeError
	"functools.py" -> TypeError
	"functools.py" -> _is_union_type
	"functools.py" -> get_args
	"functools.py" -> hasattr
	"functools.py" -> get_cache_token
	"functools.py" -> "dispatch_cache.clear"
	"functools.py" -> TypeError
	"functools.py" -> <unknown_function>
	"functools.py" -> dispatch
	"functools.py" -> getattr
	"functools.py" -> "types.MappingProxyType"
	"functools.py" -> update_wrapper
	"functools.py" -> callable
	"functools.py" -> hasattr
	"functools.py" -> TypeError
	"functools.py" -> singledispatch
	"functools.py" -> "self.dispatcher.register"
	"functools.py" -> "self.dispatcher.dispatch"
	"functools.py" -> <unknown_function>
	"functools.py" -> "method.__get__"
	"functools.py" -> update_wrapper
	"functools.py" -> getattr
	"functools.py" -> object
	"functools.py" -> RLock
	"functools.py" -> TypeError
	"functools.py" -> TypeError
	"functools.py" -> type
	"functools.py" -> TypeError
	"functools.py" -> "cache.get"
	"functools.py" -> "cache.get"
	"functools.py" -> "self.func"
	"functools.py" -> type
	"functools.py" -> TypeError
	"functools.py" -> classmethod
	"copyreg.py" -> callable
	"copyreg.py" -> TypeError
	"copyreg.py" -> constructor
	"copyreg.py" -> callable
	"copyreg.py" -> TypeError
	"copyreg.py" -> pickle
	"copyreg.py" -> pickle
	"copyreg.py" -> type
	"copyreg.py" -> "object.__new__"
	"copyreg.py" -> "base.__new__"
	"copyreg.py" -> "base.__init__"
	"copyreg.py" -> type
	"copyreg.py" -> hasattr
	"copyreg.py" -> isinstance
	"copyreg.py" -> TypeError
	"copyreg.py" -> base
	"copyreg.py" -> getattr
	"copyreg.py" -> TypeError
	"copyreg.py" -> type
	"copyreg.py" -> getattr
	"copyreg.py" -> TypeError
	"copyreg.py" -> getstate
	"copyreg.py" -> "cls.__new__"
	"copyreg.py" -> "cls.__new__"
	"copyreg.py" -> "cls.__dict__.get"
	"copyreg.py" -> hasattr
	"copyreg.py" -> isinstance
	"copyreg.py" -> "name.startswith"
	"copyreg.py" -> "name.endswith"
	"copyreg.py" -> "c.__name__.lstrip"
	"copyreg.py" -> "names.append"
	"copyreg.py" -> "names.append"
	"copyreg.py" -> "names.append"
	"copyreg.py" -> int
	"copyreg.py" -> ValueError
	"copyreg.py" -> "_extension_registry.get"
	"copyreg.py" -> "_inverted_registry.get"
	"copyreg.py" -> ValueError
	"copyreg.py" -> ValueError
	"copyreg.py" -> "_extension_registry.get"
	"copyreg.py" -> "_inverted_registry.get"
	"copyreg.py" -> ValueError
	"copyreg.py" -> "_extension_cache.clear"
	"__init__.py" -> "te.ParamSpec"
	"__init__.py" -> "re.compile"
	"__init__.py" -> "re.compile"
	"__init__.py" -> _escape_argspec
	"__init__.py" -> list
	"__init__.py" -> enumerate
	"__init__.py" -> _escape_argspec
	"__init__.py" -> "kwargs.items"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> func
	"__init__.py" -> "functools.wraps"
	"__init__.py" -> hasattr
	"__init__.py" -> "base.__html__"
	"__init__.py" -> __new__
	"__init__.py" -> super
	"__init__.py" -> __new__
	"__init__.py" -> super
	"__init__.py" -> isinstance
	"__init__.py" -> hasattr
	"__init__.py" -> "self.__class__"
	"__init__.py" -> __add__
	"__init__.py" -> super
	"__init__.py" -> "self.escape"
	"__init__.py" -> isinstance
	"__init__.py" -> hasattr
	"__init__.py" -> __add__
	"__init__.py" -> "self.escape"
	"__init__.py" -> isinstance
	"__init__.py" -> "self.__class__"
	"__init__.py" -> __mul__
	"__init__.py" -> super
	"__init__.py" -> isinstance
	"__init__.py" -> tuple
	"__init__.py" -> _MarkupEscapeHelper
	"__init__.py" -> hasattr
	"__init__.py" -> type
	"__init__.py" -> isinstance
	"__init__.py" -> _MarkupEscapeHelper
	"__init__.py" -> _MarkupEscapeHelper
	"__init__.py" -> "self.__class__"
	"__init__.py" -> __mod__
	"__init__.py" -> super
	"__init__.py" -> __repr__
	"__init__.py" -> super
	"__init__.py" -> "self.__class__"
	"__init__.py" -> join
	"__init__.py" -> super
	"__init__.py" -> map
	"__init__.py" -> "self.__class__"
	"__init__.py" -> split
	"__init__.py" -> super
	"__init__.py" -> "self.__class__"
	"__init__.py" -> rsplit
	"__init__.py" -> super
	"__init__.py" -> "self.__class__"
	"__init__.py" -> splitlines
	"__init__.py" -> super
	"__init__.py" -> unescape
	"__init__.py" -> str
	"__init__.py" -> "_strip_comments_re.sub"
	"__init__.py" -> "_strip_tags_re.sub"
	"__init__.py" -> join
	"__init__.py" -> "value.split"
	"__init__.py" -> unescape
	"__init__.py" -> "self.__class__"
	"__init__.py" -> escape
	"__init__.py" -> cls
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> _simple_escaping_wrapper
	"__init__.py" -> partition
	"__init__.py" -> super
	"__init__.py" -> "self.escape"
	"__init__.py" -> cls
	"__init__.py" -> cls
	"__init__.py" -> cls
	"__init__.py" -> rpartition
	"__init__.py" -> super
	"__init__.py" -> "self.escape"
	"__init__.py" -> cls
	"__init__.py" -> cls
	"__init__.py" -> cls
	"__init__.py" -> EscapeFormatter
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "formatter.vformat"
	"__init__.py" -> EscapeFormatter
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "formatter.vformat"
	"__init__.py" -> ValueError
	"__init__.py" -> __init__
	"__init__.py" -> super
	"__init__.py" -> hasattr
	"__init__.py" -> "value.__html_format__"
	"__init__.py" -> hasattr
	"__init__.py" -> ValueError
	"__init__.py" -> type
	"__init__.py" -> "value.__html__"
	"__init__.py" -> "string.Formatter.format_field"
	"__init__.py" -> str
	"__init__.py" -> str
	"__init__.py" -> "self.escape"
	"__init__.py" -> "t.TypeVar"
	"__init__.py" -> isinstance
	"__init__.py" -> hasattr
	"__init__.py" -> escape
	"__init__.py" -> "self.__class__"
	"__init__.py" -> str
	"__init__.py" -> "self.escape"
	"__init__.py" -> str
	"__init__.py" -> "self.escape"
	"__init__.py" -> repr
	"__init__.py" -> int
	"__init__.py" -> float
	"string.py" -> join
	"string.py" -> map
	"string.py" -> "s.split"
	"string.py" -> __init_subclass__
	"string.py" -> super
	"string.py" -> "_re.escape"
	"string.py" -> "_re.compile"
	"string.py" -> "mo.start"
	"string.py" -> splitlines
	"string.py" -> len
	"string.py" -> join
	"string.py" -> len
	"string.py" -> ValueError
	"string.py" -> _ChainMap
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> str
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "self._invalid"
	"string.py" -> ValueError
	"string.py" -> "self.pattern.sub"
	"string.py" -> _ChainMap
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> str
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> ValueError
	"string.py" -> "self.pattern.sub"
	"string.py" -> "self.pattern.finditer"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> ValueError
	"string.py" -> "self.pattern.finditer"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> "ids.append"
	"string.py" -> "mo.group"
	"string.py" -> "mo.group"
	"string.py" -> ValueError
	"string.py" -> "Template.__init_subclass__"
	"string.py" -> "self.vformat"
	"string.py" -> set
	"string.py" -> "self._vformat"
	"string.py" -> "self.check_unused_args"
	"string.py" -> ValueError
	"string.py" -> "self.parse"
	"string.py" -> "result.append"
	"string.py" -> ValueError
	"string.py" -> str
	"string.py" -> "field_name.isdigit"
	"string.py" -> ValueError
	"string.py" -> "self.get_field"
	"string.py" -> "used_args.add"
	"string.py" -> "self.convert_field"
	"string.py" -> "self._vformat"
	"string.py" -> "result.append"
	"string.py" -> "self.format_field"
	"string.py" -> join
	"string.py" -> isinstance
	"string.py" -> format
	"string.py" -> str
	"string.py" -> repr
	"string.py" -> ascii
	"string.py" -> ValueError
	"string.py" -> format
	"string.py" -> "_string.formatter_parser"
	"string.py" -> "_string.formatter_field_name_split"
	"string.py" -> "self.get_value"
	"string.py" -> getattr
	"typing.py" -> type
	"typing.py" -> isinstance
	"typing.py" -> ForwardRef
	"typing.py" -> _type_convert
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> type
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> len
	"typing.py" -> _is_param_expr
	"typing.py" -> isinstance
	"typing.py" -> repr
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> repr
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> _collect_parameters
	"typing.py" -> "parameters.append"
	"typing.py" -> hasattr
	"typing.py" -> "parameters.append"
	"typing.py" -> getattr
	"typing.py" -> "parameters.append"
	"typing.py" -> tuple
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> getattr
	"typing.py" -> "newargs.extend"
	"typing.py" -> "newargs.append"
	"typing.py" -> set
	"typing.py" -> len
	"typing.py" -> len
	"typing.py" -> "new_params.append"
	"typing.py" -> "all_params.remove"
	"typing.py" -> isinstance
	"typing.py" -> "params.extend"
	"typing.py" -> "params.append"
	"typing.py" -> tuple
	"typing.py" -> _deduplicate
	"typing.py" -> isinstance
	"typing.py" -> "params.extend"
	"typing.py" -> "params.append"
	"typing.py" -> tuple
	"typing.py" -> <unknown_function>
	"typing.py" -> "functools.lru_cache"
	"typing.py" -> "_cleanups.append"
	"typing.py" -> cached
	"typing.py" -> func
	"typing.py" -> "functools.wraps"
	"typing.py" -> decorator
	"typing.py" -> frozenset
	"typing.py" -> isinstance
	"typing.py" -> "t._evaluate"
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> ForwardRef
	"typing.py" -> _should_unflatten_callable_args
	"typing.py" -> tuple
	"typing.py" -> _eval_type
	"typing.py" -> isinstance
	"typing.py" -> GenericAlias
	"typing.py" -> isinstance
	"typing.py" -> "functools.reduce"
	"typing.py" -> "t.copy_with"
	"typing.py" -> TypeError
	"typing.py" -> AttributeError
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> "self._getitem"
	"typing.py" -> isinstance
	"typing.py" -> "self._getitem"
	"typing.py" -> TypeError
	"typing.py" -> __instancecheck__
	"typing.py" -> super
	"typing.py" -> __repr__
	"typing.py" -> super
	"typing.py" -> TypeError
	"typing.py" -> __new__
	"typing.py" -> super
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> _type_check
	"typing.py" -> _GenericAlias
	"typing.py" -> _type_check
	"typing.py" -> _GenericAlias
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> _type_check
	"typing.py" -> _remove_dups_flatten
	"typing.py" -> len
	"typing.py" -> len
	"typing.py" -> type
	"typing.py" -> _UnionGenericAlias
	"typing.py" -> _UnionGenericAlias
	"typing.py" -> _type_check
	"typing.py" -> type
	"typing.py" -> _flatten_literal_params
	"typing.py" -> tuple
	"typing.py" -> _deduplicate
	"typing.py" -> list
	"typing.py" -> _value_and_type_iter
	"typing.py" -> _LiteralGenericAlias
	"typing.py" -> _tp_cache
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> _type_check
	"typing.py" -> _ConcatenateGenericAlias
	"typing.py" -> _type_check
	"typing.py" -> _GenericAlias
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> compile
	"typing.py" -> SyntaxError
	"typing.py" -> getattr
	"typing.py" -> "sys.modules.get"
	"typing.py" -> _type_check
	"typing.py" -> eval
	"typing.py" -> _eval_type
	"typing.py" -> isinstance
	"typing.py" -> hash
	"typing.py" -> isinstance
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> _is_unpacked_typevartuple
	"typing.py" -> ValueError
	"typing.py" -> bool
	"typing.py" -> bool
	"typing.py" -> _type_check
	"typing.py" -> __init__
	"typing.py" -> super
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> tuple
	"typing.py" -> _type_check
	"typing.py" -> _caller
	"typing.py" -> _type_check
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> getattr
	"typing.py" -> TypeError
	"typing.py" -> _caller
	"typing.py" -> TypeError
	"typing.py" -> "params.index"
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> len
	"typing.py" -> enumerate
	"typing.py" -> isinstance
	"typing.py" -> getattr
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> min
	"typing.py" -> min
	"typing.py" -> TypeError
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> ParamSpecArgs
	"typing.py" -> ParamSpecKwargs
	"typing.py" -> __init__
	"typing.py" -> super
	"typing.py" -> _caller
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> _type_check
	"typing.py" -> _is_param_expr
	"typing.py" -> TypeError
	"typing.py" -> "params.index"
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> _is_param_expr
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> "attr.startswith"
	"typing.py" -> "attr.endswith"
	"typing.py" -> TypeError
	"typing.py" -> "self.__origin__"
	"typing.py" -> "res.append"
	"typing.py" -> "bases.index"
	"typing.py" -> isinstance
	"typing.py" -> issubclass
	"typing.py" -> "res.append"
	"typing.py" -> tuple
	"typing.py" -> _is_dunder
	"typing.py" -> getattr
	"typing.py" -> AttributeError
	"typing.py" -> _is_dunder
	"typing.py" -> __setattr__
	"typing.py" -> super
	"typing.py" -> setattr
	"typing.py" -> "self.__subclasscheck__"
	"typing.py" -> type
	"typing.py" -> TypeError
	"typing.py" -> list
	"typing.py" -> set
	"typing.py" -> __dir__
	"typing.py" -> super
	"typing.py" -> dir
	"typing.py" -> _is_dunder
	"typing.py" -> __init__
	"typing.py" -> super
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> _collect_parameters
	"typing.py" -> isinstance
	"typing.py" -> hash
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> _type_convert
	"typing.py" -> _unpack_args
	"typing.py" -> "self._determine_new_args"
	"typing.py" -> "self.copy_with"
	"typing.py" -> getattr
	"typing.py" -> prepare
	"typing.py" -> len
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> dict
	"typing.py" -> zip
	"typing.py" -> tuple
	"typing.py" -> "self._make_substitution"
	"typing.py" -> isinstance
	"typing.py" -> "new_args.append"
	"typing.py" -> getattr
	"typing.py" -> substfunc
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> "subargs.extend"
	"typing.py" -> "subargs.append"
	"typing.py" -> tuple
	"typing.py" -> isinstance
	"typing.py" -> "new_args.extend"
	"typing.py" -> _is_unpacked_typevartuple
	"typing.py" -> "new_args.extend"
	"typing.py" -> isinstance
	"typing.py" -> "new_args.append"
	"typing.py" -> tuple
	"typing.py" -> "self._make_substitution"
	"typing.py" -> "new_args.append"
	"typing.py" -> "self.__class__"
	"typing.py" -> _type_repr
	"typing.py" -> join
	"typing.py" -> _type_repr
	"typing.py" -> globals
	"typing.py" -> tuple
	"typing.py" -> len
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> __mro_entries__
	"typing.py" -> super
	"typing.py" -> "bases.index"
	"typing.py" -> isinstance
	"typing.py" -> __init__
	"typing.py" -> super
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> _type_check
	"typing.py" -> _check_generic
	"typing.py" -> "self.copy_with"
	"typing.py" -> _GenericAlias
	"typing.py" -> isinstance
	"typing.py" -> issubclass
	"typing.py" -> isinstance
	"typing.py" -> issubclass
	"typing.py" -> __subclasscheck__
	"typing.py" -> super
	"typing.py" -> len
	"typing.py" -> _is_param_expr
	"typing.py" -> __repr__
	"typing.py" -> super
	"typing.py" -> join
	"typing.py" -> _type_repr
	"typing.py" -> _type_repr
	"typing.py" -> len
	"typing.py" -> _is_param_expr
	"typing.py" -> list
	"typing.py" -> _CallableGenericAlias
	"typing.py" -> isinstance
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> "self.__getitem_inner__"
	"typing.py" -> _type_check
	"typing.py" -> "self.copy_with"
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> _type_convert
	"typing.py" -> "self.copy_with"
	"typing.py" -> isinstance
	"typing.py" -> len
	"typing.py" -> tuple
	"typing.py" -> _type_check
	"typing.py" -> "self.copy_with"
	"typing.py" -> tuple
	"typing.py" -> _type_check
	"typing.py" -> "self.copy_with"
	"typing.py" -> isinstance
	"typing.py" -> set
	"typing.py" -> set
	"typing.py" -> hash
	"typing.py" -> frozenset
	"typing.py" -> len
	"typing.py" -> type
	"typing.py" -> _type_repr
	"typing.py" -> type
	"typing.py" -> _type_repr
	"typing.py" -> __repr__
	"typing.py" -> super
	"typing.py" -> "self.__subclasscheck__"
	"typing.py" -> type
	"typing.py" -> issubclass
	"typing.py" -> __reduce__
	"typing.py" -> super
	"typing.py" -> type
	"typing.py" -> isinstance
	"typing.py" -> set
	"typing.py" -> _value_and_type_iter
	"typing.py" -> set
	"typing.py" -> _value_and_type_iter
	"typing.py" -> hash
	"typing.py" -> frozenset
	"typing.py" -> _value_and_type_iter
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> copy_with
	"typing.py" -> super
	"typing.py" -> _type_check
	"typing.py" -> _UnpackGenericAlias
	"typing.py" -> repr
	"typing.py" -> __getitem__
	"typing.py" -> super
	"typing.py" -> len
	"typing.py" -> isinstance
	"typing.py" -> len
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> _type_convert
	"typing.py" -> TypeError
	"typing.py" -> all
	"typing.py" -> _is_typevar_like
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> set
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> getattr
	"typing.py" -> prepare
	"typing.py" -> _check_generic
	"typing.py" -> len
	"typing.py" -> zip
	"typing.py" -> isinstance
	"typing.py" -> "new_args.extend"
	"typing.py" -> "new_args.append"
	"typing.py" -> tuple
	"typing.py" -> _GenericAlias
	"typing.py" -> __init_subclass__
	"typing.py" -> super
	"typing.py" -> type
	"typing.py" -> TypeError
	"typing.py" -> _collect_parameters
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> set
	"typing.py" -> set
	"typing.py" -> join
	"typing.py" -> str
	"typing.py" -> join
	"typing.py" -> str
	"typing.py" -> TypeError
	"typing.py" -> tuple
	"typing.py" -> set
	"typing.py" -> getattr
	"typing.py" -> list
	"typing.py" -> "base.__dict__.keys"
	"typing.py" -> list
	"typing.py" -> "annotations.keys"
	"typing.py" -> "attr.startswith"
	"typing.py" -> "attrs.add"
	"typing.py" -> all
	"typing.py" -> callable
	"typing.py" -> getattr
	"typing.py" -> _get_protocol_attrs
	"typing.py" -> type
	"typing.py" -> TypeError
	"typing.py" -> "base.__dict__.get"
	"typing.py" -> "cls.__init__"
	"typing.py" -> "f_globals.get"
	"typing.py" -> "sys._getframe"
	"typing.py" -> _caller
	"typing.py" -> getattr
	"typing.py" -> getattr
	"typing.py" -> _allow_reckless_class_checks
	"typing.py" -> TypeError
	"typing.py" -> getattr
	"typing.py" -> _is_callable_members_only
	"typing.py" -> issubclass
	"typing.py" -> all
	"typing.py" -> hasattr
	"typing.py" -> callable
	"typing.py" -> getattr
	"typing.py" -> getattr
	"typing.py" -> _get_protocol_attrs
	"typing.py" -> __instancecheck__
	"typing.py" -> super
	"typing.py" -> __init_subclass__
	"typing.py" -> super
	"typing.py" -> "cls.__dict__.get"
	"typing.py" -> any
	"typing.py" -> "cls.__dict__.get"
	"typing.py" -> getattr
	"typing.py" -> _allow_reckless_class_checks
	"typing.py" -> TypeError
	"typing.py" -> _is_callable_members_only
	"typing.py" -> _allow_reckless_class_checks
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> _get_protocol_attrs
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> issubclass
	"typing.py" -> issubclass
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> __init__
	"typing.py" -> super
	"typing.py" -> len
	"typing.py" -> _AnnotatedAlias
	"typing.py" -> format
	"typing.py" -> _type_repr
	"typing.py" -> join
	"typing.py" -> repr
	"typing.py" -> isinstance
	"typing.py" -> hash
	"typing.py" -> __getattr__
	"typing.py" -> super
	"typing.py" -> TypeError
	"typing.py" -> isinstance
	"typing.py" -> len
	"typing.py" -> TypeError
	"typing.py" -> _is_unpacked_typevartuple
	"typing.py" -> TypeError
	"typing.py" -> _type_check
	"typing.py" -> tuple
	"typing.py" -> _AnnotatedAlias
	"typing.py" -> TypeError
	"typing.py" -> format
	"typing.py" -> issubclass
	"typing.py" -> TypeError
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> reversed
	"typing.py" -> getattr
	"typing.py" -> "sys.modules.get"
	"typing.py" -> "base.__dict__.get"
	"typing.py" -> isinstance
	"typing.py" -> dict
	"typing.py" -> vars
	"typing.py" -> "ann.items"
	"typing.py" -> type
	"typing.py" -> isinstance
	"typing.py" -> ForwardRef
	"typing.py" -> _eval_type
	"typing.py" -> _strip_annotations
	"typing.py" -> "hints.items"
	"typing.py" -> isinstance
	"typing.py" -> hasattr
	"typing.py" -> getattr
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> TypeError
	"typing.py" -> format
	"typing.py" -> dict
	"typing.py" -> "hints.items"
	"typing.py" -> type
	"typing.py" -> isinstance
	"typing.py" -> ForwardRef
	"typing.py" -> isinstance
	"typing.py" -> _eval_type
	"typing.py" -> _strip_annotations
	"typing.py" -> "hints.items"
	"typing.py" -> isinstance
	"typing.py" -> _strip_annotations
	"typing.py" -> hasattr
	"typing.py" -> _strip_annotations
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> _strip_annotations
	"typing.py" -> "t.copy_with"
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> _strip_annotations
	"typing.py" -> GenericAlias
	"typing.py" -> isinstance
	"typing.py" -> tuple
	"typing.py" -> _strip_annotations
	"typing.py" -> "functools.reduce"
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> _should_unflatten_callable_args
	"typing.py" -> list
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> repr
	"typing.py" -> len
	"typing.py" -> AssertionError
	"typing.py" -> isinstance
	"typing.py" -> dir
	"typing.py" -> getattr
	"typing.py" -> hasattr
	"typing.py" -> getattr
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> isinstance
	"typing.py" -> no_type_check
	"typing.py" -> decorator
	"typing.py" -> no_type_check
	"typing.py" -> "functools.wraps"
	"typing.py" -> NotImplementedError
	"typing.py" -> defaultdict
	"typing.py" -> "functools.partial"
	"typing.py" -> getattr
	"typing.py" -> getattr
	"typing.py" -> list
	"typing.py" -> values
	"typing.py" -> "_overload_registry.clear"
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> TypeVar
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _CallableType
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _TupleType
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> _type_check
	"typing.py" -> "collections.namedtuple"
	"typing.py" -> frozenset
	"typing.py" -> frozenset
	"typing.py" -> TypeError
	"typing.py" -> tuple
	"typing.py" -> "ns.get"
	"typing.py" -> "default_names.append"
	"typing.py" -> TypeError
	"typing.py" -> len
	"typing.py" -> join
	"typing.py" -> _make_nmtuple
	"typing.py" -> "types.items"
	"typing.py" -> classmethod
	"typing.py" -> AttributeError
	"typing.py" -> setattr
	"typing.py" -> "nm_tpl.__init_subclass__"
	"typing.py" -> "kwargs.items"
	"typing.py" -> TypeError
	"typing.py" -> _make_nmtuple
	"typing.py" -> _caller
	"typing.py" -> "type.__new__"
	"typing.py" -> type
	"typing.py" -> TypeError
	"typing.py" -> any
	"typing.py" -> issubclass
	"typing.py" -> "type.__new__"
	"typing.py" -> "ns.get"
	"typing.py" -> _type_check
	"typing.py" -> "own_annotations.items"
	"typing.py" -> set
	"typing.py" -> set
	"typing.py" -> "annotations.update"
	"typing.py" -> "base.__dict__.get"
	"typing.py" -> "required_keys.update"
	"typing.py" -> "base.__dict__.get"
	"typing.py" -> "optional_keys.update"
	"typing.py" -> "base.__dict__.get"
	"typing.py" -> "annotations.update"
	"typing.py" -> "own_annotations.items"
	"typing.py" -> get_origin
	"typing.py" -> get_args
	"typing.py" -> get_origin
	"typing.py" -> "required_keys.add"
	"typing.py" -> "optional_keys.add"
	"typing.py" -> "required_keys.add"
	"typing.py" -> "optional_keys.add"
	"typing.py" -> frozenset
	"typing.py" -> frozenset
	"typing.py" -> hasattr
	"typing.py" -> TypeError
	"typing.py" -> TypeError
	"typing.py" -> "warnings.warn"
	"typing.py" -> dict
	"typing.py" -> _caller
	"typing.py" -> _TypedDictMeta
	"typing.py" -> "type.__new__"
	"typing.py" -> _type_check
	"typing.py" -> _GenericAlias
	"typing.py" -> _type_check
	"typing.py" -> _GenericAlias
	"typing.py" -> "name.rpartition"
	"typing.py" -> _caller
	"typing.py" -> TypeError
	"typing.py" -> "warnings.warn"
	"typing.py" -> __getattribute__
	"typing.py" -> super
	"typing.py" -> _alias
	"typing.py" -> _alias
	"typing.py" -> print
	"typing.py" -> type
	"typing_extensions.py" -> _Sentinel
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> len
	"typing_extensions.py" -> len
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> _is_unpack
	"typing_extensions.py" -> sum
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> _is_unpack
	"typing_extensions.py" -> "tvars.append"
	"typing_extensions.py" -> _should_collect_from_parameters
	"typing_extensions.py" -> "tvars.extend"
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> "typing.TypeVar"
	"typing_extensions.py" -> "typing.TypeVar"
	"typing_extensions.py" -> "typing.TypeVar"
	"typing_extensions.py" -> "typing.TypeVar"
	"typing_extensions.py" -> "typing.TypeVar"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> __instancecheck__
	"typing_extensions.py" -> super
	"typing_extensions.py" -> __repr__
	"typing_extensions.py" -> super
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> __new__
	"typing_extensions.py" -> super
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "typing._GenericAlias"
	"typing_extensions.py" -> _FinalForm
	"typing_extensions.py" -> "typing.TypeVar"
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> "params.extend"
	"typing_extensions.py" -> "params.append"
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> type
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> set
	"typing_extensions.py" -> _value_and_type_iter
	"typing_extensions.py" -> set
	"typing_extensions.py" -> _value_and_type_iter
	"typing_extensions.py" -> hash
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> _value_and_type_iter
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> _flatten_literal_params
	"typing_extensions.py" -> list
	"typing_extensions.py" -> _value_and_type_iter
	"typing_extensions.py" -> set
	"typing_extensions.py" -> len
	"typing_extensions.py" -> len
	"typing_extensions.py" -> "new_parameters.append"
	"typing_extensions.py" -> "deduped_pairs.remove"
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> _LiteralGenericAlias
	"typing_extensions.py" -> _LiteralForm
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "collections.defaultdict"
	"typing_extensions.py" -> "functools.partial"
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> list
	"typing_extensions.py" -> values
	"typing_extensions.py" -> "_overload_registry.clear"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing._alias"
	"typing_extensions.py" -> "_EXCLUDED_ATTRS.add"
	"typing_extensions.py" -> "_EXCLUDED_ATTRS.add"
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> set
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> "attr.startswith"
	"typing_extensions.py" -> "attrs.add"
	"typing_extensions.py" -> _collect_type_vars
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> set
	"typing_extensions.py" -> set
	"typing_extensions.py" -> join
	"typing_extensions.py" -> str
	"typing_extensions.py" -> join
	"typing_extensions.py" -> str
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> "f_globals.get"
	"typing_extensions.py" -> "sys._getframe"
	"typing_extensions.py" -> _caller
	"typing_extensions.py" -> type
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> type
	"typing_extensions.py" -> len
	"typing_extensions.py" -> set
	"typing_extensions.py" -> "_PROTO_ALLOWLIST.get"
	"typing_extensions.py" -> is_protocol
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "abc.ABCMeta.__new__"
	"typing_extensions.py" -> "abc.ABCMeta.__init__"
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> _get_protocol_attrs
	"typing_extensions.py" -> all
	"typing_extensions.py" -> callable
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> "type.__subclasscheck__"
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> _allow_reckless_class_checks
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "cls.__dict__.get"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "abc.ABCMeta.__subclasscheck__"
	"typing_extensions.py" -> "type.__instancecheck__"
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> "abc.ABCMeta.__instancecheck__"
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> _allow_reckless_class_checks
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "abc.ABCMeta.__instancecheck__"
	"typing_extensions.py" -> "inspect.getattr_static"
	"typing_extensions.py" -> callable
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> "abc.ABCMeta.__eq__"
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> object
	"typing_extensions.py" -> "type.__hash__"
	"typing_extensions.py" -> "cls.__dict__.get"
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> is_protocol
	"typing_extensions.py" -> __init_subclass__
	"typing_extensions.py" -> super
	"typing_extensions.py" -> "cls.__dict__.get"
	"typing_extensions.py" -> any
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> __new__
	"typing_extensions.py" -> super
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> all
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> len
	"typing_extensions.py" -> set
	"typing_extensions.py" -> len
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> _check_generic
	"typing_extensions.py" -> len
	"typing_extensions.py" -> "typing._GenericAlias"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> _maybe_adjust_parameters
	"typing_extensions.py" -> "cls.__dict__.get"
	"typing_extensions.py" -> any
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> issubclass
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> staticmethod
	"typing_extensions.py" -> staticmethod
	"typing_extensions.py" -> type
	"typing_extensions.py" -> "functools.update_wrapper"
	"typing_extensions.py" -> t
	"typing_extensions.py" -> "inspect.signature"
	"typing_extensions.py" -> type
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> any
	"typing_extensions.py" -> issubclass
	"typing_extensions.py" -> "type.__new__"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "ns.get"
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "own_annotations.items"
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "own_annotations.items"
	"typing_extensions.py" -> set
	"typing_extensions.py" -> set
	"typing_extensions.py" -> "annotations.update"
	"typing_extensions.py" -> "base.__dict__.get"
	"typing_extensions.py" -> "required_keys.update"
	"typing_extensions.py" -> "base.__dict__.get"
	"typing_extensions.py" -> "optional_keys.update"
	"typing_extensions.py" -> "base.__dict__.get"
	"typing_extensions.py" -> "annotations.update"
	"typing_extensions.py" -> "own_annotations.items"
	"typing_extensions.py" -> get_origin
	"typing_extensions.py" -> get_args
	"typing_extensions.py" -> get_origin
	"typing_extensions.py" -> "required_keys.add"
	"typing_extensions.py" -> "optional_keys.add"
	"typing_extensions.py" -> "required_keys.add"
	"typing_extensions.py" -> "optional_keys.add"
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "type.__new__"
	"typing_extensions.py" -> "warnings.warn"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "warnings.warn"
	"typing_extensions.py" -> dict
	"typing_extensions.py" -> _caller
	"typing_extensions.py" -> _TypedDictMeta
	"typing_extensions.py" -> _ensure_subclassable
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> _strip_extras
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> _strip_extras
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> _strip_extras
	"typing_extensions.py" -> "t.copy_with"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> _strip_extras
	"typing_extensions.py" -> "_types.GenericAlias"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> _strip_extras
	"typing_extensions.py" -> "functools.reduce"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing.get_type_hints"
	"typing_extensions.py" -> "typing.get_type_hints"
	"typing_extensions.py" -> _strip_extras
	"typing_extensions.py" -> "hint.items"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> __init__
	"typing_extensions.py" -> super
	"typing_extensions.py" -> len
	"typing_extensions.py" -> _AnnotatedAlias
	"typing_extensions.py" -> "typing._type_repr"
	"typing_extensions.py" -> join
	"typing_extensions.py" -> repr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hash
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> len
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> get_origin
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> _AnnotatedAlias
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> get_origin
	"typing_extensions.py" -> list
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> _ExtensionsSpecialForm
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> _caller
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing.TypeVar"
	"typing_extensions.py" -> "typing.TypeVar"
	"typing_extensions.py" -> ValueError
	"typing_extensions.py" -> _set_default
	"typing_extensions.py" -> _set_module
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing.ParamSpec"
	"typing_extensions.py" -> "typing.ParamSpec"
	"typing_extensions.py" -> _set_default
	"typing_extensions.py" -> _set_module
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> ParamSpecArgs
	"typing_extensions.py" -> ParamSpecKwargs
	"typing_extensions.py" -> __init__
	"typing_extensions.py" -> super
	"typing_extensions.py" -> bool
	"typing_extensions.py" -> bool
	"typing_extensions.py" -> bool
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "_DefaultMixin.__init__"
	"typing_extensions.py" -> _caller
	"typing_extensions.py" -> "object.__hash__"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> __init__
	"typing_extensions.py" -> super
	"typing_extensions.py" -> _type_repr
	"typing_extensions.py" -> join
	"typing_extensions.py" -> _type_repr
	"typing_extensions.py" -> hash
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> _ConcatenateGenericAlias
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> _concatenate_getitem
	"typing_extensions.py" -> _concatenate_getitem
	"typing_extensions.py" -> _ConcatenateForm
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "typing._GenericAlias"
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "typing._GenericAlias"
	"typing_extensions.py" -> _TypeGuardForm
	"typing_extensions.py" -> AttributeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "self._getitem"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "typing._GenericAlias"
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "typing._GenericAlias"
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "typing._GenericAlias"
	"typing_extensions.py" -> _RequiredForm
	"typing_extensions.py" -> _RequiredForm
	"typing_extensions.py" -> get_origin
	"typing_extensions.py" -> __init__
	"typing_extensions.py" -> super
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> _UnpackAlias
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> _UnpackAlias
	"typing_extensions.py" -> _UnpackForm
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing.TypeVarTuple"
	"typing_extensions.py" -> _set_default
	"typing_extensions.py" -> _set_module
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "_DefaultMixin.__init__"
	"typing_extensions.py" -> _caller
	"typing_extensions.py" -> "object.__hash__"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> print
	"typing_extensions.py" -> type
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> AssertionError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing.TypeVar"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing.TypeVar"
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> "warnings.warn"
	"typing_extensions.py" -> original_new
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> original_new
	"typing_extensions.py" -> "functools.wraps"
	"typing_extensions.py" -> staticmethod
	"typing_extensions.py" -> callable
	"typing_extensions.py" -> "warnings.warn"
	"typing_extensions.py" -> __arg
	"typing_extensions.py" -> "functools.wraps"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "collections.namedtuple"
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> "ns.get"
	"typing_extensions.py" -> "default_names.append"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> len
	"typing_extensions.py" -> join
	"typing_extensions.py" -> _make_nmtuple
	"typing_extensions.py" -> "types.items"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> classmethod
	"typing_extensions.py" -> classmethod
	"typing_extensions.py" -> AttributeError
	"typing_extensions.py" -> setattr
	"typing_extensions.py" -> "nm_tpl.__init_subclass__"
	"typing_extensions.py" -> "type.__new__"
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> "warnings.warn"
	"typing_extensions.py" -> "deprecation_msg.format"
	"typing_extensions.py" -> "kwargs.items"
	"typing_extensions.py" -> _make_nmtuple
	"typing_extensions.py" -> _caller
	"typing_extensions.py" -> _ensure_subclassable
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "Buffer.register"
	"typing_extensions.py" -> "Buffer.register"
	"typing_extensions.py" -> "Buffer.register"
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> type
	"typing_extensions.py" -> "name.rpartition"
	"typing_extensions.py" -> _caller
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> "parameters.extend"
	"typing_extensions.py" -> "parameters.append"
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> _caller
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> "self._raise_attribute_error"
	"typing_extensions.py" -> __setattr__
	"typing_extensions.py" -> super
	"typing_extensions.py" -> "self._raise_attribute_error"
	"typing_extensions.py" -> AttributeError
	"typing_extensions.py" -> AttributeError
	"typing_extensions.py" -> AttributeError
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> "typing._type_check"
	"typing_extensions.py" -> "typing._GenericAlias"
	"typing_extensions.py" -> tuple
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> _is_unionable
	"typing_extensions.py" -> _is_unionable
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> isinstance
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> getattr
	"typing_extensions.py" -> object
	"typing_extensions.py" -> is_protocol
	"typing_extensions.py" -> TypeError
	"typing_extensions.py" -> hasattr
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> frozenset
	"typing_extensions.py" -> _get_protocol_attrs
	"inspect.py" -> globals
	"inspect.py" -> "dis.COMPILER_FLAG_NAMES.items"
	"inspect.py" -> isinstance
	"inspect.py" -> getattr
	"inspect.py" -> hasattr
	"inspect.py" -> "obj_dict.get"
	"inspect.py" -> isinstance
	"inspect.py" -> getattr
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> getattr
	"inspect.py" -> dict
	"inspect.py" -> vars
	"inspect.py" -> isinstance
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> callable
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> TypeError
	"inspect.py" -> isinstance
	"inspect.py" -> ValueError
	"inspect.py" -> dict
	"inspect.py" -> hasattr
	"inspect.py" -> isinstance
	"inspect.py" -> hasattr
	"inspect.py" -> isinstance
	"inspect.py" -> eval
	"inspect.py" -> "ann.items"
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isclass
	"inspect.py" -> ismethod
	"inspect.py" -> isfunction
	"inspect.py" -> type
	"inspect.py" -> hasattr
	"inspect.py" -> hasattr
	"inspect.py" -> isclass
	"inspect.py" -> ismethod
	"inspect.py" -> isfunction
	"inspect.py" -> type
	"inspect.py" -> hasattr
	"inspect.py" -> hasattr
	"inspect.py" -> hasattr
	"inspect.py" -> isinstance
	"inspect.py" -> hasattr
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> ismethod
	"inspect.py" -> "functools._unwrap_partial"
	"inspect.py" -> isfunction
	"inspect.py" -> _signature_is_functionlike
	"inspect.py" -> bool
	"inspect.py" -> _has_code_flag
	"inspect.py" -> _has_code_flag
	"inspect.py" -> _has_code_flag
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> bool
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isbuiltin
	"inspect.py" -> isfunction
	"inspect.py" -> ismethod
	"inspect.py" -> ismethoddescriptor
	"inspect.py" -> ismethodwrapper
	"inspect.py" -> isinstance
	"inspect.py" -> issubclass
	"inspect.py" -> type
	"inspect.py" -> hasattr
	"inspect.py" -> "object.__dict__.items"
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> set
	"inspect.py" -> dir
	"inspect.py" -> isclass
	"inspect.py" -> getmro
	"inspect.py" -> "base.__dict__.items"
	"inspect.py" -> isinstance
	"inspect.py" -> "names.append"
	"inspect.py" -> getter
	"inspect.py" -> predicate
	"inspect.py" -> "results.append"
	"inspect.py" -> "processed.add"
	"inspect.py" -> "results.sort"
	"inspect.py" -> _getmembers
	"inspect.py" -> _getmembers
	"inspect.py" -> namedtuple
	"inspect.py" -> getmro
	"inspect.py" -> getmro
	"inspect.py" -> type
	"inspect.py" -> tuple
	"inspect.py" -> dir
	"inspect.py" -> "base.__dict__.items"
	"inspect.py" -> isinstance
	"inspect.py" -> "names.append"
	"inspect.py" -> set
	"inspect.py" -> Exception
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> "srch_cls.__getattr__"
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isroutine
	"inspect.py" -> "result.append"
	"inspect.py" -> Attribute
	"inspect.py" -> "processed.add"
	"inspect.py" -> hasattr
	"inspect.py" -> hasattr
	"inspect.py" -> stop
	"inspect.py" -> id
	"inspect.py" -> "sys.getrecursionlimit"
	"inspect.py" -> _is_wrapper
	"inspect.py" -> id
	"inspect.py" -> len
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> "line.expandtabs"
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> "expline.lstrip"
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> "func.__qualname__.split"
	"inspect.py" -> getattr
	"inspect.py" -> isclass
	"inspect.py" -> isclass
	"inspect.py" -> ismethod
	"inspect.py" -> isclass
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> isfunction
	"inspect.py" -> _findclass
	"inspect.py" -> getattr
	"inspect.py" -> isbuiltin
	"inspect.py" -> isclass
	"inspect.py" -> isinstance
	"inspect.py" -> _findclass
	"inspect.py" -> getattr
	"inspect.py" -> ismethoddescriptor
	"inspect.py" -> isdatadescriptor
	"inspect.py" -> getattr
	"inspect.py" -> ismemberdescriptor
	"inspect.py" -> getattr
	"inspect.py" -> isinstance
	"inspect.py" -> getattr
	"inspect.py" -> _finddoc
	"inspect.py" -> isinstance
	"inspect.py" -> cleandoc
	"inspect.py" -> split
	"inspect.py" -> "doc.expandtabs"
	"inspect.py" -> len
	"inspect.py" -> "line.lstrip"
	"inspect.py" -> len
	"inspect.py" -> min
	"inspect.py" -> lstrip
	"inspect.py" -> range
	"inspect.py" -> len
	"inspect.py" -> "lines.pop"
	"inspect.py" -> "lines.pop"
	"inspect.py" -> join
	"inspect.py" -> ismodule
	"inspect.py" -> getattr
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> isclass
	"inspect.py" -> hasattr
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> getattr
	"inspect.py" -> OSError
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> ismethod
	"inspect.py" -> isfunction
	"inspect.py" -> istraceback
	"inspect.py" -> isframe
	"inspect.py" -> iscode
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> type
	"inspect.py" -> "os.path.basename"
	"inspect.py" -> len
	"inspect.py" -> "importlib.machinery.all_suffixes"
	"inspect.py" -> "suffixes.sort"
	"inspect.py" -> "fname.endswith"
	"inspect.py" -> getfile
	"inspect.py" -> any
	"inspect.py" -> "filename.endswith"
	"inspect.py" -> "os.path.splitext"
	"inspect.py" -> any
	"inspect.py" -> "filename.endswith"
	"inspect.py" -> "os.path.exists"
	"inspect.py" -> getmodule
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getsourcefile
	"inspect.py" -> getfile
	"inspect.py" -> "os.path.normcase"
	"inspect.py" -> "os.path.abspath"
	"inspect.py" -> ismodule
	"inspect.py" -> hasattr
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> getabsfile
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> items
	"inspect.py" -> "sys.modules.copy"
	"inspect.py" -> ismodule
	"inspect.py" -> hasattr
	"inspect.py" -> "_filesbymodname.get"
	"inspect.py" -> getabsfile
	"inspect.py" -> "os.path.realpath"
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> hasattr
	"inspect.py" -> hasattr
	"inspect.py" -> getattr
	"inspect.py" -> hasattr
	"inspect.py" -> getattr
	"inspect.py" -> "self.stack.append"
	"inspect.py" -> "self.stack.append"
	"inspect.py" -> "self.generic_visit"
	"inspect.py" -> "self.stack.pop"
	"inspect.py" -> "self.stack.pop"
	"inspect.py" -> "self.stack.append"
	"inspect.py" -> join
	"inspect.py" -> ClassFoundException
	"inspect.py" -> "self.generic_visit"
	"inspect.py" -> "self.stack.pop"
	"inspect.py" -> getsourcefile
	"inspect.py" -> "linecache.checkcache"
	"inspect.py" -> getfile
	"inspect.py" -> "file.startswith"
	"inspect.py" -> "file.endswith"
	"inspect.py" -> OSError
	"inspect.py" -> getmodule
	"inspect.py" -> "linecache.getlines"
	"inspect.py" -> "linecache.getlines"
	"inspect.py" -> OSError
	"inspect.py" -> ismodule
	"inspect.py" -> isclass
	"inspect.py" -> join
	"inspect.py" -> "ast.parse"
	"inspect.py" -> _ClassFinder
	"inspect.py" -> "class_finder.visit"
	"inspect.py" -> OSError
	"inspect.py" -> ismethod
	"inspect.py" -> isfunction
	"inspect.py" -> istraceback
	"inspect.py" -> isframe
	"inspect.py" -> iscode
	"inspect.py" -> hasattr
	"inspect.py" -> OSError
	"inspect.py" -> "re.compile"
	"inspect.py" -> OSError
	"inspect.py" -> "pat.match"
	"inspect.py" -> OSError
	"inspect.py" -> findsource
	"inspect.py" -> ismodule
	"inspect.py" -> len
	"inspect.py" -> strip
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> "comments.append"
	"inspect.py" -> expandtabs
	"inspect.py" -> join
	"inspect.py" -> indentsize
	"inspect.py" -> lstrip
	"inspect.py" -> indentsize
	"inspect.py" -> lstrip
	"inspect.py" -> expandtabs
	"inspect.py" -> lstrip
	"inspect.py" -> expandtabs
	"inspect.py" -> indentsize
	"inspect.py" -> lstrip
	"inspect.py" -> expandtabs
	"inspect.py" -> strip
	"inspect.py" -> strip
	"inspect.py" -> join
	"inspect.py" -> BlockFinder
	"inspect.py" -> "tokenize.generate_tokens"
	"inspect.py" -> iter
	"inspect.py" -> "blockfinder.tokeneater"
	"inspect.py" -> unwrap
	"inspect.py" -> findsource
	"inspect.py" -> istraceback
	"inspect.py" -> ismodule
	"inspect.py" -> isframe
	"inspect.py" -> getblock
	"inspect.py" -> getsourcelines
	"inspect.py" -> join
	"inspect.py" -> "classes.sort"
	"inspect.py" -> attrgetter
	"inspect.py" -> "results.append"
	"inspect.py" -> "results.append"
	"inspect.py" -> walktree
	"inspect.py" -> append
	"inspect.py" -> "roots.append"
	"inspect.py" -> "roots.append"
	"inspect.py" -> walktree
	"inspect.py" -> namedtuple
	"inspect.py" -> iscode
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> list
	"inspect.py" -> list
	"inspect.py" -> Arguments
	"inspect.py" -> namedtuple
	"inspect.py" -> _signature_from_callable
	"inspect.py" -> TypeError
	"inspect.py" -> "sig.parameters.values"
	"inspect.py" -> "posonlyargs.append"
	"inspect.py" -> "args.append"
	"inspect.py" -> "kwonlyargs.append"
	"inspect.py" -> FullArgSpec
	"inspect.py" -> namedtuple
	"inspect.py" -> getargs
	"inspect.py" -> ArgInfo
	"inspect.py" -> getattr
	"inspect.py" -> "match.group"
	"inspect.py" -> "text.removeprefix"
	"inspect.py" -> "re.sub"
	"inspect.py" -> repr
	"inspect.py" -> isinstance
	"inspect.py" -> str
	"inspect.py" -> isinstance
	"inspect.py" -> repr
	"inspect.py" -> getattr
	"inspect.py" -> formatannotation
	"inspect.py" -> repr
	"inspect.py" -> formatarg
	"inspect.py" -> formatvalue
	"inspect.py" -> range
	"inspect.py" -> len
	"inspect.py" -> "specs.append"
	"inspect.py" -> convert
	"inspect.py" -> "specs.append"
	"inspect.py" -> formatvarargs
	"inspect.py" -> formatvalue
	"inspect.py" -> "specs.append"
	"inspect.py" -> formatvarkw
	"inspect.py" -> formatvalue
	"inspect.py" -> join
	"inspect.py" -> repr
	"inspect.py" -> len
	"inspect.py" -> format
	"inspect.py" -> format
	"inspect.py" -> join
	"inspect.py" -> TypeError
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> str
	"inspect.py" -> len
	"inspect.py" -> TypeError
	"inspect.py" -> getfullargspec
	"inspect.py" -> ismethod
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> len
	"inspect.py" -> min
	"inspect.py" -> range
	"inspect.py" -> tuple
	"inspect.py" -> set
	"inspect.py" -> "named.items"
	"inspect.py" -> TypeError
	"inspect.py" -> TypeError
	"inspect.py" -> _too_many
	"inspect.py" -> _missing_arguments
	"inspect.py" -> enumerate
	"inspect.py" -> _missing_arguments
	"inspect.py" -> namedtuple
	"inspect.py" -> ismethod
	"inspect.py" -> isfunction
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> zip
	"inspect.py" -> "global_ns.get"
	"inspect.py" -> ismodule
	"inspect.py" -> set
	"inspect.py" -> "unbound_names.add"
	"inspect.py" -> ClosureVars
	"inspect.py" -> namedtuple
	"inspect.py" -> __new__
	"inspect.py" -> super
	"inspect.py" -> format
	"inspect.py" -> _get_code_position
	"inspect.py" -> "code.co_positions"
	"inspect.py" -> next
	"inspect.py" -> "itertools.islice"
	"inspect.py" -> istraceback
	"inspect.py" -> _get_code_position_from_tb
	"inspect.py" -> _get_code_position
	"inspect.py" -> isframe
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> getsourcefile
	"inspect.py" -> getfile
	"inspect.py" -> findsource
	"inspect.py" -> max
	"inspect.py" -> min
	"inspect.py" -> len
	"inspect.py" -> Traceback
	"inspect.py" -> "dis.Positions"
	"inspect.py" -> namedtuple
	"inspect.py" -> __new__
	"inspect.py" -> super
	"inspect.py" -> format
	"inspect.py" -> getframeinfo
	"inspect.py" -> "framelist.append"
	"inspect.py" -> FrameInfo
	"inspect.py" -> getframeinfo
	"inspect.py" -> "framelist.append"
	"inspect.py" -> FrameInfo
	"inspect.py" -> hasattr
	"inspect.py" -> "sys._getframe"
	"inspect.py" -> getouterframes
	"inspect.py" -> "sys._getframe"
	"inspect.py" -> getinnerframes
	"inspect.py" -> "sys.exc_info"
	"inspect.py" -> object
	"inspect.py" -> __get__
	"inspect.py" -> "object.__getattribute__"
	"inspect.py" -> "dict.get"
	"inspect.py" -> _static_getmro
	"inspect.py" -> _shadowed_dict
	"inspect.py" -> type
	"inspect.py" -> _static_getmro
	"inspect.py" -> _static_getmro
	"inspect.py" -> "dict_attr.__get__"
	"inspect.py" -> type
	"inspect.py" -> _is_type
	"inspect.py" -> type
	"inspect.py" -> _shadowed_dict
	"inspect.py" -> type
	"inspect.py" -> _check_instance
	"inspect.py" -> _check_class
	"inspect.py" -> _check_class
	"inspect.py" -> type
	"inspect.py" -> _check_class
	"inspect.py" -> type
	"inspect.py" -> _check_class
	"inspect.py" -> type
	"inspect.py" -> _static_getmro
	"inspect.py" -> type
	"inspect.py" -> _shadowed_dict
	"inspect.py" -> type
	"inspect.py" -> AttributeError
	"inspect.py" -> isgenerator
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> isinstance
	"inspect.py" -> OrderedDict
	"inspect.py" -> "old_params.items"
	"inspect.py" -> "wrapped_sig.bind_partial"
	"inspect.py" -> format
	"inspect.py" -> ValueError
	"inspect.py" -> "old_params.items"
	"inspect.py" -> "new_params.pop"
	"inspect.py" -> "param.replace"
	"inspect.py" -> "new_params.pop"
	"inspect.py" -> "param.replace"
	"inspect.py" -> replace
	"inspect.py" -> "new_params.move_to_end"
	"inspect.py" -> "new_params.move_to_end"
	"inspect.py" -> "new_params.pop"
	"inspect.py" -> "wrapped_sig.replace"
	"inspect.py" -> "new_params.values"
	"inspect.py" -> tuple
	"inspect.py" -> "sig.parameters.values"
	"inspect.py" -> ValueError
	"inspect.py" -> ValueError
	"inspect.py" -> "sig.replace"
	"inspect.py" -> isbuiltin
	"inspect.py" -> ismethoddescriptor
	"inspect.py" -> isinstance
	"inspect.py" -> callable
	"inspect.py" -> isclass
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> getattr
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> "l.encode"
	"inspect.py" -> "signature.split"
	"inspect.py" -> iter
	"inspect.py" -> "tokenize.tokenize"
	"inspect.py" -> next
	"inspect.py" -> add
	"inspect.py" -> add
	"inspect.py" -> add
	"inspect.py" -> join
	"inspect.py" -> _signature_strip_non_python_syntax
	"inspect.py" -> "ast.parse"
	"inspect.py" -> isinstance
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> getattr
	"inspect.py" -> "sys.modules.get"
	"inspect.py" -> "sys.modules.copy"
	"inspect.py" -> isinstance
	"inspect.py" -> ValueError
	"inspect.py" -> eval
	"inspect.py" -> eval
	"inspect.py" -> isinstance
	"inspect.py" -> type
	"inspect.py" -> "ast.Constant"
	"inspect.py" -> isinstance
	"inspect.py" -> "a.append"
	"inspect.py" -> isinstance
	"inspect.py" -> "a.append"
	"inspect.py" -> join
	"inspect.py" -> reversed
	"inspect.py" -> wrap_value
	"inspect.py" -> isinstance
	"inspect.py" -> ValueError
	"inspect.py" -> wrap_value
	"inspect.py" -> "self.visit"
	"inspect.py" -> "self.visit"
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> "ast.Constant"
	"inspect.py" -> isinstance
	"inspect.py" -> "ast.Constant"
	"inspect.py" -> isinstance
	"inspect.py" -> "ast.Constant"
	"inspect.py" -> parse_name
	"inspect.py" -> visit
	"inspect.py" -> RewriteSymbolics
	"inspect.py" -> "ast.literal_eval"
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> reversed
	"inspect.py" -> reversed
	"inspect.py" -> "itertools.zip_longest"
	"inspect.py" -> enumerate
	"inspect.py" -> reversed
	"inspect.py" -> list
	"inspect.py" -> p
	"inspect.py" -> p
	"inspect.py" -> zip
	"inspect.py" -> p
	"inspect.py" -> p
	"inspect.py" -> getattr
	"inspect.py" -> ismodule
	"inspect.py" -> "parameters.pop"
	"inspect.py" -> replace
	"inspect.py" -> cls
	"inspect.py" -> _signature_is_builtin
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> getattr
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> _signature_fromstr
	"inspect.py" -> isfunction
	"inspect.py" -> _signature_is_functionlike
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> getattr
	"inspect.py" -> _signature_fromstr
	"inspect.py" -> get_annotations
	"inspect.py" -> len
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> enumerate
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> "kwdefaults.get"
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "parameters.append"
	"inspect.py" -> Parameter
	"inspect.py" -> cls
	"inspect.py" -> "annotations.get"
	"inspect.py" -> "functools.partial"
	"inspect.py" -> callable
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> isinstance
	"inspect.py" -> _get_signature_of
	"inspect.py" -> _signature_bound_method
	"inspect.py" -> unwrap
	"inspect.py" -> hasattr
	"inspect.py" -> isinstance
	"inspect.py" -> isinstance
	"inspect.py" -> _get_signature_of
	"inspect.py" -> isinstance
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> isinstance
	"inspect.py" -> _get_signature_of
	"inspect.py" -> _signature_get_partial
	"inspect.py" -> tuple
	"inspect.py" -> "wrapped_sig.parameters.values"
	"inspect.py" -> tuple
	"inspect.py" -> "sig.parameters.values"
	"inspect.py" -> "sig.replace"
	"inspect.py" -> isfunction
	"inspect.py" -> _signature_is_functionlike
	"inspect.py" -> _signature_from_function
	"inspect.py" -> _signature_is_builtin
	"inspect.py" -> _signature_from_builtin
	"inspect.py" -> isinstance
	"inspect.py" -> _get_signature_of
	"inspect.py" -> _signature_get_partial
	"inspect.py" -> isinstance
	"inspect.py" -> _signature_get_user_defined_method
	"inspect.py" -> type
	"inspect.py" -> _get_signature_of
	"inspect.py" -> _signature_get_user_defined_method
	"inspect.py" -> _signature_get_user_defined_method
	"inspect.py" -> _get_signature_of
	"inspect.py" -> _signature_fromstr
	"inspect.py" -> "sigcls.from_callable"
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> isinstance
	"inspect.py" -> _signature_get_user_defined_method
	"inspect.py" -> type
	"inspect.py" -> _get_signature_of
	"inspect.py" -> format
	"inspect.py" -> ValueError
	"inspect.py" -> _signature_bound_method
	"inspect.py" -> isinstance
	"inspect.py" -> format
	"inspect.py" -> ValueError
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> len
	"inspect.py" -> "int.__new__"
	"inspect.py" -> _ParameterKind
	"inspect.py" -> ValueError
	"inspect.py" -> "msg.format"
	"inspect.py" -> ValueError
	"inspect.py" -> ValueError
	"inspect.py" -> isinstance
	"inspect.py" -> format
	"inspect.py" -> type
	"inspect.py" -> TypeError
	"inspect.py" -> isdigit
	"inspect.py" -> "msg.format"
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> iskeyword
	"inspect.py" -> "name.isidentifier"
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> type
	"inspect.py" -> <unknown_function>
	"inspect.py" -> type
	"inspect.py" -> format
	"inspect.py" -> formatannotation
	"inspect.py" -> format
	"inspect.py" -> repr
	"inspect.py" -> format
	"inspect.py" -> repr
	"inspect.py" -> format
	"inspect.py" -> hash
	"inspect.py" -> isinstance
	"inspect.py" -> "self._signature.parameters.items"
	"inspect.py" -> "args.extend"
	"inspect.py" -> "args.append"
	"inspect.py" -> tuple
	"inspect.py" -> "self._signature.parameters.items"
	"inspect.py" -> "kwargs.update"
	"inspect.py" -> "self._signature.parameters.items"
	"inspect.py" -> "new_arguments.append"
	"inspect.py" -> "new_arguments.append"
	"inspect.py" -> dict
	"inspect.py" -> isinstance
	"inspect.py" -> "self.arguments.items"
	"inspect.py" -> "args.append"
	"inspect.py" -> format
	"inspect.py" -> format
	"inspect.py" -> join
	"inspect.py" -> OrderedDict
	"inspect.py" -> OrderedDict
	"inspect.py" -> "msg.format"
	"inspect.py" -> ValueError
	"inspect.py" -> ValueError
	"inspect.py" -> format
	"inspect.py" -> ValueError
	"inspect.py" -> OrderedDict
	"inspect.py" -> "types.MappingProxyType"
	"inspect.py" -> _signature_from_callable
	"inspect.py" -> "self.parameters.values"
	"inspect.py" -> <unknown_function>
	"inspect.py" -> type
	"inspect.py" -> tuple
	"inspect.py" -> "self.parameters.values"
	"inspect.py" -> "self.parameters.values"
	"inspect.py" -> "self._hash_basis"
	"inspect.py" -> frozenset
	"inspect.py" -> "kwo_params.values"
	"inspect.py" -> hash
	"inspect.py" -> isinstance
	"inspect.py" -> "self._hash_basis"
	"inspect.py" -> "other._hash_basis"
	"inspect.py" -> iter
	"inspect.py" -> "self.parameters.values"
	"inspect.py" -> iter
	"inspect.py" -> next
	"inspect.py" -> next
	"inspect.py" -> "msg.format"
	"inspect.py" -> TypeError
	"inspect.py" -> "msg.format"
	"inspect.py" -> TypeError
	"inspect.py" -> next
	"inspect.py" -> TypeError
	"inspect.py" -> TypeError
	"inspect.py" -> "values.extend"
	"inspect.py" -> tuple
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> "itertools.chain"
	"inspect.py" -> "kwargs.pop"
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> TypeError
	"inspect.py" -> format
	"inspect.py" -> next
	"inspect.py" -> iter
	"inspect.py" -> "self._bound_arguments_cls"
	"inspect.py" -> "self._bind"
	"inspect.py" -> "self._bind"
	"inspect.py" -> type
	"inspect.py" -> tuple
	"inspect.py" -> "self._parameters.values"
	"inspect.py" -> format
	"inspect.py" -> "self.parameters.values"
	"inspect.py" -> str
	"inspect.py" -> "result.append"
	"inspect.py" -> "result.append"
	"inspect.py" -> "result.append"
	"inspect.py" -> "result.append"
	"inspect.py" -> format
	"inspect.py" -> join
	"inspect.py" -> formatannotation
	"inspect.py" -> format
	"inspect.py" -> "Signature.from_callable"
	"inspect.py" -> "argparse.ArgumentParser"
	"inspect.py" -> "parser.add_argument"
	"inspect.py" -> "parser.add_argument"
	"inspect.py" -> "parser.parse_args"
	"inspect.py" -> "target.partition"
	"inspect.py" -> "importlib.import_module"
	"inspect.py" -> format
	"inspect.py" -> type
	"inspect.py" -> print
	"inspect.py" -> "sys.exit"
	"inspect.py" -> "attrs.split"
	"inspect.py" -> getattr
	"inspect.py" -> print
	"inspect.py" -> "sys.exit"
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> getsourcefile
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> repr
	"inspect.py" -> hasattr
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> findsource
	"inspect.py" -> print
	"inspect.py" -> format
	"inspect.py" -> print
	"inspect.py" -> print
	"inspect.py" -> getsource
	"inspect.py" -> _main
	"operator.py" -> _abs
	"operator.py" -> "a.__index__"
	"operator.py" -> hasattr
	"operator.py" -> type
	"operator.py" -> TypeError
	"operator.py" -> enumerate
	"operator.py" -> ValueError
	"operator.py" -> isinstance
	"operator.py" -> type
	"operator.py" -> TypeError
	"operator.py" -> len
	"operator.py" -> type
	"operator.py" -> hint
	"operator.py" -> isinstance
	"operator.py" -> type
	"operator.py" -> TypeError
	"operator.py" -> ValueError
	"operator.py" -> obj
	"operator.py" -> isinstance
	"operator.py" -> TypeError
	"operator.py" -> "attr.split"
	"operator.py" -> getattr
	"operator.py" -> tuple
	"operator.py" -> map
	"operator.py" -> tuple
	"operator.py" -> getter
	"operator.py" -> "self._call"
	"operator.py" -> join
	"operator.py" -> map
	"operator.py" -> tuple
	"operator.py" -> "self._call"
	"operator.py" -> join
	"operator.py" -> map
	"operator.py" -> isinstance
	"operator.py" -> TypeError
	"operator.py" -> <unknown_function>
	"operator.py" -> getattr
	"operator.py" -> repr
	"operator.py" -> "args.extend"
	"operator.py" -> map
	"operator.py" -> "args.extend"
	"operator.py" -> "self._kwargs.items"
	"operator.py" -> join
	"operator.py" -> partial
	"operator.py" -> hasattr
	"operator.py" -> type
	"operator.py" -> TypeError
	"dis.py" -> list
	"dis.py" -> dict
	"dis.py" -> enumerate
	"dis.py" -> "name.startswith"
	"dis.py" -> zip
	"dis.py" -> "_specializations.items"
	"dis.py" -> compile
	"dis.py" -> compile
	"dis.py" -> distb
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> sorted
	"dis.py" -> "x.__dict__.items"
	"dis.py" -> isinstance
	"dis.py" -> print
	"dis.py" -> dis
	"dis.py" -> print
	"dis.py" -> print
	"dis.py" -> hasattr
	"dis.py" -> _disassemble_recursive
	"dis.py" -> isinstance
	"dis.py" -> _disassemble_bytes
	"dis.py" -> isinstance
	"dis.py" -> _disassemble_str
	"dis.py" -> TypeError
	"dis.py" -> type
	"dis.py" -> RuntimeError
	"dis.py" -> disassemble
	"dis.py" -> range
	"dis.py" -> "names.append"
	"dis.py" -> "COMPILER_FLAG_NAMES.get"
	"dis.py" -> hex
	"dis.py" -> "names.append"
	"dis.py" -> hex
	"dis.py" -> join
	"dis.py" -> _Unknown
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> hasattr
	"dis.py" -> isinstance
	"dis.py" -> _try_compile
	"dis.py" -> hasattr
	"dis.py" -> TypeError
	"dis.py" -> type
	"dis.py" -> _format_code_info
	"dis.py" -> _get_code_object
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> pretty_flags
	"dis.py" -> "lines.append"
	"dis.py" -> enumerate
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> enumerate
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> enumerate
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> enumerate
	"dis.py" -> "lines.append"
	"dis.py" -> "lines.append"
	"dis.py" -> enumerate
	"dis.py" -> "lines.append"
	"dis.py" -> join
	"dis.py" -> print
	"dis.py" -> code_info
	"dis.py" -> "collections.namedtuple"
	"dis.py" -> "collections.namedtuple"
	"dis.py" -> "collections.namedtuple"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> "fields.append"
	"dis.py" -> rjust
	"dis.py" -> repr
	"dis.py" -> "fields.append"
	"dis.py" -> "self.opname.ljust"
	"dis.py" -> "fields.append"
	"dis.py" -> rjust
	"dis.py" -> repr
	"dis.py" -> "fields.append"
	"dis.py" -> rstrip
	"dis.py" -> join
	"dis.py" -> _get_code_object
	"dis.py" -> dict
	"dis.py" -> findlinestarts
	"dis.py" -> _get_instructions_bytes
	"dis.py" -> _get_code_array
	"dis.py" -> "co.co_positions"
	"dis.py" -> _get_const_value
	"dis.py" -> repr
	"dis.py" -> get_name
	"dis.py" -> next
	"dis.py" -> next
	"dis.py" -> iter
	"dis.py" -> _parse_varint
	"dis.py" -> _parse_varint
	"dis.py" -> _parse_varint
	"dis.py" -> _parse_varint
	"dis.py" -> bool
	"dis.py" -> "entries.append"
	"dis.py" -> _ExceptionTableEntry
	"dis.py" -> iter
	"dis.py" -> set
	"dis.py" -> findlabels
	"dis.py" -> range
	"dis.py" -> "labels.add"
	"dis.py" -> _unpack_opargs
	"dis.py" -> "linestarts.get"
	"dis.py" -> Positions
	"dis.py" -> next
	"dis.py" -> _deoptop
	"dis.py" -> _get_const_info
	"dis.py" -> _get_name_info
	"dis.py" -> _get_name_info
	"dis.py" -> repr
	"dis.py" -> _is_backward_jump
	"dis.py" -> repr
	"dis.py" -> _get_name_info
	"dis.py" -> bool
	"dis.py" -> join
	"dis.py" -> enumerate
	"dis.py" -> Instruction
	"dis.py" -> range
	"dis.py" -> next
	"dis.py" -> items
	"dis.py" -> range
	"dis.py" -> "int.from_bytes"
	"dis.py" -> Instruction
	"dis.py" -> Positions
	"dis.py" -> next
	"dis.py" -> dict
	"dis.py" -> findlinestarts
	"dis.py" -> _parse_exception_table
	"dis.py" -> _disassemble_bytes
	"dis.py" -> _get_code_array
	"dis.py" -> "co.co_positions"
	"dis.py" -> disassemble
	"dis.py" -> hasattr
	"dis.py" -> print
	"dis.py" -> print
	"dis.py" -> _disassemble_recursive
	"dis.py" -> bool
	"dis.py" -> max
	"dis.py" -> "linestarts.values"
	"dis.py" -> len
	"dis.py" -> str
	"dis.py" -> len
	"dis.py" -> len
	"dis.py" -> str
	"dis.py" -> _get_instructions_bytes
	"dis.py" -> print
	"dis.py" -> print
	"dis.py" -> "instr._disassemble"
	"dis.py" -> print
	"dis.py" -> print
	"dis.py" -> _disassemble_recursive
	"dis.py" -> _try_compile
	"dis.py" -> range
	"dis.py" -> len
	"dis.py" -> _deoptop
	"dis.py" -> _unpack_opargs
	"dis.py" -> _is_backward_jump
	"dis.py" -> "labels.append"
	"dis.py" -> "code.co_lines"
	"dis.py" -> _unpack_opargs
	"dis.py" -> enumerate
	"dis.py" -> _get_const_value
	"dis.py" -> _get_const_value
	"dis.py" -> _unpack_opargs
	"dis.py" -> _get_code_object
	"dis.py" -> dict
	"dis.py" -> findlinestarts
	"dis.py" -> _parse_exception_table
	"dis.py" -> _get_instructions_bytes
	"dis.py" -> _get_code_array
	"dis.py" -> "co.co_positions"
	"dis.py" -> format
	"dis.py" -> cls
	"dis.py" -> _format_code_info
	"dis.py" -> "io.StringIO"
	"dis.py" -> _disassemble_bytes
	"dis.py" -> _get_code_array
	"dis.py" -> "co.co_positions"
	"dis.py" -> "output.getvalue"
	"dis.py" -> "argparse.ArgumentParser"
	"dis.py" -> "parser.add_argument"
	"dis.py" -> "argparse.FileType"
	"dis.py" -> "parser.parse_args"
	"dis.py" -> "infile.read"
	"dis.py" -> compile
	"dis.py" -> dis
	"dis.py" -> _test
	"argparse.py" -> type
	"argparse.py" -> "self._get_args"
	"argparse.py" -> "arg_strings.append"
	"argparse.py" -> repr
	"argparse.py" -> "self._get_kwargs"
	"argparse.py" -> "name.isidentifier"
	"argparse.py" -> "arg_strings.append"
	"argparse.py" -> "arg_strings.append"
	"argparse.py" -> repr
	"argparse.py" -> join
	"argparse.py" -> list
	"argparse.py" -> "self.__dict__.items"
	"argparse.py" -> type
	"argparse.py" -> "copy.copy"
	"argparse.py" -> "shutil.get_terminal_size"
	"argparse.py" -> min
	"argparse.py" -> max
	"argparse.py" -> "self._Section"
	"argparse.py" -> "_re.compile"
	"argparse.py" -> "_re.compile"
	"argparse.py" -> "self.formatter._indent"
	"argparse.py" -> join
	"argparse.py" -> func
	"argparse.py" -> "self.formatter._dedent"
	"argparse.py" -> join
	"argparse.py" -> "self._current_section.items.append"
	"argparse.py" -> "self._indent"
	"argparse.py" -> "self._Section"
	"argparse.py" -> "self._add_item"
	"argparse.py" -> "self._dedent"
	"argparse.py" -> "self._add_item"
	"argparse.py" -> "self._add_item"
	"argparse.py" -> get_invocation
	"argparse.py" -> "self._iter_indented_subactions"
	"argparse.py" -> "invocations.append"
	"argparse.py" -> get_invocation
	"argparse.py" -> max
	"argparse.py" -> map
	"argparse.py" -> max
	"argparse.py" -> "self._add_item"
	"argparse.py" -> "self.add_argument"
	"argparse.py" -> "self._root_section.format_help"
	"argparse.py" -> "self._long_break_matcher.sub"
	"argparse.py" -> "help.strip"
	"argparse.py" -> join
	"argparse.py" -> _
	"argparse.py" -> dict
	"argparse.py" -> dict
	"argparse.py" -> dict
	"argparse.py" -> "optionals.append"
	"argparse.py" -> "positionals.append"
	"argparse.py" -> format
	"argparse.py" -> join
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> format
	"argparse.py" -> format
	"argparse.py" -> "_re.findall"
	"argparse.py" -> "_re.findall"
	"argparse.py" -> join
	"argparse.py" -> join
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> "lines.append"
	"argparse.py" -> join
	"argparse.py" -> len
	"argparse.py" -> "line.append"
	"argparse.py" -> len
	"argparse.py" -> "lines.append"
	"argparse.py" -> join
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> len
	"argparse.py" -> get_lines
	"argparse.py" -> "lines.extend"
	"argparse.py" -> get_lines
	"argparse.py" -> get_lines
	"argparse.py" -> len
	"argparse.py" -> get_lines
	"argparse.py" -> len
	"argparse.py" -> "lines.extend"
	"argparse.py" -> get_lines
	"argparse.py" -> "lines.extend"
	"argparse.py" -> get_lines
	"argparse.py" -> join
	"argparse.py" -> set
	"argparse.py" -> ValueError
	"argparse.py" -> "actions.index"
	"argparse.py" -> len
	"argparse.py" -> "group_actions.add"
	"argparse.py" -> range
	"argparse.py" -> enumerate
	"argparse.py" -> "parts.append"
	"argparse.py" -> "inserts.get"
	"argparse.py" -> "inserts.pop"
	"argparse.py" -> "inserts.get"
	"argparse.py" -> "inserts.pop"
	"argparse.py" -> "self._get_default_metavar_for_positional"
	"argparse.py" -> "self._format_args"
	"argparse.py" -> "parts.append"
	"argparse.py" -> "action.format_usage"
	"argparse.py" -> "self._get_default_metavar_for_optional"
	"argparse.py" -> "self._format_args"
	"argparse.py" -> "parts.append"
	"argparse.py" -> sorted
	"argparse.py" -> join
	"argparse.py" -> "_re.sub"
	"argparse.py" -> "_re.sub"
	"argparse.py" -> "_re.sub"
	"argparse.py" -> "text.strip"
	"argparse.py" -> dict
	"argparse.py" -> max
	"argparse.py" -> "self._fill_text"
	"argparse.py" -> min
	"argparse.py" -> max
	"argparse.py" -> "self._format_action_invocation"
	"argparse.py" -> len
	"argparse.py" -> "action.help.strip"
	"argparse.py" -> "self._expand_help"
	"argparse.py" -> "self._split_lines"
	"argparse.py" -> "parts.append"
	"argparse.py" -> "parts.append"
	"argparse.py" -> "action_header.endswith"
	"argparse.py" -> "parts.append"
	"argparse.py" -> "self._iter_indented_subactions"
	"argparse.py" -> "parts.append"
	"argparse.py" -> "self._format_action"
	"argparse.py" -> "self._join_parts"
	"argparse.py" -> "self._get_default_metavar_for_positional"
	"argparse.py" -> <unknown_function>
	"argparse.py" -> "self._metavar_formatter"
	"argparse.py" -> "parts.extend"
	"argparse.py" -> "self._get_default_metavar_for_optional"
	"argparse.py" -> "self._format_args"
	"argparse.py" -> "parts.append"
	"argparse.py" -> join
	"argparse.py" -> str
	"argparse.py" -> join
	"argparse.py" -> isinstance
	"argparse.py" -> "self._metavar_formatter"
	"argparse.py" -> get_metavar
	"argparse.py" -> get_metavar
	"argparse.py" -> get_metavar
	"argparse.py" -> len
	"argparse.py" -> get_metavar
	"argparse.py" -> get_metavar
	"argparse.py" -> range
	"argparse.py" -> ValueError
	"argparse.py" -> join
	"argparse.py" -> get_metavar
	"argparse.py" -> dict
	"argparse.py" -> vars
	"argparse.py" -> list
	"argparse.py" -> list
	"argparse.py" -> hasattr
	"argparse.py" -> "params.get"
	"argparse.py" -> join
	"argparse.py" -> str
	"argparse.py" -> "self._get_help_string"
	"argparse.py" -> "self._indent"
	"argparse.py" -> get_subactions
	"argparse.py" -> "self._dedent"
	"argparse.py" -> strip
	"argparse.py" -> "self._whitespace_matcher.sub"
	"argparse.py" -> "textwrap.wrap"
	"argparse.py" -> strip
	"argparse.py" -> "self._whitespace_matcher.sub"
	"argparse.py" -> "textwrap.fill"
	"argparse.py" -> "action.dest.upper"
	"argparse.py" -> join
	"argparse.py" -> "text.splitlines"
	"argparse.py" -> "text.splitlines"
	"argparse.py" -> join
	"argparse.py" -> join
	"argparse.py" -> _get_action_name
	"argparse.py" -> _
	"argparse.py" -> dict
	"argparse.py" -> getattr
	"argparse.py" -> NotImplementedError
	"argparse.py" -> _
	"argparse.py" -> "_option_strings.append"
	"argparse.py" -> "option_string.startswith"
	"argparse.py" -> "_option_strings.append"
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> setattr
	"argparse.py" -> "option_string.startswith"
	"argparse.py" -> join
	"argparse.py" -> ValueError
	"argparse.py" -> ValueError
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> setattr
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> setattr
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> ValueError
	"argparse.py" -> ValueError
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> getattr
	"argparse.py" -> _copy_items
	"argparse.py" -> "items.append"
	"argparse.py" -> setattr
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> getattr
	"argparse.py" -> _copy_items
	"argparse.py" -> "items.append"
	"argparse.py" -> setattr
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> getattr
	"argparse.py" -> setattr
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> "parser.print_help"
	"argparse.py" -> "parser.exit"
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> "parser._get_formatter"
	"argparse.py" -> "formatter.add_text"
	"argparse.py" -> "parser._print_message"
	"argparse.py" -> "formatter.format_help"
	"argparse.py" -> "parser.exit"
	"argparse.py" -> join
	"argparse.py" -> super
	"argparse.py" -> "sup.__init__"
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> "kwargs.get"
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> ArgumentError
	"argparse.py" -> _
	"argparse.py" -> ArgumentError
	"argparse.py" -> _
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> "self._ChoicesPseudoAction"
	"argparse.py" -> "self._choices_actions.append"
	"argparse.py" -> "self._parser_class"
	"argparse.py" -> setattr
	"argparse.py" -> join
	"argparse.py" -> _
	"argparse.py" -> ArgumentError
	"argparse.py" -> "parser.parse_known_args"
	"argparse.py" -> items
	"argparse.py" -> vars
	"argparse.py" -> setattr
	"argparse.py" -> setdefault
	"argparse.py" -> vars
	"argparse.py" -> extend
	"argparse.py" -> getattr
	"argparse.py" -> getattr
	"argparse.py" -> _copy_items
	"argparse.py" -> "items.extend"
	"argparse.py" -> setattr
	"argparse.py" -> any
	"argparse.py" -> _
	"argparse.py" -> ValueError
	"argparse.py" -> open
	"argparse.py" -> _
	"argparse.py" -> ArgumentTypeError
	"argparse.py" -> join
	"argparse.py" -> repr
	"argparse.py" -> type
	"argparse.py" -> setattr
	"argparse.py" -> isinstance
	"argparse.py" -> vars
	"argparse.py" -> vars
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.register"
	"argparse.py" -> "self._get_handler"
	"argparse.py" -> "_re.compile"
	"argparse.py" -> "self._registries.setdefault"
	"argparse.py" -> get
	"argparse.py" -> "self._defaults.update"
	"argparse.py" -> "self._defaults.get"
	"argparse.py" -> len
	"argparse.py" -> ValueError
	"argparse.py" -> "self._get_positional_kwargs"
	"argparse.py" -> "self._get_optional_kwargs"
	"argparse.py" -> "self._pop_action_class"
	"argparse.py" -> callable
	"argparse.py" -> ValueError
	"argparse.py" -> action_class
	"argparse.py" -> "self._registry_get"
	"argparse.py" -> callable
	"argparse.py" -> ValueError
	"argparse.py" -> ValueError
	"argparse.py" -> hasattr
	"argparse.py" -> _format_args
	"argparse.py" -> "self._get_formatter"
	"argparse.py" -> ValueError
	"argparse.py" -> "self._add_action"
	"argparse.py" -> _ArgumentGroup
	"argparse.py" -> "self._action_groups.append"
	"argparse.py" -> _MutuallyExclusiveGroup
	"argparse.py" -> "self._mutually_exclusive_groups.append"
	"argparse.py" -> "self._check_conflict"
	"argparse.py" -> "self._actions.append"
	"argparse.py" -> "self._negative_number_matcher.match"
	"argparse.py" -> "self._has_negative_number_optionals.append"
	"argparse.py" -> "self._actions.remove"
	"argparse.py" -> _
	"argparse.py" -> ValueError
	"argparse.py" -> "self.add_argument_group"
	"argparse.py" -> "self.add_mutually_exclusive_group"
	"argparse.py" -> _add_action
	"argparse.py" -> "group_map.get"
	"argparse.py" -> _
	"argparse.py" -> TypeError
	"argparse.py" -> "kwargs.get"
	"argparse.py" -> "kwargs.get"
	"argparse.py" -> dict
	"argparse.py" -> _
	"argparse.py" -> ValueError
	"argparse.py" -> "option_strings.append"
	"argparse.py" -> len
	"argparse.py" -> "long_option_strings.append"
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> "dest_option_string.lstrip"
	"argparse.py" -> _
	"argparse.py" -> ValueError
	"argparse.py" -> "dest.replace"
	"argparse.py" -> dict
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> "self._registry_get"
	"argparse.py" -> getattr
	"argparse.py" -> _
	"argparse.py" -> ValueError
	"argparse.py" -> "confl_optionals.append"
	"argparse.py" -> "self._get_handler"
	"argparse.py" -> conflict_handler
	"argparse.py" -> ngettext
	"argparse.py" -> len
	"argparse.py" -> join
	"argparse.py" -> ArgumentError
	"argparse.py" -> "action.option_strings.remove"
	"argparse.py" -> "self._option_string_actions.pop"
	"argparse.py" -> "action.container._remove_action"
	"argparse.py" -> update
	"argparse.py" -> update
	"argparse.py" -> update
	"argparse.py" -> super
	"argparse.py" -> super_init
	"argparse.py" -> _add_action
	"argparse.py" -> super
	"argparse.py" -> "self._group_actions.append"
	"argparse.py" -> _remove_action
	"argparse.py" -> super
	"argparse.py" -> "self._group_actions.remove"
	"argparse.py" -> "warnings.warn"
	"argparse.py" -> add_argument_group
	"argparse.py" -> super
	"argparse.py" -> __init__
	"argparse.py" -> super
	"argparse.py" -> _
	"argparse.py" -> ValueError
	"argparse.py" -> "self._container._add_action"
	"argparse.py" -> "self._group_actions.append"
	"argparse.py" -> "self._container._remove_action"
	"argparse.py" -> "self._group_actions.remove"
	"argparse.py" -> "warnings.warn"
	"argparse.py" -> add_mutually_exclusive_group
	"argparse.py" -> super
	"argparse.py" -> super
	"argparse.py" -> superinit
	"argparse.py" -> "_os.path.basename"
	"argparse.py" -> add_group
	"argparse.py" -> _
	"argparse.py" -> add_group
	"argparse.py" -> _
	"argparse.py" -> "self.register"
	"argparse.py" -> "self.add_argument"
	"argparse.py" -> _
	"argparse.py" -> "self._add_container_actions"
	"argparse.py" -> "self._defaults.update"
	"argparse.py" -> getattr
	"argparse.py" -> "self.error"
	"argparse.py" -> _
	"argparse.py" -> "kwargs.setdefault"
	"argparse.py" -> type
	"argparse.py" -> _
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> _
	"argparse.py" -> "kwargs.pop"
	"argparse.py" -> "self.add_argument_group"
	"argparse.py" -> "kwargs.get"
	"argparse.py" -> "self._get_formatter"
	"argparse.py" -> "self._get_positional_actions"
	"argparse.py" -> "formatter.add_usage"
	"argparse.py" -> strip
	"argparse.py" -> "formatter.format_help"
	"argparse.py" -> "self._pop_action_class"
	"argparse.py" -> parsers_class
	"argparse.py" -> "self._subparsers._add_action"
	"argparse.py" -> "self._optionals._add_action"
	"argparse.py" -> "self._positionals._add_action"
	"argparse.py" -> "self.parse_known_args"
	"argparse.py" -> _
	"argparse.py" -> "self.error"
	"argparse.py" -> join
	"argparse.py" -> list
	"argparse.py" -> Namespace
	"argparse.py" -> hasattr
	"argparse.py" -> setattr
	"argparse.py" -> hasattr
	"argparse.py" -> setattr
	"argparse.py" -> "self._parse_known_args"
	"argparse.py" -> "self.error"
	"argparse.py" -> str
	"argparse.py" -> "self._parse_known_args"
	"argparse.py" -> hasattr
	"argparse.py" -> "args.extend"
	"argparse.py" -> getattr
	"argparse.py" -> delattr
	"argparse.py" -> "self._read_args_from_files"
	"argparse.py" -> enumerate
	"argparse.py" -> "action_conflicts.setdefault"
	"argparse.py" -> "conflicts.extend"
	"argparse.py" -> "conflicts.extend"
	"argparse.py" -> iter
	"argparse.py" -> enumerate
	"argparse.py" -> "arg_string_pattern_parts.append"
	"argparse.py" -> "arg_string_pattern_parts.append"
	"argparse.py" -> "self._parse_optional"
	"argparse.py" -> "arg_string_pattern_parts.append"
	"argparse.py" -> join
	"argparse.py" -> set
	"argparse.py" -> set
	"argparse.py" -> "seen_actions.add"
	"argparse.py" -> "self._get_values"
	"argparse.py" -> "seen_non_default_actions.add"
	"argparse.py" -> "action_conflicts.get"
	"argparse.py" -> _
	"argparse.py" -> _get_action_name
	"argparse.py" -> ArgumentError
	"argparse.py" -> action
	"argparse.py" -> "extras.append"
	"argparse.py" -> match_argument
	"argparse.py" -> "action_tuples.append"
	"argparse.py" -> _
	"argparse.py" -> ArgumentError
	"argparse.py" -> "action_tuples.append"
	"argparse.py" -> _
	"argparse.py" -> ArgumentError
	"argparse.py" -> match_argument
	"argparse.py" -> "action_tuples.append"
	"argparse.py" -> take_action
	"argparse.py" -> "self._get_positional_actions"
	"argparse.py" -> match_partial
	"argparse.py" -> zip
	"argparse.py" -> take_action
	"argparse.py" -> len
	"argparse.py" -> max
	"argparse.py" -> min
	"argparse.py" -> consume_positionals
	"argparse.py" -> "extras.extend"
	"argparse.py" -> consume_optional
	"argparse.py" -> consume_positionals
	"argparse.py" -> "extras.extend"
	"argparse.py" -> "required_actions.append"
	"argparse.py" -> _get_action_name
	"argparse.py" -> isinstance
	"argparse.py" -> hasattr
	"argparse.py" -> getattr
	"argparse.py" -> setattr
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self.error"
	"argparse.py" -> _
	"argparse.py" -> join
	"argparse.py" -> _get_action_name
	"argparse.py" -> _
	"argparse.py" -> "self.error"
	"argparse.py" -> join
	"argparse.py" -> "new_arg_strings.append"
	"argparse.py" -> open
	"argparse.py" -> splitlines
	"argparse.py" -> "args_file.read"
	"argparse.py" -> "self.convert_arg_line_to_args"
	"argparse.py" -> "arg_strings.append"
	"argparse.py" -> "self._read_args_from_files"
	"argparse.py" -> "new_arg_strings.extend"
	"argparse.py" -> "self.error"
	"argparse.py" -> str
	"argparse.py" -> "self._get_nargs_pattern"
	"argparse.py" -> "_re.match"
	"argparse.py" -> _
	"argparse.py" -> _
	"argparse.py" -> _
	"argparse.py" -> "nargs_errors.get"
	"argparse.py" -> ngettext
	"argparse.py" -> ArgumentError
	"argparse.py" -> len
	"argparse.py" -> "match.group"
	"argparse.py" -> range
	"argparse.py" -> len
	"argparse.py" -> join
	"argparse.py" -> "self._get_nargs_pattern"
	"argparse.py" -> "_re.match"
	"argparse.py" -> "result.extend"
	"argparse.py" -> len
	"argparse.py" -> "match.groups"
	"argparse.py" -> len
	"argparse.py" -> "arg_string.split"
	"argparse.py" -> "self._get_option_tuples"
	"argparse.py" -> len
	"argparse.py" -> join
	"argparse.py" -> _
	"argparse.py" -> "self.error"
	"argparse.py" -> len
	"argparse.py" -> "self._negative_number_matcher.match"
	"argparse.py" -> "option_string.split"
	"argparse.py" -> "option_string.startswith"
	"argparse.py" -> "result.append"
	"argparse.py" -> "result.append"
	"argparse.py" -> "option_string.startswith"
	"argparse.py" -> "result.append"
	"argparse.py" -> "self.error"
	"argparse.py" -> _
	"argparse.py" -> join
	"argparse.py" -> "nargs_pattern.replace"
	"argparse.py" -> "nargs_pattern.replace"
	"argparse.py" -> "self.parse_known_intermixed_args"
	"argparse.py" -> _
	"argparse.py" -> "self.error"
	"argparse.py" -> join
	"argparse.py" -> "self._get_positional_actions"
	"argparse.py" -> TypeError
	"argparse.py" -> TypeError
	"argparse.py" -> "self.format_usage"
	"argparse.py" -> "self.parse_known_args"
	"argparse.py" -> hasattr
	"argparse.py" -> getattr
	"argparse.py" -> warn
	"argparse.py" -> delattr
	"argparse.py" -> "self._get_optional_actions"
	"argparse.py" -> "self.parse_known_args"
	"argparse.py" -> "arg_strings.remove"
	"argparse.py" -> isinstance
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self._check_value"
	"argparse.py" -> "self._check_value"
	"argparse.py" -> len
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self._check_value"
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self._check_value"
	"argparse.py" -> "self._get_value"
	"argparse.py" -> "self._check_value"
	"argparse.py" -> "self._registry_get"
	"argparse.py" -> callable
	"argparse.py" -> _
	"argparse.py" -> ArgumentError
	"argparse.py" -> type_func
	"argparse.py" -> getattr
	"argparse.py" -> repr
	"argparse.py" -> str
	"argparse.py" -> ArgumentError
	"argparse.py" -> getattr
	"argparse.py" -> repr
	"argparse.py" -> _
	"argparse.py" -> ArgumentError
	"argparse.py" -> join
	"argparse.py" -> map
	"argparse.py" -> _
	"argparse.py" -> ArgumentError
	"argparse.py" -> "self._get_formatter"
	"argparse.py" -> "formatter.add_usage"
	"argparse.py" -> "formatter.format_help"
	"argparse.py" -> "self._get_formatter"
	"argparse.py" -> "formatter.add_usage"
	"argparse.py" -> "formatter.add_text"
	"argparse.py" -> "formatter.start_section"
	"argparse.py" -> "formatter.add_text"
	"argparse.py" -> "formatter.add_arguments"
	"argparse.py" -> "formatter.end_section"
	"argparse.py" -> "formatter.add_text"
	"argparse.py" -> "formatter.format_help"
	"argparse.py" -> "self.formatter_class"
	"argparse.py" -> "self._print_message"
	"argparse.py" -> "self.format_usage"
	"argparse.py" -> "self._print_message"
	"argparse.py" -> "self.format_help"
	"argparse.py" -> "file.write"
	"argparse.py" -> "self._print_message"
	"argparse.py" -> "_sys.exit"
	"argparse.py" -> "self.print_usage"
	"argparse.py" -> "self.exit"
	"argparse.py" -> _
	"__init__.py" -> "_bootstrap._setup"
	"__init__.py" -> "__file__.replace"
	"__init__.py" -> "_bootstrap_external._set_bootstrap_module"
	"__init__.py" -> "__file__.replace"
	"__init__.py" -> hasattr
	"__init__.py" -> "finder.invalidate_caches"
	"__init__.py" -> "warnings.warn"
	"__init__.py" -> ValueError
	"__init__.py" -> format
	"__init__.py" -> ValueError
	"__init__.py" -> format
	"__init__.py" -> "_bootstrap._find_spec"
	"__init__.py" -> ImportError
	"__init__.py" -> format
	"__init__.py" -> ImportError
	"__init__.py" -> "name.startswith"
	"__init__.py" -> TypeError
	"__init__.py" -> "msg.format"
	"__init__.py" -> "_bootstrap._gcd_import"
	"__init__.py" -> TypeError
	"__init__.py" -> "sys.modules.get"
	"__init__.py" -> ImportError
	"__init__.py" -> "msg.format"
	"__init__.py" -> "name.rpartition"
	"__init__.py" -> ImportError
	"__init__.py" -> "msg.format"
	"__init__.py" -> "_bootstrap._find_spec"
	"__init__.py" -> ModuleNotFoundError
	"__init__.py" -> "_bootstrap._exec"
	"tokenize.py" -> "re.compile"
	"tokenize.py" -> "re.compile"
	"tokenize.py" -> "collections.namedtuple"
	"tokenize.py" -> "self._replace"
	"tokenize.py" -> join
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> any
	"tokenize.py" -> maybe
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> maybe
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> "_itertools.permutations"
	"tokenize.py" -> "_itertools.product"
	"tokenize.py" -> "c.upper"
	"tokenize.py" -> "result.add"
	"tokenize.py" -> join
	"tokenize.py" -> "re.compile"
	"tokenize.py" -> group
	"tokenize.py" -> _all_string_prefixes
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> map
	"tokenize.py" -> sorted
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> group
	"tokenize.py" -> _all_string_prefixes
	"tokenize.py" -> set
	"tokenize.py" -> set
	"tokenize.py" -> _all_string_prefixes
	"tokenize.py" -> "single_quoted.add"
	"tokenize.py" -> "triple_quoted.add"
	"tokenize.py" -> ValueError
	"tokenize.py" -> format
	"tokenize.py" -> "self.tokens.append"
	"tokenize.py" -> "self.tokens.append"
	"tokenize.py" -> iter
	"tokenize.py" -> len
	"tokenize.py" -> "self.compat"
	"tokenize.py" -> "indents.append"
	"tokenize.py" -> "indents.pop"
	"tokenize.py" -> len
	"tokenize.py" -> "self.tokens.append"
	"tokenize.py" -> len
	"tokenize.py" -> "self.add_whitespace"
	"tokenize.py" -> "self.tokens.append"
	"tokenize.py" -> join
	"tokenize.py" -> "_itertools.chain"
	"tokenize.py" -> "indents.append"
	"tokenize.py" -> "indents.pop"
	"tokenize.py" -> toks_append
	"tokenize.py" -> toks_append
	"tokenize.py" -> Untokenizer
	"tokenize.py" -> "ut.untokenize"
	"tokenize.py" -> "out.encode"
	"tokenize.py" -> replace
	"tokenize.py" -> lower
	"tokenize.py" -> "enc.startswith"
	"tokenize.py" -> "enc.startswith"
	"tokenize.py" -> readline
	"tokenize.py" -> "line.decode"
	"tokenize.py" -> format
	"tokenize.py" -> SyntaxError
	"tokenize.py" -> "cookie_re.match"
	"tokenize.py" -> _get_normal_name
	"tokenize.py" -> "match.group"
	"tokenize.py" -> lookup
	"tokenize.py" -> format
	"tokenize.py" -> SyntaxError
	"tokenize.py" -> format
	"tokenize.py" -> SyntaxError
	"tokenize.py" -> read_or_stop
	"tokenize.py" -> "first.startswith"
	"tokenize.py" -> find_cookie
	"tokenize.py" -> "blank_re.match"
	"tokenize.py" -> read_or_stop
	"tokenize.py" -> find_cookie
	"tokenize.py" -> _builtin_open
	"tokenize.py" -> detect_encoding
	"tokenize.py" -> "buffer.seek"
	"tokenize.py" -> TextIOWrapper
	"tokenize.py" -> "buffer.close"
	"tokenize.py" -> detect_encoding
	"tokenize.py" -> "_itertools.repeat"
	"tokenize.py" -> "_itertools.chain"
	"tokenize.py" -> iter
	"tokenize.py" -> _tokenize
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> readline
	"tokenize.py" -> "line.decode"
	"tokenize.py" -> len
	"tokenize.py" -> TokenError
	"tokenize.py" -> "endprog.match"
	"tokenize.py" -> "endmatch.end"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> len
	"tokenize.py" -> rstrip
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> len
	"tokenize.py" -> len
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> len
	"tokenize.py" -> "indents.append"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> IndentationError
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenError
	"tokenize.py" -> match
	"tokenize.py" -> _compile
	"tokenize.py" -> "pseudomatch.span"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> "token.endswith"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> _compile
	"tokenize.py" -> "endprog.match"
	"tokenize.py" -> "endmatch.end"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> _compile
	"tokenize.py" -> "endpats.get"
	"tokenize.py" -> "endpats.get"
	"tokenize.py" -> "endpats.get"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> "initial.isidentifier"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> startswith
	"tokenize.py" -> "last_line.strip"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> len
	"tokenize.py" -> len
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> _tokenize
	"tokenize.py" -> "sys.stderr.write"
	"tokenize.py" -> "sys.stderr.write"
	"tokenize.py" -> perror
	"tokenize.py" -> perror
	"tokenize.py" -> perror
	"tokenize.py" -> "sys.exit"
	"tokenize.py" -> "argparse.ArgumentParser"
	"tokenize.py" -> "parser.add_argument"
	"tokenize.py" -> "parser.add_argument"
	"tokenize.py" -> "parser.parse_args"
	"tokenize.py" -> _builtin_open
	"tokenize.py" -> list
	"tokenize.py" -> tokenize
	"tokenize.py" -> _tokenize
	"tokenize.py" -> print
	"tokenize.py" -> error
	"tokenize.py" -> error
	"tokenize.py" -> error
	"tokenize.py" -> error
	"tokenize.py" -> print
	"tokenize.py" -> perror
	"tokenize.py" -> "c_tokenizer.TokenizerIter"
	"tokenize.py" -> TokenInfo
	"tokenize.py" -> main
	"keyword.py" -> frozenset
	"keyword.py" -> frozenset
	"datetime.py" -> "_DAYS_BEFORE_MONTH.append"
	"datetime.py" -> _is_leap
	"datetime.py" -> _is_leap
	"datetime.py" -> _days_in_month
	"datetime.py" -> _days_before_year
	"datetime.py" -> _days_before_month
	"datetime.py" -> _days_before_year
	"datetime.py" -> _days_before_year
	"datetime.py" -> _days_before_year
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> _is_leap
	"datetime.py" -> _days_in_month
	"datetime.py" -> _ymd2ord
	"datetime.py" -> _days_before_month
	"datetime.py" -> "_time.struct_time"
	"datetime.py" -> ValueError
	"datetime.py" -> "fmt.format"
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> len
	"datetime.py" -> getattr
	"datetime.py" -> "newformat.append"
	"datetime.py" -> hasattr
	"datetime.py" -> "object.utcoffset"
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> "newformat.append"
	"datetime.py" -> hasattr
	"datetime.py" -> "object.tzname"
	"datetime.py" -> "s.replace"
	"datetime.py" -> "newformat.append"
	"datetime.py" -> push
	"datetime.py" -> push
	"datetime.py" -> push
	"datetime.py" -> push
	"datetime.py" -> join
	"datetime.py" -> "_time.strftime"
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> _is_ascii_digit
	"datetime.py" -> _is_ascii_digit
	"datetime.py" -> len
	"datetime.py" -> int
	"datetime.py" -> int
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> int
	"datetime.py" -> list
	"datetime.py" -> _isoweek_to_gregorian
	"datetime.py" -> int
	"datetime.py" -> ValueError
	"datetime.py" -> int
	"datetime.py" -> len
	"datetime.py" -> range
	"datetime.py" -> ValueError
	"datetime.py" -> int
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> int
	"datetime.py" -> all
	"datetime.py" -> map
	"datetime.py" -> ValueError
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> "tstr.find"
	"datetime.py" -> "tstr.find"
	"datetime.py" -> "tstr.find"
	"datetime.py" -> _parse_hh_mm_ss_ff
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> _parse_hh_mm_ss_ff
	"datetime.py" -> all
	"datetime.py" -> timedelta
	"datetime.py" -> timezone
	"datetime.py" -> "time_comps.append"
	"datetime.py" -> ValueError
	"datetime.py" -> _ymd2ord
	"datetime.py" -> _is_leap
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> _isoweek1monday
	"datetime.py" -> _ord2ymd
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> type
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> type
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> ValueError
	"datetime.py" -> _index
	"datetime.py" -> _index
	"datetime.py" -> _index
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> _days_in_month
	"datetime.py" -> ValueError
	"datetime.py" -> _index
	"datetime.py" -> _index
	"datetime.py" -> _index
	"datetime.py" -> _index
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> ValueError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> TypeError
	"datetime.py" -> type
	"datetime.py" -> type
	"datetime.py" -> divmod
	"datetime.py" -> isinstance
	"datetime.py" -> "_math.modf"
	"datetime.py" -> "_math.modf"
	"datetime.py" -> int
	"datetime.py" -> int
	"datetime.py" -> int
	"datetime.py" -> int
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> "_math.modf"
	"datetime.py" -> int
	"datetime.py" -> int
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> divmod
	"datetime.py" -> int
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> abs
	"datetime.py" -> isinstance
	"datetime.py" -> round
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> int
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> round
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> abs
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> abs
	"datetime.py" -> OverflowError
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "args.append"
	"datetime.py" -> "args.append"
	"datetime.py" -> "args.append"
	"datetime.py" -> "args.append"
	"datetime.py" -> join
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> abs
	"datetime.py" -> plural
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "self._to_microseconds"
	"datetime.py" -> "other.as_integer_ratio"
	"datetime.py" -> timedelta
	"datetime.py" -> _divide_and_round
	"datetime.py" -> isinstance
	"datetime.py" -> "self._to_microseconds"
	"datetime.py" -> isinstance
	"datetime.py" -> "other._to_microseconds"
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "self._to_microseconds"
	"datetime.py" -> isinstance
	"datetime.py" -> "other._to_microseconds"
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> _divide_and_round
	"datetime.py" -> isinstance
	"datetime.py" -> "other.as_integer_ratio"
	"datetime.py" -> timedelta
	"datetime.py" -> _divide_and_round
	"datetime.py" -> isinstance
	"datetime.py" -> "self._to_microseconds"
	"datetime.py" -> "other._to_microseconds"
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> divmod
	"datetime.py" -> "self._to_microseconds"
	"datetime.py" -> "other._to_microseconds"
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> _cmp
	"datetime.py" -> "self._getstate"
	"datetime.py" -> "other._getstate"
	"datetime.py" -> hash
	"datetime.py" -> "self._getstate"
	"datetime.py" -> "self._getstate"
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> len
	"datetime.py" -> ord
	"datetime.py" -> isinstance
	"datetime.py" -> "year.encode"
	"datetime.py" -> ValueError
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "self.__setstate"
	"datetime.py" -> _check_date_fields
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "_time.localtime"
	"datetime.py" -> cls
	"datetime.py" -> "_time.time"
	"datetime.py" -> "cls.fromtimestamp"
	"datetime.py" -> _ord2ymd
	"datetime.py" -> cls
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> cls
	"datetime.py" -> _parse_isoformat_date
	"datetime.py" -> ValueError
	"datetime.py" -> cls
	"datetime.py" -> _isoweek_to_gregorian
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> _wrap_strftime
	"datetime.py" -> "self.timetuple"
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> type
	"datetime.py" -> len
	"datetime.py" -> "self.strftime"
	"datetime.py" -> str
	"datetime.py" -> _build_struct_time
	"datetime.py" -> _ymd2ord
	"datetime.py" -> <unknown_function>
	"datetime.py" -> type
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> _cmp
	"datetime.py" -> hash
	"datetime.py" -> "self._getstate"
	"datetime.py" -> isinstance
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> fromordinal
	"datetime.py" -> type
	"datetime.py" -> OverflowError
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> "other.toordinal"
	"datetime.py" -> timedelta
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> _isoweek1monday
	"datetime.py" -> _ymd2ord
	"datetime.py" -> divmod
	"datetime.py" -> _isoweek1monday
	"datetime.py" -> divmod
	"datetime.py" -> _isoweek1monday
	"datetime.py" -> _IsoCalendarDate
	"datetime.py" -> divmod
	"datetime.py" -> bytes
	"datetime.py" -> "self._getstate"
	"datetime.py" -> date
	"datetime.py" -> date
	"datetime.py" -> timedelta
	"datetime.py" -> NotImplementedError
	"datetime.py" -> NotImplementedError
	"datetime.py" -> NotImplementedError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> ValueError
	"datetime.py" -> "dt.utcoffset"
	"datetime.py" -> ValueError
	"datetime.py" -> "dt.dst"
	"datetime.py" -> ValueError
	"datetime.py" -> "dt.dst"
	"datetime.py" -> ValueError
	"datetime.py" -> getattr
	"datetime.py" -> getinitargs
	"datetime.py" -> "self.__getstate__"
	"datetime.py" -> __new__
	"datetime.py" -> super
	"datetime.py" -> tuple
	"datetime.py" -> isinstance
	"datetime.py" -> len
	"datetime.py" -> ord
	"datetime.py" -> isinstance
	"datetime.py" -> "hour.encode"
	"datetime.py" -> ValueError
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "self.__setstate"
	"datetime.py" -> _check_time_fields
	"datetime.py" -> _check_tzinfo_arg
	"datetime.py" -> "object.__new__"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> "other.utcoffset"
	"datetime.py" -> _cmp
	"datetime.py" -> TypeError
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> _cmp
	"datetime.py" -> "self.replace"
	"datetime.py" -> "t.utcoffset"
	"datetime.py" -> hash
	"datetime.py" -> "t._getstate"
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> hash
	"datetime.py" -> time
	"datetime.py" -> hash
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> _format_offset
	"datetime.py" -> _format_time
	"datetime.py" -> "self._tzstr"
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> "time_string.removeprefix"
	"datetime.py" -> cls
	"datetime.py" -> _parse_isoformat_time
	"datetime.py" -> ValueError
	"datetime.py" -> _wrap_strftime
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> type
	"datetime.py" -> len
	"datetime.py" -> "self.strftime"
	"datetime.py" -> str
	"datetime.py" -> "self._tzinfo.utcoffset"
	"datetime.py" -> _check_utc_offset
	"datetime.py" -> "self._tzinfo.tzname"
	"datetime.py" -> _check_tzname
	"datetime.py" -> "self._tzinfo.dst"
	"datetime.py" -> _check_utc_offset
	"datetime.py" -> <unknown_function>
	"datetime.py" -> type
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> bytes
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> "self._getstate"
	"datetime.py" -> "self.__reduce_ex__"
	"datetime.py" -> time
	"datetime.py" -> time
	"datetime.py" -> timedelta
	"datetime.py" -> isinstance
	"datetime.py" -> len
	"datetime.py" -> ord
	"datetime.py" -> isinstance
	"datetime.py" -> bytes
	"datetime.py" -> ValueError
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "self.__setstate"
	"datetime.py" -> _check_date_fields
	"datetime.py" -> _check_time_fields
	"datetime.py" -> _check_tzinfo_arg
	"datetime.py" -> "object.__new__"
	"datetime.py" -> "_math.modf"
	"datetime.py" -> round
	"datetime.py" -> converter
	"datetime.py" -> min
	"datetime.py" -> cls
	"datetime.py" -> "sys.platform.startswith"
	"datetime.py" -> converter
	"datetime.py" -> cls
	"datetime.py" -> timedelta
	"datetime.py" -> converter
	"datetime.py" -> timedelta
	"datetime.py" -> cls
	"datetime.py" -> "tz.fromutc"
	"datetime.py" -> _check_tzinfo_arg
	"datetime.py" -> "cls._fromtimestamp"
	"datetime.py" -> "cls._fromtimestamp"
	"datetime.py" -> "_time.time"
	"datetime.py" -> "cls.fromtimestamp"
	"datetime.py" -> "_time.time"
	"datetime.py" -> "cls.utcfromtimestamp"
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> cls
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> len
	"datetime.py" -> ValueError
	"datetime.py" -> _find_isoformat_datetime_separator
	"datetime.py" -> _parse_isoformat_date
	"datetime.py" -> ValueError
	"datetime.py" -> _parse_isoformat_time
	"datetime.py" -> ValueError
	"datetime.py" -> cls
	"datetime.py" -> "self.dst"
	"datetime.py" -> _build_struct_time
	"datetime.py" -> datetime
	"datetime.py" -> timedelta
	"datetime.py" -> "_time.localtime"
	"datetime.py" -> datetime
	"datetime.py" -> timedelta
	"datetime.py" -> local
	"datetime.py" -> local
	"datetime.py" -> local
	"datetime.py" -> local
	"datetime.py" -> <unknown_function>
	"datetime.py" -> "self._mktime"
	"datetime.py" -> total_seconds
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> _build_struct_time
	"datetime.py" -> date
	"datetime.py" -> time
	"datetime.py" -> time
	"datetime.py" -> <unknown_function>
	"datetime.py" -> type
	"datetime.py" -> "self._mktime"
	"datetime.py" -> timedelta
	"datetime.py" -> "_time.localtime"
	"datetime.py" -> datetime
	"datetime.py" -> timezone
	"datetime.py" -> timedelta
	"datetime.py" -> "self._local_timezone"
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> "self._local_timezone"
	"datetime.py" -> "mytz.utcoffset"
	"datetime.py" -> "mytz.utcoffset"
	"datetime.py" -> _local_timezone
	"datetime.py" -> "self.replace"
	"datetime.py" -> "mytz.utcoffset"
	"datetime.py" -> replace
	"datetime.py" -> "tz.fromutc"
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> _format_time
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> _format_offset
	"datetime.py" -> join
	"datetime.py" -> map
	"datetime.py" -> "self.isoformat"
	"datetime.py" -> "_strptime._strptime_datetime"
	"datetime.py" -> "self._tzinfo.utcoffset"
	"datetime.py" -> _check_utc_offset
	"datetime.py" -> "self._tzinfo.tzname"
	"datetime.py" -> _check_tzname
	"datetime.py" -> "self._tzinfo.dst"
	"datetime.py" -> _check_utc_offset
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> _cmperror
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> _cmperror
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> _cmperror
	"datetime.py" -> isinstance
	"datetime.py" -> "self._cmp"
	"datetime.py" -> isinstance
	"datetime.py" -> _cmperror
	"datetime.py" -> isinstance
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> "other.utcoffset"
	"datetime.py" -> utcoffset
	"datetime.py" -> "self.replace"
	"datetime.py" -> utcoffset
	"datetime.py" -> "other.replace"
	"datetime.py" -> _cmp
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> timedelta
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> combine
	"datetime.py" -> type
	"datetime.py" -> "date.fromordinal"
	"datetime.py" -> time
	"datetime.py" -> OverflowError
	"datetime.py" -> isinstance
	"datetime.py" -> isinstance
	"datetime.py" -> "self.toordinal"
	"datetime.py" -> "other.toordinal"
	"datetime.py" -> timedelta
	"datetime.py" -> "self.utcoffset"
	"datetime.py" -> "other.utcoffset"
	"datetime.py" -> TypeError
	"datetime.py" -> "self.replace"
	"datetime.py" -> "t.utcoffset"
	"datetime.py" -> hash
	"datetime.py" -> "t._getstate"
	"datetime.py" -> _ymd2ord
	"datetime.py" -> hash
	"datetime.py" -> timedelta
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> divmod
	"datetime.py" -> bytes
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> "self._getstate"
	"datetime.py" -> "self.__reduce_ex__"
	"datetime.py" -> datetime
	"datetime.py" -> datetime
	"datetime.py" -> timedelta
	"datetime.py" -> _ymd2ord
	"datetime.py" -> object
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> ValueError
	"datetime.py" -> "cls._create"
	"datetime.py" -> "tzinfo.__new__"
	"datetime.py" -> isinstance
	"datetime.py" -> hash
	"datetime.py" -> "self.tzname"
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> "self._name_from_offset"
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> TypeError
	"datetime.py" -> isinstance
	"datetime.py" -> ValueError
	"datetime.py" -> TypeError
	"datetime.py" -> timedelta
	"datetime.py" -> timedelta
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> divmod
	"datetime.py" -> timedelta
	"datetime.py" -> "timezone._create"
	"datetime.py" -> timedelta
	"datetime.py" -> "timezone._create"
	"datetime.py" -> timedelta
	"datetime.py" -> "timezone._create"
	"datetime.py" -> timedelta
	"datetime.py" -> datetime
	"_strptime.py" -> "locale.getlocale"
	"_strptime.py" -> _getlang
	"_strptime.py" -> "self.__calc_weekday"
	"_strptime.py" -> "self.__calc_month"
	"_strptime.py" -> "self.__calc_am_pm"
	"_strptime.py" -> "self.__calc_timezone"
	"_strptime.py" -> "self.__calc_date_time"
	"_strptime.py" -> _getlang
	"_strptime.py" -> ValueError
	"_strptime.py" -> ValueError
	"_strptime.py" -> lower
	"_strptime.py" -> range
	"_strptime.py" -> lower
	"_strptime.py" -> range
	"_strptime.py" -> lower
	"_strptime.py" -> range
	"_strptime.py" -> lower
	"_strptime.py" -> range
	"_strptime.py" -> "time.struct_time"
	"_strptime.py" -> "am_pm.append"
	"_strptime.py" -> lower
	"_strptime.py" -> "time.strftime"
	"_strptime.py" -> "time.struct_time"
	"_strptime.py" -> lower
	"_strptime.py" -> "time.strftime"
	"_strptime.py" -> lower
	"_strptime.py" -> "time.strftime"
	"_strptime.py" -> lower
	"_strptime.py" -> "time.strftime"
	"_strptime.py" -> "replacement_pairs.extend"
	"_strptime.py" -> "current_format.replace"
	"_strptime.py" -> "time.struct_time"
	"_strptime.py" -> "time.strftime"
	"_strptime.py" -> "current_format.replace"
	"_strptime.py" -> "time.tzset"
	"_strptime.py" -> frozenset
	"_strptime.py" -> lower
	"_strptime.py" -> frozenset
	"_strptime.py" -> lower
	"_strptime.py" -> frozenset
	"_strptime.py" -> LocaleTime
	"_strptime.py" -> super
	"_strptime.py" -> "base.__init__"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "self.__seqToRE"
	"_strptime.py" -> "base.__setitem__"
	"_strptime.py" -> replace
	"_strptime.py" -> "base.__getitem__"
	"_strptime.py" -> "base.__setitem__"
	"_strptime.py" -> "self.pattern"
	"_strptime.py" -> "base.__setitem__"
	"_strptime.py" -> "self.pattern"
	"_strptime.py" -> "base.__setitem__"
	"_strptime.py" -> "self.pattern"
	"_strptime.py" -> sorted
	"_strptime.py" -> join
	"_strptime.py" -> re_escape
	"_strptime.py" -> re_compile
	"_strptime.py" -> "regex_chars.sub"
	"_strptime.py" -> re_compile
	"_strptime.py" -> "whitespace_replacement.sub"
	"_strptime.py" -> "format.index"
	"_strptime.py" -> re_compile
	"_strptime.py" -> "self.pattern"
	"_strptime.py" -> _thread_allocate_lock
	"_strptime.py" -> TimeRE
	"_strptime.py" -> weekday
	"_strptime.py" -> datetime_date
	"_strptime.py" -> isoweekday
	"_strptime.py" -> datetime_date
	"_strptime.py" -> toordinal
	"_strptime.py" -> datetime_date
	"_strptime.py" -> toordinal
	"_strptime.py" -> datetime_date
	"_strptime.py" -> enumerate
	"_strptime.py" -> isinstance
	"_strptime.py" -> TypeError
	"_strptime.py" -> "msg.format"
	"_strptime.py" -> type
	"_strptime.py" -> _getlang
	"_strptime.py" -> TimeRE
	"_strptime.py" -> "_regex_cache.clear"
	"_strptime.py" -> len
	"_strptime.py" -> "_regex_cache.clear"
	"_strptime.py" -> "_regex_cache.get"
	"_strptime.py" -> "_TimeRE_cache.compile"
	"_strptime.py" -> ValueError
	"_strptime.py" -> ValueError
	"_strptime.py" -> "format_regex.match"
	"_strptime.py" -> ValueError
	"_strptime.py" -> len
	"_strptime.py" -> "found.end"
	"_strptime.py" -> ValueError
	"_strptime.py" -> "found.end"
	"_strptime.py" -> "found.groupdict"
	"_strptime.py" -> "found_dict.keys"
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> "locale_time.f_month.index"
	"_strptime.py" -> lower
	"_strptime.py" -> "locale_time.a_month.index"
	"_strptime.py" -> lower
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> lower
	"_strptime.py" -> "found_dict.get"
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> len
	"_strptime.py" -> int
	"_strptime.py" -> "locale_time.f_weekday.index"
	"_strptime.py" -> lower
	"_strptime.py" -> "locale_time.a_weekday.index"
	"_strptime.py" -> lower
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> len
	"_strptime.py" -> ValueError
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> int
	"_strptime.py" -> len
	"_strptime.py" -> int
	"_strptime.py" -> "z.startswith"
	"_strptime.py" -> lower
	"_strptime.py" -> enumerate
	"_strptime.py" -> ValueError
	"_strptime.py" -> ValueError
	"_strptime.py" -> ValueError
	"_strptime.py" -> ValueError
	"_strptime.py" -> _calc_julian_from_U_or_W
	"_strptime.py" -> _calc_julian_from_V
	"_strptime.py" -> "calendar.isleap"
	"_strptime.py" -> toordinal
	"_strptime.py" -> datetime_date
	"_strptime.py" -> toordinal
	"_strptime.py" -> datetime_date
	"_strptime.py" -> "datetime_date.fromordinal"
	"_strptime.py" -> toordinal
	"_strptime.py" -> datetime_date
	"_strptime.py" -> weekday
	"_strptime.py" -> datetime_date
	"_strptime.py" -> "found_dict.get"
	"_strptime.py" -> _strptime
	"_strptime.py" -> "time.struct_time"
	"_strptime.py" -> _strptime
	"_strptime.py" -> datetime_timedelta
	"_strptime.py" -> datetime_timezone
	"_strptime.py" -> datetime_timezone
	"_strptime.py" -> cls
	"calendar.py" -> "datetime.date"
	"calendar.py" -> range
	"calendar.py" -> "_months.insert"
	"calendar.py" -> isinstance
	"calendar.py" -> f
	"calendar.py" -> funcs
	"calendar.py" -> "datetime.date"
	"calendar.py" -> range
	"calendar.py" -> isinstance
	"calendar.py" -> f
	"calendar.py" -> funcs
	"calendar.py" -> _localized_day
	"calendar.py" -> _localized_day
	"calendar.py" -> _localized_month
	"calendar.py" -> _localized_month
	"calendar.py" -> range
	"calendar.py" -> weekday
	"calendar.py" -> "datetime.date"
	"calendar.py" -> IllegalMonthError
	"calendar.py" -> weekday
	"calendar.py" -> isleap
	"calendar.py" -> isleap
	"calendar.py" -> property
	"calendar.py" -> range
	"calendar.py" -> "self.itermonthdays3"
	"calendar.py" -> "datetime.date"
	"calendar.py" -> monthrange
	"calendar.py" -> repeat
	"calendar.py" -> range
	"calendar.py" -> repeat
	"calendar.py" -> enumerate
	"calendar.py" -> "self.itermonthdays"
	"calendar.py" -> monthrange
	"calendar.py" -> _prevmonth
	"calendar.py" -> _monthlen
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> _nextmonth
	"calendar.py" -> range
	"calendar.py" -> enumerate
	"calendar.py" -> "self.itermonthdays3"
	"calendar.py" -> list
	"calendar.py" -> "self.itermonthdates"
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> list
	"calendar.py" -> "self.itermonthdays2"
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> list
	"calendar.py" -> "self.itermonthdays"
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> "self.monthdatescalendar"
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> "self.monthdays2calendar"
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> "self.monthdayscalendar"
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> print
	"calendar.py" -> "self.formatweek"
	"calendar.py" -> "s.center"
	"calendar.py" -> join
	"calendar.py" -> "self.formatday"
	"calendar.py" -> center
	"calendar.py" -> join
	"calendar.py" -> "self.formatweekday"
	"calendar.py" -> "self.iterweekdays"
	"calendar.py" -> "s.center"
	"calendar.py" -> print
	"calendar.py" -> "self.formatmonth"
	"calendar.py" -> max
	"calendar.py" -> max
	"calendar.py" -> "self.formatmonthname"
	"calendar.py" -> "s.rstrip"
	"calendar.py" -> rstrip
	"calendar.py" -> "self.formatweekheader"
	"calendar.py" -> "self.monthdays2calendar"
	"calendar.py" -> rstrip
	"calendar.py" -> "self.formatweek"
	"calendar.py" -> max
	"calendar.py" -> max
	"calendar.py" -> max
	"calendar.py" -> a
	"calendar.py" -> rstrip
	"calendar.py" -> center
	"calendar.py" -> repr
	"calendar.py" -> a
	"calendar.py" -> "self.formatweekheader"
	"calendar.py" -> enumerate
	"calendar.py" -> "self.yeardays2calendar"
	"calendar.py" -> range
	"calendar.py" -> min
	"calendar.py" -> a
	"calendar.py" -> "self.formatmonthname"
	"calendar.py" -> a
	"calendar.py" -> rstrip
	"calendar.py" -> formatstring
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> rstrip
	"calendar.py" -> formatstring
	"calendar.py" -> a
	"calendar.py" -> max
	"calendar.py" -> len
	"calendar.py" -> range
	"calendar.py" -> len
	"calendar.py" -> "weeks.append"
	"calendar.py" -> "weeks.append"
	"calendar.py" -> "self.formatweek"
	"calendar.py" -> a
	"calendar.py" -> rstrip
	"calendar.py" -> formatstring
	"calendar.py" -> a
	"calendar.py" -> join
	"calendar.py" -> print
	"calendar.py" -> "self.formatyear"
	"calendar.py" -> join
	"calendar.py" -> "self.formatday"
	"calendar.py" -> join
	"calendar.py" -> "self.formatweekday"
	"calendar.py" -> "self.iterweekdays"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> "self.formatmonthname"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> "self.formatweekheader"
	"calendar.py" -> a
	"calendar.py" -> "self.monthdays2calendar"
	"calendar.py" -> a
	"calendar.py" -> "self.formatweek"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> join
	"calendar.py" -> max
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> range
	"calendar.py" -> range
	"calendar.py" -> min
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> "self.formatmonth"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> join
	"calendar.py" -> "sys.getdefaultencoding"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> "self.formatyear"
	"calendar.py" -> a
	"calendar.py" -> a
	"calendar.py" -> encode
	"calendar.py" -> join
	"calendar.py" -> "_locale.setlocale"
	"calendar.py" -> "_locale.setlocale"
	"calendar.py" -> "_locale.setlocale"
	"calendar.py" -> "_locale.setlocale"
	"calendar.py" -> different_locale
	"calendar.py" -> "_locale.setlocale"
	"calendar.py" -> "TextCalendar.__init__"
	"calendar.py" -> _get_default_locale
	"calendar.py" -> different_locale
	"calendar.py" -> formatweekday
	"calendar.py" -> super
	"calendar.py" -> different_locale
	"calendar.py" -> formatmonthname
	"calendar.py" -> super
	"calendar.py" -> "HTMLCalendar.__init__"
	"calendar.py" -> _get_default_locale
	"calendar.py" -> different_locale
	"calendar.py" -> formatweekday
	"calendar.py" -> super
	"calendar.py" -> different_locale
	"calendar.py" -> formatmonthname
	"calendar.py" -> super
	"calendar.py" -> TextCalendar
	"calendar.py" -> IllegalWeekdayError
	"calendar.py" -> print
	"calendar.py" -> formatstring
	"calendar.py" -> "spacing.join"
	"calendar.py" -> "c.center"
	"calendar.py" -> toordinal
	"calendar.py" -> "datetime.date"
	"calendar.py" -> toordinal
	"calendar.py" -> "datetime.date"
	"calendar.py" -> "argparse.ArgumentParser"
	"calendar.py" -> "parser.add_argument_group"
	"calendar.py" -> "parser.add_argument_group"
	"calendar.py" -> "textgroup.add_argument"
	"calendar.py" -> "textgroup.add_argument"
	"calendar.py" -> "textgroup.add_argument"
	"calendar.py" -> "textgroup.add_argument"
	"calendar.py" -> "htmlgroup.add_argument"
	"calendar.py" -> "parser.add_argument"
	"calendar.py" -> "parser.add_argument"
	"calendar.py" -> "parser.add_argument"
	"calendar.py" -> "parser.add_argument"
	"calendar.py" -> "parser.add_argument"
	"calendar.py" -> "parser.parse_args"
	"calendar.py" -> "parser.error"
	"calendar.py" -> "sys.exit"
	"calendar.py" -> LocaleHTMLCalendar
	"calendar.py" -> HTMLCalendar
	"calendar.py" -> "sys.getdefaultencoding"
	"calendar.py" -> dict
	"calendar.py" -> write
	"calendar.py" -> "cal.formatyearpage"
	"calendar.py" -> "datetime.date.today"
	"calendar.py" -> write
	"calendar.py" -> "cal.formatyearpage"
	"calendar.py" -> "parser.error"
	"calendar.py" -> "sys.exit"
	"calendar.py" -> LocaleTextCalendar
	"calendar.py" -> TextCalendar
	"calendar.py" -> dict
	"calendar.py" -> "cal.formatyear"
	"calendar.py" -> "datetime.date.today"
	"calendar.py" -> "cal.formatyear"
	"calendar.py" -> "cal.formatmonth"
	"calendar.py" -> "result.encode"
	"calendar.py" -> write
	"calendar.py" -> main
	"locale.py" -> Error
	"locale.py" -> globals
	"locale.py" -> globals
	"locale.py" -> _localeconv
	"locale.py" -> "d.update"
	"locale.py" -> "functools.wraps"
	"locale.py" -> ValueError
	"locale.py" -> localeconv
	"locale.py" -> "s.rstrip"
	"locale.py" -> len
	"locale.py" -> _grouping_intervals
	"locale.py" -> "groups.append"
	"locale.py" -> "groups.append"
	"locale.py" -> "groups.reverse"
	"locale.py" -> "thousands_sep.join"
	"locale.py" -> len
	"locale.py" -> len
	"locale.py" -> len
	"locale.py" -> "re.compile"
	"locale.py" -> _localize
	"locale.py" -> "formatted.split"
	"locale.py" -> _group
	"locale.py" -> localeconv
	"locale.py" -> "decimal_point.join"
	"locale.py" -> _strip_padding
	"locale.py" -> _group
	"locale.py" -> _strip_padding
	"locale.py" -> list
	"locale.py" -> "_percent_re.finditer"
	"locale.py" -> "_percent_re.sub"
	"locale.py" -> isinstance
	"locale.py" -> "perc.group"
	"locale.py" -> "new_val.append"
	"locale.py" -> "new_val.append"
	"locale.py" -> _format
	"locale.py" -> "perc.group"
	"locale.py" -> isinstance
	"locale.py" -> "perc.group"
	"locale.py" -> "new_val.append"
	"locale.py" -> count
	"locale.py" -> "perc.group"
	"locale.py" -> "new_val.append"
	"locale.py" -> _format
	"locale.py" -> "perc.group"
	"locale.py" -> tuple
	"locale.py" -> "warnings.warn"
	"locale.py" -> "_percent_re.match"
	"locale.py" -> len
	"locale.py" -> "match.group"
	"locale.py" -> len
	"locale.py" -> ValueError
	"locale.py" -> repr
	"locale.py" -> _format
	"locale.py" -> localeconv
	"locale.py" -> ValueError
	"locale.py" -> _localize
	"locale.py" -> abs
	"locale.py" -> "s.replace"
	"locale.py" -> "s.replace"
	"locale.py" -> replace
	"locale.py" -> "s.replace"
	"locale.py" -> _format
	"locale.py" -> localeconv
	"locale.py" -> "string.replace"
	"locale.py" -> "string.replace"
	"locale.py" -> _localize
	"locale.py" -> func
	"locale.py" -> delocalize
	"locale.py" -> int
	"locale.py" -> delocalize
	"locale.py" -> setlocale
	"locale.py" -> format_string
	"locale.py" -> print
	"locale.py" -> atoi
	"locale.py" -> str
	"locale.py" -> print
	"locale.py" -> atof
	"locale.py" -> "code.index"
	"locale.py" -> "encodings.normalize_encoding"
	"locale.py" -> "encodings.aliases.aliases.get"
	"locale.py" -> "norm_encoding.lower"
	"locale.py" -> "norm_encoding.lower"
	"locale.py" -> "norm_encoding.replace"
	"locale.py" -> "norm_encoding.replace"
	"locale.py" -> "code.partition"
	"locale.py" -> _replace_encoding
	"locale.py" -> "localename.lower"
	"locale.py" -> "code.replace"
	"locale.py" -> "code.split"
	"locale.py" -> "code.split"
	"locale.py" -> "encoding.replace"
	"locale.py" -> "norm_encoding.replace"
	"locale.py" -> "locale_alias.get"
	"locale.py" -> "locale_alias.get"
	"locale.py" -> _append_modifier
	"locale.py" -> lower
	"locale.py" -> "code.split"
	"locale.py" -> "locale_alias.get"
	"locale.py" -> _replace_encoding
	"locale.py" -> "code.split"
	"locale.py" -> _replace_encoding
	"locale.py" -> "locale_alias.get"
	"locale.py" -> _replace_encoding
	"locale.py" -> _append_modifier
	"locale.py" -> "code.split"
	"locale.py" -> "defmod.lower"
	"locale.py" -> _replace_encoding
	"locale.py" -> normalize
	"locale.py" -> "code.split"
	"locale.py" -> tuple
	"locale.py" -> "code.split"
	"locale.py" -> ValueError
	"locale.py" -> TypeError
	"locale.py" -> "warnings.warn"
	"locale.py" -> "_locale._getdefaultlocale"
	"locale.py" -> "windows_locale.get"
	"locale.py" -> int
	"locale.py" -> lookup
	"locale.py" -> "localename.split"
	"locale.py" -> _parse_localename
	"locale.py" -> _setlocale
	"locale.py" -> TypeError
	"locale.py" -> _parse_localename
	"locale.py" -> isinstance
	"locale.py" -> normalize
	"locale.py" -> _build_localename
	"locale.py" -> _setlocale
	"locale.py" -> "warnings.warn"
	"locale.py" -> "warnings.catch_warnings"
	"locale.py" -> "warnings.simplefilter"
	"locale.py" -> getdefaultlocale
	"locale.py" -> _setlocale
	"locale.py" -> _build_localename
	"locale.py" -> hasattr
	"locale.py" -> getdefaultlocale
	"locale.py" -> "warnings.warn"
	"locale.py" -> getencoding
	"locale.py" -> "warnings.warn"
	"locale.py" -> getencoding
	"locale.py" -> setlocale
	"locale.py" -> setlocale
	"locale.py" -> getencoding
	"locale.py" -> setlocale
	"locale.py" -> sorted
	"locale.py" -> "locale_encoding_alias.items"
	"locale.py" -> "k.replace"
	"locale.py" -> "locale_encoding_alias.setdefault"
	"locale.py" -> items
	"locale.py" -> globals
	"locale.py" -> _init_categories
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> getdefaultlocale
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> "categories.items"
	"locale.py" -> print
	"locale.py" -> getlocale
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> resetlocale
	"locale.py" -> "categories.items"
	"locale.py" -> print
	"locale.py" -> getlocale
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> setlocale
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> "categories.items"
	"locale.py" -> print
	"locale.py" -> getlocale
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> "__all__.append"
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> _print_locale
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> print
	"locale.py" -> _test
	"weakref.py" -> "_collections_abc.MutableSet.register"
	"weakref.py" -> TypeError
	"weakref.py" -> format
	"weakref.py" -> type
	"weakref.py" -> self_wr
	"weakref.py" -> callback
	"weakref.py" -> "ref.__new__"
	"weakref.py" -> ref
	"weakref.py" -> type
	"weakref.py" -> ref
	"weakref.py" -> __call__
	"weakref.py" -> super
	"weakref.py" -> "self._func_ref"
	"weakref.py" -> "self._meth_type"
	"weakref.py" -> isinstance
	"weakref.py" -> "ref.__eq__"
	"weakref.py" -> isinstance
	"weakref.py" -> "ref.__ne__"
	"weakref.py" -> ref
	"weakref.py" -> selfref
	"weakref.py" -> "self._pending_removals.append"
	"weakref.py" -> _atomic_removal
	"weakref.py" -> set
	"weakref.py" -> "self.update"
	"weakref.py" -> pop
	"weakref.py" -> _atomic_removal
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> <unknown_function>
	"weakref.py" -> KeyError
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> len
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> <unknown_function>
	"weakref.py" -> id
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> KeyedRef
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> WeakValueDictionary
	"weakref.py" -> _IterationGuard
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> "self.__class__"
	"weakref.py" -> _IterationGuard
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> deepcopy
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> _IterationGuard
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> _IterationGuard
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> _IterationGuard
	"weakref.py" -> "self.data.values"
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> _IterationGuard
	"weakref.py" -> "self.data.values"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> "self.data.popitem"
	"weakref.py" -> wr
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> <unknown_function>
	"weakref.py" -> "self.data.pop"
	"weakref.py" -> KeyError
	"weakref.py" -> <unknown_function>
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> KeyedRef
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> hasattr
	"weakref.py" -> dict
	"weakref.py" -> "other.items"
	"weakref.py" -> KeyedRef
	"weakref.py" -> "kwargs.items"
	"weakref.py" -> KeyedRef
	"weakref.py" -> "self._commit_removals"
	"weakref.py" -> list
	"weakref.py" -> "self.data.values"
	"weakref.py" -> "self.update"
	"weakref.py" -> isinstance
	"weakref.py" -> "self.copy"
	"weakref.py" -> "c.update"
	"weakref.py" -> isinstance
	"weakref.py" -> "self.__class__"
	"weakref.py" -> "c.update"
	"weakref.py" -> "c.update"
	"weakref.py" -> "ref.__new__"
	"weakref.py" -> __init__
	"weakref.py" -> super
	"weakref.py" -> ref
	"weakref.py" -> selfref
	"weakref.py" -> "self._pending_removals.append"
	"weakref.py" -> set
	"weakref.py" -> "self.update"
	"weakref.py" -> pop
	"weakref.py" -> ref
	"weakref.py" -> ref
	"weakref.py" -> "self._scrub_removals"
	"weakref.py" -> len
	"weakref.py" -> len
	"weakref.py" -> id
	"weakref.py" -> ref
	"weakref.py" -> WeakKeyDictionary
	"weakref.py" -> _IterationGuard
	"weakref.py" -> "self.data.items"
	"weakref.py" -> key
	"weakref.py" -> "self.__class__"
	"weakref.py" -> _IterationGuard
	"weakref.py" -> "self.data.items"
	"weakref.py" -> key
	"weakref.py" -> deepcopy
	"weakref.py" -> "self.data.get"
	"weakref.py" -> ref
	"weakref.py" -> ref
	"weakref.py" -> _IterationGuard
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> _IterationGuard
	"weakref.py" -> wr
	"weakref.py" -> _IterationGuard
	"weakref.py" -> "self.data.items"
	"weakref.py" -> wr
	"weakref.py" -> list
	"weakref.py" -> "self.data.popitem"
	"weakref.py" -> key
	"weakref.py" -> "self.data.pop"
	"weakref.py" -> ref
	"weakref.py" -> "self.data.setdefault"
	"weakref.py" -> ref
	"weakref.py" -> hasattr
	"weakref.py" -> <unknown_function>
	"weakref.py" -> type
	"weakref.py" -> "dict.items"
	"weakref.py" -> ref
	"weakref.py" -> len
	"weakref.py" -> "self.update"
	"weakref.py" -> "self.update"
	"weakref.py" -> isinstance
	"weakref.py" -> "self.copy"
	"weakref.py" -> "c.update"
	"weakref.py" -> isinstance
	"weakref.py" -> "self.__class__"
	"weakref.py" -> "c.update"
	"weakref.py" -> "c.update"
	"weakref.py" -> "itertools.count"
	"weakref.py" -> "atexit.register"
	"weakref.py" -> "self._Info"
	"weakref.py" -> ref
	"weakref.py" -> next
	"weakref.py" -> "self._registry.pop"
	"weakref.py" -> "info.func"
	"weakref.py" -> "self._registry.get"
	"weakref.py" -> "info.weakref"
	"weakref.py" -> "self._registry.pop"
	"weakref.py" -> "self._registry.get"
	"weakref.py" -> "info.weakref"
	"weakref.py" -> "self._registry.get"
	"weakref.py" -> bool
	"weakref.py" -> "self._registry.get"
	"weakref.py" -> bool
	"weakref.py" -> "self._registry.get"
	"weakref.py" -> "info.weakref"
	"weakref.py" -> type
	"weakref.py" -> id
	"weakref.py" -> type
	"weakref.py" -> id
	"weakref.py" -> type
	"weakref.py" -> id
	"weakref.py" -> "cls._registry.items"
	"weakref.py" -> "L.sort"
	"weakref.py" -> "gc.isenabled"
	"weakref.py" -> "gc.disable"
	"weakref.py" -> "cls._select_for_exit"
	"weakref.py" -> "pending.pop"
	"weakref.py" -> f
	"weakref.py" -> "sys.excepthook"
	"weakref.py" -> "sys.exc_info"
	"weakref.py" -> "gc.enable"
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> "self.weakcontainer"
	"_weakrefset.py" -> "w._iterating.add"
	"_weakrefset.py" -> "self.weakcontainer"
	"_weakrefset.py" -> "s.remove"
	"_weakrefset.py" -> "w._commit_removals"
	"_weakrefset.py" -> set
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> selfref
	"_weakrefset.py" -> "self._pending_removals.append"
	"_weakrefset.py" -> "self.data.discard"
	"_weakrefset.py" -> set
	"_weakrefset.py" -> "self.update"
	"_weakrefset.py" -> pop
	"_weakrefset.py" -> discard
	"_weakrefset.py" -> _IterationGuard
	"_weakrefset.py" -> itemref
	"_weakrefset.py" -> len
	"_weakrefset.py" -> len
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> list
	"_weakrefset.py" -> "self.__getstate__"
	"_weakrefset.py" -> "self._commit_removals"
	"_weakrefset.py" -> "self.data.add"
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> "self._commit_removals"
	"_weakrefset.py" -> "self.data.clear"
	"_weakrefset.py" -> "self.__class__"
	"_weakrefset.py" -> "self._commit_removals"
	"_weakrefset.py" -> "self.data.pop"
	"_weakrefset.py" -> KeyError
	"_weakrefset.py" -> itemref
	"_weakrefset.py" -> "self._commit_removals"
	"_weakrefset.py" -> "self.data.remove"
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> "self._commit_removals"
	"_weakrefset.py" -> "self.data.discard"
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> "self._commit_removals"
	"_weakrefset.py" -> "self.add"
	"_weakrefset.py" -> "self.update"
	"_weakrefset.py" -> "self.copy"
	"_weakrefset.py" -> "newset.difference_update"
	"_weakrefset.py" -> "self.__isub__"
	"_weakrefset.py" -> "self._commit_removals"
	"_weakrefset.py" -> "self.data.clear"
	"_weakrefset.py" -> "self.data.difference_update"
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> "self.__class__"
	"_weakrefset.py" -> "self.__iand__"
	"_weakrefset.py" -> "self._commit_removals"
	"_weakrefset.py" -> "self.data.intersection_update"
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> "self.data.issubset"
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> set
	"_weakrefset.py" -> map
	"_weakrefset.py" -> "self.data.issuperset"
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> set
	"_weakrefset.py" -> map
	"_weakrefset.py" -> isinstance
	"_weakrefset.py" -> set
	"_weakrefset.py" -> map
	"_weakrefset.py" -> "self.copy"
	"_weakrefset.py" -> "newset.symmetric_difference_update"
	"_weakrefset.py" -> "self.__ixor__"
	"_weakrefset.py" -> "self._commit_removals"
	"_weakrefset.py" -> "self.data.clear"
	"_weakrefset.py" -> "self.data.symmetric_difference_update"
	"_weakrefset.py" -> ref
	"_weakrefset.py" -> "self.__class__"
	"_weakrefset.py" -> len
	"_weakrefset.py" -> "self.intersection"
	"_weakrefset.py" -> repr
	"_weakrefset.py" -> classmethod
	"copy.py" -> type
	"copy.py" -> "_copy_dispatch.get"
	"copy.py" -> copier
	"copy.py" -> issubclass
	"copy.py" -> _copy_immutable
	"copy.py" -> getattr
	"copy.py" -> copier
	"copy.py" -> "dispatch_table.get"
	"copy.py" -> reductor
	"copy.py" -> getattr
	"copy.py" -> reductor
	"copy.py" -> getattr
	"copy.py" -> reductor
	"copy.py" -> Error
	"copy.py" -> isinstance
	"copy.py" -> _reconstruct
	"copy.py" -> type
	"copy.py" -> type
	"copy.py" -> type
	"copy.py" -> getattr
	"copy.py" -> id
	"copy.py" -> "memo.get"
	"copy.py" -> type
	"copy.py" -> "_deepcopy_dispatch.get"
	"copy.py" -> copier
	"copy.py" -> issubclass
	"copy.py" -> _deepcopy_atomic
	"copy.py" -> getattr
	"copy.py" -> copier
	"copy.py" -> "dispatch_table.get"
	"copy.py" -> reductor
	"copy.py" -> getattr
	"copy.py" -> reductor
	"copy.py" -> getattr
	"copy.py" -> reductor
	"copy.py" -> Error
	"copy.py" -> isinstance
	"copy.py" -> _reconstruct
	"copy.py" -> _keep_alive
	"copy.py" -> type
	"copy.py" -> type
	"copy.py" -> type
	"copy.py" -> id
	"copy.py" -> append
	"copy.py" -> deepcopy
	"copy.py" -> deepcopy
	"copy.py" -> id
	"copy.py" -> zip
	"copy.py" -> tuple
	"copy.py" -> id
	"copy.py" -> "x.items"
	"copy.py" -> deepcopy
	"copy.py" -> deepcopy
	"copy.py" -> <unknown_function>
	"copy.py" -> type
	"copy.py" -> deepcopy
	"copy.py" -> append
	"copy.py" -> id
	"copy.py" -> id
	"copy.py" -> deepcopy
	"copy.py" -> func
	"copy.py" -> id
	"copy.py" -> deepcopy
	"copy.py" -> hasattr
	"copy.py" -> "y.__setstate__"
	"copy.py" -> isinstance
	"copy.py" -> len
	"copy.py" -> "y.__dict__.update"
	"copy.py" -> "slotstate.items"
	"copy.py" -> setattr
	"copy.py" -> deepcopy
	"copy.py" -> "y.append"
	"copy.py" -> "y.append"
	"copy.py" -> deepcopy
	"copy.py" -> deepcopy
	"pathlib.py" -> getattr
	"pathlib.py" -> getattr
	"pathlib.py" -> reversed
	"pathlib.py" -> "part.replace"
	"pathlib.py" -> "self.splitroot"
	"pathlib.py" -> reversed
	"pathlib.py" -> "rel.split"
	"pathlib.py" -> "parsed.append"
	"pathlib.py" -> "sys.intern"
	"pathlib.py" -> "parsed.append"
	"pathlib.py" -> "sys.intern"
	"pathlib.py" -> "part.replace"
	"pathlib.py" -> "self.splitroot"
	"pathlib.py" -> "parsed.append"
	"pathlib.py" -> "parsed.reverse"
	"pathlib.py" -> "self.casefold"
	"pathlib.py" -> "self.casefold"
	"pathlib.py" -> set
	"pathlib.py" -> "self._split_extended_path"
	"pathlib.py" -> "part.find"
	"pathlib.py" -> "part.find"
	"pathlib.py" -> len
	"pathlib.py" -> "part.lstrip"
	"pathlib.py" -> "s.lower"
	"pathlib.py" -> "p.lower"
	"pathlib.py" -> "re.compile"
	"pathlib.py" -> "fnmatch.translate"
	"pathlib.py" -> "s.startswith"
	"pathlib.py" -> "s.startswith"
	"pathlib.py" -> startswith
	"pathlib.py" -> rstrip
	"pathlib.py" -> partition
	"pathlib.py" -> partition
	"pathlib.py" -> "name.upper"
	"pathlib.py" -> len
	"pathlib.py" -> lstrip
	"pathlib.py" -> "path.as_posix"
	"pathlib.py" -> urlquote_from_bytes
	"pathlib.py" -> "rest.encode"
	"pathlib.py" -> urlquote_from_bytes
	"pathlib.py" -> encode
	"pathlib.py" -> "path.as_posix"
	"pathlib.py" -> "part.lstrip"
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> "re.compile"
	"pathlib.py" -> "fnmatch.translate"
	"pathlib.py" -> bytes
	"pathlib.py" -> urlquote_from_bytes
	"pathlib.py" -> _WindowsFlavour
	"pathlib.py" -> _PosixFlavour
	"pathlib.py" -> _TerminatingSelector
	"pathlib.py" -> ValueError
	"pathlib.py" -> _is_wildcard_pattern
	"pathlib.py" -> cls
	"pathlib.py" -> hasattr
	"pathlib.py" -> <unknown_function>
	"pathlib.py" -> "functools.lru_cache"
	"pathlib.py" -> _make_selector
	"pathlib.py" -> _TerminatingSelector
	"pathlib.py" -> type
	"pathlib.py" -> is_dir
	"pathlib.py" -> iter
	"pathlib.py" -> "self._select_from"
	"pathlib.py" -> "_Selector.__init__"
	"pathlib.py" -> "parent_path._make_child_relpath"
	"pathlib.py" -> <unknown_function>
	"pathlib.py" -> "self.successor._select_from"
	"pathlib.py" -> "flavour.compile_pattern"
	"pathlib.py" -> "_Selector.__init__"
	"pathlib.py" -> scandir
	"pathlib.py" -> list
	"pathlib.py" -> "entry.is_dir"
	"pathlib.py" -> _ignore_error
	"pathlib.py" -> "self.match"
	"pathlib.py" -> "parent_path._make_child_relpath"
	"pathlib.py" -> "self.successor._select_from"
	"pathlib.py" -> "_Selector.__init__"
	"pathlib.py" -> scandir
	"pathlib.py" -> list
	"pathlib.py" -> "entry.is_dir"
	"pathlib.py" -> _ignore_error
	"pathlib.py" -> "parent_path._make_child_relpath"
	"pathlib.py" -> "self._iterate_directories"
	"pathlib.py" -> set
	"pathlib.py" -> "self._iterate_directories"
	"pathlib.py" -> successor_select
	"pathlib.py" -> "yielded.add"
	"pathlib.py" -> "yielded.clear"
	"pathlib.py" -> type
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> isinstance
	"pathlib.py" -> tuple
	"pathlib.py" -> range
	"pathlib.py" -> "idx.indices"
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> IndexError
	"pathlib.py" -> len
	"pathlib.py" -> "self._pathcls._from_parsed_parts"
	"pathlib.py" -> format
	"pathlib.py" -> "cls._from_parts"
	"pathlib.py" -> tuple
	"pathlib.py" -> isinstance
	"pathlib.py" -> "os.fspath"
	"pathlib.py" -> isinstance
	"pathlib.py" -> "parts.append"
	"pathlib.py" -> str
	"pathlib.py" -> TypeError
	"pathlib.py" -> type
	"pathlib.py" -> "cls._flavour.parse_parts"
	"pathlib.py" -> "object.__new__"
	"pathlib.py" -> "self._parse_args"
	"pathlib.py" -> "object.__new__"
	"pathlib.py" -> "cls._flavour.join"
	"pathlib.py" -> "cls._flavour.join"
	"pathlib.py" -> "self._parse_args"
	"pathlib.py" -> "self._flavour.join_parsed_parts"
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> "self._format_parsed_parts"
	"pathlib.py" -> str
	"pathlib.py" -> replace
	"pathlib.py" -> str
	"pathlib.py" -> "os.fsencode"
	"pathlib.py" -> format
	"pathlib.py" -> "self.as_posix"
	"pathlib.py" -> "self.is_absolute"
	"pathlib.py" -> ValueError
	"pathlib.py" -> "self._flavour.make_uri"
	"pathlib.py" -> "self._flavour.casefold_parts"
	"pathlib.py" -> isinstance
	"pathlib.py" -> hash
	"pathlib.py" -> tuple
	"pathlib.py" -> isinstance
	"pathlib.py" -> isinstance
	"pathlib.py" -> isinstance
	"pathlib.py" -> isinstance
	"pathlib.py" -> property
	"pathlib.py" -> attrgetter
	"pathlib.py" -> property
	"pathlib.py" -> attrgetter
	"pathlib.py" -> len
	"pathlib.py" -> "name.rfind"
	"pathlib.py" -> len
	"pathlib.py" -> "name.endswith"
	"pathlib.py" -> "name.lstrip"
	"pathlib.py" -> "name.split"
	"pathlib.py" -> "name.rfind"
	"pathlib.py" -> len
	"pathlib.py" -> ValueError
	"pathlib.py" -> "self._flavour.parse_parts"
	"pathlib.py" -> len
	"pathlib.py" -> ValueError
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> "self.with_name"
	"pathlib.py" -> ValueError
	"pathlib.py" -> "suffix.startswith"
	"pathlib.py" -> ValueError
	"pathlib.py" -> ValueError
	"pathlib.py" -> len
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> TypeError
	"pathlib.py" -> "self._parse_args"
	"pathlib.py" -> len
	"pathlib.py" -> cf
	"pathlib.py" -> cf
	"pathlib.py" -> "self._format_parsed_parts"
	"pathlib.py" -> ValueError
	"pathlib.py" -> format
	"pathlib.py" -> str
	"pathlib.py" -> str
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> "self.relative_to"
	"pathlib.py" -> tuple
	"pathlib.py" -> "self._make_child"
	"pathlib.py" -> "self._make_child"
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> len
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> _PathParents
	"pathlib.py" -> bool
	"pathlib.py" -> "self._flavour.is_reserved"
	"pathlib.py" -> cf
	"pathlib.py" -> "self._flavour.parse_parts"
	"pathlib.py" -> ValueError
	"pathlib.py" -> cf
	"pathlib.py" -> cf
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> len
	"pathlib.py" -> zip
	"pathlib.py" -> reversed
	"pathlib.py" -> reversed
	"pathlib.py" -> "fnmatch.fnmatchcase"
	"pathlib.py" -> "os.PathLike.register"
	"pathlib.py" -> "cls._from_parts"
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "self._from_parsed_parts"
	"pathlib.py" -> "warnings.warn"
	"pathlib.py" -> cls
	"pathlib.py" -> "os.getcwd"
	"pathlib.py" -> expanduser
	"pathlib.py" -> cls
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "other_path.stat"
	"pathlib.py" -> stat
	"pathlib.py" -> "self.__class__"
	"pathlib.py" -> "os.path.samestat"
	"pathlib.py" -> "os.listdir"
	"pathlib.py" -> "self._make_child_relpath"
	"pathlib.py" -> "os.scandir"
	"pathlib.py" -> "sys.audit"
	"pathlib.py" -> ValueError
	"pathlib.py" -> format
	"pathlib.py" -> "self._flavour.parse_parts"
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "pattern_parts.append"
	"pathlib.py" -> _make_selector
	"pathlib.py" -> tuple
	"pathlib.py" -> "selector.select_from"
	"pathlib.py" -> "sys.audit"
	"pathlib.py" -> "self._flavour.parse_parts"
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "pattern_parts.append"
	"pathlib.py" -> _make_selector
	"pathlib.py" -> tuple
	"pathlib.py" -> "selector.select_from"
	"pathlib.py" -> "self.is_absolute"
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> "self.cwd"
	"pathlib.py" -> getattr
	"pathlib.py" -> RuntimeError
	"pathlib.py" -> "os.path.realpath"
	"pathlib.py" -> check_eloop
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> "p.stat"
	"pathlib.py" -> check_eloop
	"pathlib.py" -> "os.stat"
	"pathlib.py" -> "pwd.getpwuid"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "grp.getgrgid"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "io.text_encoding"
	"pathlib.py" -> "io.open"
	"pathlib.py" -> "self.open"
	"pathlib.py" -> "f.read"
	"pathlib.py" -> "io.text_encoding"
	"pathlib.py" -> "self.open"
	"pathlib.py" -> "f.read"
	"pathlib.py" -> memoryview
	"pathlib.py" -> "self.open"
	"pathlib.py" -> "f.write"
	"pathlib.py" -> isinstance
	"pathlib.py" -> TypeError
	"pathlib.py" -> "io.text_encoding"
	"pathlib.py" -> "self.open"
	"pathlib.py" -> "f.write"
	"pathlib.py" -> hasattr
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> "os.readlink"
	"pathlib.py" -> "os.utime"
	"pathlib.py" -> "os.open"
	"pathlib.py" -> "os.close"
	"pathlib.py" -> "os.mkdir"
	"pathlib.py" -> "self.parent.mkdir"
	"pathlib.py" -> "self.mkdir"
	"pathlib.py" -> "self.is_dir"
	"pathlib.py" -> "os.chmod"
	"pathlib.py" -> "self.chmod"
	"pathlib.py" -> "os.unlink"
	"pathlib.py" -> "os.rmdir"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "os.rename"
	"pathlib.py" -> "self.__class__"
	"pathlib.py" -> "os.replace"
	"pathlib.py" -> "self.__class__"
	"pathlib.py" -> hasattr
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "os.symlink"
	"pathlib.py" -> hasattr
	"pathlib.py" -> NotImplementedError
	"pathlib.py" -> "os.link"
	"pathlib.py" -> "warnings.warn"
	"pathlib.py" -> hardlink_to
	"pathlib.py" -> "self.__class__"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> _ignore_error
	"pathlib.py" -> S_ISDIR
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> _ignore_error
	"pathlib.py" -> S_ISREG
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> _ignore_error
	"pathlib.py" -> "self.exists"
	"pathlib.py" -> "self.is_dir"
	"pathlib.py" -> "self.parent.stat"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> "self.parent.stat"
	"pathlib.py" -> S_ISLNK
	"pathlib.py" -> "self.lstat"
	"pathlib.py" -> _ignore_error
	"pathlib.py" -> S_ISBLK
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> _ignore_error
	"pathlib.py" -> S_ISCHR
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> _ignore_error
	"pathlib.py" -> S_ISFIFO
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> _ignore_error
	"pathlib.py" -> S_ISSOCK
	"pathlib.py" -> "self.stat"
	"pathlib.py" -> _ignore_error
	"pathlib.py" -> "os.path.expanduser"
	"pathlib.py" -> RuntimeError
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> NotImplementedError
	"parse.py" -> "urlsplit.cache_clear"
	"parse.py" -> "_byte_quoter_factory.cache_clear"
	"parse.py" -> "obj.encode"
	"parse.py" -> tuple
	"parse.py" -> "x.decode"
	"parse.py" -> isinstance
	"parse.py" -> isinstance
	"parse.py" -> TypeError
	"parse.py" -> _decode_args
	"parse.py" -> "self._encoded_counterpart"
	"parse.py" -> "x.encode"
	"parse.py" -> "self._decoded_counterpart"
	"parse.py" -> "x.decode"
	"parse.py" -> isinstance
	"parse.py" -> "hostname.partition"
	"parse.py" -> "hostname.lower"
	"parse.py" -> "port.isdigit"
	"parse.py" -> "port.isascii"
	"parse.py" -> int
	"parse.py" -> ValueError
	"parse.py" -> ValueError
	"parse.py" -> classmethod
	"parse.py" -> "netloc.rpartition"
	"parse.py" -> "userinfo.partition"
	"parse.py" -> "netloc.rpartition"
	"parse.py" -> "hostinfo.partition"
	"parse.py" -> "bracketed.partition"
	"parse.py" -> "port.partition"
	"parse.py" -> "hostinfo.partition"
	"parse.py" -> "netloc.rpartition"
	"parse.py" -> "userinfo.partition"
	"parse.py" -> "netloc.rpartition"
	"parse.py" -> "hostinfo.partition"
	"parse.py" -> "bracketed.partition"
	"parse.py" -> "port.partition"
	"parse.py" -> "hostinfo.partition"
	"parse.py" -> namedtuple
	"parse.py" -> namedtuple
	"parse.py" -> namedtuple
	"parse.py" -> urlunsplit
	"parse.py" -> urlunparse
	"parse.py" -> urlunsplit
	"parse.py" -> urlunparse
	"parse.py" -> _fix_result_transcoding
	"parse.py" -> _coerce_args
	"parse.py" -> urlsplit
	"parse.py" -> _splitparams
	"parse.py" -> ParseResult
	"parse.py" -> _coerce_result
	"parse.py" -> "url.find"
	"parse.py" -> "url.rfind"
	"parse.py" -> "url.find"
	"parse.py" -> len
	"parse.py" -> "url.find"
	"parse.py" -> min
	"parse.py" -> "netloc.isascii"
	"parse.py" -> "netloc.replace"
	"parse.py" -> "n.replace"
	"parse.py" -> "n.replace"
	"parse.py" -> "n.replace"
	"parse.py" -> "unicodedata.normalize"
	"parse.py" -> ValueError
	"parse.py" -> "hostname.startswith"
	"parse.py" -> "re.match"
	"parse.py" -> ValueError
	"parse.py" -> "ipaddress.ip_address"
	"parse.py" -> isinstance
	"parse.py" -> ValueError
	"parse.py" -> _coerce_args
	"parse.py" -> "url.lstrip"
	"parse.py" -> "scheme.strip"
	"parse.py" -> "url.replace"
	"parse.py" -> "scheme.replace"
	"parse.py" -> bool
	"parse.py" -> "url.find"
	"parse.py" -> isascii
	"parse.py" -> isalpha
	"parse.py" -> lower
	"parse.py" -> _splitnetloc
	"parse.py" -> ValueError
	"parse.py" -> partition
	"parse.py" -> "netloc.partition"
	"parse.py" -> _check_bracketed_host
	"parse.py" -> "url.split"
	"parse.py" -> "url.split"
	"parse.py" -> _checknetloc
	"parse.py" -> SplitResult
	"parse.py" -> _coerce_result
	"parse.py" -> "functools.lru_cache"
	"parse.py" -> _coerce_args
	"parse.py" -> _coerce_result
	"parse.py" -> urlunsplit
	"parse.py" -> _coerce_args
	"parse.py" -> _coerce_result
	"parse.py" -> _coerce_args
	"parse.py" -> urlparse
	"parse.py" -> urlparse
	"parse.py" -> _coerce_result
	"parse.py" -> _coerce_result
	"parse.py" -> urlunparse
	"parse.py" -> _coerce_result
	"parse.py" -> urlunparse
	"parse.py" -> "bpath.split"
	"parse.py" -> "path.split"
	"parse.py" -> "path.split"
	"parse.py" -> filter
	"parse.py" -> "resolved_path.pop"
	"parse.py" -> "resolved_path.append"
	"parse.py" -> "resolved_path.append"
	"parse.py" -> _coerce_result
	"parse.py" -> urlunparse
	"parse.py" -> join
	"parse.py" -> _coerce_args
	"parse.py" -> urlparse
	"parse.py" -> urlunparse
	"parse.py" -> _coerce_result
	"parse.py" -> DefragResult
	"parse.py" -> isinstance
	"parse.py" -> "string.encode"
	"parse.py" -> "string.split"
	"parse.py" -> len
	"parse.py" -> encode
	"parse.py" -> "bytes.fromhex"
	"parse.py" -> append
	"parse.py" -> append
	"parse.py" -> append
	"parse.py" -> append
	"parse.py" -> join
	"parse.py" -> "re.compile"
	"parse.py" -> isinstance
	"parse.py" -> decode
	"parse.py" -> unquote_to_bytes
	"parse.py" -> "_asciire.split"
	"parse.py" -> range
	"parse.py" -> len
	"parse.py" -> append
	"parse.py" -> decode
	"parse.py" -> unquote_to_bytes
	"parse.py" -> append
	"parse.py" -> join
	"parse.py" -> parse_qsl
	"parse.py" -> append
	"parse.py" -> _coerce_args
	"parse.py" -> _coerce_args
	"parse.py" -> isinstance
	"parse.py" -> ValueError
	"parse.py" -> "qs.count"
	"parse.py" -> ValueError
	"parse.py" -> "qs.split"
	"parse.py" -> "name_value.split"
	"parse.py" -> len
	"parse.py" -> ValueError
	"parse.py" -> "nv.append"
	"parse.py" -> len
	"parse.py" -> replace
	"parse.py" -> unquote
	"parse.py" -> _coerce_result
	"parse.py" -> replace
	"parse.py" -> unquote
	"parse.py" -> _coerce_result
	"parse.py" -> "r.append"
	"parse.py" -> "string.replace"
	"parse.py" -> unquote
	"parse.py" -> frozenset
	"parse.py" -> bytes
	"parse.py" -> "warnings.warn"
	"parse.py" -> AttributeError
	"parse.py" -> "_ALWAYS_SAFE.union"
	"parse.py" -> dict
	"parse.py" -> chr
	"parse.py" -> format
	"parse.py" -> isinstance
	"parse.py" -> "string.encode"
	"parse.py" -> TypeError
	"parse.py" -> TypeError
	"parse.py" -> quote_from_bytes
	"parse.py" -> isinstance
	"parse.py" -> isinstance
	"parse.py" -> quote
	"parse.py" -> isinstance
	"parse.py" -> quote
	"parse.py" -> "string.replace"
	"parse.py" -> _Quoter
	"parse.py" -> isinstance
	"parse.py" -> TypeError
	"parse.py" -> isinstance
	"parse.py" -> "safe.encode"
	"parse.py" -> bytes
	"parse.py" -> "bs.rstrip"
	"parse.py" -> "bs.decode"
	"parse.py" -> _byte_quoter_factory
	"parse.py" -> join
	"parse.py" -> quoter
	"parse.py" -> hasattr
	"parse.py" -> "query.items"
	"parse.py" -> len
	"parse.py" -> isinstance
	"parse.py" -> TypeError
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> quote_via
	"parse.py" -> str
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> quote_via
	"parse.py" -> str
	"parse.py" -> "l.append"
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> quote_via
	"parse.py" -> str
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> "l.append"
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> "l.append"
	"parse.py" -> len
	"parse.py" -> quote_via
	"parse.py" -> str
	"parse.py" -> "l.append"
	"parse.py" -> isinstance
	"parse.py" -> quote_via
	"parse.py" -> quote_via
	"parse.py" -> str
	"parse.py" -> "l.append"
	"parse.py" -> join
	"parse.py" -> "warnings.warn"
	"parse.py" -> _to_bytes
	"parse.py" -> isinstance
	"parse.py" -> decode
	"parse.py" -> "url.encode"
	"parse.py" -> UnicodeError
	"parse.py" -> repr
	"parse.py" -> strip
	"parse.py" -> str
	"parse.py" -> strip
	"parse.py" -> strip
	"parse.py" -> "warnings.warn"
	"parse.py" -> _splittype
	"parse.py" -> "re.compile"
	"parse.py" -> "_typeprog.match"
	"parse.py" -> "match.groups"
	"parse.py" -> "scheme.lower"
	"parse.py" -> "warnings.warn"
	"parse.py" -> _splithost
	"parse.py" -> "re.compile"
	"parse.py" -> "_hostprog.match"
	"parse.py" -> "match.groups"
	"parse.py" -> "warnings.warn"
	"parse.py" -> _splituser
	"parse.py" -> "host.rpartition"
	"parse.py" -> "warnings.warn"
	"parse.py" -> _splitpasswd
	"parse.py" -> "user.partition"
	"parse.py" -> "warnings.warn"
	"parse.py" -> _splitport
	"parse.py" -> "re.compile"
	"parse.py" -> "_portprog.fullmatch"
	"parse.py" -> "match.groups"
	"parse.py" -> "warnings.warn"
	"parse.py" -> _splitnport
	"parse.py" -> "host.rpartition"
	"parse.py" -> "port.isdigit"
	"parse.py" -> "port.isascii"
	"parse.py" -> int
	"parse.py" -> "warnings.warn"
	"parse.py" -> _splitquery
	"parse.py" -> "url.rpartition"
	"parse.py" -> "warnings.warn"
	"parse.py" -> _splittag
	"parse.py" -> "url.rpartition"
	"parse.py" -> "warnings.warn"
	"parse.py" -> _splitattr
	"parse.py" -> "url.split"
	"parse.py" -> "warnings.warn"
	"parse.py" -> _splitvalue
	"parse.py" -> "attr.partition"
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> IPv4Interface
	"ipaddress.py" -> IPv6Interface
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> "address.to_bytes"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> "address.to_bytes"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> split
	"ipaddress.py" -> str
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> iter
	"ipaddress.py" -> next
	"ipaddress.py" -> min
	"ipaddress.py" -> bit_length
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> min
	"ipaddress.py" -> _count_righthand_zero_bits
	"ipaddress.py" -> bit_length
	"ipaddress.py" -> ip
	"ipaddress.py" -> list
	"ipaddress.py" -> "to_merge.pop"
	"ipaddress.py" -> "net.supernet"
	"ipaddress.py" -> "subnets.get"
	"ipaddress.py" -> "to_merge.append"
	"ipaddress.py" -> sorted
	"ipaddress.py" -> "subnets.values"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> "ips.append"
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> "ips.append"
	"ipaddress.py" -> "ips.append"
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> "nets.append"
	"ipaddress.py" -> sorted
	"ipaddress.py" -> set
	"ipaddress.py" -> _find_address_range
	"ipaddress.py" -> "addrs.extend"
	"ipaddress.py" -> summarize_address_range
	"ipaddress.py" -> _collapse_addresses_internal
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "obj._get_networks_key"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "obj._get_address_key"
	"ipaddress.py" -> "self._explode_shorthand_ip_string"
	"ipaddress.py" -> str
	"ipaddress.py" -> "self._reverse_pointer"
	"ipaddress.py" -> type
	"ipaddress.py" -> NotImplementedError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> _count_righthand_zero_bits
	"ipaddress.py" -> "ip_int.to_bytes"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> NetmaskValueError
	"ipaddress.py" -> "prefixlen_str.isascii"
	"ipaddress.py" -> "prefixlen_str.isdigit"
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> int
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> "cls._ip_int_from_string"
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> "cls._prefix_from_ip_int"
	"ipaddress.py" -> "cls._prefix_from_ip_int"
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> _split_optional_netmask
	"ipaddress.py" -> len
	"ipaddress.py" -> str
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self.__class__"
	"ipaddress.py" -> int
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self.__class__"
	"ipaddress.py" -> int
	"ipaddress.py" -> str
	"ipaddress.py" -> str
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> hash
	"ipaddress.py" -> hex
	"ipaddress.py" -> int
	"ipaddress.py" -> format
	"ipaddress.py" -> str
	"ipaddress.py" -> "re.compile"
	"ipaddress.py" -> "_address_fmt_re.fullmatch"
	"ipaddress.py" -> __format__
	"ipaddress.py" -> super
	"ipaddress.py" -> "m.groups"
	"ipaddress.py" -> format
	"ipaddress.py" -> int
	"ipaddress.py" -> str
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> range
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> range
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> IndexError
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> IndexError
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> hash
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> type
	"ipaddress.py" -> NotImplementedError
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> "other.subnet_of"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> "other.__class__"
	"ipaddress.py" -> "self.subnets"
	"ipaddress.py" -> "other.subnet_of"
	"ipaddress.py" -> "s1.subnets"
	"ipaddress.py" -> "other.subnet_of"
	"ipaddress.py" -> "s2.subnets"
	"ipaddress.py" -> AssertionError
	"ipaddress.py" -> AssertionError
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> range
	"ipaddress.py" -> "self.__class__"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> "self.__class__"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> TypeError
	"ipaddress.py" -> "self._is_subnet_of"
	"ipaddress.py" -> "self._is_subnet_of"
	"ipaddress.py" -> any
	"ipaddress.py" -> str
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> "cls._prefix_from_prefix_string"
	"ipaddress.py" -> "cls._prefix_from_ip_string"
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> "cls._ip_int_from_prefix"
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "ip_str.split"
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "int.from_bytes"
	"ipaddress.py" -> map
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> "octet_str.isascii"
	"ipaddress.py" -> "octet_str.isdigit"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> int
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> join
	"ipaddress.py" -> map
	"ipaddress.py" -> "ip_int.to_bytes"
	"ipaddress.py" -> split
	"ipaddress.py" -> str
	"ipaddress.py" -> join
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self._check_int_address"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self._check_packed_address"
	"ipaddress.py" -> "int.from_bytes"
	"ipaddress.py" -> str
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "self._ip_int_from_string"
	"ipaddress.py" -> v4_int_to_packed
	"ipaddress.py" -> any
	"ipaddress.py" -> "functools.lru_cache"
	"ipaddress.py" -> "functools.lru_cache"
	"ipaddress.py" -> "self._split_addr_prefix"
	"ipaddress.py" -> "IPv4Address.__init__"
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "IPv4Address.__eq__"
	"ipaddress.py" -> "IPv4Address.__lt__"
	"ipaddress.py" -> hash
	"ipaddress.py" -> int
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._split_addr_prefix"
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> "self._make_netmask"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> int
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> "functools.lru_cache"
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Network
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> frozenset
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"ipaddress.py" -> "cls._prefix_from_prefix_string"
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> "cls._ip_int_from_prefix"
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "ip_str.split"
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> "parts.pop"
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "parts.append"
	"ipaddress.py" -> "parts.append"
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> range
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> range
	"ipaddress.py" -> "cls._parse_hextet"
	"ipaddress.py" -> range
	"ipaddress.py" -> "cls._parse_hextet"
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "cls._HEX_DIGITS.issuperset"
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> len
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> int
	"ipaddress.py" -> enumerate
	"ipaddress.py" -> len
	"ipaddress.py" -> int
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> int
	"ipaddress.py" -> range
	"ipaddress.py" -> "cls._compress_hextets"
	"ipaddress.py" -> join
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> str
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> str
	"ipaddress.py" -> str
	"ipaddress.py" -> "self._ip_int_from_string"
	"ipaddress.py" -> range
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> join
	"ipaddress.py" -> join
	"ipaddress.py" -> replace
	"ipaddress.py" -> join
	"ipaddress.py" -> "ip_str.partition"
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self._check_int_address"
	"ipaddress.py" -> isinstance
	"ipaddress.py" -> "self._check_packed_address"
	"ipaddress.py" -> "int.from_bytes"
	"ipaddress.py" -> str
	"ipaddress.py" -> AddressValueError
	"ipaddress.py" -> "self._split_scope_id"
	"ipaddress.py" -> "self._ip_int_from_string"
	"ipaddress.py" -> __str__
	"ipaddress.py" -> super
	"ipaddress.py" -> hash
	"ipaddress.py" -> __eq__
	"ipaddress.py" -> super
	"ipaddress.py" -> getattr
	"ipaddress.py" -> v6_int_to_packed
	"ipaddress.py" -> any
	"ipaddress.py" -> any
	"ipaddress.py" -> "functools.lru_cache"
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> IPv4Address
	"ipaddress.py" -> "self._split_addr_prefix"
	"ipaddress.py" -> "IPv6Address.__init__"
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> __str__
	"ipaddress.py" -> super
	"ipaddress.py" -> "IPv6Address.__eq__"
	"ipaddress.py" -> "IPv6Address.__lt__"
	"ipaddress.py" -> hash
	"ipaddress.py" -> int
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._string_from_ip_int"
	"ipaddress.py" -> "self._split_addr_prefix"
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> "self._make_netmask"
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> ValueError
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> int
	"ipaddress.py" -> IPv6Address
	"ipaddress.py" -> int
	"ipaddress.py" -> int
	"ipaddress.py" -> range
	"ipaddress.py" -> "self._address_class"
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"ipaddress.py" -> IPv6Network
	"dataclasses.py" -> _HAS_DEFAULT_FACTORY_CLASS
	"dataclasses.py" -> _MISSING_TYPE
	"dataclasses.py" -> _KW_ONLY_TYPE
	"dataclasses.py" -> "types.MappingProxyType"
	"dataclasses.py" -> _FIELD_BASE
	"dataclasses.py" -> _FIELD_BASE
	"dataclasses.py" -> _FIELD_BASE
	"dataclasses.py" -> "re.compile"
	"dataclasses.py" -> set
	"dataclasses.py" -> id
	"dataclasses.py" -> "_thread.get_ident"
	"dataclasses.py" -> "repr_running.add"
	"dataclasses.py" -> user_function
	"dataclasses.py" -> "repr_running.discard"
	"dataclasses.py" -> "functools.wraps"
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> repr
	"dataclasses.py" -> InitVar
	"dataclasses.py" -> "types.MappingProxyType"
	"dataclasses.py" -> getattr
	"dataclasses.py" -> type
	"dataclasses.py" -> func
	"dataclasses.py" -> classmethod
	"dataclasses.py" -> ValueError
	"dataclasses.py" -> Field
	"dataclasses.py" -> tuple
	"dataclasses.py" -> tuple
	"dataclasses.py" -> join
	"dataclasses.py" -> join
	"dataclasses.py" -> join
	"dataclasses.py" -> join
	"dataclasses.py" -> "locals.keys"
	"dataclasses.py" -> exec
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> _field_assign
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> "locals.update"
	"dataclasses.py" -> _field_init
	"dataclasses.py" -> "body_lines.append"
	"dataclasses.py" -> join
	"dataclasses.py" -> "body_lines.append"
	"dataclasses.py" -> _init_param
	"dataclasses.py" -> _init_param
	"dataclasses.py" -> _create_fn
	"dataclasses.py" -> _create_fn
	"dataclasses.py" -> join
	"dataclasses.py" -> _recursive_repr
	"dataclasses.py" -> join
	"dataclasses.py" -> repr
	"dataclasses.py" -> _create_fn
	"dataclasses.py" -> _create_fn
	"dataclasses.py" -> _create_fn
	"dataclasses.py" -> _tuple_str
	"dataclasses.py" -> _create_fn
	"dataclasses.py" -> type
	"dataclasses.py" -> type
	"dataclasses.py" -> "_MODULE_IDENTIFIER_RE.match"
	"dataclasses.py" -> "match.group"
	"dataclasses.py" -> "sys.modules.get"
	"dataclasses.py" -> "sys.modules.get"
	"dataclasses.py" -> "module.__dict__.get"
	"dataclasses.py" -> "sys.modules.get"
	"dataclasses.py" -> is_type_predicate
	"dataclasses.py" -> "ns.get"
	"dataclasses.py" -> "match.group"
	"dataclasses.py" -> getattr
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> field
	"dataclasses.py" -> "sys.modules.get"
	"dataclasses.py" -> _is_classvar
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> _is_type
	"dataclasses.py" -> _is_initvar
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> _is_type
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> ValueError
	"dataclasses.py" -> type
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> _set_qualname
	"dataclasses.py" -> setattr
	"dataclasses.py" -> _set_qualname
	"dataclasses.py" -> _hash_fn
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> setattr
	"dataclasses.py" -> _DataclassParams
	"dataclasses.py" -> getattr
	"dataclasses.py" -> "base_fields.values"
	"dataclasses.py" -> getattr
	"dataclasses.py" -> "cls.__dict__.get"
	"dataclasses.py" -> "cls_annotations.items"
	"dataclasses.py" -> _is_kw_only
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> _is_type
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> "cls_fields.append"
	"dataclasses.py" -> _get_field
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> getattr
	"dataclasses.py" -> delattr
	"dataclasses.py" -> setattr
	"dataclasses.py" -> "cls.__dict__.items"
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> setattr
	"dataclasses.py" -> "cls.__dict__.get"
	"dataclasses.py" -> ValueError
	"dataclasses.py" -> "fields.values"
	"dataclasses.py" -> _fields_in_init_order
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> _set_new_attribute
	"dataclasses.py" -> _init_fn
	"dataclasses.py" -> "fields.values"
	"dataclasses.py" -> _set_new_attribute
	"dataclasses.py" -> _repr_fn
	"dataclasses.py" -> _tuple_str
	"dataclasses.py" -> _tuple_str
	"dataclasses.py" -> _set_new_attribute
	"dataclasses.py" -> _cmp_fn
	"dataclasses.py" -> _tuple_str
	"dataclasses.py" -> _tuple_str
	"dataclasses.py" -> _set_new_attribute
	"dataclasses.py" -> _cmp_fn
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> _frozen_get_del_attr
	"dataclasses.py" -> _set_new_attribute
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> bool
	"dataclasses.py" -> bool
	"dataclasses.py" -> bool
	"dataclasses.py" -> hash_action
	"dataclasses.py" -> getattr
	"dataclasses.py" -> replace
	"dataclasses.py" -> str
	"dataclasses.py" -> "inspect.signature"
	"dataclasses.py" -> _set_new_attribute
	"dataclasses.py" -> tuple
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> _add_slots
	"dataclasses.py" -> "abc.update_abstractmethods"
	"dataclasses.py" -> getattr
	"dataclasses.py" -> fields
	"dataclasses.py" -> zip
	"dataclasses.py" -> fields
	"dataclasses.py" -> "object.__setattr__"
	"dataclasses.py" -> "cls.__dict__.get"
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> dict
	"dataclasses.py" -> tuple
	"dataclasses.py" -> fields
	"dataclasses.py" -> set
	"dataclasses.py" -> "itertools.chain.from_iterable"
	"dataclasses.py" -> map
	"dataclasses.py" -> tuple
	"dataclasses.py" -> "itertools.filterfalse"
	"dataclasses.py" -> "itertools.chain"
	"dataclasses.py" -> "cls_dict.pop"
	"dataclasses.py" -> "cls_dict.pop"
	"dataclasses.py" -> "cls_dict.pop"
	"dataclasses.py" -> getattr
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> _process_class
	"dataclasses.py" -> wrap
	"dataclasses.py" -> getattr
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> tuple
	"dataclasses.py" -> "fields.values"
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> type
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> type
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> _is_dataclass_instance
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> _asdict_inner
	"dataclasses.py" -> _is_dataclass_instance
	"dataclasses.py" -> fields
	"dataclasses.py" -> _asdict_inner
	"dataclasses.py" -> getattr
	"dataclasses.py" -> "result.append"
	"dataclasses.py" -> dict_factory
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> _asdict_inner
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> _asdict_inner
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> _asdict_inner
	"dataclasses.py" -> _asdict_inner
	"dataclasses.py" -> "obj.items"
	"dataclasses.py" -> "copy.deepcopy"
	"dataclasses.py" -> _is_dataclass_instance
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> _astuple_inner
	"dataclasses.py" -> _is_dataclass_instance
	"dataclasses.py" -> fields
	"dataclasses.py" -> _astuple_inner
	"dataclasses.py" -> getattr
	"dataclasses.py" -> "result.append"
	"dataclasses.py" -> tuple_factory
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> hasattr
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> _astuple_inner
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> _astuple_inner
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> <unknown_function>
	"dataclasses.py" -> type
	"dataclasses.py" -> _astuple_inner
	"dataclasses.py" -> _astuple_inner
	"dataclasses.py" -> "obj.items"
	"dataclasses.py" -> "copy.deepcopy"
	"dataclasses.py" -> set
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> len
	"dataclasses.py" -> len
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> isinstance
	"dataclasses.py" -> "name.isidentifier"
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> "keyword.iskeyword"
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> "seen.add"
	"dataclasses.py" -> "ns.update"
	"dataclasses.py" -> "ns.update"
	"dataclasses.py" -> "types.new_class"
	"dataclasses.py" -> dataclass
	"dataclasses.py" -> _is_dataclass_instance
	"dataclasses.py" -> TypeError
	"dataclasses.py" -> values
	"dataclasses.py" -> getattr
	"dataclasses.py" -> ValueError
	"dataclasses.py" -> ValueError
	"dataclasses.py" -> getattr
	"dataclasses.py" -> "obj.__class__"
	"uuid.py" -> "platform.system"
	"uuid.py" -> _simple_enum
	"uuid.py" -> count
	"uuid.py" -> TypeError
	"uuid.py" -> replace
	"uuid.py" -> "hex.replace"
	"uuid.py" -> replace
	"uuid.py" -> "hex.strip"
	"uuid.py" -> len
	"uuid.py" -> ValueError
	"uuid.py" -> int_
	"uuid.py" -> len
	"uuid.py" -> ValueError
	"uuid.py" -> len
	"uuid.py" -> ValueError
	"uuid.py" -> isinstance
	"uuid.py" -> repr
	"uuid.py" -> "int_.from_bytes"
	"uuid.py" -> len
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> ValueError
	"uuid.py" -> "object.__setattr__"
	"uuid.py" -> "object.__setattr__"
	"uuid.py" -> "object.__setattr__"
	"uuid.py" -> "object.__setattr__"
	"uuid.py" -> SafeUUID
	"uuid.py" -> isinstance
	"uuid.py" -> isinstance
	"uuid.py" -> isinstance
	"uuid.py" -> isinstance
	"uuid.py" -> isinstance
	"uuid.py" -> hash
	"uuid.py" -> str
	"uuid.py" -> TypeError
	"uuid.py" -> "self.int.to_bytes"
	"uuid.py" -> str
	"uuid.py" -> int
	"uuid.py" -> split
	"uuid.py" -> "os.environ.get"
	"uuid.py" -> "path_dirs.extend"
	"uuid.py" -> "shutil.which"
	"uuid.py" -> "os.pathsep.join"
	"uuid.py" -> dict
	"uuid.py" -> "subprocess.Popen"
	"uuid.py" -> "proc.communicate"
	"uuid.py" -> "io.BytesIO"
	"uuid.py" -> _get_command_stdout
	"uuid.py" -> split
	"uuid.py" -> rstrip
	"uuid.py" -> "line.lower"
	"uuid.py" -> range
	"uuid.py" -> len
	"uuid.py" -> get_word_index
	"uuid.py" -> int
	"uuid.py" -> "word.replace"
	"uuid.py" -> _is_universal
	"uuid.py" -> "word.split"
	"uuid.py" -> len
	"uuid.py" -> all
	"uuid.py" -> len
	"uuid.py" -> join
	"uuid.py" -> "part.rjust"
	"uuid.py" -> all
	"uuid.py" -> len
	"uuid.py" -> join
	"uuid.py" -> int
	"uuid.py" -> _get_command_stdout
	"uuid.py" -> split
	"uuid.py" -> rstrip
	"uuid.py" -> "stdout.readline"
	"uuid.py" -> "keywords.index"
	"uuid.py" -> split
	"uuid.py" -> "line.rstrip"
	"uuid.py" -> _parse_mac
	"uuid.py" -> _is_universal
	"uuid.py" -> _find_mac_near_keyword
	"uuid.py" -> _find_mac_near_keyword
	"uuid.py" -> hasattr
	"uuid.py" -> "socket.gethostbyname"
	"uuid.py" -> "socket.gethostname"
	"uuid.py" -> _find_mac_near_keyword
	"uuid.py" -> "os.fsencode"
	"uuid.py" -> _find_mac_near_keyword
	"uuid.py" -> "os.fsencode"
	"uuid.py" -> _find_mac_near_keyword
	"uuid.py" -> "os.fsencode"
	"uuid.py" -> _find_mac_near_keyword
	"uuid.py" -> _find_mac_under_heading
	"uuid.py" -> _windll_getnode
	"uuid.py" -> _windll_getnode
	"uuid.py" -> getattr
	"uuid.py" -> getattr
	"uuid.py" -> _generate_time_safe
	"uuid.py" -> UUID
	"uuid.py" -> _UuidCreate
	"uuid.py" -> UUID
	"uuid.py" -> "random.getrandbits"
	"uuid.py" -> getter
	"uuid.py" -> format
	"uuid.py" -> _generate_time_safe
	"uuid.py" -> SafeUUID
	"uuid.py" -> UUID
	"uuid.py" -> "time.time_ns"
	"uuid.py" -> "random.getrandbits"
	"uuid.py" -> getnode
	"uuid.py" -> UUID
	"uuid.py" -> digest
	"uuid.py" -> md5
	"uuid.py" -> bytes
	"uuid.py" -> UUID
	"uuid.py" -> UUID
	"uuid.py" -> "os.urandom"
	"uuid.py" -> digest
	"uuid.py" -> sha1
	"uuid.py" -> bytes
	"uuid.py" -> UUID
	"uuid.py" -> UUID
	"uuid.py" -> UUID
	"uuid.py" -> UUID
	"uuid.py" -> UUID
	"socket.py" -> getattr
	"socket.py" -> getattr
	"socket.py" -> getattr
	"socket.py" -> "__all__.extend"
	"socket.py" -> "os._get_exports_list"
	"socket.py" -> "IntEnum._convert_"
	"socket.py" -> "C.isupper"
	"socket.py" -> "C.startswith"
	"socket.py" -> "IntEnum._convert_"
	"socket.py" -> "C.isupper"
	"socket.py" -> "C.startswith"
	"socket.py" -> "IntFlag._convert_"
	"socket.py" -> "C.isupper"
	"socket.py" -> "C.startswith"
	"socket.py" -> "IntFlag._convert_"
	"socket.py" -> "C.isupper"
	"socket.py" -> "C.startswith"
	"socket.py" -> enum_klass
	"socket.py" -> startswith
	"socket.py" -> "sys.platform.lower"
	"socket.py" -> "__all__.append"
	"socket.py" -> "_socket.socket.__init__"
	"socket.py" -> "self.close"
	"socket.py" -> getattr
	"socket.py" -> "self.fileno"
	"socket.py" -> "self.getsockname"
	"socket.py" -> str
	"socket.py" -> "self.getpeername"
	"socket.py" -> str
	"socket.py" -> TypeError
	"socket.py" -> dup
	"socket.py" -> "self.fileno"
	"socket.py" -> "self.__class__"
	"socket.py" -> "sock.settimeout"
	"socket.py" -> "self.gettimeout"
	"socket.py" -> "self._accept"
	"socket.py" -> socket
	"socket.py" -> getdefaulttimeout
	"socket.py" -> "self.gettimeout"
	"socket.py" -> "sock.setblocking"
	"socket.py" -> set
	"socket.py" -> ValueError
	"socket.py" -> SocketIO
	"socket.py" -> ValueError
	"socket.py" -> "io.BufferedRWPair"
	"socket.py" -> "io.BufferedReader"
	"socket.py" -> "io.BufferedWriter"
	"socket.py" -> "io.text_encoding"
	"socket.py" -> "io.TextIOWrapper"
	"socket.py" -> hasattr
	"socket.py" -> "self._check_sendfile_params"
	"socket.py" -> "self.fileno"
	"socket.py" -> "file.fileno"
	"socket.py" -> _GiveupOnSendfile
	"socket.py" -> "os.fstat"
	"socket.py" -> _GiveupOnSendfile
	"socket.py" -> min
	"socket.py" -> "self.gettimeout"
	"socket.py" -> ValueError
	"socket.py" -> hasattr
	"socket.py" -> "selectors.PollSelector"
	"socket.py" -> "selectors.SelectSelector"
	"socket.py" -> "selector.register"
	"socket.py" -> selector_select
	"socket.py" -> TimeoutError
	"socket.py" -> os_sendfile
	"socket.py" -> selector_select
	"socket.py" -> _GiveupOnSendfile
	"socket.py" -> hasattr
	"socket.py" -> "file.seek"
	"socket.py" -> _GiveupOnSendfile
	"socket.py" -> "self._check_sendfile_params"
	"socket.py" -> "self.gettimeout"
	"socket.py" -> ValueError
	"socket.py" -> "file.seek"
	"socket.py" -> min
	"socket.py" -> min
	"socket.py" -> memoryview
	"socket.py" -> file_read
	"socket.py" -> sock_send
	"socket.py" -> len
	"socket.py" -> hasattr
	"socket.py" -> "file.seek"
	"socket.py" -> getattr
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> isinstance
	"socket.py" -> TypeError
	"socket.py" -> format
	"socket.py" -> ValueError
	"socket.py" -> format
	"socket.py" -> "self._sendfile_use_sendfile"
	"socket.py" -> "self._sendfile_use_send"
	"socket.py" -> "self.close"
	"socket.py" -> "_ss.close"
	"socket.py" -> "self._real_close"
	"socket.py" -> detach
	"socket.py" -> super
	"socket.py" -> _intenum_converter
	"socket.py" -> super
	"socket.py" -> _intenum_converter
	"socket.py" -> super
	"socket.py" -> "os.get_handle_inheritable"
	"socket.py" -> "self.fileno"
	"socket.py" -> "os.set_handle_inheritable"
	"socket.py" -> "self.fileno"
	"socket.py" -> "os.get_inheritable"
	"socket.py" -> "self.fileno"
	"socket.py" -> "os.set_inheritable"
	"socket.py" -> "self.fileno"
	"socket.py" -> dup
	"socket.py" -> socket
	"socket.py" -> hasattr
	"socket.py" -> "sock.sendmsg"
	"socket.py" -> "array.array"
	"socket.py" -> "__all__.append"
	"socket.py" -> hasattr
	"socket.py" -> "array.array"
	"socket.py" -> "sock.recvmsg"
	"socket.py" -> "_socket.CMSG_LEN"
	"socket.py" -> "fds.frombytes"
	"socket.py" -> len
	"socket.py" -> len
	"socket.py" -> list
	"socket.py" -> "__all__.append"
	"socket.py" -> hasattr
	"socket.py" -> socket
	"socket.py" -> "__all__.append"
	"socket.py" -> hasattr
	"socket.py" -> "_socket.socketpair"
	"socket.py" -> socket
	"socket.py" -> "a.detach"
	"socket.py" -> socket
	"socket.py" -> "b.detach"
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> socket
	"socket.py" -> "lsock.bind"
	"socket.py" -> "lsock.listen"
	"socket.py" -> "lsock.getsockname"
	"socket.py" -> socket
	"socket.py" -> "csock.setblocking"
	"socket.py" -> "csock.connect"
	"socket.py" -> "csock.setblocking"
	"socket.py" -> "lsock.accept"
	"socket.py" -> "csock.close"
	"socket.py" -> "lsock.close"
	"socket.py" -> "__all__.append"
	"socket.py" -> ValueError
	"socket.py" -> "io.RawIOBase.__init__"
	"socket.py" -> "self._checkClosed"
	"socket.py" -> "self._checkReadable"
	"socket.py" -> OSError
	"socket.py" -> "self._sock.recv_into"
	"socket.py" -> "self._checkClosed"
	"socket.py" -> "self._checkWritable"
	"socket.py" -> "self._sock.send"
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> seekable
	"socket.py" -> super
	"socket.py" -> "self._checkClosed"
	"socket.py" -> "self._sock.fileno"
	"socket.py" -> "self.fileno"
	"socket.py" -> "io.RawIOBase.close"
	"socket.py" -> "self._sock._decref_socketios"
	"socket.py" -> "name.strip"
	"socket.py" -> gethostname
	"socket.py" -> gethostbyaddr
	"socket.py" -> "aliases.insert"
	"socket.py" -> object
	"socket.py" -> getaddrinfo
	"socket.py" -> socket
	"socket.py" -> "sock.settimeout"
	"socket.py" -> "sock.bind"
	"socket.py" -> "sock.connect"
	"socket.py" -> "exceptions.clear"
	"socket.py" -> "exceptions.clear"
	"socket.py" -> "exceptions.append"
	"socket.py" -> "sock.close"
	"socket.py" -> len
	"socket.py" -> ExceptionGroup
	"socket.py" -> "exceptions.clear"
	"socket.py" -> error
	"socket.py" -> hasattr
	"socket.py" -> hasattr
	"socket.py" -> socket
	"socket.py" -> "sock.setsockopt"
	"socket.py" -> hasattr
	"socket.py" -> ValueError
	"socket.py" -> has_dualstack_ipv6
	"socket.py" -> ValueError
	"socket.py" -> ValueError
	"socket.py" -> socket
	"socket.py" -> hasattr
	"socket.py" -> "sock.setsockopt"
	"socket.py" -> "sock.setsockopt"
	"socket.py" -> "sock.setsockopt"
	"socket.py" -> hasattr
	"socket.py" -> hasattr
	"socket.py" -> "sock.setsockopt"
	"socket.py" -> "sock.bind"
	"socket.py" -> error
	"socket.py" -> "sock.listen"
	"socket.py" -> "sock.listen"
	"socket.py" -> "sock.close"
	"socket.py" -> "_socket.getaddrinfo"
	"socket.py" -> "addrlist.append"
	"socket.py" -> _intenum_converter
	"socket.py" -> _intenum_converter
	"selectors.py" -> isinstance
	"selectors.py" -> int
	"selectors.py" -> "fileobj.fileno"
	"selectors.py" -> ValueError
	"selectors.py" -> format
	"selectors.py" -> ValueError
	"selectors.py" -> format
	"selectors.py" -> namedtuple
	"selectors.py" -> len
	"selectors.py" -> "self._selector._fileobj_lookup"
	"selectors.py" -> KeyError
	"selectors.py" -> format
	"selectors.py" -> iter
	"selectors.py" -> "self.unregister"
	"selectors.py" -> "self.register"
	"selectors.py" -> "self.get_map"
	"selectors.py" -> RuntimeError
	"selectors.py" -> KeyError
	"selectors.py" -> format
	"selectors.py" -> "self.close"
	"selectors.py" -> _SelectorMapping
	"selectors.py" -> _fileobj_to_fd
	"selectors.py" -> "self._fd_to_key.values"
	"selectors.py" -> ValueError
	"selectors.py" -> format
	"selectors.py" -> SelectorKey
	"selectors.py" -> "self._fileobj_lookup"
	"selectors.py" -> KeyError
	"selectors.py" -> format
	"selectors.py" -> "self._fd_to_key.pop"
	"selectors.py" -> "self._fileobj_lookup"
	"selectors.py" -> KeyError
	"selectors.py" -> format
	"selectors.py" -> "self._fileobj_lookup"
	"selectors.py" -> KeyError
	"selectors.py" -> format
	"selectors.py" -> "self.unregister"
	"selectors.py" -> "self.register"
	"selectors.py" -> "key._replace"
	"selectors.py" -> "self._fd_to_key.clear"
	"selectors.py" -> __init__
	"selectors.py" -> super
	"selectors.py" -> set
	"selectors.py" -> set
	"selectors.py" -> register
	"selectors.py" -> super
	"selectors.py" -> "self._readers.add"
	"selectors.py" -> "self._writers.add"
	"selectors.py" -> unregister
	"selectors.py" -> super
	"selectors.py" -> "self._readers.discard"
	"selectors.py" -> "self._writers.discard"
	"selectors.py" -> "select.select"
	"selectors.py" -> max
	"selectors.py" -> "self._select"
	"selectors.py" -> set
	"selectors.py" -> set
	"selectors.py" -> "self._key_from_fd"
	"selectors.py" -> "ready.append"
	"selectors.py" -> __init__
	"selectors.py" -> super
	"selectors.py" -> "self._selector_cls"
	"selectors.py" -> register
	"selectors.py" -> super
	"selectors.py" -> "self._selector.register"
	"selectors.py" -> unregister
	"selectors.py" -> super
	"selectors.py" -> unregister
	"selectors.py" -> super
	"selectors.py" -> "self._selector.unregister"
	"selectors.py" -> "self._fileobj_lookup"
	"selectors.py" -> KeyError
	"selectors.py" -> "self._selector.modify"
	"selectors.py" -> unregister
	"selectors.py" -> super
	"selectors.py" -> "key._replace"
	"selectors.py" -> "math.ceil"
	"selectors.py" -> "self._selector.poll"
	"selectors.py" -> "self._key_from_fd"
	"selectors.py" -> "ready.append"
	"selectors.py" -> hasattr
	"selectors.py" -> hasattr
	"selectors.py" -> "self._selector.fileno"
	"selectors.py" -> "math.ceil"
	"selectors.py" -> max
	"selectors.py" -> len
	"selectors.py" -> "self._selector.poll"
	"selectors.py" -> "self._key_from_fd"
	"selectors.py" -> "ready.append"
	"selectors.py" -> "self._selector.close"
	"selectors.py" -> close
	"selectors.py" -> super
	"selectors.py" -> hasattr
	"selectors.py" -> "self._selector.fileno"
	"selectors.py" -> "self._selector.close"
	"selectors.py" -> close
	"selectors.py" -> super
	"selectors.py" -> hasattr
	"selectors.py" -> __init__
	"selectors.py" -> super
	"selectors.py" -> "select.kqueue"
	"selectors.py" -> "self._selector.fileno"
	"selectors.py" -> register
	"selectors.py" -> super
	"selectors.py" -> "select.kevent"
	"selectors.py" -> "self._selector.control"
	"selectors.py" -> "select.kevent"
	"selectors.py" -> "self._selector.control"
	"selectors.py" -> unregister
	"selectors.py" -> super
	"selectors.py" -> unregister
	"selectors.py" -> super
	"selectors.py" -> "select.kevent"
	"selectors.py" -> "self._selector.control"
	"selectors.py" -> "select.kevent"
	"selectors.py" -> "self._selector.control"
	"selectors.py" -> max
	"selectors.py" -> max
	"selectors.py" -> len
	"selectors.py" -> "self._selector.control"
	"selectors.py" -> "self._key_from_fd"
	"selectors.py" -> "ready.append"
	"selectors.py" -> "self._selector.close"
	"selectors.py" -> close
	"selectors.py" -> super
	"selectors.py" -> getattr
	"selectors.py" -> selector
	"selectors.py" -> "selector_obj.poll"
	"selectors.py" -> "selector_obj.close"
	"selectors.py" -> _can_use
	"selectors.py" -> _can_use
	"selectors.py" -> _can_use
	"selectors.py" -> _can_use
	"shutil.py" -> hasattr
	"shutil.py" -> "sys.platform.startswith"
	"shutil.py" -> hasattr
	"shutil.py" -> "fsrc.fileno"
	"shutil.py" -> "fdst.fileno"
	"shutil.py" -> _GiveupOnFastCopy
	"shutil.py" -> "posix._fcopyfile"
	"shutil.py" -> _GiveupOnFastCopy
	"shutil.py" -> "fsrc.fileno"
	"shutil.py" -> "fdst.fileno"
	"shutil.py" -> _GiveupOnFastCopy
	"shutil.py" -> max
	"shutil.py" -> "os.fstat"
	"shutil.py" -> min
	"shutil.py" -> "os.sendfile"
	"shutil.py" -> _GiveupOnFastCopy
	"shutil.py" -> "os.lseek"
	"shutil.py" -> _GiveupOnFastCopy
	"shutil.py" -> memoryview
	"shutil.py" -> bytearray
	"shutil.py" -> fsrc_readinto
	"shutil.py" -> "fdst.write"
	"shutil.py" -> fdst_write
	"shutil.py" -> fsrc_read
	"shutil.py" -> fdst_write
	"shutil.py" -> isinstance
	"shutil.py" -> hasattr
	"shutil.py" -> "os.path.samestat"
	"shutil.py" -> "src.stat"
	"shutil.py" -> "os.stat"
	"shutil.py" -> hasattr
	"shutil.py" -> "os.path.samefile"
	"shutil.py" -> "os.path.normcase"
	"shutil.py" -> "os.path.abspath"
	"shutil.py" -> "os.path.normcase"
	"shutil.py" -> "os.path.abspath"
	"shutil.py" -> isinstance
	"shutil.py" -> "fn.stat"
	"shutil.py" -> "os.stat"
	"shutil.py" -> isinstance
	"shutil.py" -> "fn.is_symlink"
	"shutil.py" -> "os.path.islink"
	"shutil.py" -> "sys.audit"
	"shutil.py" -> _samefile
	"shutil.py" -> SameFileError
	"shutil.py" -> format
	"shutil.py" -> enumerate
	"shutil.py" -> _stat
	"shutil.py" -> "stat.S_ISFIFO"
	"shutil.py" -> isinstance
	"shutil.py" -> SpecialFileError
	"shutil.py" -> _islink
	"shutil.py" -> "os.symlink"
	"shutil.py" -> "os.readlink"
	"shutil.py" -> open
	"shutil.py" -> open
	"shutil.py" -> _fastcopy_fcopyfile
	"shutil.py" -> _fastcopy_sendfile
	"shutil.py" -> _copyfileobj_readinto
	"shutil.py" -> min
	"shutil.py" -> copyfileobj
	"shutil.py" -> "os.path.exists"
	"shutil.py" -> FileNotFoundError
	"shutil.py" -> "sys.audit"
	"shutil.py" -> _islink
	"shutil.py" -> "os.path.islink"
	"shutil.py" -> hasattr
	"shutil.py" -> stat_func
	"shutil.py" -> chmod_func
	"shutil.py" -> "stat.S_IMODE"
	"shutil.py" -> hasattr
	"shutil.py" -> "os.listxattr"
	"shutil.py" -> "os.getxattr"
	"shutil.py" -> "os.setxattr"
	"shutil.py" -> "sys.audit"
	"shutil.py" -> _islink
	"shutil.py" -> "os.path.islink"
	"shutil.py" -> getattr
	"shutil.py" -> getattr
	"shutil.py" -> isinstance
	"shutil.py" -> "src.stat"
	"shutil.py" -> <unknown_function>
	"shutil.py" -> lookup
	"shutil.py" -> "stat.S_IMODE"
	"shutil.py" -> <unknown_function>
	"shutil.py" -> lookup
	"shutil.py" -> _copyxattr
	"shutil.py" -> <unknown_function>
	"shutil.py" -> lookup
	"shutil.py" -> hasattr
	"shutil.py" -> <unknown_function>
	"shutil.py" -> lookup
	"shutil.py" -> hasattr
	"shutil.py" -> getattr
	"shutil.py" -> "os.path.isdir"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "os.path.basename"
	"shutil.py" -> copyfile
	"shutil.py" -> copymode
	"shutil.py" -> "os.path.isdir"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "os.path.basename"
	"shutil.py" -> copyfile
	"shutil.py" -> copystat
	"shutil.py" -> "ignored_names.extend"
	"shutil.py" -> "fnmatch.filter"
	"shutil.py" -> set
	"shutil.py" -> ignore
	"shutil.py" -> "os.fspath"
	"shutil.py" -> set
	"shutil.py" -> "os.makedirs"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "srcentry.is_symlink"
	"shutil.py" -> "srcentry.stat"
	"shutil.py" -> "os.readlink"
	"shutil.py" -> "os.symlink"
	"shutil.py" -> copystat
	"shutil.py" -> "os.path.exists"
	"shutil.py" -> "srcentry.is_dir"
	"shutil.py" -> copytree
	"shutil.py" -> copy_function
	"shutil.py" -> "srcentry.is_dir"
	"shutil.py" -> copytree
	"shutil.py" -> copy_function
	"shutil.py" -> "errors.extend"
	"shutil.py" -> "errors.append"
	"shutil.py" -> str
	"shutil.py" -> copystat
	"shutil.py" -> getattr
	"shutil.py" -> "errors.append"
	"shutil.py" -> str
	"shutil.py" -> Error
	"shutil.py" -> "sys.audit"
	"shutil.py" -> "os.scandir"
	"shutil.py" -> list
	"shutil.py" -> _copytree
	"shutil.py" -> hasattr
	"shutil.py" -> "entry.stat"
	"shutil.py" -> "stat.S_ISDIR"
	"shutil.py" -> "os.lstat"
	"shutil.py" -> "stat.S_ISLNK"
	"shutil.py" -> "entry.is_dir"
	"shutil.py" -> "os.path.islink"
	"shutil.py" -> "os.scandir"
	"shutil.py" -> list
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> _rmtree_isdir
	"shutil.py" -> "entry.is_symlink"
	"shutil.py" -> OSError
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> _rmtree_unsafe
	"shutil.py" -> "os.unlink"
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "os.rmdir"
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "os.scandir"
	"shutil.py" -> list
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "entry.is_dir"
	"shutil.py" -> "entry.stat"
	"shutil.py" -> "stat.S_ISDIR"
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "os.open"
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "os.path.samestat"
	"shutil.py" -> "os.fstat"
	"shutil.py" -> _rmtree_safe_fd
	"shutil.py" -> "os.close"
	"shutil.py" -> "os.rmdir"
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> OSError
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "os.close"
	"shutil.py" -> "os.unlink"
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "sys.audit"
	"shutil.py" -> isinstance
	"shutil.py" -> "os.fsdecode"
	"shutil.py" -> "os.lstat"
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "os.open"
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "os.path.samestat"
	"shutil.py" -> "os.fstat"
	"shutil.py" -> _rmtree_safe_fd
	"shutil.py" -> "os.close"
	"shutil.py" -> "os.rmdir"
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> OSError
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> "os.close"
	"shutil.py" -> NotImplementedError
	"shutil.py" -> _rmtree_islink
	"shutil.py" -> OSError
	"shutil.py" -> onerror
	"shutil.py" -> "sys.exc_info"
	"shutil.py" -> _rmtree_unsafe
	"shutil.py" -> "os.fspath"
	"shutil.py" -> "os.path.basename"
	"shutil.py" -> "path.rstrip"
	"shutil.py" -> "sys.audit"
	"shutil.py" -> "os.path.isdir"
	"shutil.py" -> _samefile
	"shutil.py" -> "os.rename"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> _basename
	"shutil.py" -> "os.path.exists"
	"shutil.py" -> Error
	"shutil.py" -> "os.rename"
	"shutil.py" -> "os.path.islink"
	"shutil.py" -> "os.readlink"
	"shutil.py" -> "os.symlink"
	"shutil.py" -> "os.unlink"
	"shutil.py" -> "os.path.isdir"
	"shutil.py" -> _destinsrc
	"shutil.py" -> Error
	"shutil.py" -> _is_immutable
	"shutil.py" -> "os.access"
	"shutil.py" -> "os.listdir"
	"shutil.py" -> PermissionError
	"shutil.py" -> copytree
	"shutil.py" -> rmtree
	"shutil.py" -> copy_function
	"shutil.py" -> "os.unlink"
	"shutil.py" -> "os.path.abspath"
	"shutil.py" -> "os.path.abspath"
	"shutil.py" -> "src.endswith"
	"shutil.py" -> "dst.endswith"
	"shutil.py" -> "dst.startswith"
	"shutil.py" -> _stat
	"shutil.py" -> hasattr
	"shutil.py" -> getgrnam
	"shutil.py" -> getpwnam
	"shutil.py" -> ValueError
	"shutil.py" -> format
	"shutil.py" -> "os.path.dirname"
	"shutil.py" -> "os.path.exists"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "os.makedirs"
	"shutil.py" -> "logger.info"
	"shutil.py" -> _get_uid
	"shutil.py" -> _get_gid
	"shutil.py" -> "tarfile.open"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "tar.add"
	"shutil.py" -> "tar.close"
	"shutil.py" -> "os.path.abspath"
	"shutil.py" -> "os.path.dirname"
	"shutil.py" -> "os.path.exists"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "os.makedirs"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "zipfile.ZipFile"
	"shutil.py" -> "os.path.normpath"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "os.path.normpath"
	"shutil.py" -> "zf.write"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "os.walk"
	"shutil.py" -> "os.path.relpath"
	"shutil.py" -> "os.path.normpath"
	"shutil.py" -> sorted
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "zf.write"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "os.path.normpath"
	"shutil.py" -> "os.path.isfile"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "zf.write"
	"shutil.py" -> "logger.info"
	"shutil.py" -> "os.path.abspath"
	"shutil.py" -> "_ARCHIVE_FORMATS.items"
	"shutil.py" -> "formats.sort"
	"shutil.py" -> callable
	"shutil.py" -> TypeError
	"shutil.py" -> isinstance
	"shutil.py" -> TypeError
	"shutil.py" -> isinstance
	"shutil.py" -> len
	"shutil.py" -> TypeError
	"shutil.py" -> "sys.audit"
	"shutil.py" -> ValueError
	"shutil.py" -> "os.fspath"
	"shutil.py" -> "os.getcwd"
	"shutil.py" -> "logger.debug"
	"shutil.py" -> "os.path.abspath"
	"shutil.py" -> "os.chdir"
	"shutil.py" -> func
	"shutil.py" -> "logger.debug"
	"shutil.py" -> "os.chdir"
	"shutil.py" -> "_UNPACK_FORMATS.items"
	"shutil.py" -> "formats.sort"
	"shutil.py" -> "_UNPACK_FORMATS.items"
	"shutil.py" -> RegistryError
	"shutil.py" -> callable
	"shutil.py" -> TypeError
	"shutil.py" -> _check_unpack_options
	"shutil.py" -> "os.path.dirname"
	"shutil.py" -> "os.path.isdir"
	"shutil.py" -> "os.makedirs"
	"shutil.py" -> "zipfile.is_zipfile"
	"shutil.py" -> ReadError
	"shutil.py" -> "zipfile.ZipFile"
	"shutil.py" -> "zip.infolist"
	"shutil.py" -> "name.startswith"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> "name.split"
	"shutil.py" -> _ensure_directory
	"shutil.py" -> "name.endswith"
	"shutil.py" -> "zip.open"
	"shutil.py" -> open
	"shutil.py" -> copyfileobj
	"shutil.py" -> "zip.close"
	"shutil.py" -> "tarfile.open"
	"shutil.py" -> ReadError
	"shutil.py" -> "tarobj.extractall"
	"shutil.py" -> "tarobj.close"
	"shutil.py" -> "_UNPACK_FORMATS.items"
	"shutil.py" -> "filename.endswith"
	"shutil.py" -> "sys.audit"
	"shutil.py" -> "os.getcwd"
	"shutil.py" -> "os.fspath"
	"shutil.py" -> "os.fspath"
	"shutil.py" -> ValueError
	"shutil.py" -> format
	"shutil.py" -> func
	"shutil.py" -> dict
	"shutil.py" -> _find_unpack_format
	"shutil.py" -> ReadError
	"shutil.py" -> format
	"shutil.py" -> dict
	"shutil.py" -> func
	"shutil.py" -> hasattr
	"shutil.py" -> "__all__.append"
	"shutil.py" -> "collections.namedtuple"
	"shutil.py" -> "os.statvfs"
	"shutil.py" -> _ntuple_diskusage
	"shutil.py" -> "__all__.append"
	"shutil.py" -> "collections.namedtuple"
	"shutil.py" -> "nt._getdiskusage"
	"shutil.py" -> _ntuple_diskusage
	"shutil.py" -> "sys.audit"
	"shutil.py" -> ValueError
	"shutil.py" -> isinstance
	"shutil.py" -> _get_uid
	"shutil.py" -> LookupError
	"shutil.py" -> format
	"shutil.py" -> isinstance
	"shutil.py" -> _get_gid
	"shutil.py" -> LookupError
	"shutil.py" -> format
	"shutil.py" -> "os.chown"
	"shutil.py" -> int
	"shutil.py" -> int
	"shutil.py" -> "os.get_terminal_size"
	"shutil.py" -> "sys.__stdout__.fileno"
	"shutil.py" -> "os.terminal_size"
	"shutil.py" -> "os.terminal_size"
	"shutil.py" -> "os.path.exists"
	"shutil.py" -> "os.access"
	"shutil.py" -> "os.path.isdir"
	"shutil.py" -> "os.path.dirname"
	"shutil.py" -> _access_check
	"shutil.py" -> isinstance
	"shutil.py" -> "os.environ.get"
	"shutil.py" -> "os.confstr"
	"shutil.py" -> "os.fsencode"
	"shutil.py" -> "path.split"
	"shutil.py" -> "os.fsencode"
	"shutil.py" -> "os.fsdecode"
	"shutil.py" -> "path.split"
	"shutil.py" -> "os.fsencode"
	"shutil.py" -> "path.insert"
	"shutil.py" -> "os.getenv"
	"shutil.py" -> "pathext_source.split"
	"shutil.py" -> "os.fsencode"
	"shutil.py" -> any
	"shutil.py" -> endswith
	"shutil.py" -> "cmd.lower"
	"shutil.py" -> "ext.lower"
	"shutil.py" -> set
	"shutil.py" -> "os.path.normcase"
	"shutil.py" -> "seen.add"
	"shutil.py" -> "os.path.join"
	"shutil.py" -> _access_check
	"tarfile.py" -> "sys.getfilesystemencoding"
	"tarfile.py" -> ValueError
	"tarfile.py" -> "s.encode"
	"tarfile.py" -> len
	"tarfile.py" -> "s.find"
	"tarfile.py" -> "s.decode"
	"tarfile.py" -> range
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> nts
	"tarfile.py" -> int
	"tarfile.py" -> "s.strip"
	"tarfile.py" -> InvalidHeaderError
	"tarfile.py" -> int
	"tarfile.py" -> bytes
	"tarfile.py" -> bytearray
	"tarfile.py" -> bytearray
	"tarfile.py" -> range
	"tarfile.py" -> "s.insert"
	"tarfile.py" -> ValueError
	"tarfile.py" -> sum
	"tarfile.py" -> "struct.unpack_from"
	"tarfile.py" -> sum
	"tarfile.py" -> "struct.unpack_from"
	"tarfile.py" -> "shutil.copyfileobj"
	"tarfile.py" -> divmod
	"tarfile.py" -> range
	"tarfile.py" -> "src.read"
	"tarfile.py" -> len
	"tarfile.py" -> exception
	"tarfile.py" -> "dst.write"
	"tarfile.py" -> "src.read"
	"tarfile.py" -> len
	"tarfile.py" -> exception
	"tarfile.py" -> "dst.write"
	"tarfile.py" -> getattr
	"tarfile.py" -> decode
	"tarfile.py" -> "s.encode"
	"tarfile.py" -> print
	"tarfile.py" -> hasattr
	"tarfile.py" -> "os.open"
	"tarfile.py" -> "os.close"
	"tarfile.py" -> "os.read"
	"tarfile.py" -> "os.write"
	"tarfile.py" -> _LowLevelFile
	"tarfile.py" -> _StreamProxy
	"tarfile.py" -> "fileobj.getcomptype"
	"tarfile.py" -> CompressionError
	"tarfile.py" -> "zlib.crc32"
	"tarfile.py" -> "self._init_read_gz"
	"tarfile.py" -> "self._init_write_gz"
	"tarfile.py" -> CompressionError
	"tarfile.py" -> "bz2.BZ2Decompressor"
	"tarfile.py" -> "bz2.BZ2Compressor"
	"tarfile.py" -> CompressionError
	"tarfile.py" -> "lzma.LZMADecompressor"
	"tarfile.py" -> "lzma.LZMACompressor"
	"tarfile.py" -> CompressionError
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> hasattr
	"tarfile.py" -> "self.close"
	"tarfile.py" -> "self.zlib.compressobj"
	"tarfile.py" -> "struct.pack"
	"tarfile.py" -> int
	"tarfile.py" -> "time.time"
	"tarfile.py" -> "self.__write"
	"tarfile.py" -> "self.name.endswith"
	"tarfile.py" -> "os.path.basename"
	"tarfile.py" -> "self.__write"
	"tarfile.py" -> "self.name.encode"
	"tarfile.py" -> "self.zlib.crc32"
	"tarfile.py" -> len
	"tarfile.py" -> "self.cmp.compress"
	"tarfile.py" -> "self.__write"
	"tarfile.py" -> len
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "self.cmp.flush"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "struct.pack"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "struct.pack"
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> "self.zlib.decompressobj"
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> CompressionError
	"tarfile.py" -> ord
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> ord
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> ord
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> "self.read"
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> divmod
	"tarfile.py" -> range
	"tarfile.py" -> "self.read"
	"tarfile.py" -> "self.read"
	"tarfile.py" -> StreamError
	"tarfile.py" -> "self._read"
	"tarfile.py" -> len
	"tarfile.py" -> "self.__read"
	"tarfile.py" -> len
	"tarfile.py" -> "self.fileobj.read"
	"tarfile.py" -> "self.cmp.decompress"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "t.append"
	"tarfile.py" -> len
	"tarfile.py" -> join
	"tarfile.py" -> len
	"tarfile.py" -> "self.fileobj.read"
	"tarfile.py" -> "t.append"
	"tarfile.py" -> len
	"tarfile.py" -> join
	"tarfile.py" -> "self.fileobj.read"
	"tarfile.py" -> "self.buf.startswith"
	"tarfile.py" -> "self.buf.startswith"
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> getattr
	"tarfile.py" -> "self.map.append"
	"tarfile.py" -> "self.map.append"
	"tarfile.py" -> "self.map.append"
	"tarfile.py" -> "self.fileobj.seekable"
	"tarfile.py" -> min
	"tarfile.py" -> max
	"tarfile.py" -> max
	"tarfile.py" -> min
	"tarfile.py" -> max
	"tarfile.py" -> min
	"tarfile.py" -> ValueError
	"tarfile.py" -> min
	"tarfile.py" -> len
	"tarfile.py" -> min
	"tarfile.py" -> "self.fileobj.seek"
	"tarfile.py" -> "self.fileobj.read"
	"tarfile.py" -> len
	"tarfile.py" -> ReadError
	"tarfile.py" -> "self.read"
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> _FileInFile
	"tarfile.py" -> __init__
	"tarfile.py" -> super
	"tarfile.py" -> __init__
	"tarfile.py" -> super
	"tarfile.py" -> __init__
	"tarfile.py" -> super
	"tarfile.py" -> __init__
	"tarfile.py" -> super
	"tarfile.py" -> __init__
	"tarfile.py" -> super
	"tarfile.py" -> __init__
	"tarfile.py" -> super
	"tarfile.py" -> "os.path.realpath"
	"tarfile.py" -> "name.startswith"
	"tarfile.py" -> "member.path.lstrip"
	"tarfile.py" -> "os.path.isabs"
	"tarfile.py" -> AbsolutePathError
	"tarfile.py" -> "os.path.realpath"
	"tarfile.py" -> "os.path.join"
	"tarfile.py" -> "os.path.commonpath"
	"tarfile.py" -> OutsideDestinationError
	"tarfile.py" -> "member.isreg"
	"tarfile.py" -> "member.islnk"
	"tarfile.py" -> "member.isdir"
	"tarfile.py" -> "member.issym"
	"tarfile.py" -> SpecialFileError
	"tarfile.py" -> "member.islnk"
	"tarfile.py" -> "member.issym"
	"tarfile.py" -> "os.path.isabs"
	"tarfile.py" -> AbsoluteLinkError
	"tarfile.py" -> "os.path.realpath"
	"tarfile.py" -> "os.path.join"
	"tarfile.py" -> "os.path.commonpath"
	"tarfile.py" -> LinkOutsideDestinationError
	"tarfile.py" -> _get_filtered_attrs
	"tarfile.py" -> "member.replace"
	"tarfile.py" -> _get_filtered_attrs
	"tarfile.py" -> "member.replace"
	"tarfile.py" -> object
	"tarfile.py" -> dict
	"tarfile.py" -> id
	"tarfile.py" -> "copy.deepcopy"
	"tarfile.py" -> "copy.copy"
	"tarfile.py" -> endswith
	"tarfile.py" -> "self.get_info"
	"tarfile.py" -> "info.items"
	"tarfile.py" -> ValueError
	"tarfile.py" -> "self.create_ustar_header"
	"tarfile.py" -> "self.create_gnu_header"
	"tarfile.py" -> "self.create_pax_header"
	"tarfile.py" -> ValueError
	"tarfile.py" -> len
	"tarfile.py" -> encode
	"tarfile.py" -> ValueError
	"tarfile.py" -> len
	"tarfile.py" -> encode
	"tarfile.py" -> "self._posix_split_name"
	"tarfile.py" -> "self._create_header"
	"tarfile.py" -> len
	"tarfile.py" -> encode
	"tarfile.py" -> "self._create_gnu_long_header"
	"tarfile.py" -> len
	"tarfile.py" -> encode
	"tarfile.py" -> "self._create_gnu_long_header"
	"tarfile.py" -> "self._create_header"
	"tarfile.py" -> "self.pax_headers.copy"
	"tarfile.py" -> encode
	"tarfile.py" -> len
	"tarfile.py" -> isinstance
	"tarfile.py" -> round
	"tarfile.py" -> str
	"tarfile.py" -> "self._create_pax_generic_header"
	"tarfile.py" -> "self._create_header"
	"tarfile.py" -> "cls._create_pax_generic_header"
	"tarfile.py" -> "name.split"
	"tarfile.py" -> range
	"tarfile.py" -> len
	"tarfile.py" -> join
	"tarfile.py" -> join
	"tarfile.py" -> len
	"tarfile.py" -> "prefix.encode"
	"tarfile.py" -> len
	"tarfile.py" -> "name.encode"
	"tarfile.py" -> ValueError
	"tarfile.py" -> "info.get"
	"tarfile.py" -> itn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> itn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> stn
	"tarfile.py" -> stn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> ValueError
	"tarfile.py" -> stn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> itn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> itn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> itn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> itn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> itn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> stn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "info.get"
	"tarfile.py" -> stn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> stn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> stn
	"tarfile.py" -> "info.get"
	"tarfile.py" -> "struct.pack"
	"tarfile.py" -> join
	"tarfile.py" -> calc_chksums
	"tarfile.py" -> bytes
	"tarfile.py" -> divmod
	"tarfile.py" -> len
	"tarfile.py" -> "name.encode"
	"tarfile.py" -> len
	"tarfile.py" -> "cls._create_header"
	"tarfile.py" -> "cls._create_payload"
	"tarfile.py" -> "pax_headers.items"
	"tarfile.py" -> "value.encode"
	"tarfile.py" -> "pax_headers.items"
	"tarfile.py" -> "keyword.encode"
	"tarfile.py" -> "value.encode"
	"tarfile.py" -> "value.encode"
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> str
	"tarfile.py" -> bytes
	"tarfile.py" -> str
	"tarfile.py" -> len
	"tarfile.py" -> "cls._create_header"
	"tarfile.py" -> "cls._create_payload"
	"tarfile.py" -> len
	"tarfile.py" -> EmptyHeaderError
	"tarfile.py" -> len
	"tarfile.py" -> TruncatedHeaderError
	"tarfile.py" -> "buf.count"
	"tarfile.py" -> EOFHeaderError
	"tarfile.py" -> nti
	"tarfile.py" -> calc_chksums
	"tarfile.py" -> InvalidHeaderError
	"tarfile.py" -> cls
	"tarfile.py" -> nts
	"tarfile.py" -> nti
	"tarfile.py" -> nti
	"tarfile.py" -> nti
	"tarfile.py" -> nti
	"tarfile.py" -> nti
	"tarfile.py" -> nts
	"tarfile.py" -> nts
	"tarfile.py" -> nts
	"tarfile.py" -> nti
	"tarfile.py" -> nti
	"tarfile.py" -> nts
	"tarfile.py" -> "obj.name.endswith"
	"tarfile.py" -> range
	"tarfile.py" -> nti
	"tarfile.py" -> nti
	"tarfile.py" -> "structs.append"
	"tarfile.py" -> bool
	"tarfile.py" -> nti
	"tarfile.py" -> "obj.isdir"
	"tarfile.py" -> "obj.name.rstrip"
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> "cls.frombuf"
	"tarfile.py" -> "tarfile.fileobj.tell"
	"tarfile.py" -> "obj._proc_member"
	"tarfile.py" -> "self._proc_gnulong"
	"tarfile.py" -> "self._proc_sparse"
	"tarfile.py" -> "self._proc_pax"
	"tarfile.py" -> "self._proc_builtin"
	"tarfile.py" -> "tarfile.fileobj.tell"
	"tarfile.py" -> "self.isreg"
	"tarfile.py" -> "self._block"
	"tarfile.py" -> "self._apply_pax_info"
	"tarfile.py" -> "self.isdir"
	"tarfile.py" -> "self.name.rstrip"
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> "self._block"
	"tarfile.py" -> "self.fromtarfile"
	"tarfile.py" -> SubsequentHeaderError
	"tarfile.py" -> str
	"tarfile.py" -> nts
	"tarfile.py" -> nts
	"tarfile.py" -> "next.isdir"
	"tarfile.py" -> "next.name.removesuffix"
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> range
	"tarfile.py" -> nti
	"tarfile.py" -> nti
	"tarfile.py" -> "structs.append"
	"tarfile.py" -> bool
	"tarfile.py" -> "tarfile.fileobj.tell"
	"tarfile.py" -> "self._block"
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> "self._block"
	"tarfile.py" -> "tarfile.pax_headers.copy"
	"tarfile.py" -> "re.search"
	"tarfile.py" -> decode
	"tarfile.py" -> "match.group"
	"tarfile.py" -> "pax_headers.get"
	"tarfile.py" -> "re.compile"
	"tarfile.py" -> "regex.match"
	"tarfile.py" -> "match.groups"
	"tarfile.py" -> int
	"tarfile.py" -> InvalidHeaderError
	"tarfile.py" -> "match.end"
	"tarfile.py" -> "match.start"
	"tarfile.py" -> "self._decode_pax_field"
	"tarfile.py" -> "self._decode_pax_field"
	"tarfile.py" -> "self._decode_pax_field"
	"tarfile.py" -> "self.fromtarfile"
	"tarfile.py" -> SubsequentHeaderError
	"tarfile.py" -> str
	"tarfile.py" -> "self._proc_gnusparse_01"
	"tarfile.py" -> "self._proc_gnusparse_00"
	"tarfile.py" -> "pax_headers.get"
	"tarfile.py" -> "pax_headers.get"
	"tarfile.py" -> "self._proc_gnusparse_10"
	"tarfile.py" -> "next._apply_pax_info"
	"tarfile.py" -> "next.isreg"
	"tarfile.py" -> "next._block"
	"tarfile.py" -> "re.finditer"
	"tarfile.py" -> "offsets.append"
	"tarfile.py" -> int
	"tarfile.py" -> "match.group"
	"tarfile.py" -> "re.finditer"
	"tarfile.py" -> "numbytes.append"
	"tarfile.py" -> int
	"tarfile.py" -> "match.group"
	"tarfile.py" -> list
	"tarfile.py" -> zip
	"tarfile.py" -> int
	"tarfile.py" -> split
	"tarfile.py" -> list
	"tarfile.py" -> zip
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> "buf.split"
	"tarfile.py" -> int
	"tarfile.py" -> len
	"tarfile.py" -> "tarfile.fileobj.read"
	"tarfile.py" -> "buf.split"
	"tarfile.py" -> "sparse.append"
	"tarfile.py" -> int
	"tarfile.py" -> "tarfile.fileobj.tell"
	"tarfile.py" -> list
	"tarfile.py" -> zip
	"tarfile.py" -> "pax_headers.items"
	"tarfile.py" -> setattr
	"tarfile.py" -> setattr
	"tarfile.py" -> int
	"tarfile.py" -> setattr
	"tarfile.py" -> int
	"tarfile.py" -> <unknown_function>
	"tarfile.py" -> "value.rstrip"
	"tarfile.py" -> setattr
	"tarfile.py" -> "pax_headers.copy"
	"tarfile.py" -> "value.decode"
	"tarfile.py" -> "value.decode"
	"tarfile.py" -> divmod
	"tarfile.py" -> "self.isreg"
	"tarfile.py" -> ValueError
	"tarfile.py" -> "os.path.exists"
	"tarfile.py" -> bltn_open
	"tarfile.py" -> hasattr
	"tarfile.py" -> isinstance
	"tarfile.py" -> hasattr
	"tarfile.py" -> "os.path.abspath"
	"tarfile.py" -> "self.fileobj.tell"
	"tarfile.py" -> "self.next"
	"tarfile.py" -> "self.fileobj.seek"
	"tarfile.py" -> "self.tarinfo.fromtarfile"
	"tarfile.py" -> "self.members.append"
	"tarfile.py" -> "self.fileobj.seek"
	"tarfile.py" -> ReadError
	"tarfile.py" -> str
	"tarfile.py" -> "self.tarinfo.create_pax_global_header"
	"tarfile.py" -> "self.pax_headers.copy"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> len
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> ValueError
	"tarfile.py" -> sorted
	"tarfile.py" -> getattr
	"tarfile.py" -> "fileobj.tell"
	"tarfile.py" -> func
	"tarfile.py" -> "error_msgs.append"
	"tarfile.py" -> "fileobj.seek"
	"tarfile.py" -> join
	"tarfile.py" -> ReadError
	"tarfile.py" -> "mode.split"
	"tarfile.py" -> getattr
	"tarfile.py" -> CompressionError
	"tarfile.py" -> func
	"tarfile.py" -> "mode.split"
	"tarfile.py" -> ValueError
	"tarfile.py" -> _Stream
	"tarfile.py" -> cls
	"tarfile.py" -> "stream.close"
	"tarfile.py" -> "cls.taropen"
	"tarfile.py" -> ValueError
	"tarfile.py" -> ValueError
	"tarfile.py" -> cls
	"tarfile.py" -> ValueError
	"tarfile.py" -> CompressionError
	"tarfile.py" -> GzipFile
	"tarfile.py" -> ReadError
	"tarfile.py" -> "cls.taropen"
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> ValueError
	"tarfile.py" -> CompressionError
	"tarfile.py" -> BZ2File
	"tarfile.py" -> "cls.taropen"
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> ValueError
	"tarfile.py" -> CompressionError
	"tarfile.py" -> LZMAFile
	"tarfile.py" -> "cls.taropen"
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "fileobj.close"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> divmod
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> "self._getmember"
	"tarfile.py" -> "name.rstrip"
	"tarfile.py" -> KeyError
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "self._load"
	"tarfile.py" -> "self.getmembers"
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "os.path.splitdrive"
	"tarfile.py" -> "arcname.replace"
	"tarfile.py" -> "arcname.lstrip"
	"tarfile.py" -> "self.tarinfo"
	"tarfile.py" -> "os.lstat"
	"tarfile.py" -> "os.stat"
	"tarfile.py" -> "os.fstat"
	"tarfile.py" -> "fileobj.fileno"
	"tarfile.py" -> "stat.S_ISREG"
	"tarfile.py" -> "stat.S_ISDIR"
	"tarfile.py" -> "stat.S_ISFIFO"
	"tarfile.py" -> "stat.S_ISLNK"
	"tarfile.py" -> "os.readlink"
	"tarfile.py" -> "stat.S_ISCHR"
	"tarfile.py" -> "stat.S_ISBLK"
	"tarfile.py" -> "pwd.getpwuid"
	"tarfile.py" -> "grp.getgrgid"
	"tarfile.py" -> hasattr
	"tarfile.py" -> hasattr
	"tarfile.py" -> "os.major"
	"tarfile.py" -> "os.minor"
	"tarfile.py" -> "self._check"
	"tarfile.py" -> _safe_print
	"tarfile.py" -> _safe_print
	"tarfile.py" -> "stat.filemode"
	"tarfile.py" -> _safe_print
	"tarfile.py" -> "tarinfo.ischr"
	"tarfile.py" -> "tarinfo.isblk"
	"tarfile.py" -> _safe_print
	"tarfile.py" -> _safe_print
	"tarfile.py" -> _safe_print
	"tarfile.py" -> _safe_print
	"tarfile.py" -> "time.localtime"
	"tarfile.py" -> _safe_print
	"tarfile.py" -> "tarinfo.isdir"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> _safe_print
	"tarfile.py" -> "tarinfo.islnk"
	"tarfile.py" -> _safe_print
	"tarfile.py" -> print
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "os.path.abspath"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self.gettarinfo"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> filter
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "tarinfo.isreg"
	"tarfile.py" -> bltn_open
	"tarfile.py" -> "self.addfile"
	"tarfile.py" -> "tarinfo.isdir"
	"tarfile.py" -> "self.addfile"
	"tarfile.py" -> sorted
	"tarfile.py" -> "os.listdir"
	"tarfile.py" -> "self.add"
	"tarfile.py" -> "os.path.join"
	"tarfile.py" -> "os.path.join"
	"tarfile.py" -> "self.addfile"
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "copy.copy"
	"tarfile.py" -> "tarinfo.tobuf"
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> len
	"tarfile.py" -> copyfileobj
	"tarfile.py" -> divmod
	"tarfile.py" -> "self.fileobj.write"
	"tarfile.py" -> "self.members.append"
	"tarfile.py" -> isinstance
	"tarfile.py" -> TypeError
	"tarfile.py" -> callable
	"tarfile.py" -> ValueError
	"tarfile.py" -> "self._get_filter_function"
	"tarfile.py" -> "self._get_extract_tarinfo"
	"tarfile.py" -> "tarinfo.isdir"
	"tarfile.py" -> "directories.append"
	"tarfile.py" -> "self._extract_one"
	"tarfile.py" -> "tarinfo.isdir"
	"tarfile.py" -> "directories.sort"
	"tarfile.py" -> "os.path.join"
	"tarfile.py" -> "self.chown"
	"tarfile.py" -> "self.utime"
	"tarfile.py" -> "self.chmod"
	"tarfile.py" -> "self._handle_nonfatal_error"
	"tarfile.py" -> "self._get_filter_function"
	"tarfile.py" -> "self._get_extract_tarinfo"
	"tarfile.py" -> "self._extract_one"
	"tarfile.py" -> isinstance
	"tarfile.py" -> "self.getmember"
	"tarfile.py" -> filter_function
	"tarfile.py" -> "self._handle_fatal_error"
	"tarfile.py" -> "self._handle_nonfatal_error"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "tarinfo.islnk"
	"tarfile.py" -> "copy.copy"
	"tarfile.py" -> "os.path.join"
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "self._extract_member"
	"tarfile.py" -> "os.path.join"
	"tarfile.py" -> "self._handle_fatal_error"
	"tarfile.py" -> "self._handle_nonfatal_error"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> isinstance
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> type
	"tarfile.py" -> "self._check"
	"tarfile.py" -> isinstance
	"tarfile.py" -> "self.getmember"
	"tarfile.py" -> "tarinfo.isreg"
	"tarfile.py" -> "self.fileobject"
	"tarfile.py" -> "tarinfo.islnk"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> isinstance
	"tarfile.py" -> StreamError
	"tarfile.py" -> "self.extractfile"
	"tarfile.py" -> "self._find_link_target"
	"tarfile.py" -> "targetpath.rstrip"
	"tarfile.py" -> "targetpath.replace"
	"tarfile.py" -> "os.path.dirname"
	"tarfile.py" -> "os.path.exists"
	"tarfile.py" -> "os.makedirs"
	"tarfile.py" -> "tarinfo.islnk"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "tarinfo.isreg"
	"tarfile.py" -> "self.makefile"
	"tarfile.py" -> "tarinfo.isdir"
	"tarfile.py" -> "self.makedir"
	"tarfile.py" -> "tarinfo.isfifo"
	"tarfile.py" -> "self.makefifo"
	"tarfile.py" -> "tarinfo.ischr"
	"tarfile.py" -> "tarinfo.isblk"
	"tarfile.py" -> "self.makedev"
	"tarfile.py" -> "tarinfo.islnk"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> "self.makelink"
	"tarfile.py" -> "self.makeunknown"
	"tarfile.py" -> "self.makefile"
	"tarfile.py" -> "self.chown"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> "self.chmod"
	"tarfile.py" -> "self.utime"
	"tarfile.py" -> "os.mkdir"
	"tarfile.py" -> "os.mkdir"
	"tarfile.py" -> "source.seek"
	"tarfile.py" -> bltn_open
	"tarfile.py" -> "target.seek"
	"tarfile.py" -> copyfileobj
	"tarfile.py" -> "target.seek"
	"tarfile.py" -> "target.truncate"
	"tarfile.py" -> copyfileobj
	"tarfile.py" -> "self.makefile"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> hasattr
	"tarfile.py" -> "os.mkfifo"
	"tarfile.py" -> ExtractError
	"tarfile.py" -> hasattr
	"tarfile.py" -> hasattr
	"tarfile.py" -> ExtractError
	"tarfile.py" -> "tarinfo.isblk"
	"tarfile.py" -> "os.mknod"
	"tarfile.py" -> "os.makedev"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> "os.path.lexists"
	"tarfile.py" -> "os.unlink"
	"tarfile.py" -> "os.symlink"
	"tarfile.py" -> "os.path.exists"
	"tarfile.py" -> "os.link"
	"tarfile.py" -> "self._extract_member"
	"tarfile.py" -> "self._find_link_target"
	"tarfile.py" -> "self._extract_member"
	"tarfile.py" -> "self._find_link_target"
	"tarfile.py" -> ExtractError
	"tarfile.py" -> hasattr
	"tarfile.py" -> "os.geteuid"
	"tarfile.py" -> "grp.getgrnam"
	"tarfile.py" -> "pwd.getpwnam"
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> hasattr
	"tarfile.py" -> "os.lchown"
	"tarfile.py" -> "os.chown"
	"tarfile.py" -> ExtractError
	"tarfile.py" -> "os.chmod"
	"tarfile.py" -> ExtractError
	"tarfile.py" -> hasattr
	"tarfile.py" -> "os.utime"
	"tarfile.py" -> ExtractError
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "self.fileobj.tell"
	"tarfile.py" -> "self.fileobj.seek"
	"tarfile.py" -> "self.fileobj.read"
	"tarfile.py" -> ReadError
	"tarfile.py" -> "self.tarinfo.fromtarfile"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> "self._dbg"
	"tarfile.py" -> ReadError
	"tarfile.py" -> str
	"tarfile.py" -> ReadError
	"tarfile.py" -> ReadError
	"tarfile.py" -> str
	"tarfile.py" -> ReadError
	"tarfile.py" -> str
	"tarfile.py" -> isinstance
	"tarfile.py" -> ReadError
	"tarfile.py" -> "self.members.append"
	"tarfile.py" -> "self.getmembers"
	"tarfile.py" -> "members.index"
	"tarfile.py" -> "os.path.normpath"
	"tarfile.py" -> reversed
	"tarfile.py" -> "os.path.normpath"
	"tarfile.py" -> ValueError
	"tarfile.py" -> "self.next"
	"tarfile.py" -> OSError
	"tarfile.py" -> OSError
	"tarfile.py" -> "tarinfo.issym"
	"tarfile.py" -> join
	"tarfile.py" -> filter
	"tarfile.py" -> "os.path.dirname"
	"tarfile.py" -> "self._getmember"
	"tarfile.py" -> KeyError
	"tarfile.py" -> "self.next"
	"tarfile.py" -> len
	"tarfile.py" -> "self.next"
	"tarfile.py" -> print
	"tarfile.py" -> "self._check"
	"tarfile.py" -> "self.close"
	"tarfile.py" -> "self.fileobj.close"
	"tarfile.py" -> hasattr
	"tarfile.py" -> "name.tell"
	"tarfile.py" -> open
	"tarfile.py" -> "name.seek"
	"tarfile.py" -> open
	"tarfile.py" -> "t.close"
	"tarfile.py" -> "argparse.ArgumentParser"
	"tarfile.py" -> "parser.add_argument"
	"tarfile.py" -> "parser.add_argument"
	"tarfile.py" -> "parser.add_mutually_exclusive_group"
	"tarfile.py" -> "group.add_argument"
	"tarfile.py" -> "group.add_argument"
	"tarfile.py" -> "group.add_argument"
	"tarfile.py" -> "group.add_argument"
	"tarfile.py" -> "parser.parse_args"
	"tarfile.py" -> "parser.exit"
	"tarfile.py" -> is_tarfile
	"tarfile.py" -> open
	"tarfile.py" -> "tar.getmembers"
	"tarfile.py" -> print
	"tarfile.py" -> "tar.getmembers"
	"tarfile.py" -> print
	"tarfile.py" -> format
	"tarfile.py" -> "parser.exit"
	"tarfile.py" -> format
	"tarfile.py" -> is_tarfile
	"tarfile.py" -> "TarFile.open"
	"tarfile.py" -> "tf.list"
	"tarfile.py" -> "parser.exit"
	"tarfile.py" -> format
	"tarfile.py" -> len
	"tarfile.py" -> len
	"tarfile.py" -> "parser.exit"
	"tarfile.py" -> "parser.format_help"
	"tarfile.py" -> is_tarfile
	"tarfile.py" -> "TarFile.open"
	"tarfile.py" -> "tf.extractall"
	"tarfile.py" -> format
	"tarfile.py" -> format
	"tarfile.py" -> print
	"tarfile.py" -> "parser.exit"
	"tarfile.py" -> format
	"tarfile.py" -> "args.create.pop"
	"tarfile.py" -> "os.path.splitext"
	"tarfile.py" -> "TarFile.open"
	"tarfile.py" -> "tf.add"
	"tarfile.py" -> print
	"tarfile.py" -> format
	"tarfile.py" -> main
	"gzip.py" -> ValueError
	"gzip.py" -> ValueError
	"gzip.py" -> ValueError
	"gzip.py" -> ValueError
	"gzip.py" -> "mode.replace"
	"gzip.py" -> isinstance
	"gzip.py" -> GzipFile
	"gzip.py" -> hasattr
	"gzip.py" -> hasattr
	"gzip.py" -> GzipFile
	"gzip.py" -> TypeError
	"gzip.py" -> "io.text_encoding"
	"gzip.py" -> "io.TextIOWrapper"
	"gzip.py" -> "output.write"
	"gzip.py" -> "struct.pack"
	"gzip.py" -> len
	"gzip.py" -> "self.file.read"
	"gzip.py" -> "self.file.read"
	"gzip.py" -> len
	"gzip.py" -> len
	"gzip.py" -> "self.file.seek"
	"gzip.py" -> ValueError
	"gzip.py" -> format
	"gzip.py" -> "builtins.open"
	"gzip.py" -> getattr
	"gzip.py" -> isinstance
	"gzip.py" -> "os.fspath"
	"gzip.py" -> getattr
	"gzip.py" -> "mode.startswith"
	"gzip.py" -> _GzipReader
	"gzip.py" -> "io.BufferedReader"
	"gzip.py" -> "mode.startswith"
	"gzip.py" -> "warnings.warn"
	"gzip.py" -> "self._init_write"
	"gzip.py" -> "zlib.compressobj"
	"gzip.py" -> ValueError
	"gzip.py" -> format
	"gzip.py" -> "self._write_gzip_header"
	"gzip.py" -> "warnings.warn"
	"gzip.py" -> repr
	"gzip.py" -> hex
	"gzip.py" -> id
	"gzip.py" -> "zlib.crc32"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "os.path.basename"
	"gzip.py" -> isinstance
	"gzip.py" -> "fname.encode"
	"gzip.py" -> "fname.endswith"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> encode
	"gzip.py" -> chr
	"gzip.py" -> "time.time"
	"gzip.py" -> write32u
	"gzip.py" -> int
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> OSError
	"gzip.py" -> ValueError
	"gzip.py" -> isinstance
	"gzip.py" -> len
	"gzip.py" -> memoryview
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self.compress.compress"
	"gzip.py" -> "zlib.crc32"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> OSError
	"gzip.py" -> "self._buffer.read"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> OSError
	"gzip.py" -> "self._buffer.read1"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> OSError
	"gzip.py" -> "self._buffer.peek"
	"gzip.py" -> "fileobj.write"
	"gzip.py" -> "self.compress.flush"
	"gzip.py" -> write32u
	"gzip.py" -> write32u
	"gzip.py" -> "self._buffer.close"
	"gzip.py" -> "myfileobj.close"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> "self.fileobj.write"
	"gzip.py" -> "self.compress.flush"
	"gzip.py" -> "self.fileobj.flush"
	"gzip.py" -> "self.fileobj.fileno"
	"gzip.py" -> OSError
	"gzip.py" -> "self._buffer.seek"
	"gzip.py" -> ValueError
	"gzip.py" -> OSError
	"gzip.py" -> range
	"gzip.py" -> "self.write"
	"gzip.py" -> "self.write"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> "self._buffer.seek"
	"gzip.py" -> "self._check_not_closed"
	"gzip.py" -> "self._buffer.readline"
	"gzip.py" -> "fp.read"
	"gzip.py" -> len
	"gzip.py" -> "fp.read"
	"gzip.py" -> len
	"gzip.py" -> EOFError
	"gzip.py" -> "fp.read"
	"gzip.py" -> BadGzipFile
	"gzip.py" -> "struct.unpack"
	"gzip.py" -> _read_exact
	"gzip.py" -> BadGzipFile
	"gzip.py" -> "struct.unpack"
	"gzip.py" -> _read_exact
	"gzip.py" -> _read_exact
	"gzip.py" -> "fp.read"
	"gzip.py" -> "fp.read"
	"gzip.py" -> _read_exact
	"gzip.py" -> __init__
	"gzip.py" -> super
	"gzip.py" -> _PaddedFile
	"gzip.py" -> "zlib.crc32"
	"gzip.py" -> _read_gzip_header
	"gzip.py" -> "self.readall"
	"gzip.py" -> "self._read_eof"
	"gzip.py" -> "self._decomp_factory"
	"gzip.py" -> "self._init_read"
	"gzip.py" -> "self._read_gzip_header"
	"gzip.py" -> "self._fp.read"
	"gzip.py" -> "self._decompressor.decompress"
	"gzip.py" -> "self._fp.prepend"
	"gzip.py" -> "self._fp.prepend"
	"gzip.py" -> EOFError
	"gzip.py" -> "self._add_read_data"
	"gzip.py" -> len
	"gzip.py" -> "zlib.crc32"
	"gzip.py" -> len
	"gzip.py" -> "struct.unpack"
	"gzip.py" -> _read_exact
	"gzip.py" -> BadGzipFile
	"gzip.py" -> hex
	"gzip.py" -> hex
	"gzip.py" -> BadGzipFile
	"gzip.py" -> "self._fp.read"
	"gzip.py" -> "self._fp.prepend"
	"gzip.py" -> _rewind
	"gzip.py" -> super
	"gzip.py" -> "time.time"
	"gzip.py" -> "struct.pack"
	"gzip.py" -> int
	"gzip.py" -> "zlib.compress"
	"gzip.py" -> _create_simple_gzip_header
	"gzip.py" -> "struct.pack"
	"gzip.py" -> "zlib.crc32"
	"gzip.py" -> len
	"gzip.py" -> "zlib.compress"
	"gzip.py" -> "io.BytesIO"
	"gzip.py" -> _read_gzip_header
	"gzip.py" -> join
	"gzip.py" -> "zlib.decompressobj"
	"gzip.py" -> "do.decompress"
	"gzip.py" -> "fp.tell"
	"gzip.py" -> len
	"gzip.py" -> EOFError
	"gzip.py" -> "struct.unpack"
	"gzip.py" -> "zlib.crc32"
	"gzip.py" -> BadGzipFile
	"gzip.py" -> len
	"gzip.py" -> BadGzipFile
	"gzip.py" -> "decompressed_members.append"
	"gzip.py" -> lstrip
	"gzip.py" -> ArgumentParser
	"gzip.py" -> "parser.add_mutually_exclusive_group"
	"gzip.py" -> "group.add_argument"
	"gzip.py" -> "group.add_argument"
	"gzip.py" -> "group.add_argument"
	"gzip.py" -> "parser.add_argument"
	"gzip.py" -> "parser.parse_args"
	"gzip.py" -> GzipFile
	"gzip.py" -> "sys.exit"
	"gzip.py" -> open
	"gzip.py" -> "builtins.open"
	"gzip.py" -> GzipFile
	"gzip.py" -> "builtins.open"
	"gzip.py" -> open
	"gzip.py" -> "f.read"
	"gzip.py" -> "g.write"
	"gzip.py" -> "g.close"
	"gzip.py" -> "f.close"
	"gzip.py" -> main
	"lzma.py" -> ValueError
	"lzma.py" -> ValueError
	"lzma.py" -> LZMACompressor
	"lzma.py" -> ValueError
	"lzma.py" -> format
	"lzma.py" -> isinstance
	"lzma.py" -> "builtins.open"
	"lzma.py" -> hasattr
	"lzma.py" -> hasattr
	"lzma.py" -> TypeError
	"lzma.py" -> "_compression.DecompressReader"
	"lzma.py" -> "io.BufferedReader"
	"lzma.py" -> "self._buffer.close"
	"lzma.py" -> "self._fp.write"
	"lzma.py" -> "self._compressor.flush"
	"lzma.py" -> "self._fp.close"
	"lzma.py" -> "self._check_not_closed"
	"lzma.py" -> "self._fp.fileno"
	"lzma.py" -> "self.readable"
	"lzma.py" -> "self._buffer.seekable"
	"lzma.py" -> "self._check_not_closed"
	"lzma.py" -> "self._check_not_closed"
	"lzma.py" -> "self._check_can_read"
	"lzma.py" -> "self._buffer.peek"
	"lzma.py" -> "self._check_can_read"
	"lzma.py" -> "self._buffer.read"
	"lzma.py" -> "self._check_can_read"
	"lzma.py" -> "self._buffer.read1"
	"lzma.py" -> "self._check_can_read"
	"lzma.py" -> "self._buffer.readline"
	"lzma.py" -> "self._check_can_write"
	"lzma.py" -> isinstance
	"lzma.py" -> len
	"lzma.py" -> memoryview
	"lzma.py" -> "self._compressor.compress"
	"lzma.py" -> "self._fp.write"
	"lzma.py" -> "self._check_can_seek"
	"lzma.py" -> "self._buffer.seek"
	"lzma.py" -> "self._check_not_closed"
	"lzma.py" -> "self._buffer.tell"
	"lzma.py" -> ValueError
	"lzma.py" -> ValueError
	"lzma.py" -> ValueError
	"lzma.py" -> ValueError
	"lzma.py" -> "mode.replace"
	"lzma.py" -> LZMAFile
	"lzma.py" -> "io.text_encoding"
	"lzma.py" -> "io.TextIOWrapper"
	"lzma.py" -> LZMACompressor
	"lzma.py" -> "comp.compress"
	"lzma.py" -> "comp.flush"
	"lzma.py" -> LZMADecompressor
	"lzma.py" -> "decomp.decompress"
	"lzma.py" -> "results.append"
	"lzma.py" -> LZMAError
	"lzma.py" -> join
	"bz2.py" -> ValueError
	"bz2.py" -> BZ2Compressor
	"bz2.py" -> BZ2Compressor
	"bz2.py" -> BZ2Compressor
	"bz2.py" -> ValueError
	"bz2.py" -> isinstance
	"bz2.py" -> _builtin_open
	"bz2.py" -> hasattr
	"bz2.py" -> hasattr
	"bz2.py" -> TypeError
	"bz2.py" -> "_compression.DecompressReader"
	"bz2.py" -> "io.BufferedReader"
	"bz2.py" -> "self._buffer.close"
	"bz2.py" -> "self._fp.write"
	"bz2.py" -> "self._compressor.flush"
	"bz2.py" -> "self._fp.close"
	"bz2.py" -> "self._check_not_closed"
	"bz2.py" -> "self._fp.fileno"
	"bz2.py" -> "self.readable"
	"bz2.py" -> "self._buffer.seekable"
	"bz2.py" -> "self._check_not_closed"
	"bz2.py" -> "self._check_not_closed"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.peek"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.read"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.read1"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.readinto"
	"bz2.py" -> isinstance
	"bz2.py" -> hasattr
	"bz2.py" -> TypeError
	"bz2.py" -> "size.__index__"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.readline"
	"bz2.py" -> isinstance
	"bz2.py" -> hasattr
	"bz2.py" -> TypeError
	"bz2.py" -> "size.__index__"
	"bz2.py" -> "self._check_can_read"
	"bz2.py" -> "self._buffer.readlines"
	"bz2.py" -> "self._check_can_write"
	"bz2.py" -> isinstance
	"bz2.py" -> len
	"bz2.py" -> memoryview
	"bz2.py" -> "self._compressor.compress"
	"bz2.py" -> "self._fp.write"
	"bz2.py" -> "_compression.BaseStream.writelines"
	"bz2.py" -> "self._check_can_seek"
	"bz2.py" -> "self._buffer.seek"
	"bz2.py" -> "self._check_not_closed"
	"bz2.py" -> "self._buffer.tell"
	"bz2.py" -> ValueError
	"bz2.py" -> ValueError
	"bz2.py" -> ValueError
	"bz2.py" -> ValueError
	"bz2.py" -> "mode.replace"
	"bz2.py" -> BZ2File
	"bz2.py" -> "io.text_encoding"
	"bz2.py" -> "io.TextIOWrapper"
	"bz2.py" -> BZ2Compressor
	"bz2.py" -> "comp.compress"
	"bz2.py" -> "comp.flush"
	"bz2.py" -> BZ2Decompressor
	"bz2.py" -> "decomp.decompress"
	"bz2.py" -> "results.append"
	"bz2.py" -> ValueError
	"bz2.py" -> join
	"zipfile.py" -> "struct.calcsize"
	"zipfile.py" -> "struct.calcsize"
	"zipfile.py" -> "struct.calcsize"
	"zipfile.py" -> "struct.calcsize"
	"zipfile.py" -> "struct.calcsize"
	"zipfile.py" -> "struct.Struct"
	"zipfile.py" -> len
	"zipfile.py" -> unpack
	"zipfile.py" -> "buffer.append"
	"zipfile.py" -> len
	"zipfile.py" -> "buffer.append"
	"zipfile.py" -> join
	"zipfile.py" -> _EndRecData
	"zipfile.py" -> hasattr
	"zipfile.py" -> _check_zipfile
	"zipfile.py" -> open
	"zipfile.py" -> _check_zipfile
	"zipfile.py" -> "fpin.seek"
	"zipfile.py" -> "fpin.read"
	"zipfile.py" -> len
	"zipfile.py" -> "struct.unpack"
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> "fpin.seek"
	"zipfile.py" -> "fpin.read"
	"zipfile.py" -> len
	"zipfile.py" -> "struct.unpack"
	"zipfile.py" -> "fpin.seek"
	"zipfile.py" -> "fpin.tell"
	"zipfile.py" -> "fpin.seek"
	"zipfile.py" -> "fpin.read"
	"zipfile.py" -> len
	"zipfile.py" -> "struct.unpack"
	"zipfile.py" -> list
	"zipfile.py" -> "endrec.append"
	"zipfile.py" -> "endrec.append"
	"zipfile.py" -> _EndRecData64
	"zipfile.py" -> max
	"zipfile.py" -> "fpin.seek"
	"zipfile.py" -> "fpin.read"
	"zipfile.py" -> "data.rfind"
	"zipfile.py" -> len
	"zipfile.py" -> list
	"zipfile.py" -> "struct.unpack"
	"zipfile.py" -> "endrec.append"
	"zipfile.py" -> "endrec.append"
	"zipfile.py" -> _EndRecData64
	"zipfile.py" -> "filename.find"
	"zipfile.py" -> chr
	"zipfile.py" -> "filename.replace"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "compressor_names.get"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "stat.filemode"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "self.is_dir"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> join
	"zipfile.py" -> "struct.pack"
	"zipfile.py" -> "struct.calcsize"
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> "self._encodeFilenameFlags"
	"zipfile.py" -> "struct.pack"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self.filename.encode"
	"zipfile.py" -> "self.filename.encode"
	"zipfile.py" -> len
	"zipfile.py" -> unpack
	"zipfile.py" -> len
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> unpack
	"zipfile.py" -> unpack
	"zipfile.py" -> unpack
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> isinstance
	"zipfile.py" -> "os.fspath"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> "stat.S_ISDIR"
	"zipfile.py" -> "time.localtime"
	"zipfile.py" -> "os.path.normpath"
	"zipfile.py" -> "os.path.splitdrive"
	"zipfile.py" -> cls
	"zipfile.py" -> range
	"zipfile.py" -> list
	"zipfile.py" -> map
	"zipfile.py" -> range
	"zipfile.py" -> crc32
	"zipfile.py" -> crc32
	"zipfile.py" -> update_keys
	"zipfile.py" -> bytearray
	"zipfile.py" -> update_keys
	"zipfile.py" -> append
	"zipfile.py" -> bytes
	"zipfile.py" -> "lzma._encode_filter_properties"
	"zipfile.py" -> "lzma.LZMACompressor"
	"zipfile.py" -> "lzma._decode_filter_properties"
	"zipfile.py" -> "struct.pack"
	"zipfile.py" -> len
	"zipfile.py" -> "self._init"
	"zipfile.py" -> "self._comp.compress"
	"zipfile.py" -> "self._comp.compress"
	"zipfile.py" -> "self._init"
	"zipfile.py" -> "self._comp.flush"
	"zipfile.py" -> "self._comp.flush"
	"zipfile.py" -> len
	"zipfile.py" -> "struct.unpack"
	"zipfile.py" -> len
	"zipfile.py" -> "lzma.LZMADecompressor"
	"zipfile.py" -> "lzma._decode_filter_properties"
	"zipfile.py" -> "self._decomp.decompress"
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> "zlib.compressobj"
	"zipfile.py" -> "zlib.compressobj"
	"zipfile.py" -> "bz2.BZ2Compressor"
	"zipfile.py" -> "bz2.BZ2Compressor"
	"zipfile.py" -> LZMACompressor
	"zipfile.py" -> _check_compression
	"zipfile.py" -> "zlib.decompressobj"
	"zipfile.py" -> "bz2.BZ2Decompressor"
	"zipfile.py" -> LZMADecompressor
	"zipfile.py" -> "compressor_names.get"
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> "self._writing"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self._file.seek"
	"zipfile.py" -> "self._file.tell"
	"zipfile.py" -> "self._writing"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self._file.seek"
	"zipfile.py" -> "self._file.read"
	"zipfile.py" -> "self._file.tell"
	"zipfile.py" -> "self._close"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.flush"
	"zipfile.py" -> "self.fp.close"
	"zipfile.py" -> _get_decompressor
	"zipfile.py" -> hasattr
	"zipfile.py" -> crc32
	"zipfile.py" -> "fileobj.seekable"
	"zipfile.py" -> "fileobj.tell"
	"zipfile.py" -> "self._init_decrypter"
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> _ZipDecrypter
	"zipfile.py" -> "self._fileobj.read"
	"zipfile.py" -> "self._decrypter"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "compressor_names.get"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> join
	"zipfile.py" -> "self._readbuffer.find"
	"zipfile.py" -> "io.BufferedIOBase.readline"
	"zipfile.py" -> len
	"zipfile.py" -> "self.read"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self._read1"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self._read1"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> crc32
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> "self._read1"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self._read1"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self._read2"
	"zipfile.py" -> len
	"zipfile.py" -> "self._read2"
	"zipfile.py" -> max
	"zipfile.py" -> "self._decompressor.decompress"
	"zipfile.py" -> "self._decompressor.flush"
	"zipfile.py" -> "self._decompressor.decompress"
	"zipfile.py" -> len
	"zipfile.py" -> "self._update_crc"
	"zipfile.py" -> max
	"zipfile.py" -> min
	"zipfile.py" -> "self._fileobj.read"
	"zipfile.py" -> len
	"zipfile.py" -> "self._decrypter"
	"zipfile.py" -> "self._fileobj.close"
	"zipfile.py" -> close
	"zipfile.py" -> super
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> "io.UnsupportedOperation"
	"zipfile.py" -> "self.tell"
	"zipfile.py" -> ValueError
	"zipfile.py" -> len
	"zipfile.py" -> "self._fileobj.seek"
	"zipfile.py" -> _get_decompressor
	"zipfile.py" -> "self._init_decrypter"
	"zipfile.py" -> min
	"zipfile.py" -> "self.read"
	"zipfile.py" -> "self.tell"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "io.UnsupportedOperation"
	"zipfile.py" -> len
	"zipfile.py" -> _get_compressor
	"zipfile.py" -> ValueError
	"zipfile.py" -> isinstance
	"zipfile.py" -> len
	"zipfile.py" -> memoryview
	"zipfile.py" -> crc32
	"zipfile.py" -> "self._compressor.compress"
	"zipfile.py" -> len
	"zipfile.py" -> "self._fileobj.write"
	"zipfile.py" -> close
	"zipfile.py" -> super
	"zipfile.py" -> "self._compressor.flush"
	"zipfile.py" -> len
	"zipfile.py" -> "self._fileobj.write"
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> "self._fileobj.write"
	"zipfile.py" -> "struct.pack"
	"zipfile.py" -> "self._fileobj.tell"
	"zipfile.py" -> "self._fileobj.tell"
	"zipfile.py" -> "self._fileobj.seek"
	"zipfile.py" -> "self._fileobj.write"
	"zipfile.py" -> "self._zinfo.FileHeader"
	"zipfile.py" -> "self._fileobj.seek"
	"zipfile.py" -> "self._zipfile.filelist.append"
	"zipfile.py" -> ValueError
	"zipfile.py" -> _check_compression
	"zipfile.py" -> ValueError
	"zipfile.py" -> isinstance
	"zipfile.py" -> "os.fspath"
	"zipfile.py" -> isinstance
	"zipfile.py" -> "io.open"
	"zipfile.py" -> getattr
	"zipfile.py" -> "threading.RLock"
	"zipfile.py" -> "self._RealGetContents"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> _Tellable
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self._RealGetContents"
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self._fpclose"
	"zipfile.py" -> "self.close"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> "result.append"
	"zipfile.py" -> join
	"zipfile.py" -> _EndRecData
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> print
	"zipfile.py" -> print
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> "fp.seek"
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> "io.BytesIO"
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> len
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> "struct.unpack"
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> print
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> "filename.decode"
	"zipfile.py" -> "filename.decode"
	"zipfile.py" -> ZipInfo
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> "x._decodeExtra"
	"zipfile.py" -> "self.filelist.append"
	"zipfile.py" -> print
	"zipfile.py" -> print
	"zipfile.py" -> print
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "f.read"
	"zipfile.py" -> "self.NameToInfo.get"
	"zipfile.py" -> KeyError
	"zipfile.py" -> isinstance
	"zipfile.py" -> TypeError
	"zipfile.py" -> type
	"zipfile.py" -> isinstance
	"zipfile.py" -> TypeError
	"zipfile.py" -> type
	"zipfile.py" -> len
	"zipfile.py" -> "warnings.warn"
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "fp.read"
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> isinstance
	"zipfile.py" -> ZipInfo
	"zipfile.py" -> "self.getinfo"
	"zipfile.py" -> "self._open_to_write"
	"zipfile.py" -> ValueError
	"zipfile.py" -> _SharedFile
	"zipfile.py" -> "zef_file.read"
	"zipfile.py" -> len
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> "struct.unpack"
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> "zef_file.read"
	"zipfile.py" -> "zef_file.read"
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> NotImplementedError
	"zipfile.py" -> "fname.decode"
	"zipfile.py" -> "fname.decode"
	"zipfile.py" -> BadZipFile
	"zipfile.py" -> isinstance
	"zipfile.py" -> TypeError
	"zipfile.py" -> type
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> ZipExtFile
	"zipfile.py" -> "zef_file.close"
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> LargeZipFile
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> "self._writecheck"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "zinfo.FileHeader"
	"zipfile.py" -> _ZipWriteFile
	"zipfile.py" -> "os.getcwd"
	"zipfile.py" -> "os.fspath"
	"zipfile.py" -> "self._extract_member"
	"zipfile.py" -> "self.namelist"
	"zipfile.py" -> "os.getcwd"
	"zipfile.py" -> "os.fspath"
	"zipfile.py" -> "self._extract_member"
	"zipfile.py" -> "str.maketrans"
	"zipfile.py" -> len
	"zipfile.py" -> "arcname.translate"
	"zipfile.py" -> "x.rstrip"
	"zipfile.py" -> "arcname.split"
	"zipfile.py" -> "pathsep.join"
	"zipfile.py" -> isinstance
	"zipfile.py" -> "self.getinfo"
	"zipfile.py" -> "member.filename.replace"
	"zipfile.py" -> "arcname.replace"
	"zipfile.py" -> "os.path.splitdrive"
	"zipfile.py" -> "os.path.sep.join"
	"zipfile.py" -> "arcname.split"
	"zipfile.py" -> "self._sanitize_windows_name"
	"zipfile.py" -> "os.path.join"
	"zipfile.py" -> "os.path.normpath"
	"zipfile.py" -> "os.path.dirname"
	"zipfile.py" -> "os.path.exists"
	"zipfile.py" -> "os.makedirs"
	"zipfile.py" -> "member.is_dir"
	"zipfile.py" -> "os.path.isdir"
	"zipfile.py" -> "os.mkdir"
	"zipfile.py" -> "self.open"
	"zipfile.py" -> open
	"zipfile.py" -> "shutil.copyfileobj"
	"zipfile.py" -> "warnings.warn"
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> _check_compression
	"zipfile.py" -> len
	"zipfile.py" -> LargeZipFile
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> "ZipInfo.from_file"
	"zipfile.py" -> "zinfo.is_dir"
	"zipfile.py" -> "self.mkdir"
	"zipfile.py" -> open
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "shutil.copyfileobj"
	"zipfile.py" -> isinstance
	"zipfile.py" -> "data.encode"
	"zipfile.py" -> isinstance
	"zipfile.py" -> ZipInfo
	"zipfile.py" -> "time.localtime"
	"zipfile.py" -> "time.time"
	"zipfile.py" -> ValueError
	"zipfile.py" -> ValueError
	"zipfile.py" -> len
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "dest.write"
	"zipfile.py" -> isinstance
	"zipfile.py" -> "zinfo.is_dir"
	"zipfile.py" -> ValueError
	"zipfile.py" -> isinstance
	"zipfile.py" -> "directory_name.endswith"
	"zipfile.py" -> ZipInfo
	"zipfile.py" -> TypeError
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> "self._writecheck"
	"zipfile.py" -> "self.filelist.append"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "zinfo.FileHeader"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> "self.close"
	"zipfile.py" -> ValueError
	"zipfile.py" -> "self.fp.seek"
	"zipfile.py" -> "self._write_end_record"
	"zipfile.py" -> "self._fpclose"
	"zipfile.py" -> "extra.append"
	"zipfile.py" -> "extra.append"
	"zipfile.py" -> "extra.append"
	"zipfile.py" -> _strip_extra
	"zipfile.py" -> "struct.pack"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> max
	"zipfile.py" -> "zinfo._encodeFilenameFlags"
	"zipfile.py" -> "struct.pack"
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> len
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.tell"
	"zipfile.py" -> len
	"zipfile.py" -> LargeZipFile
	"zipfile.py" -> "struct.pack"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "struct.pack"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> min
	"zipfile.py" -> min
	"zipfile.py" -> min
	"zipfile.py" -> "struct.pack"
	"zipfile.py" -> len
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.write"
	"zipfile.py" -> "self.fp.truncate"
	"zipfile.py" -> "self.fp.flush"
	"zipfile.py" -> "fp.close"
	"zipfile.py" -> "ZipFile.__init__"
	"zipfile.py" -> "os.fspath"
	"zipfile.py" -> filterfunc
	"zipfile.py" -> "os.path.isdir"
	"zipfile.py" -> print
	"zipfile.py" -> "os.path.split"
	"zipfile.py" -> "os.path.isdir"
	"zipfile.py" -> "os.path.join"
	"zipfile.py" -> "os.path.isfile"
	"zipfile.py" -> print
	"zipfile.py" -> "self._get_codename"
	"zipfile.py" -> print
	"zipfile.py" -> "self.write"
	"zipfile.py" -> sorted
	"zipfile.py" -> "os.listdir"
	"zipfile.py" -> "dirlist.remove"
	"zipfile.py" -> "os.path.join"
	"zipfile.py" -> "os.path.splitext"
	"zipfile.py" -> "os.path.isdir"
	"zipfile.py" -> "os.path.isfile"
	"zipfile.py" -> "os.path.join"
	"zipfile.py" -> "self.writepy"
	"zipfile.py" -> filterfunc
	"zipfile.py" -> print
	"zipfile.py" -> "self._get_codename"
	"zipfile.py" -> print
	"zipfile.py" -> "self.write"
	"zipfile.py" -> print
	"zipfile.py" -> sorted
	"zipfile.py" -> "os.listdir"
	"zipfile.py" -> "os.path.join"
	"zipfile.py" -> "os.path.splitext"
	"zipfile.py" -> filterfunc
	"zipfile.py" -> print
	"zipfile.py" -> "self._get_codename"
	"zipfile.py" -> print
	"zipfile.py" -> "self.write"
	"zipfile.py" -> RuntimeError
	"zipfile.py" -> "self._get_codename"
	"zipfile.py" -> print
	"zipfile.py" -> "self.write"
	"zipfile.py" -> print
	"zipfile.py" -> "py_compile.compile"
	"zipfile.py" -> print
	"zipfile.py" -> "importlib.util.cache_from_source"
	"zipfile.py" -> "importlib.util.cache_from_source"
	"zipfile.py" -> "importlib.util.cache_from_source"
	"zipfile.py" -> "os.path.isfile"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> "os.path.isfile"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> "os.path.isfile"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> "os.path.isfile"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> _compile
	"zipfile.py" -> format
	"zipfile.py" -> ValueError
	"zipfile.py" -> "os.path.isfile"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> "os.stat"
	"zipfile.py" -> _compile
	"zipfile.py" -> "os.path.split"
	"zipfile.py" -> "itertools.islice"
	"zipfile.py" -> _ancestry
	"zipfile.py" -> "path.rstrip"
	"zipfile.py" -> "posixpath.split"
	"zipfile.py" -> "itertools.filterfalse"
	"zipfile.py" -> set
	"zipfile.py" -> "itertools.chain.from_iterable"
	"zipfile.py" -> map
	"zipfile.py" -> _dedupe
	"zipfile.py" -> _difference
	"zipfile.py" -> namelist
	"zipfile.py" -> super
	"zipfile.py" -> list
	"zipfile.py" -> "self._implied_dirs"
	"zipfile.py" -> set
	"zipfile.py" -> "self.namelist"
	"zipfile.py" -> "self._name_set"
	"zipfile.py" -> getinfo
	"zipfile.py" -> super
	"zipfile.py" -> "name.endswith"
	"zipfile.py" -> "self._name_set"
	"zipfile.py" -> ZipInfo
	"zipfile.py" -> isinstance
	"zipfile.py" -> isinstance
	"zipfile.py" -> cls
	"zipfile.py" -> "contextlib.suppress"
	"zipfile.py" -> namelist
	"zipfile.py" -> super
	"zipfile.py" -> "contextlib.suppress"
	"zipfile.py" -> _name_set
	"zipfile.py" -> super
	"zipfile.py" -> "io.text_encoding"
	"zipfile.py" -> "FastLookup.make"
	"zipfile.py" -> "self.is_dir"
	"zipfile.py" -> IsADirectoryError
	"zipfile.py" -> "self.exists"
	"zipfile.py" -> FileNotFoundError
	"zipfile.py" -> "self.root.open"
	"zipfile.py" -> ValueError
	"zipfile.py" -> _extract_text_encoding
	"zipfile.py" -> "io.TextIOWrapper"
	"zipfile.py" -> "pathlib.Path"
	"zipfile.py" -> "pathlib.Path"
	"zipfile.py" -> "pathlib.Path"
	"zipfile.py" -> "pathlib.Path"
	"zipfile.py" -> joinpath
	"zipfile.py" -> "pathlib.Path"
	"zipfile.py" -> _extract_text_encoding
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "strm.read"
	"zipfile.py" -> "self.open"
	"zipfile.py" -> "strm.read"
	"zipfile.py" -> "posixpath.dirname"
	"zipfile.py" -> "path.at.rstrip"
	"zipfile.py" -> "self.at.rstrip"
	"zipfile.py" -> "self.__class__"
	"zipfile.py" -> "self.at.endswith"
	"zipfile.py" -> "self.exists"
	"zipfile.py" -> "self.is_dir"
	"zipfile.py" -> "self.root._name_set"
	"zipfile.py" -> "self.is_dir"
	"zipfile.py" -> ValueError
	"zipfile.py" -> map
	"zipfile.py" -> "self.root.namelist"
	"zipfile.py" -> filter
	"zipfile.py" -> "posixpath.join"
	"zipfile.py" -> "self.__repr.format"
	"zipfile.py" -> "posixpath.join"
	"zipfile.py" -> "self._next"
	"zipfile.py" -> "self.root.resolve_dir"
	"zipfile.py" -> "posixpath.dirname"
	"zipfile.py" -> "self.at.rstrip"
	"zipfile.py" -> "self._next"
	"zipfile.py" -> "argparse.ArgumentParser"
	"zipfile.py" -> "parser.add_mutually_exclusive_group"
	"zipfile.py" -> "group.add_argument"
	"zipfile.py" -> "group.add_argument"
	"zipfile.py" -> "group.add_argument"
	"zipfile.py" -> "group.add_argument"
	"zipfile.py" -> "parser.add_argument"
	"zipfile.py" -> "parser.parse_args"
	"zipfile.py" -> ZipFile
	"zipfile.py" -> "zf.testzip"
	"zipfile.py" -> print
	"zipfile.py" -> format
	"zipfile.py" -> print
	"zipfile.py" -> ZipFile
	"zipfile.py" -> "zf.printdir"
	"zipfile.py" -> ZipFile
	"zipfile.py" -> "zf.extractall"
	"zipfile.py" -> print
	"zipfile.py" -> "sys.exit"
	"zipfile.py" -> "args.create.pop"
	"zipfile.py" -> "os.path.isfile"
	"zipfile.py" -> "zf.write"
	"zipfile.py" -> "os.path.isdir"
	"zipfile.py" -> "zf.write"
	"zipfile.py" -> sorted
	"zipfile.py" -> "os.listdir"
	"zipfile.py" -> addToZip
	"zipfile.py" -> "os.path.join"
	"zipfile.py" -> "os.path.join"
	"zipfile.py" -> ZipFile
	"zipfile.py" -> "os.path.basename"
	"zipfile.py" -> "os.path.basename"
	"zipfile.py" -> "os.path.dirname"
	"zipfile.py" -> addToZip
	"zipfile.py" -> main
	"threading.py" -> "__all__.append"
	"threading.py" -> _PyRLock
	"threading.py" -> _CRLock
	"threading.py" -> _allocate_lock
	"threading.py" -> "self._block.locked"
	"threading.py" -> hex
	"threading.py" -> id
	"threading.py" -> "self._block._at_fork_reinit"
	"threading.py" -> get_ident
	"threading.py" -> "self._block.acquire"
	"threading.py" -> get_ident
	"threading.py" -> RuntimeError
	"threading.py" -> "self._block.release"
	"threading.py" -> "self.release"
	"threading.py" -> "self._block.acquire"
	"threading.py" -> RuntimeError
	"threading.py" -> "self._block.release"
	"threading.py" -> get_ident
	"threading.py" -> RLock
	"threading.py" -> _deque
	"threading.py" -> "self._lock._at_fork_reinit"
	"threading.py" -> "self._waiters.clear"
	"threading.py" -> "self._lock.__enter__"
	"threading.py" -> "self._lock.__exit__"
	"threading.py" -> len
	"threading.py" -> "self._lock.release"
	"threading.py" -> "self._lock.acquire"
	"threading.py" -> "self._lock.acquire"
	"threading.py" -> "self._lock.release"
	"threading.py" -> "self._is_owned"
	"threading.py" -> RuntimeError
	"threading.py" -> _allocate_lock
	"threading.py" -> "waiter.acquire"
	"threading.py" -> "self._waiters.append"
	"threading.py" -> "self._release_save"
	"threading.py" -> "waiter.acquire"
	"threading.py" -> "waiter.acquire"
	"threading.py" -> "waiter.acquire"
	"threading.py" -> "self._acquire_restore"
	"threading.py" -> "self._waiters.remove"
	"threading.py" -> predicate
	"threading.py" -> _time
	"threading.py" -> _time
	"threading.py" -> "self.wait"
	"threading.py" -> predicate
	"threading.py" -> "self._is_owned"
	"threading.py" -> RuntimeError
	"threading.py" -> "waiter.release"
	"threading.py" -> "waiters.remove"
	"threading.py" -> "self.notify"
	"threading.py" -> len
	"threading.py" -> "warnings.warn"
	"threading.py" -> "self.notify_all"
	"threading.py" -> ValueError
	"threading.py" -> Condition
	"threading.py" -> Lock
	"threading.py" -> id
	"threading.py" -> ValueError
	"threading.py" -> _time
	"threading.py" -> _time
	"threading.py" -> "self._cond.wait"
	"threading.py" -> ValueError
	"threading.py" -> range
	"threading.py" -> "self._cond.notify"
	"threading.py" -> "self.release"
	"threading.py" -> "Semaphore.__init__"
	"threading.py" -> id
	"threading.py" -> ValueError
	"threading.py" -> ValueError
	"threading.py" -> range
	"threading.py" -> "self._cond.notify"
	"threading.py" -> Condition
	"threading.py" -> Lock
	"threading.py" -> id
	"threading.py" -> "self._cond._at_fork_reinit"
	"threading.py" -> "warnings.warn"
	"threading.py" -> "self.is_set"
	"threading.py" -> "self._cond.notify_all"
	"threading.py" -> "self._cond.wait"
	"threading.py" -> Condition
	"threading.py" -> Lock
	"threading.py" -> id
	"threading.py" -> id
	"threading.py" -> "self._enter"
	"threading.py" -> "self._release"
	"threading.py" -> "self._wait"
	"threading.py" -> "self._exit"
	"threading.py" -> "self._cond.wait"
	"threading.py" -> "self._action"
	"threading.py" -> "self._cond.notify_all"
	"threading.py" -> "self._break"
	"threading.py" -> "self._cond.wait_for"
	"threading.py" -> "self._break"
	"threading.py" -> "self._cond.notify_all"
	"threading.py" -> "self._cond.notify_all"
	"threading.py" -> "self._break"
	"threading.py" -> "self._cond.notify_all"
	"threading.py" -> _count
	"threading.py" -> _counter
	"threading.py" -> RLock
	"threading.py" -> WeakSet
	"threading.py" -> _allocate_lock
	"threading.py" -> set
	"threading.py" -> "lock.locked"
	"threading.py" -> "_shutdown_locks.difference_update"
	"threading.py" -> str
	"threading.py" -> _newname
	"threading.py" -> current_thread
	"threading.py" -> Event
	"threading.py" -> _make_invoke_excepthook
	"threading.py" -> "_dangling.add"
	"threading.py" -> "self._started._at_fork_reinit"
	"threading.py" -> "self._tstate_lock._at_fork_reinit"
	"threading.py" -> "self._tstate_lock.acquire"
	"threading.py" -> "self._started.is_set"
	"threading.py" -> "self.is_alive"
	"threading.py" -> RuntimeError
	"threading.py" -> "self._started.is_set"
	"threading.py" -> RuntimeError
	"threading.py" -> _start_new_thread
	"threading.py" -> "self._started.wait"
	"threading.py" -> "self._target"
	"threading.py" -> "self._bootstrap_inner"
	"threading.py" -> get_ident
	"threading.py" -> get_native_id
	"threading.py" -> _set_sentinel
	"threading.py" -> "self._tstate_lock.acquire"
	"threading.py" -> _maintain_shutdown_locks
	"threading.py" -> "_shutdown_locks.add"
	"threading.py" -> "self._set_ident"
	"threading.py" -> "self._set_tstate_lock"
	"threading.py" -> "self._set_native_id"
	"threading.py" -> "self._started.set"
	"threading.py" -> "_sys.settrace"
	"threading.py" -> "_sys.setprofile"
	"threading.py" -> "self.run"
	"threading.py" -> "self._invoke_excepthook"
	"threading.py" -> "self._delete"
	"threading.py" -> "lock.locked"
	"threading.py" -> _maintain_shutdown_locks
	"threading.py" -> get_ident
	"threading.py" -> RuntimeError
	"threading.py" -> "self._started.is_set"
	"threading.py" -> RuntimeError
	"threading.py" -> current_thread
	"threading.py" -> RuntimeError
	"threading.py" -> "self._wait_for_tstate_lock"
	"threading.py" -> "self._wait_for_tstate_lock"
	"threading.py" -> max
	"threading.py" -> "lock.acquire"
	"threading.py" -> "lock.release"
	"threading.py" -> "self._stop"
	"threading.py" -> "lock.locked"
	"threading.py" -> "lock.release"
	"threading.py" -> "self._stop"
	"threading.py" -> str
	"threading.py" -> "self._started.is_set"
	"threading.py" -> "self._wait_for_tstate_lock"
	"threading.py" -> RuntimeError
	"threading.py" -> "self._started.is_set"
	"threading.py" -> RuntimeError
	"threading.py" -> "warnings.warn"
	"threading.py" -> "warnings.warn"
	"threading.py" -> "warnings.warn"
	"threading.py" -> "warnings.warn"
	"threading.py" -> namedtuple
	"threading.py" -> _ExceptHookArgs
	"threading.py" -> get_ident
	"threading.py" -> print
	"threading.py" -> _print_exception
	"threading.py" -> "stderr.flush"
	"threading.py" -> RuntimeError
	"threading.py" -> RuntimeError
	"threading.py" -> ExceptHookArgs
	"threading.py" -> sys_exc_info
	"threading.py" -> hook
	"threading.py" -> local_print
	"threading.py" -> sys_excepthook
	"threading.py" -> sys_exc_info
	"threading.py" -> "Thread.__init__"
	"threading.py" -> Event
	"threading.py" -> "self.finished.set"
	"threading.py" -> "self.finished.wait"
	"threading.py" -> "self.finished.is_set"
	"threading.py" -> "self.function"
	"threading.py" -> "self.finished.set"
	"threading.py" -> "Thread.__init__"
	"threading.py" -> "self._set_tstate_lock"
	"threading.py" -> "self._started.set"
	"threading.py" -> "self._set_ident"
	"threading.py" -> "self._set_native_id"
	"threading.py" -> "Thread.__init__"
	"threading.py" -> _newname
	"threading.py" -> "self._started.set"
	"threading.py" -> "self._set_ident"
	"threading.py" -> "self._set_native_id"
	"threading.py" -> "self._started.is_set"
	"threading.py" -> get_ident
	"threading.py" -> _DummyThread
	"threading.py" -> "warnings.warn"
	"threading.py" -> current_thread
	"threading.py" -> len
	"threading.py" -> len
	"threading.py" -> "warnings.warn"
	"threading.py" -> active_count
	"threading.py" -> list
	"threading.py" -> "_active.values"
	"threading.py" -> list
	"threading.py" -> "_limbo.values"
	"threading.py" -> list
	"threading.py" -> "_active.values"
	"threading.py" -> list
	"threading.py" -> "_limbo.values"
	"threading.py" -> RuntimeError
	"threading.py" -> "functools.partial"
	"threading.py" -> "_threading_atexits.append"
	"threading.py" -> _MainThread
	"threading.py" -> reversed
	"threading.py" -> atexit_call
	"threading.py" -> get_ident
	"threading.py" -> "tlock.locked"
	"threading.py" -> "tlock.release"
	"threading.py" -> "_main_thread._stop"
	"threading.py" -> list
	"threading.py" -> "_shutdown_locks.clear"
	"threading.py" -> "lock.acquire"
	"threading.py" -> "lock.release"
	"threading.py" -> RLock
	"threading.py" -> get_ident
	"threading.py" -> _MainThread
	"threading.py" -> _allocate_lock
	"threading.py" -> set
	"threading.py" -> set
	"threading.py" -> _enumerate
	"threading.py" -> "threads.update"
	"threading.py" -> "thread._reset_internal_locks"
	"threading.py" -> get_ident
	"threading.py" -> "thread._reset_internal_locks"
	"threading.py" -> "thread._stop"
	"threading.py" -> "_limbo.clear"
	"threading.py" -> "_active.clear"
	"threading.py" -> "_active.update"
	"threading.py" -> len
	"threading.py" -> hasattr
	"threading.py" -> "_os.register_at_fork"
	"py_compile.py" -> join
	"py_compile.py" -> "traceback.format_exception_only"
	"py_compile.py" -> "tbtext.replace"
	"py_compile.py" -> "Exception.__init__"
	"py_compile.py" -> "os.environ.get"
	"py_compile.py" -> _get_default_invalidation_mode
	"py_compile.py" -> "importlib.util.cache_from_source"
	"py_compile.py" -> "importlib.util.cache_from_source"
	"py_compile.py" -> "os.path.islink"
	"py_compile.py" -> FileExistsError
	"py_compile.py" -> "msg.format"
	"py_compile.py" -> "os.path.exists"
	"py_compile.py" -> "os.path.isfile"
	"py_compile.py" -> FileExistsError
	"py_compile.py" -> "msg.format"
	"py_compile.py" -> "importlib.machinery.SourceFileLoader"
	"py_compile.py" -> "loader.get_data"
	"py_compile.py" -> "loader.source_to_code"
	"py_compile.py" -> PyCompileError
	"py_compile.py" -> "sys.stderr.write"
	"py_compile.py" -> "os.path.dirname"
	"py_compile.py" -> "os.makedirs"
	"py_compile.py" -> "loader.path_stats"
	"py_compile.py" -> "importlib._bootstrap_external._code_to_timestamp_pyc"
	"py_compile.py" -> "importlib.util.source_hash"
	"py_compile.py" -> "importlib._bootstrap_external._code_to_hash_pyc"
	"py_compile.py" -> "importlib._bootstrap_external._calc_mode"
	"py_compile.py" -> "importlib._bootstrap_external._write_atomic"
	"py_compile.py" -> "argparse.ArgumentParser"
	"py_compile.py" -> "parser.add_argument"
	"py_compile.py" -> "parser.add_argument"
	"py_compile.py" -> "parser.parse_args"
	"py_compile.py" -> "filename.rstrip"
	"py_compile.py" -> "sys.stdin.readlines"
	"py_compile.py" -> compile
	"py_compile.py" -> "parser.exit"
	"py_compile.py" -> "parser.exit"
	"py_compile.py" -> "parser.exit"
	"py_compile.py" -> "parser.exit"
	"py_compile.py" -> str
	"py_compile.py" -> main
	"subprocess.py" -> "__all__.extend"
	"subprocess.py" -> "signal.Signals"
	"subprocess.py" -> "self.lpAttributeList.copy"
	"subprocess.py" -> list
	"subprocess.py" -> STARTUPINFO
	"subprocess.py" -> CloseHandle
	"subprocess.py" -> int
	"subprocess.py" -> ValueError
	"subprocess.py" -> int
	"subprocess.py" -> getattr
	"subprocess.py" -> hasattr
	"subprocess.py" -> "inst._internal_poll"
	"subprocess.py" -> "_active.remove"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> _optim_args_from_interpreter_flags
	"subprocess.py" -> "flag_opt_map.items"
	"subprocess.py" -> getattr
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> getattr
	"subprocess.py" -> "warnopts.remove"
	"subprocess.py" -> "warnopts.remove"
	"subprocess.py" -> "warnopts.remove"
	"subprocess.py" -> "args.append"
	"subprocess.py" -> "args.extend"
	"subprocess.py" -> "args.extend"
	"subprocess.py" -> "sys._getframe"
	"subprocess.py" -> "warnings.warn"
	"subprocess.py" -> "locale.getencoding"
	"subprocess.py" -> Popen
	"subprocess.py" -> "p.wait"
	"subprocess.py" -> "p.kill"
	"subprocess.py" -> call
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> CalledProcessError
	"subprocess.py" -> ValueError
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> run
	"subprocess.py" -> format
	"subprocess.py" -> format
	"subprocess.py" -> "args.append"
	"subprocess.py" -> format
	"subprocess.py" -> "args.append"
	"subprocess.py" -> format
	"subprocess.py" -> format
	"subprocess.py" -> type
	"subprocess.py" -> join
	"subprocess.py" -> classmethod
	"subprocess.py" -> CalledProcessError
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> ValueError
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> "kwargs.get"
	"subprocess.py" -> ValueError
	"subprocess.py" -> Popen
	"subprocess.py" -> "process.communicate"
	"subprocess.py" -> "process.kill"
	"subprocess.py" -> "process.communicate"
	"subprocess.py" -> "process.wait"
	"subprocess.py" -> "process.kill"
	"subprocess.py" -> "process.poll"
	"subprocess.py" -> CalledProcessError
	"subprocess.py" -> CompletedProcess
	"subprocess.py" -> map
	"subprocess.py" -> "result.append"
	"subprocess.py" -> "result.append"
	"subprocess.py" -> "bs_buf.append"
	"subprocess.py" -> "result.append"
	"subprocess.py" -> len
	"subprocess.py" -> "result.append"
	"subprocess.py" -> "result.extend"
	"subprocess.py" -> "result.append"
	"subprocess.py" -> "result.extend"
	"subprocess.py" -> "result.extend"
	"subprocess.py" -> "result.append"
	"subprocess.py" -> join
	"subprocess.py" -> check_output
	"subprocess.py" -> getstatusoutput
	"subprocess.py" -> hasattr
	"subprocess.py" -> "os.confstr"
	"subprocess.py" -> "ver.split"
	"subprocess.py" -> len
	"subprocess.py" -> tuple
	"subprocess.py" -> map
	"subprocess.py" -> split
	"subprocess.py" -> _use_posix_spawn
	"subprocess.py" -> OSError
	"subprocess.py" -> _cleanup
	"subprocess.py" -> "threading.Lock"
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> ValueError
	"subprocess.py" -> "warnings.warn"
	"subprocess.py" -> ValueError
	"subprocess.py" -> ValueError
	"subprocess.py" -> bool
	"subprocess.py" -> bool
	"subprocess.py" -> SubprocessError
	"subprocess.py" -> _text_encoding
	"subprocess.py" -> hasattr
	"subprocess.py" -> ValueError
	"subprocess.py" -> isinstance
	"subprocess.py" -> ValueError
	"subprocess.py" -> "grp.getgrnam"
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> format
	"subprocess.py" -> type
	"subprocess.py" -> ValueError
	"subprocess.py" -> hasattr
	"subprocess.py" -> ValueError
	"subprocess.py" -> isinstance
	"subprocess.py" -> ValueError
	"subprocess.py" -> isinstance
	"subprocess.py" -> ValueError
	"subprocess.py" -> "gids.append"
	"subprocess.py" -> "grp.getgrnam"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "gids.append"
	"subprocess.py" -> TypeError
	"subprocess.py" -> format
	"subprocess.py" -> type
	"subprocess.py" -> ValueError
	"subprocess.py" -> hasattr
	"subprocess.py" -> ValueError
	"subprocess.py" -> isinstance
	"subprocess.py" -> ValueError
	"subprocess.py" -> "pwd.getpwnam"
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> ValueError
	"subprocess.py" -> "self._get_handles"
	"subprocess.py" -> "msvcrt.open_osfhandle"
	"subprocess.py" -> "p2cwrite.Detach"
	"subprocess.py" -> "msvcrt.open_osfhandle"
	"subprocess.py" -> "c2pread.Detach"
	"subprocess.py" -> "msvcrt.open_osfhandle"
	"subprocess.py" -> "errread.Detach"
	"subprocess.py" -> "io.open"
	"subprocess.py" -> "io.TextIOWrapper"
	"subprocess.py" -> "io.open"
	"subprocess.py" -> "io.TextIOWrapper"
	"subprocess.py" -> "io.open"
	"subprocess.py" -> "io.TextIOWrapper"
	"subprocess.py" -> "self._execute_child"
	"subprocess.py" -> filter
	"subprocess.py" -> "f.close"
	"subprocess.py" -> "to_close.append"
	"subprocess.py" -> "to_close.append"
	"subprocess.py" -> "to_close.append"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "to_close.append"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "fd.Close"
	"subprocess.py" -> "os.close"
	"subprocess.py" -> len
	"subprocess.py" -> classmethod
	"subprocess.py" -> bool
	"subprocess.py" -> "data.decode"
	"subprocess.py" -> replace
	"subprocess.py" -> "data.replace"
	"subprocess.py" -> "self.stdout.close"
	"subprocess.py" -> "self.stderr.close"
	"subprocess.py" -> "self.stdin.close"
	"subprocess.py" -> "self._wait"
	"subprocess.py" -> "self.wait"
	"subprocess.py" -> _warn
	"subprocess.py" -> "self._internal_poll"
	"subprocess.py" -> "_active.append"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "os.open"
	"subprocess.py" -> "self.stdin.write"
	"subprocess.py" -> "self.stdin.close"
	"subprocess.py" -> ValueError
	"subprocess.py" -> count
	"subprocess.py" -> "self._stdin_write"
	"subprocess.py" -> "self.stdout.read"
	"subprocess.py" -> "self.stdout.close"
	"subprocess.py" -> "self.stderr.read"
	"subprocess.py" -> "self.stderr.close"
	"subprocess.py" -> "self.wait"
	"subprocess.py" -> _time
	"subprocess.py" -> "self._communicate"
	"subprocess.py" -> min
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self._wait"
	"subprocess.py" -> "self.wait"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self._internal_poll"
	"subprocess.py" -> _time
	"subprocess.py" -> _time
	"subprocess.py" -> TimeoutExpired
	"subprocess.py" -> join
	"subprocess.py" -> join
	"subprocess.py" -> _time
	"subprocess.py" -> "self._wait"
	"subprocess.py" -> min
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self._wait"
	"subprocess.py" -> getattr
	"subprocess.py" -> "contextlib.ExitStack"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> "stack.callback"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "to_close.append"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "fd.Close"
	"subprocess.py" -> "os.close"
	"subprocess.py" -> "self._on_error_fd_closer"
	"subprocess.py" -> "_winapi.GetStdHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.append"
	"subprocess.py" -> "_winapi.CloseHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "stdin.fileno"
	"subprocess.py" -> "self._make_inheritable"
	"subprocess.py" -> "_winapi.GetStdHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.append"
	"subprocess.py" -> "_winapi.CloseHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "stdout.fileno"
	"subprocess.py" -> "self._make_inheritable"
	"subprocess.py" -> "_winapi.GetStdHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.append"
	"subprocess.py" -> "_winapi.CloseHandle"
	"subprocess.py" -> "_winapi.CreatePipe"
	"subprocess.py" -> Handle
	"subprocess.py" -> Handle
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"subprocess.py" -> "stderr.fileno"
	"subprocess.py" -> "self._make_inheritable"
	"subprocess.py" -> "_winapi.DuplicateHandle"
	"subprocess.py" -> "_winapi.GetCurrentProcess"
	"subprocess.py" -> "_winapi.GetCurrentProcess"
	"subprocess.py" -> Handle
	"subprocess.py" -> list
	"subprocess.py" -> "_winapi.GetFileType"
	"subprocess.py" -> isinstance
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> list2cmdline
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> list2cmdline
	"subprocess.py" -> list2cmdline
	"subprocess.py" -> "os.fsdecode"
	"subprocess.py" -> STARTUPINFO
	"subprocess.py" -> "startupinfo.copy"
	"subprocess.py" -> bool
	"subprocess.py" -> list
	"subprocess.py" -> "attribute_list.get"
	"subprocess.py" -> int
	"subprocess.py" -> int
	"subprocess.py" -> int
	"subprocess.py" -> "self._filter_handle_list"
	"subprocess.py" -> "warnings.warn"
	"subprocess.py" -> "os.environ.get"
	"subprocess.py" -> "os.environ.get"
	"subprocess.py" -> "os.path.join"
	"subprocess.py" -> "os.path.isabs"
	"subprocess.py" -> FileNotFoundError
	"subprocess.py" -> "os.path.isabs"
	"subprocess.py" -> format
	"subprocess.py" -> "os.fsdecode"
	"subprocess.py" -> "sys.audit"
	"subprocess.py" -> "_winapi.CreateProcess"
	"subprocess.py" -> int
	"subprocess.py" -> "self._close_pipe_fds"
	"subprocess.py" -> Handle
	"subprocess.py" -> "_winapi.CloseHandle"
	"subprocess.py" -> _WaitForSingleObject
	"subprocess.py" -> _GetExitCodeProcess
	"subprocess.py" -> int
	"subprocess.py" -> "_winapi.WaitForSingleObject"
	"subprocess.py" -> TimeoutExpired
	"subprocess.py" -> "_winapi.GetExitCodeProcess"
	"subprocess.py" -> "buffer.append"
	"subprocess.py" -> "fh.read"
	"subprocess.py" -> "fh.close"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "threading.Thread"
	"subprocess.py" -> "self.stdout_thread.start"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "threading.Thread"
	"subprocess.py" -> "self.stderr_thread.start"
	"subprocess.py" -> "self._stdin_write"
	"subprocess.py" -> "self.stdout_thread.join"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self.stdout_thread.is_alive"
	"subprocess.py" -> TimeoutExpired
	"subprocess.py" -> "self.stderr_thread.join"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self.stderr_thread.is_alive"
	"subprocess.py" -> TimeoutExpired
	"subprocess.py" -> "self.stdout.close"
	"subprocess.py" -> "self.stderr.close"
	"subprocess.py" -> "self.terminate"
	"subprocess.py" -> "os.kill"
	"subprocess.py" -> "os.kill"
	"subprocess.py" -> ValueError
	"subprocess.py" -> format
	"subprocess.py" -> "_winapi.TerminateProcess"
	"subprocess.py" -> "_winapi.GetExitCodeProcess"
	"subprocess.py" -> "self._on_error_fd_closer"
	"subprocess.py" -> "os.pipe"
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "fcntl.fcntl"
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "stdin.fileno"
	"subprocess.py" -> "os.pipe"
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "fcntl.fcntl"
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "stdout.fileno"
	"subprocess.py" -> "os.pipe"
	"subprocess.py" -> "err_close_fds.extend"
	"subprocess.py" -> hasattr
	"subprocess.py" -> "fcntl.fcntl"
	"subprocess.py" -> "sys.__stdout__.fileno"
	"subprocess.py" -> "self._get_devnull"
	"subprocess.py" -> isinstance
	"subprocess.py" -> "stderr.fileno"
	"subprocess.py" -> getattr
	"subprocess.py" -> "sigset.append"
	"subprocess.py" -> "file_actions.append"
	"subprocess.py" -> "file_actions.append"
	"subprocess.py" -> "os.posix_spawn"
	"subprocess.py" -> "self._close_pipe_fds"
	"subprocess.py" -> isinstance
	"subprocess.py" -> isinstance
	"subprocess.py" -> TypeError
	"subprocess.py" -> list
	"subprocess.py" -> hasattr
	"subprocess.py" -> "sys.audit"
	"subprocess.py" -> "os.path.dirname"
	"subprocess.py" -> "self._posix_spawn"
	"subprocess.py" -> "os.pipe"
	"subprocess.py" -> "low_fds_to_close.append"
	"subprocess.py" -> "os.dup"
	"subprocess.py" -> "os.close"
	"subprocess.py" -> "env.items"
	"subprocess.py" -> "os.fsencode"
	"subprocess.py" -> ValueError
	"subprocess.py" -> "env_list.append"
	"subprocess.py" -> "os.fsencode"
	"subprocess.py" -> "os.fsencode"
	"subprocess.py" -> "os.path.dirname"
	"subprocess.py" -> tuple
	"subprocess.py" -> "os.path.join"
	"subprocess.py" -> "os.fsencode"
	"subprocess.py" -> "os.get_exec_path"
	"subprocess.py" -> set
	"subprocess.py" -> "fds_to_keep.add"
	"subprocess.py" -> _fork_exec
	"subprocess.py" -> tuple
	"subprocess.py" -> sorted
	"subprocess.py" -> map
	"subprocess.py" -> "os.close"
	"subprocess.py" -> "self._close_pipe_fds"
	"subprocess.py" -> bytearray
	"subprocess.py" -> "os.read"
	"subprocess.py" -> len
	"subprocess.py" -> "os.close"
	"subprocess.py" -> "os.waitpid"
	"subprocess.py" -> "self._handle_exitstatus"
	"subprocess.py" -> "errpipe_data.split"
	"subprocess.py" -> "err_msg.decode"
	"subprocess.py" -> format
	"subprocess.py" -> bytes
	"subprocess.py" -> getattr
	"subprocess.py" -> "exception_name.decode"
	"subprocess.py" -> issubclass
	"subprocess.py" -> int
	"subprocess.py" -> "os.strerror"
	"subprocess.py" -> child_exception_type
	"subprocess.py" -> child_exception_type
	"subprocess.py" -> _WIFSTOPPED
	"subprocess.py" -> _WSTOPSIG
	"subprocess.py" -> _waitstatus_to_exitcode
	"subprocess.py" -> "self._waitpid_lock.acquire"
	"subprocess.py" -> _waitpid
	"subprocess.py" -> "self._handle_exitstatus"
	"subprocess.py" -> "self._waitpid_lock.release"
	"subprocess.py" -> "os.waitpid"
	"subprocess.py" -> _time
	"subprocess.py" -> "self._waitpid_lock.acquire"
	"subprocess.py" -> "self._try_wait"
	"subprocess.py" -> "self._handle_exitstatus"
	"subprocess.py" -> "self._waitpid_lock.release"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> TimeoutExpired
	"subprocess.py" -> min
	"subprocess.py" -> "time.sleep"
	"subprocess.py" -> "self._try_wait"
	"subprocess.py" -> "self._handle_exitstatus"
	"subprocess.py" -> "self.stdin.flush"
	"subprocess.py" -> "self.stdin.close"
	"subprocess.py" -> "self._save_input"
	"subprocess.py" -> memoryview
	"subprocess.py" -> _PopenSelector
	"subprocess.py" -> "selector.register"
	"subprocess.py" -> "selector.register"
	"subprocess.py" -> "selector.register"
	"subprocess.py" -> "selector.get_map"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> "self._check_timeout"
	"subprocess.py" -> RuntimeError
	"subprocess.py" -> "selector.select"
	"subprocess.py" -> "self._check_timeout"
	"subprocess.py" -> "os.write"
	"subprocess.py" -> "selector.unregister"
	"subprocess.py" -> "key.fileobj.close"
	"subprocess.py" -> len
	"subprocess.py" -> "selector.unregister"
	"subprocess.py" -> "key.fileobj.close"
	"subprocess.py" -> "os.read"
	"subprocess.py" -> "selector.unregister"
	"subprocess.py" -> "key.fileobj.close"
	"subprocess.py" -> append
	"subprocess.py" -> "self.wait"
	"subprocess.py" -> "self._remaining_time"
	"subprocess.py" -> join
	"subprocess.py" -> join
	"subprocess.py" -> "self._translate_newlines"
	"subprocess.py" -> "self._translate_newlines"
	"subprocess.py" -> "self._input.encode"
	"subprocess.py" -> "self.poll"
	"subprocess.py" -> "os.kill"
	"subprocess.py" -> "self.send_signal"
	"subprocess.py" -> "self.send_signal"
	"signal.py" -> globals
	"signal.py" -> "_IntEnum._convert_"
	"signal.py" -> "name.isupper"
	"signal.py" -> "name.startswith"
	"signal.py" -> "name.startswith"
	"signal.py" -> "name.startswith"
	"signal.py" -> "_IntEnum._convert_"
	"signal.py" -> "_IntEnum._convert_"
	"signal.py" -> enum_klass
	"signal.py" -> int
	"signal.py" -> "_signal.signal"
	"signal.py" -> _enum_to_int
	"signal.py" -> _enum_to_int
	"signal.py" -> _int_to_enum
	"signal.py" -> _wraps
	"signal.py" -> "_signal.getsignal"
	"signal.py" -> _int_to_enum
	"signal.py" -> _wraps
	"signal.py" -> "_signal.pthread_sigmask"
	"signal.py" -> set
	"signal.py" -> _int_to_enum
	"signal.py" -> _wraps
	"signal.py" -> _int_to_enum
	"signal.py" -> "_signal.sigpending"
	"signal.py" -> _wraps
	"signal.py" -> "_signal.sigwait"
	"signal.py" -> _int_to_enum
	"signal.py" -> _wraps
	"signal.py" -> _int_to_enum
	"signal.py" -> "_signal.valid_signals"
	"signal.py" -> _wraps
	"hashlib.py" -> set
	"hashlib.py" -> set
	"hashlib.py" -> "cache.get"
	"hashlib.py" -> "cache.get"
	"hashlib.py" -> ValueError
	"hashlib.py" -> __get_builtin_constructor
	"hashlib.py" -> getattr
	"hashlib.py" -> f
	"hashlib.py" -> __get_builtin_constructor
	"hashlib.py" -> <unknown_function>
	"hashlib.py" -> __get_builtin_constructor
	"hashlib.py" -> <unknown_function>
	"hashlib.py" -> __get_builtin_constructor
	"hashlib.py" -> "_hashlib.new"
	"hashlib.py" -> <unknown_function>
	"hashlib.py" -> __get_builtin_constructor
	"hashlib.py" -> "algorithms_available.union"
	"hashlib.py" -> bytes
	"hashlib.py" -> range
	"hashlib.py" -> bytes
	"hashlib.py" -> range
	"hashlib.py" -> _warn
	"hashlib.py" -> isinstance
	"hashlib.py" -> TypeError
	"hashlib.py" -> isinstance
	"hashlib.py" -> bytes
	"hashlib.py" -> memoryview
	"hashlib.py" -> isinstance
	"hashlib.py" -> bytes
	"hashlib.py" -> memoryview
	"hashlib.py" -> new
	"hashlib.py" -> new
	"hashlib.py" -> getattr
	"hashlib.py" -> len
	"hashlib.py" -> digest
	"hashlib.py" -> new
	"hashlib.py" -> len
	"hashlib.py" -> "inner.update"
	"hashlib.py" -> "password.translate"
	"hashlib.py" -> "outer.update"
	"hashlib.py" -> "password.translate"
	"hashlib.py" -> "inner.copy"
	"hashlib.py" -> "outer.copy"
	"hashlib.py" -> "icpy.update"
	"hashlib.py" -> "ocpy.update"
	"hashlib.py" -> "icpy.digest"
	"hashlib.py" -> "ocpy.digest"
	"hashlib.py" -> ValueError
	"hashlib.py" -> ValueError
	"hashlib.py" -> len
	"hashlib.py" -> prf
	"hashlib.py" -> "loop.to_bytes"
	"hashlib.py" -> from_bytes
	"hashlib.py" -> range
	"hashlib.py" -> prf
	"hashlib.py" -> from_bytes
	"hashlib.py" -> "rkey.to_bytes"
	"hashlib.py" -> isinstance
	"hashlib.py" -> new
	"hashlib.py" -> digest
	"hashlib.py" -> hasattr
	"hashlib.py" -> "digestobj.update"
	"hashlib.py" -> "fileobj.getbuffer"
	"hashlib.py" -> hasattr
	"hashlib.py" -> hasattr
	"hashlib.py" -> "fileobj.readable"
	"hashlib.py" -> ValueError
	"hashlib.py" -> bytearray
	"hashlib.py" -> memoryview
	"hashlib.py" -> "fileobj.readinto"
	"hashlib.py" -> "digestobj.update"
	"hashlib.py" -> globals
	"hashlib.py" -> __get_hash
	"hashlib.py" -> "logging.exception"
	"__init__.py" -> "time.time"
	"__init__.py" -> "_nameToLevel.copy"
	"__init__.py" -> "_levelToName.get"
	"__init__.py" -> "_nameToLevel.get"
	"__init__.py" -> _acquireLock
	"__init__.py" -> _releaseLock
	"__init__.py" -> hasattr
	"__init__.py" -> "sys._getframe"
	"__init__.py" -> "sys.exc_info"
	"__init__.py" -> "os.path.normcase"
	"__init__.py" -> "os.path.normcase"
	"__init__.py" -> isinstance
	"__init__.py" -> str
	"__init__.py" -> ValueError
	"__init__.py" -> TypeError
	"__init__.py" -> "threading.RLock"
	"__init__.py" -> "_lock.acquire"
	"__init__.py" -> "_lock.release"
	"__init__.py" -> hasattr
	"__init__.py" -> "weakref.WeakSet"
	"__init__.py" -> _acquireLock
	"__init__.py" -> "_at_fork_reinit_lock_weakset.add"
	"__init__.py" -> _releaseLock
	"__init__.py" -> "handler._at_fork_reinit"
	"__init__.py" -> "_lock._at_fork_reinit"
	"__init__.py" -> "os.register_at_fork"
	"__init__.py" -> "time.time"
	"__init__.py" -> len
	"__init__.py" -> isinstance
	"__init__.py" -> getLevelName
	"__init__.py" -> "os.path.basename"
	"__init__.py" -> "os.path.splitext"
	"__init__.py" -> int
	"__init__.py" -> int
	"__init__.py" -> "threading.get_ident"
	"__init__.py" -> "threading.current_thread"
	"__init__.py" -> "sys.modules.get"
	"__init__.py" -> "mp.current_process"
	"__init__.py" -> hasattr
	"__init__.py" -> "os.getpid"
	"__init__.py" -> str
	"__init__.py" -> _logRecordFactory
	"__init__.py" -> "rv.__dict__.update"
	"__init__.py" -> StrFormatter
	"__init__.py" -> "re.compile"
	"__init__.py" -> "self._fmt.find"
	"__init__.py" -> "self.validation_pattern.search"
	"__init__.py" -> ValueError
	"__init__.py" -> "self._format"
	"__init__.py" -> ValueError
	"__init__.py" -> "re.compile"
	"__init__.py" -> "re.compile"
	"__init__.py" -> "self._fmt.format"
	"__init__.py" -> set
	"__init__.py" -> "_str_formatter.parse"
	"__init__.py" -> "self.field_spec.match"
	"__init__.py" -> ValueError
	"__init__.py" -> "fields.add"
	"__init__.py" -> ValueError
	"__init__.py" -> "self.fmt_spec.match"
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> __init__
	"__init__.py" -> super
	"__init__.py" -> Template
	"__init__.py" -> "fmt.find"
	"__init__.py" -> "fmt.find"
	"__init__.py" -> set
	"__init__.py" -> "pattern.finditer"
	"__init__.py" -> "m.groupdict"
	"__init__.py" -> "fields.add"
	"__init__.py" -> "fields.add"
	"__init__.py" -> "m.group"
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> "self._tpl.substitute"
	"__init__.py" -> ValueError
	"__init__.py" -> join
	"__init__.py" -> "_STYLES.keys"
	"__init__.py" -> <unknown_function>
	"__init__.py" -> "self._style.validate"
	"__init__.py" -> "self.converter"
	"__init__.py" -> "time.strftime"
	"__init__.py" -> "time.strftime"
	"__init__.py" -> "io.StringIO"
	"__init__.py" -> "traceback.print_exception"
	"__init__.py" -> "sio.getvalue"
	"__init__.py" -> "sio.close"
	"__init__.py" -> "self._style.usesTime"
	"__init__.py" -> "self._style.format"
	"__init__.py" -> "record.getMessage"
	"__init__.py" -> "self.usesTime"
	"__init__.py" -> "self.formatTime"
	"__init__.py" -> "self.formatMessage"
	"__init__.py" -> "self.formatException"
	"__init__.py" -> "self.formatStack"
	"__init__.py" -> Formatter
	"__init__.py" -> len
	"__init__.py" -> "self.formatHeader"
	"__init__.py" -> "self.linefmt.format"
	"__init__.py" -> "self.formatFooter"
	"__init__.py" -> len
	"__init__.py" -> "record.name.find"
	"__init__.py" -> "self.filters.append"
	"__init__.py" -> "self.filters.remove"
	"__init__.py" -> hasattr
	"__init__.py" -> "f.filter"
	"__init__.py" -> f
	"__init__.py" -> "weakref.WeakValueDictionary"
	"__init__.py" -> acquire
	"__init__.py" -> "handlers.remove"
	"__init__.py" -> release
	"__init__.py" -> _acquireLock
	"__init__.py" -> "_handlerList.append"
	"__init__.py" -> "weakref.ref"
	"__init__.py" -> _releaseLock
	"__init__.py" -> "Filterer.__init__"
	"__init__.py" -> _checkLevel
	"__init__.py" -> _addHandlerRef
	"__init__.py" -> "self.createLock"
	"__init__.py" -> _acquireLock
	"__init__.py" -> _releaseLock
	"__init__.py" -> property
	"__init__.py" -> "threading.RLock"
	"__init__.py" -> _register_at_fork_reinit_lock
	"__init__.py" -> "self.lock._at_fork_reinit"
	"__init__.py" -> "self.lock.acquire"
	"__init__.py" -> "self.lock.release"
	"__init__.py" -> _checkLevel
	"__init__.py" -> "fmt.format"
	"__init__.py" -> NotImplementedError
	"__init__.py" -> "self.filter"
	"__init__.py" -> "self.acquire"
	"__init__.py" -> "self.emit"
	"__init__.py" -> "self.release"
	"__init__.py" -> _acquireLock
	"__init__.py" -> _releaseLock
	"__init__.py" -> "sys.exc_info"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> "traceback.print_exception"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> "os.path.dirname"
	"__init__.py" -> "traceback.print_stack"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> getLevelName
	"__init__.py" -> "Handler.__init__"
	"__init__.py" -> "self.acquire"
	"__init__.py" -> hasattr
	"__init__.py" -> "self.stream.flush"
	"__init__.py" -> "self.release"
	"__init__.py" -> "self.format"
	"__init__.py" -> "stream.write"
	"__init__.py" -> "self.flush"
	"__init__.py" -> "self.handleError"
	"__init__.py" -> "self.acquire"
	"__init__.py" -> "self.flush"
	"__init__.py" -> "self.release"
	"__init__.py" -> getLevelName
	"__init__.py" -> getattr
	"__init__.py" -> str
	"__init__.py" -> classmethod
	"__init__.py" -> "os.fspath"
	"__init__.py" -> "os.path.abspath"
	"__init__.py" -> "io.text_encoding"
	"__init__.py" -> "Handler.__init__"
	"__init__.py" -> "StreamHandler.__init__"
	"__init__.py" -> "self._open"
	"__init__.py" -> "self.acquire"
	"__init__.py" -> "self.flush"
	"__init__.py" -> hasattr
	"__init__.py" -> "stream.close"
	"__init__.py" -> "StreamHandler.close"
	"__init__.py" -> "self.release"
	"__init__.py" -> open_func
	"__init__.py" -> "self._open"
	"__init__.py" -> "StreamHandler.emit"
	"__init__.py" -> getLevelName
	"__init__.py" -> "Handler.__init__"
	"__init__.py" -> _StderrHandler
	"__init__.py" -> issubclass
	"__init__.py" -> TypeError
	"__init__.py" -> _checkLevel
	"__init__.py" -> isinstance
	"__init__.py" -> TypeError
	"__init__.py" -> _acquireLock
	"__init__.py" -> isinstance
	"__init__.py" -> <unknown_function>
	"__init__.py" -> "self._fixupChildren"
	"__init__.py" -> "self._fixupParents"
	"__init__.py" -> <unknown_function>
	"__init__.py" -> "self._fixupParents"
	"__init__.py" -> _releaseLock
	"__init__.py" -> issubclass
	"__init__.py" -> TypeError
	"__init__.py" -> "name.rfind"
	"__init__.py" -> PlaceHolder
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> "obj.append"
	"__init__.py" -> "name.rfind"
	"__init__.py" -> len
	"__init__.py" -> "ph.loggerMap.keys"
	"__init__.py" -> _acquireLock
	"__init__.py" -> "self.loggerDict.values"
	"__init__.py" -> isinstance
	"__init__.py" -> "logger._cache.clear"
	"__init__.py" -> "self.root._cache.clear"
	"__init__.py" -> _releaseLock
	"__init__.py" -> "Filterer.__init__"
	"__init__.py" -> _checkLevel
	"__init__.py" -> _checkLevel
	"__init__.py" -> "self.manager._clear_cache"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "warnings.warn"
	"__init__.py" -> "self.warning"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "self.error"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> "self.critical"
	"__init__.py" -> isinstance
	"__init__.py" -> TypeError
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self._log"
	"__init__.py" -> currentframe
	"__init__.py" -> _is_internal_frame
	"__init__.py" -> "io.StringIO"
	"__init__.py" -> "sio.write"
	"__init__.py" -> "traceback.print_stack"
	"__init__.py" -> "sio.getvalue"
	"__init__.py" -> _logRecordFactory
	"__init__.py" -> KeyError
	"__init__.py" -> "self.findCaller"
	"__init__.py" -> isinstance
	"__init__.py" -> type
	"__init__.py" -> isinstance
	"__init__.py" -> "sys.exc_info"
	"__init__.py" -> "self.makeRecord"
	"__init__.py" -> "self.handle"
	"__init__.py" -> "self.filter"
	"__init__.py" -> "self.callHandlers"
	"__init__.py" -> _acquireLock
	"__init__.py" -> "self.handlers.append"
	"__init__.py" -> _releaseLock
	"__init__.py" -> _acquireLock
	"__init__.py" -> "self.handlers.remove"
	"__init__.py" -> _releaseLock
	"__init__.py" -> "hdlr.handle"
	"__init__.py" -> "lastResort.handle"
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> _acquireLock
	"__init__.py" -> "self.getEffectiveLevel"
	"__init__.py" -> _releaseLock
	"__init__.py" -> join
	"__init__.py" -> "self.manager.getLogger"
	"__init__.py" -> getLevelName
	"__init__.py" -> "self.getEffectiveLevel"
	"__init__.py" -> getLogger
	"__init__.py" -> "pickle.PicklingError"
	"__init__.py" -> "Logger.__init__"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.log"
	"__init__.py" -> "warnings.warn"
	"__init__.py" -> "self.warning"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.isEnabledFor"
	"__init__.py" -> "self.process"
	"__init__.py" -> "self.logger.log"
	"__init__.py" -> "self.logger.isEnabledFor"
	"__init__.py" -> "self.logger.setLevel"
	"__init__.py" -> "self.logger.getEffectiveLevel"
	"__init__.py" -> "self.logger.hasHandlers"
	"__init__.py" -> "self.logger._log"
	"__init__.py" -> getLevelName
	"__init__.py" -> "logger.getEffectiveLevel"
	"__init__.py" -> classmethod
	"__init__.py" -> RootLogger
	"__init__.py" -> Manager
	"__init__.py" -> _acquireLock
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "root.removeHandler"
	"__init__.py" -> "h.close"
	"__init__.py" -> len
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> ValueError
	"__init__.py" -> ValueError
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "io.text_encoding"
	"__init__.py" -> FileHandler
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> StreamHandler
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> ValueError
	"__init__.py" -> join
	"__init__.py" -> "_STYLES.keys"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> Formatter
	"__init__.py" -> "h.setFormatter"
	"__init__.py" -> "root.addHandler"
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> "root.setLevel"
	"__init__.py" -> join
	"__init__.py" -> "kwargs.keys"
	"__init__.py" -> ValueError
	"__init__.py" -> _releaseLock
	"__init__.py" -> isinstance
	"__init__.py" -> "Logger.manager.getLogger"
	"__init__.py" -> len
	"__init__.py" -> basicConfig
	"__init__.py" -> "root.critical"
	"__init__.py" -> critical
	"__init__.py" -> len
	"__init__.py" -> basicConfig
	"__init__.py" -> "root.error"
	"__init__.py" -> error
	"__init__.py" -> len
	"__init__.py" -> basicConfig
	"__init__.py" -> "root.warning"
	"__init__.py" -> "warnings.warn"
	"__init__.py" -> warning
	"__init__.py" -> len
	"__init__.py" -> basicConfig
	"__init__.py" -> "root.info"
	"__init__.py" -> len
	"__init__.py" -> basicConfig
	"__init__.py" -> "root.debug"
	"__init__.py" -> len
	"__init__.py" -> basicConfig
	"__init__.py" -> "root.log"
	"__init__.py" -> "root.manager._clear_cache"
	"__init__.py" -> reversed
	"__init__.py" -> wr
	"__init__.py" -> "h.acquire"
	"__init__.py" -> "h.flush"
	"__init__.py" -> "h.close"
	"__init__.py" -> "h.release"
	"__init__.py" -> "atexit.register"
	"__init__.py" -> _warnings_showwarning
	"__init__.py" -> "warnings.formatwarning"
	"__init__.py" -> getLogger
	"__init__.py" -> "logger.addHandler"
	"__init__.py" -> NullHandler
	"__init__.py" -> "logger.warning"
	"__init__.py" -> str
	"random.py" -> _exp
	"random.py" -> _sqrt
	"random.py" -> _log
	"random.py" -> _log
	"random.py" -> "self.seed"
	"random.py" -> isinstance
	"random.py" -> isinstance
	"random.py" -> "a.decode"
	"random.py" -> ord
	"random.py" -> map
	"random.py" -> len
	"random.py" -> isinstance
	"random.py" -> isinstance
	"random.py" -> "a.encode"
	"random.py" -> "int.from_bytes"
	"random.py" -> digest
	"random.py" -> _sha512
	"random.py" -> isinstance
	"random.py" -> type
	"random.py" -> TypeError
	"random.py" -> seed
	"random.py" -> super
	"random.py" -> getstate
	"random.py" -> super
	"random.py" -> setstate
	"random.py" -> super
	"random.py" -> tuple
	"random.py" -> setstate
	"random.py" -> super
	"random.py" -> ValueError
	"random.py" -> "self.getstate"
	"random.py" -> "self.setstate"
	"random.py" -> "self.getstate"
	"random.py" -> "n.bit_length"
	"random.py" -> getrandbits
	"random.py" -> getrandbits
	"random.py" -> _warn
	"random.py" -> _floor
	"random.py" -> random
	"random.py" -> random
	"random.py" -> random
	"random.py" -> _floor
	"random.py" -> to_bytes
	"random.py" -> "self.getrandbits"
	"random.py" -> _index
	"random.py" -> int
	"random.py" -> _warn
	"random.py" -> ValueError
	"random.py" -> _warn
	"random.py" -> TypeError
	"random.py" -> "self._randbelow"
	"random.py" -> ValueError
	"random.py" -> _index
	"random.py" -> int
	"random.py" -> _warn
	"random.py" -> ValueError
	"random.py" -> _warn
	"random.py" -> _index
	"random.py" -> int
	"random.py" -> _warn
	"random.py" -> ValueError
	"random.py" -> _warn
	"random.py" -> "self._randbelow"
	"random.py" -> ValueError
	"random.py" -> ValueError
	"random.py" -> ValueError
	"random.py" -> "self._randbelow"
	"random.py" -> "self.randrange"
	"random.py" -> len
	"random.py" -> IndexError
	"random.py" -> "self._randbelow"
	"random.py" -> len
	"random.py" -> reversed
	"random.py" -> range
	"random.py" -> len
	"random.py" -> randbelow
	"random.py" -> isinstance
	"random.py" -> TypeError
	"random.py" -> len
	"random.py" -> list
	"random.py" -> _accumulate
	"random.py" -> len
	"random.py" -> ValueError
	"random.py" -> "cum_counts.pop"
	"random.py" -> isinstance
	"random.py" -> TypeError
	"random.py" -> ValueError
	"random.py" -> "self.sample"
	"random.py" -> range
	"random.py" -> bisect
	"random.py" -> ValueError
	"random.py" -> _ceil
	"random.py" -> _log
	"random.py" -> list
	"random.py" -> range
	"random.py" -> randbelow
	"random.py" -> set
	"random.py" -> range
	"random.py" -> randbelow
	"random.py" -> randbelow
	"random.py" -> selected_add
	"random.py" -> len
	"random.py" -> floor
	"random.py" -> random
	"random.py" -> _repeat
	"random.py" -> list
	"random.py" -> _accumulate
	"random.py" -> isinstance
	"random.py" -> TypeError
	"random.py" -> TypeError
	"random.py" -> len
	"random.py" -> ValueError
	"random.py" -> ValueError
	"random.py" -> _isfinite
	"random.py" -> ValueError
	"random.py" -> bisect
	"random.py" -> random
	"random.py" -> _repeat
	"random.py" -> "self.random"
	"random.py" -> "self.random"
	"random.py" -> _sqrt
	"random.py" -> random
	"random.py" -> random
	"random.py" -> _log
	"random.py" -> random
	"random.py" -> _sqrt
	"random.py" -> _log
	"random.py" -> random
	"random.py" -> _cos
	"random.py" -> _sin
	"random.py" -> _exp
	"random.py" -> "self.normalvariate"
	"random.py" -> _log
	"random.py" -> "self.random"
	"random.py" -> random
	"random.py" -> _sqrt
	"random.py" -> random
	"random.py" -> _cos
	"random.py" -> random
	"random.py" -> _exp
	"random.py" -> random
	"random.py" -> _acos
	"random.py" -> _acos
	"random.py" -> ValueError
	"random.py" -> _sqrt
	"random.py" -> random
	"random.py" -> random
	"random.py" -> _log
	"random.py" -> _exp
	"random.py" -> _log
	"random.py" -> _log
	"random.py" -> random
	"random.py" -> random
	"random.py" -> _log
	"random.py" -> random
	"random.py" -> _exp
	"random.py" -> "self.gammavariate"
	"random.py" -> "self.gammavariate"
	"random.py" -> "self.random"
	"random.py" -> "self.random"
	"random.py" -> _log
	"random.py" -> "int.from_bytes"
	"random.py" -> _urandom
	"random.py" -> ValueError
	"random.py" -> "int.from_bytes"
	"random.py" -> _urandom
	"random.py" -> _urandom
	"random.py" -> NotImplementedError
	"random.py" -> Random
	"random.py" -> perf_counter
	"random.py" -> func
	"random.py" -> _repeat
	"random.py" -> perf_counter
	"random.py" -> mean
	"random.py" -> stdev
	"random.py" -> min
	"random.py" -> max
	"random.py" -> print
	"random.py" -> print
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> _test_generator
	"random.py" -> hasattr
	"random.py" -> "_os.register_at_fork"
	"random.py" -> _test
	"statistics.py" -> sqrt
	"statistics.py" -> set
	"statistics.py" -> groupby
	"statistics.py" -> types_add
	"statistics.py" -> map
	"statistics.py" -> partials_get
	"statistics.py" -> _isfinite
	"statistics.py" -> sum
	"statistics.py" -> Fraction
	"statistics.py" -> "partials.items"
	"statistics.py" -> reduce
	"statistics.py" -> _sum
	"statistics.py" -> set
	"statistics.py" -> defaultdict
	"statistics.py" -> defaultdict
	"statistics.py" -> groupby
	"statistics.py" -> types_add
	"statistics.py" -> map
	"statistics.py" -> Fraction
	"statistics.py" -> _isfinite
	"statistics.py" -> sum
	"statistics.py" -> Fraction
	"statistics.py" -> "sx_partials.items"
	"statistics.py" -> sum
	"statistics.py" -> Fraction
	"statistics.py" -> "sxx_partials.items"
	"statistics.py" -> reduce
	"statistics.py" -> "x.is_finite"
	"statistics.py" -> "math.isfinite"
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> issubclass
	"statistics.py" -> TypeError
	"statistics.py" -> "x.as_integer_ratio"
	"statistics.py" -> _isfinite
	"statistics.py" -> type
	"statistics.py" -> TypeError
	"statistics.py" -> type
	"statistics.py" -> issubclass
	"statistics.py" -> T
	"statistics.py" -> issubclass
	"statistics.py" -> T
	"statistics.py" -> T
	"statistics.py" -> StatisticsError
	"statistics.py" -> "math.isqrt"
	"statistics.py" -> "n.bit_length"
	"statistics.py" -> "m.bit_length"
	"statistics.py" -> _integer_sqrt_of_frac_rto
	"statistics.py" -> _integer_sqrt_of_frac_rto
	"statistics.py" -> Decimal
	"statistics.py" -> sqrt
	"statistics.py" -> Decimal
	"statistics.py" -> Decimal
	"statistics.py" -> "root.as_integer_ratio"
	"statistics.py" -> "root.next_plus"
	"statistics.py" -> "plus.as_integer_ratio"
	"statistics.py" -> "root.next_minus"
	"statistics.py" -> "minus.as_integer_ratio"
	"statistics.py" -> _sum
	"statistics.py" -> StatisticsError
	"statistics.py" -> _convert
	"statistics.py" -> len
	"statistics.py" -> enumerate
	"statistics.py" -> count
	"statistics.py" -> fsum
	"statistics.py" -> StatisticsError
	"statistics.py" -> len
	"statistics.py" -> list
	"statistics.py" -> len
	"statistics.py" -> fsum
	"statistics.py" -> map
	"statistics.py" -> StatisticsError
	"statistics.py" -> fsum
	"statistics.py" -> StatisticsError
	"statistics.py" -> exp
	"statistics.py" -> fmean
	"statistics.py" -> map
	"statistics.py" -> StatisticsError
	"statistics.py" -> iter
	"statistics.py" -> list
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> isinstance
	"statistics.py" -> StatisticsError
	"statistics.py" -> TypeError
	"statistics.py" -> repeat
	"statistics.py" -> iter
	"statistics.py" -> list
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> _sum
	"statistics.py" -> _fail_neg
	"statistics.py" -> _fail_neg
	"statistics.py" -> _sum
	"statistics.py" -> zip
	"statistics.py" -> StatisticsError
	"statistics.py" -> _convert
	"statistics.py" -> sorted
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> sorted
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> sorted
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> sorted
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> bisect_left
	"statistics.py" -> bisect_right
	"statistics.py" -> float
	"statistics.py" -> float
	"statistics.py" -> TypeError
	"statistics.py" -> most_common
	"statistics.py" -> Counter
	"statistics.py" -> iter
	"statistics.py" -> StatisticsError
	"statistics.py" -> Counter
	"statistics.py" -> iter
	"statistics.py" -> max
	"statistics.py" -> "counts.values"
	"statistics.py" -> "counts.items"
	"statistics.py" -> StatisticsError
	"statistics.py" -> sorted
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> range
	"statistics.py" -> divmod
	"statistics.py" -> "result.append"
	"statistics.py" -> range
	"statistics.py" -> "result.append"
	"statistics.py" -> ValueError
	"statistics.py" -> _ss
	"statistics.py" -> StatisticsError
	"statistics.py" -> _convert
	"statistics.py" -> _ss
	"statistics.py" -> StatisticsError
	"statistics.py" -> _convert
	"statistics.py" -> _ss
	"statistics.py" -> StatisticsError
	"statistics.py" -> issubclass
	"statistics.py" -> _decimal_sqrt_of_frac
	"statistics.py" -> _float_sqrt_of_frac
	"statistics.py" -> _ss
	"statistics.py" -> StatisticsError
	"statistics.py" -> issubclass
	"statistics.py" -> _decimal_sqrt_of_frac
	"statistics.py" -> _float_sqrt_of_frac
	"statistics.py" -> _ss
	"statistics.py" -> StatisticsError
	"statistics.py" -> float
	"statistics.py" -> _float_sqrt_of_frac
	"statistics.py" -> float
	"statistics.py" -> float
	"statistics.py" -> float
	"statistics.py" -> len
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> fsum
	"statistics.py" -> fsum
	"statistics.py" -> fsum
	"statistics.py" -> zip
	"statistics.py" -> len
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> fsum
	"statistics.py" -> fsum
	"statistics.py" -> fsum
	"statistics.py" -> zip
	"statistics.py" -> fsum
	"statistics.py" -> fsum
	"statistics.py" -> sqrt
	"statistics.py" -> StatisticsError
	"statistics.py" -> namedtuple
	"statistics.py" -> len
	"statistics.py" -> len
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> fsum
	"statistics.py" -> zip
	"statistics.py" -> fsum
	"statistics.py" -> fsum
	"statistics.py" -> fsum
	"statistics.py" -> fsum
	"statistics.py" -> zip
	"statistics.py" -> fsum
	"statistics.py" -> StatisticsError
	"statistics.py" -> LinearRegression
	"statistics.py" -> fabs
	"statistics.py" -> sqrt
	"statistics.py" -> log
	"statistics.py" -> StatisticsError
	"statistics.py" -> float
	"statistics.py" -> float
	"statistics.py" -> cls
	"statistics.py" -> _mean_stdev
	"statistics.py" -> "random.Random"
	"statistics.py" -> gauss
	"statistics.py" -> range
	"statistics.py" -> StatisticsError
	"statistics.py" -> exp
	"statistics.py" -> sqrt
	"statistics.py" -> StatisticsError
	"statistics.py" -> erf
	"statistics.py" -> StatisticsError
	"statistics.py" -> StatisticsError
	"statistics.py" -> _normal_dist_inv_cdf
	"statistics.py" -> "self.inv_cdf"
	"statistics.py" -> range
	"statistics.py" -> isinstance
	"statistics.py" -> TypeError
	"statistics.py" -> StatisticsError
	"statistics.py" -> fabs
	"statistics.py" -> erf
	"statistics.py" -> sqrt
	"statistics.py" -> log
	"statistics.py" -> fabs
	"statistics.py" -> "Y.cdf"
	"statistics.py" -> "X.cdf"
	"statistics.py" -> fabs
	"statistics.py" -> "Y.cdf"
	"statistics.py" -> "X.cdf"
	"statistics.py" -> StatisticsError
	"statistics.py" -> isinstance
	"statistics.py" -> NormalDist
	"statistics.py" -> hypot
	"statistics.py" -> NormalDist
	"statistics.py" -> isinstance
	"statistics.py" -> NormalDist
	"statistics.py" -> hypot
	"statistics.py" -> NormalDist
	"statistics.py" -> NormalDist
	"statistics.py" -> fabs
	"statistics.py" -> NormalDist
	"statistics.py" -> fabs
	"statistics.py" -> NormalDist
	"statistics.py" -> NormalDist
	"statistics.py" -> isinstance
	"statistics.py" -> hash
	"statistics.py" -> type
	"fractions.py" -> "re.compile"
	"fractions.py" -> __new__
	"fractions.py" -> super
	"fractions.py" -> type
	"fractions.py" -> isinstance
	"fractions.py" -> isinstance
	"fractions.py" -> "numerator.as_integer_ratio"
	"fractions.py" -> isinstance
	"fractions.py" -> "_RATIONAL_FORMAT.match"
	"fractions.py" -> ValueError
	"fractions.py" -> int
	"fractions.py" -> "m.group"
	"fractions.py" -> "m.group"
	"fractions.py" -> int
	"fractions.py" -> "m.group"
	"fractions.py" -> "decimal.replace"
	"fractions.py" -> len
	"fractions.py" -> int
	"fractions.py" -> "m.group"
	"fractions.py" -> int
	"fractions.py" -> "m.group"
	"fractions.py" -> TypeError
	"fractions.py" -> type
	"fractions.py" -> type
	"fractions.py" -> isinstance
	"fractions.py" -> isinstance
	"fractions.py" -> TypeError
	"fractions.py" -> ZeroDivisionError
	"fractions.py" -> "math.gcd"
	"fractions.py" -> isinstance
	"fractions.py" -> cls
	"fractions.py" -> isinstance
	"fractions.py" -> TypeError
	"fractions.py" -> type
	"fractions.py" -> cls
	"fractions.py" -> "f.as_integer_ratio"
	"fractions.py" -> isinstance
	"fractions.py" -> Decimal
	"fractions.py" -> int
	"fractions.py" -> isinstance
	"fractions.py" -> TypeError
	"fractions.py" -> type
	"fractions.py" -> cls
	"fractions.py" -> "dec.as_integer_ratio"
	"fractions.py" -> ValueError
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> abs
	"fractions.py" -> abs
	"fractions.py" -> str
	"fractions.py" -> isinstance
	"fractions.py" -> monomorphic_operator
	"fractions.py" -> isinstance
	"fractions.py" -> fallback_operator
	"fractions.py" -> float
	"fractions.py" -> isinstance
	"fractions.py" -> fallback_operator
	"fractions.py" -> complex
	"fractions.py" -> isinstance
	"fractions.py" -> monomorphic_operator
	"fractions.py" -> isinstance
	"fractions.py" -> fallback_operator
	"fractions.py" -> float
	"fractions.py" -> float
	"fractions.py" -> isinstance
	"fractions.py" -> fallback_operator
	"fractions.py" -> complex
	"fractions.py" -> complex
	"fractions.py" -> "math.gcd"
	"fractions.py" -> Fraction
	"fractions.py" -> "math.gcd"
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> _operator_fallbacks
	"fractions.py" -> "math.gcd"
	"fractions.py" -> Fraction
	"fractions.py" -> "math.gcd"
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> _operator_fallbacks
	"fractions.py" -> "math.gcd"
	"fractions.py" -> "math.gcd"
	"fractions.py" -> Fraction
	"fractions.py" -> _operator_fallbacks
	"fractions.py" -> "math.gcd"
	"fractions.py" -> "math.gcd"
	"fractions.py" -> Fraction
	"fractions.py" -> _operator_fallbacks
	"fractions.py" -> _operator_fallbacks
	"fractions.py" -> divmod
	"fractions.py" -> Fraction
	"fractions.py" -> _operator_fallbacks
	"fractions.py" -> Fraction
	"fractions.py" -> _operator_fallbacks
	"fractions.py" -> isinstance
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> float
	"fractions.py" -> float
	"fractions.py" -> float
	"fractions.py" -> isinstance
	"fractions.py" -> Fraction
	"fractions.py" -> float
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> Fraction
	"fractions.py" -> abs
	"fractions.py" -> _index
	"fractions.py" -> _index
	"fractions.py" -> divmod
	"fractions.py" -> abs
	"fractions.py" -> Fraction
	"fractions.py" -> round
	"fractions.py" -> Fraction
	"fractions.py" -> round
	"fractions.py" -> pow
	"fractions.py" -> hash
	"fractions.py" -> hash
	"fractions.py" -> abs
	"fractions.py" -> type
	"fractions.py" -> isinstance
	"fractions.py" -> isinstance
	"fractions.py" -> isinstance
	"fractions.py" -> "math.isnan"
	"fractions.py" -> "math.isinf"
	"fractions.py" -> "a.from_float"
	"fractions.py" -> isinstance
	"fractions.py" -> op
	"fractions.py" -> isinstance
	"fractions.py" -> "math.isnan"
	"fractions.py" -> "math.isinf"
	"fractions.py" -> op
	"fractions.py" -> op
	"fractions.py" -> "self.from_float"
	"fractions.py" -> "a._richcmp"
	"fractions.py" -> "a._richcmp"
	"fractions.py" -> "a._richcmp"
	"fractions.py" -> "a._richcmp"
	"fractions.py" -> bool
	"fractions.py" -> type
	"fractions.py" -> "self.__class__"
	"fractions.py" -> type
	"fractions.py" -> "self.__class__"
	"bisect.py" -> bisect_right
	"bisect.py" -> bisect_right
	"bisect.py" -> key
	"bisect.py" -> "a.insert"
	"bisect.py" -> ValueError
	"bisect.py" -> len
	"bisect.py" -> key
	"bisect.py" -> bisect_left
	"bisect.py" -> bisect_left
	"bisect.py" -> key
	"bisect.py" -> "a.insert"
	"bisect.py" -> ValueError
	"bisect.py" -> len
	"bisect.py" -> key
	"platform.py" -> "re.compile"
	"platform.py" -> "_component_re.split"
	"platform.py" -> int
	"platform.py" -> "_ver_stages.get"
	"platform.py" -> "result.extend"
	"platform.py" -> "re.compile"
	"platform.py" -> "os.confstr"
	"platform.py" -> "ver.split"
	"platform.py" -> len
	"platform.py" -> tuple
	"platform.py" -> "os.path.realpath"
	"platform.py" -> open
	"platform.py" -> "f.read"
	"platform.py" -> len
	"platform.py" -> "_libc_search.search"
	"platform.py" -> "m.end"
	"platform.py" -> len
	"platform.py" -> "f.read"
	"platform.py" -> max
	"platform.py" -> len
	"platform.py" -> "s.decode"
	"platform.py" -> "m.groups"
	"platform.py" -> V
	"platform.py" -> V
	"platform.py" -> V
	"platform.py" -> V
	"platform.py" -> len
	"platform.py" -> "m.end"
	"platform.py" -> "version.split"
	"platform.py" -> "l.append"
	"platform.py" -> list
	"platform.py" -> map
	"platform.py" -> map
	"platform.py" -> join
	"platform.py" -> "re.compile"
	"platform.py" -> "subprocess.check_output"
	"platform.py" -> "info.strip"
	"platform.py" -> "_ver_output.match"
	"platform.py" -> "m.groups"
	"platform.py" -> _norm_version
	"platform.py" -> win32_edition
	"platform.py" -> "winreg.OpenKeyEx"
	"platform.py" -> "winreg.QueryValueEx"
	"platform.py" -> getwindowsversion
	"platform.py" -> map
	"platform.py" -> split
	"platform.py" -> _syscmd_ver
	"platform.py" -> format
	"platform.py" -> "_WIN32_CLIENT_RELEASES.get"
	"platform.py" -> "_WIN32_CLIENT_RELEASES.get"
	"platform.py" -> format
	"platform.py" -> getattr
	"platform.py" -> "_WIN32_SERVER_RELEASES.get"
	"platform.py" -> "_WIN32_SERVER_RELEASES.get"
	"platform.py" -> "winreg.OpenKeyEx"
	"platform.py" -> "winreg.QueryValueEx"
	"platform.py" -> "os.path.exists"
	"platform.py" -> open
	"platform.py" -> "plistlib.load"
	"platform.py" -> "os.uname"
	"platform.py" -> _mac_ver_xml
	"platform.py" -> "System.getProperty"
	"platform.py" -> _java_getprop
	"platform.py" -> _java_getprop
	"platform.py" -> _java_getprop
	"platform.py" -> _java_getprop
	"platform.py" -> _java_getprop
	"platform.py" -> _java_getprop
	"platform.py" -> _java_getprop
	"platform.py" -> _java_getprop
	"platform.py" -> "release.split"
	"platform.py" -> int
	"platform.py" -> str
	"platform.py" -> join
	"platform.py" -> join
	"platform.py" -> "x.strip"
	"platform.py" -> filter
	"platform.py" -> "platform.replace"
	"platform.py" -> "platform.replace"
	"platform.py" -> "platform.replace"
	"platform.py" -> "platform.replace"
	"platform.py" -> "platform.replace"
	"platform.py" -> "platform.replace"
	"platform.py" -> "platform.replace"
	"platform.py" -> "platform.replace"
	"platform.py" -> "platform.replace"
	"platform.py" -> "platform.replace"
	"platform.py" -> "socket.gethostname"
	"platform.py" -> "os.path.abspath"
	"platform.py" -> "os.path.islink"
	"platform.py" -> "os.path.normpath"
	"platform.py" -> "os.path.join"
	"platform.py" -> "os.path.dirname"
	"platform.py" -> "os.readlink"
	"platform.py" -> _follow_symlinks
	"platform.py" -> dict
	"platform.py" -> "subprocess.check_output"
	"platform.py" -> "output.decode"
	"platform.py" -> "struct.calcsize"
	"platform.py" -> str
	"platform.py" -> _syscmd_file
	"platform.py" -> "os.environ.get"
	"platform.py" -> "os.environ.get"
	"platform.py" -> getattr
	"platform.py" -> func
	"platform.py" -> "os.environ.get"
	"platform.py" -> _get_machine_win32
	"platform.py" -> "vms_lib.getsyi"
	"platform.py" -> strip
	"platform.py" -> "subprocess.check_output"
	"platform.py" -> "collections.namedtuple"
	"platform.py" -> _unknown_as_blank
	"platform.py" -> "_Processor.get"
	"platform.py" -> "itertools.chain"
	"platform.py" -> __iter__
	"platform.py" -> super
	"platform.py" -> len
	"platform.py" -> "cls.__new__"
	"platform.py" -> len
	"platform.py" -> len
	"platform.py" -> TypeError
	"platform.py" -> tuple
	"platform.py" -> len
	"platform.py" -> tuple
	"platform.py" -> iter
	"platform.py" -> tuple
	"platform.py" -> len
	"platform.py" -> "os.uname"
	"platform.py" -> _node
	"platform.py" -> any
	"platform.py" -> win32_ver
	"platform.py" -> _get_machine_win32
	"platform.py" -> _syscmd_ver
	"platform.py" -> java_ver
	"platform.py" -> join
	"platform.py" -> uname_result
	"platform.py" -> map
	"platform.py" -> uname
	"platform.py" -> uname
	"platform.py" -> uname
	"platform.py" -> uname
	"platform.py" -> uname
	"platform.py" -> uname
	"platform.py" -> "re.compile"
	"platform.py" -> "re.compile"
	"platform.py" -> "re.compile"
	"platform.py" -> "re.compile"
	"platform.py" -> "_sys_version_cache.get"
	"platform.py" -> "sys_version.startswith"
	"platform.py" -> "_ironpython_sys_version_parser.match"
	"platform.py" -> "_ironpython26_sys_version_parser.match"
	"platform.py" -> ValueError
	"platform.py" -> repr
	"platform.py" -> "match.groups"
	"platform.py" -> "sys.platform.startswith"
	"platform.py" -> "_sys_version_parser.match"
	"platform.py" -> ValueError
	"platform.py" -> repr
	"platform.py" -> "match.groups"
	"platform.py" -> "_pypy_sys_version_parser.match"
	"platform.py" -> ValueError
	"platform.py" -> repr
	"platform.py" -> "match.groups"
	"platform.py" -> "_sys_version_parser.match"
	"platform.py" -> ValueError
	"platform.py" -> repr
	"platform.py" -> "match.groups"
	"platform.py" -> hasattr
	"platform.py" -> hasattr
	"platform.py" -> "version.split"
	"platform.py" -> len
	"platform.py" -> "l.append"
	"platform.py" -> join
	"platform.py" -> _sys_version
	"platform.py" -> _sys_version
	"platform.py" -> tuple
	"platform.py" -> split
	"platform.py" -> _sys_version
	"platform.py" -> _sys_version
	"platform.py" -> _sys_version
	"platform.py" -> _sys_version
	"platform.py" -> _sys_version
	"platform.py" -> "_platform_cache.get"
	"platform.py" -> uname
	"platform.py" -> system_alias
	"platform.py" -> mac_ver
	"platform.py" -> win32_ver
	"platform.py" -> _platform
	"platform.py" -> _platform
	"platform.py" -> libc_ver
	"platform.py" -> _platform
	"platform.py" -> java_ver
	"platform.py" -> _platform
	"platform.py" -> _platform
	"platform.py" -> _platform
	"platform.py" -> architecture
	"platform.py" -> _platform
	"platform.py" -> "re.compile"
	"platform.py" -> "re.compile"
	"platform.py" -> "_os_release_line.match"
	"platform.py" -> "mo.group"
	"platform.py" -> "_os_release_unescape.sub"
	"platform.py" -> "mo.group"
	"platform.py" -> open
	"platform.py" -> _parse_os_release
	"platform.py" -> OSError
	"platform.py" -> join
	"platform.py" -> "_os_release_cache.copy"
	"platform.py" -> print
	"platform.py" -> platform
	"platform.py" -> "sys.exit"
	"plistlib.py" -> "enum.Enum"
	"plistlib.py" -> update
	"plistlib.py" -> globals
	"plistlib.py" -> isinstance
	"plistlib.py" -> TypeError
	"plistlib.py" -> ValueError
	"plistlib.py" -> ValueError
	"plistlib.py" -> repr
	"plistlib.py" -> isinstance
	"plistlib.py" -> hash
	"plistlib.py" -> "re.compile"
	"plistlib.py" -> range
	"plistlib.py" -> len
	"plistlib.py" -> "pieces.append"
	"plistlib.py" -> "binascii.b2a_base64"
	"plistlib.py" -> join
	"plistlib.py" -> isinstance
	"plistlib.py" -> "binascii.a2b_base64"
	"plistlib.py" -> "s.encode"
	"plistlib.py" -> "binascii.a2b_base64"
	"plistlib.py" -> "re.compile"
	"plistlib.py" -> groupdict
	"plistlib.py" -> "_dateParser.match"
	"plistlib.py" -> "lst.append"
	"plistlib.py" -> int
	"plistlib.py" -> "datetime.datetime"
	"plistlib.py" -> "_controlCharPat.search"
	"plistlib.py" -> ValueError
	"plistlib.py" -> "text.replace"
	"plistlib.py" -> "text.replace"
	"plistlib.py" -> "text.replace"
	"plistlib.py" -> "text.replace"
	"plistlib.py" -> "text.replace"
	"plistlib.py" -> ParserCreate
	"plistlib.py" -> "self.parser.ParseFile"
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> getattr
	"plistlib.py" -> handler
	"plistlib.py" -> getattr
	"plistlib.py" -> handler
	"plistlib.py" -> "self.data.append"
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> ValueError
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> ValueError
	"plistlib.py" -> append
	"plistlib.py" -> join
	"plistlib.py" -> "self._dict_type"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.stack.append"
	"plistlib.py" -> ValueError
	"plistlib.py" -> "self.stack.pop"
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> ValueError
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.stack.append"
	"plistlib.py" -> "self.stack.pop"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "raw.startswith"
	"plistlib.py" -> "raw.startswith"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> int
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> int
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> float
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> _decode_base64
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "self.add_object"
	"plistlib.py" -> _date_from_string
	"plistlib.py" -> "self.get_data"
	"plistlib.py" -> "self.stack.append"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> "self.stack.pop"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> _escape
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "line.encode"
	"plistlib.py" -> "self.file.write"
	"plistlib.py" -> "self.file.write"
	"plistlib.py" -> "self.file.write"
	"plistlib.py" -> "file.write"
	"plistlib.py" -> "_DumbXMLWriter.__init__"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> "self.write_value"
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> OverflowError
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> repr
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.write_dict"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.write_bytes"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> _date_to_string
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self.write_array"
	"plistlib.py" -> TypeError
	"plistlib.py" -> type
	"plistlib.py" -> "self.begin_element"
	"plistlib.py" -> max
	"plistlib.py" -> len
	"plistlib.py" -> "self.indent.replace"
	"plistlib.py" -> split
	"plistlib.py" -> _encode_base64
	"plistlib.py" -> "self.writeln"
	"plistlib.py" -> "self.end_element"
	"plistlib.py" -> "self.begin_element"
	"plistlib.py" -> sorted
	"plistlib.py" -> "d.items"
	"plistlib.py" -> "d.items"
	"plistlib.py" -> isinstance
	"plistlib.py" -> TypeError
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> "self.write_value"
	"plistlib.py" -> "self.end_element"
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> "self.begin_element"
	"plistlib.py" -> "self.write_value"
	"plistlib.py" -> "self.end_element"
	"plistlib.py" -> "self.simple_element"
	"plistlib.py" -> "header.startswith"
	"plistlib.py" -> "header.startswith"
	"plistlib.py" -> encode
	"plistlib.py" -> "start.decode"
	"plistlib.py" -> len
	"plistlib.py" -> "ValueError.__init__"
	"plistlib.py" -> object
	"plistlib.py" -> "self._fp.seek"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> len
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "struct.unpack"
	"plistlib.py" -> "self._fp.seek"
	"plistlib.py" -> "self._read_ints"
	"plistlib.py" -> "self._read_object"
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "struct.unpack"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "struct.unpack"
	"plistlib.py" -> len
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> tuple
	"plistlib.py" -> "int.from_bytes"
	"plistlib.py" -> range
	"plistlib.py" -> "self._read_ints"
	"plistlib.py" -> "self._fp.seek"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "int.from_bytes"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "struct.unpack"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "struct.unpack"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "struct.unpack"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "datetime.datetime"
	"plistlib.py" -> "datetime.timedelta"
	"plistlib.py" -> "self._get_size"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> len
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "self._get_size"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> len
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "data.decode"
	"plistlib.py" -> "self._get_size"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> len
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "data.decode"
	"plistlib.py" -> UID
	"plistlib.py" -> "int.from_bytes"
	"plistlib.py" -> "self._fp.read"
	"plistlib.py" -> "self._get_size"
	"plistlib.py" -> "self._read_refs"
	"plistlib.py" -> "result.extend"
	"plistlib.py" -> "self._read_object"
	"plistlib.py" -> "self._get_size"
	"plistlib.py" -> "self._read_refs"
	"plistlib.py" -> "self._read_refs"
	"plistlib.py" -> "self._dict_type"
	"plistlib.py" -> zip
	"plistlib.py" -> "self._read_object"
	"plistlib.py" -> "self._read_object"
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> "self._flatten"
	"plistlib.py" -> len
	"plistlib.py" -> _count_to_size
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._write_object"
	"plistlib.py" -> "self._getrefnum"
	"plistlib.py" -> "self._fp.tell"
	"plistlib.py" -> _count_to_size
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> id
	"plistlib.py" -> len
	"plistlib.py" -> "self._objlist.append"
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> id
	"plistlib.py" -> isinstance
	"plistlib.py" -> "value.items"
	"plistlib.py" -> sorted
	"plistlib.py" -> isinstance
	"plistlib.py" -> TypeError
	"plistlib.py" -> "keys.append"
	"plistlib.py" -> "values.append"
	"plistlib.py" -> "itertools.chain"
	"plistlib.py" -> "self._flatten"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self._flatten"
	"plistlib.py" -> isinstance
	"plistlib.py" -> type
	"plistlib.py" -> id
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._getrefnum"
	"plistlib.py" -> "self._fp.tell"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> OverflowError
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "value.to_bytes"
	"plistlib.py" -> OverflowError
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> isinstance
	"plistlib.py" -> total_seconds
	"plistlib.py" -> "datetime.datetime"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self._write_size"
	"plistlib.py" -> len
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> isinstance
	"plistlib.py" -> "value.encode"
	"plistlib.py" -> "self._write_size"
	"plistlib.py" -> len
	"plistlib.py" -> "value.encode"
	"plistlib.py" -> "self._write_size"
	"plistlib.py" -> len
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> isinstance
	"plistlib.py" -> ValueError
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> OverflowError
	"plistlib.py" -> isinstance
	"plistlib.py" -> "self._getrefnum"
	"plistlib.py" -> len
	"plistlib.py" -> "self._write_size"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> isinstance
	"plistlib.py" -> sorted
	"plistlib.py" -> "value.items"
	"plistlib.py" -> "value.items"
	"plistlib.py" -> isinstance
	"plistlib.py" -> TypeError
	"plistlib.py" -> "keyRefs.append"
	"plistlib.py" -> "self._getrefnum"
	"plistlib.py" -> "valRefs.append"
	"plistlib.py" -> "self._getrefnum"
	"plistlib.py" -> len
	"plistlib.py" -> "self._write_size"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> "self._fp.write"
	"plistlib.py" -> "struct.pack"
	"plistlib.py" -> TypeError
	"plistlib.py" -> dict
	"plistlib.py" -> dict
	"plistlib.py" -> "fp.read"
	"plistlib.py" -> "fp.seek"
	"plistlib.py" -> "_FORMATS.values"
	"plistlib.py" -> <unknown_function>
	"plistlib.py" -> InvalidFileException
	"plistlib.py" -> P
	"plistlib.py" -> "p.parse"
	"plistlib.py" -> BytesIO
	"plistlib.py" -> load
	"plistlib.py" -> ValueError
	"plistlib.py" -> <unknown_function>
	"plistlib.py" -> "writer.write"
	"plistlib.py" -> BytesIO
	"plistlib.py" -> dump
	"plistlib.py" -> "fp.getvalue"
	"conftest.py" -> "monkeypatch.MonkeyPatch"
	"conftest.py" -> "mp.delenv"
	"conftest.py" -> "mp.setenv"
	"conftest.py" -> "mp.undo"
	"conftest.py" -> "pytest.fixture"
	"conftest.py" -> "monkeypatch._setitem.extend"
	"conftest.py" -> "pytest.fixture"
	"conftest.py" -> Flask
	"conftest.py" -> "os.path.dirname"
	"conftest.py" -> "app.config.update"
	"conftest.py" -> "app.app_context"
	"conftest.py" -> "app.test_request_context"
	"conftest.py" -> "app.test_client"
	"conftest.py" -> "monkeypatch.syspath_prepend"
	"conftest.py" -> "os.path.join"
	"conftest.py" -> "os.path.dirname"
	"conftest.py" -> set
	"conftest.py" -> "sys.modules.keys"
	"conftest.py" -> "sys.modules.keys"
	"conftest.py" -> "sys.modules.pop"
	"conftest.py" -> "leaks.append"
	"conftest.py" -> "request_ctx._get_current_object"
	"conftest.py" -> "request_ctx.pop"
	"conftest.py" -> "pytest.fixture"
	"conftest.py" -> AttributeError
	"conftest.py" -> getattr
	"conftest.py" -> LimitedLoader
	"conftest.py" -> old_get_loader
	"conftest.py" -> "monkeypatch.setattr"
	"conftest.py" -> "pytest.fixture"
	"conftest.py" -> "rv.mkdir"
	"conftest.py" -> "monkeypatch.syspath_prepend"
	"conftest.py" -> "os.fspath"
	"conftest.py" -> "monkeypatch.setattr"
	"conftest.py" -> "os.fspath"
	"conftest.py" -> "rv.mkdir"
	"conftest.py" -> "monkeypatch.syspath_prepend"
	"conftest.py" -> "os.fspath"
	"conftest.py" -> "request.addfinalizer"
	"conftest.py" -> "sys.modules.pop"
	"test_converters.py" -> "value.split"
	"test_converters.py" -> super
	"test_converters.py" -> join
	"test_converters.py" -> base_to_url
	"test_converters.py" -> join
	"test_converters.py" -> "app.route"
	"test_converters.py" -> "client.get"
	"test_converters.py" -> "app.test_request_context"
	"test_converters.py" -> url_for
	"test_converters.py" -> "app.get"
	"test_converters.py" -> "client.get"
	"test_logging.py" -> "logging.getLogger"
	"test_logging.py" -> "logger.setLevel"
	"test_logging.py" -> "pytestconfig.pluginmanager.unregister"
	"test_logging.py" -> "logging.root.setLevel"
	"test_logging.py" -> "logger.setLevel"
	"test_logging.py" -> "pytestconfig.pluginmanager.register"
	"test_logging.py" -> "pytest.fixture"
	"test_logging.py" -> "logging.root.addHandler"
	"test_logging.py" -> "logging.StreamHandler"
	"test_logging.py" -> "app.logger.error"
	"test_logging.py" -> "app.route"
	"test_logging.py" -> StringIO
	"test_logging.py" -> "client.get"
	"test_logging.py" -> "stream.getvalue"
	"test_logging.py" -> "wsgi_errors_stream._get_current_object"
	"test_logging.py" -> "app.test_request_context"
	"test_logging.py" -> "wsgi_errors_stream._get_current_object"
	"test_logging.py" -> "logging.getLogger"
	"test_logging.py" -> has_level_handler
	"test_logging.py" -> "logging.StreamHandler"
	"test_logging.py" -> "logging.root.addHandler"
	"test_logging.py" -> has_level_handler
	"test_logging.py" -> has_level_handler
	"test_logging.py" -> "handler.setLevel"
	"test_logging.py" -> has_level_handler
	"test_logging.py" -> Exception
	"test_logging.py" -> "app.route"
	"test_logging.py" -> StringIO
	"test_logging.py" -> "client.get"
	"test_logging.py" -> "stream.getvalue"
	"test_signals.py" -> "flask.render_template"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "flask.template_rendered.connect"
	"test_signals.py" -> "client.get"
	"test_signals.py" -> len
	"test_signals.py" -> "flask.template_rendered.disconnect"
	"test_signals.py" -> "flask.Flask"
	"test_signals.py" -> "flask.render_template"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "flask.before_render_template.connect"
	"test_signals.py" -> get
	"test_signals.py" -> "app.test_client"
	"test_signals.py" -> len
	"test_signals.py" -> "flask.before_render_template.disconnect"
	"test_signals.py" -> "flask.Flask"
	"test_signals.py" -> "calls.append"
	"test_signals.py" -> "calls.append"
	"test_signals.py" -> "calls.append"
	"test_signals.py" -> "calls.append"
	"test_signals.py" -> "calls.append"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "flask.request_started.connect"
	"test_signals.py" -> "flask.request_finished.connect"
	"test_signals.py" -> get
	"test_signals.py" -> "app.test_client"
	"test_signals.py" -> "flask.request_started.disconnect"
	"test_signals.py" -> "flask.request_finished.disconnect"
	"test_signals.py" -> "flask.Flask"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "flask.got_request_exception.connect"
	"test_signals.py" -> get
	"test_signals.py" -> "app.test_client"
	"test_signals.py" -> len
	"test_signals.py" -> isinstance
	"test_signals.py" -> "flask.got_request_exception.disconnect"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "flask.appcontext_pushed.connect"
	"test_signals.py" -> "flask.appcontext_popped.connect"
	"test_signals.py" -> "client.get"
	"test_signals.py" -> "flask.appcontext_pushed.disconnect"
	"test_signals.py" -> "flask.appcontext_popped.disconnect"
	"test_signals.py" -> "flask.flash"
	"test_signals.py" -> "flask.redirect"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "flask.message_flashed.connect"
	"test_signals.py" -> "app.test_client"
	"test_signals.py" -> "client.session_transaction"
	"test_signals.py" -> "client.get"
	"test_signals.py" -> len
	"test_signals.py" -> "flask.message_flashed.disconnect"
	"test_signals.py" -> "recorded.append"
	"test_signals.py" -> "app.route"
	"test_signals.py" -> "flask.appcontext_tearing_down.connect"
	"test_signals.py" -> "client.get"
	"test_signals.py" -> len
	"test_signals.py" -> isinstance
	"test_signals.py" -> "flask.appcontext_tearing_down.disconnect"
	"test_request.py" -> AssertionError
	"test_request.py" -> "app.post"
	"test_request.py" -> "app.errorhandler"
	"test_request.py" -> "client.post"
	"test_request.py" -> Request
	"test_request.py" -> "app.app_context"
	"test_request.py" -> "app.app_context"
	"test_request.py" -> "app.get"
	"test_request.py" -> "app.test_client"
	"test_request.py" -> "client.get"
	"test_request.py" -> "client.get"
	"test_request.py" -> "client.get"
	"test_async.py" -> "pytest.importorskip"
	"test_async.py" -> "asyncio.sleep"
	"test_async.py" -> "asyncio.sleep"
	"test_async.py" -> "asyncio.sleep"
	"test_async.py" -> Flask
	"test_async.py" -> "asyncio.sleep"
	"test_async.py" -> "app.route"
	"test_async.py" -> "app.route"
	"test_async.py" -> "app.errorhandler"
	"test_async.py" -> AppError
	"test_async.py" -> "app.route"
	"test_async.py" -> Blueprint
	"test_async.py" -> "asyncio.sleep"
	"test_async.py" -> "blueprint.route"
	"test_async.py" -> "blueprint.errorhandler"
	"test_async.py" -> BlueprintError
	"test_async.py" -> "blueprint.route"
	"test_async.py" -> "app.register_blueprint"
	"test_async.py" -> "app.add_url_rule"
	"test_async.py" -> "AsyncView.as_view"
	"test_async.py" -> "app.add_url_rule"
	"test_async.py" -> "AsyncMethodView.as_view"
	"test_async.py" -> "pytest.fixture"
	"test_async.py" -> "async_app.test_client"
	"test_async.py" -> "test_client.get"
	"test_async.py" -> "response.get_data"
	"test_async.py" -> "test_client.post"
	"test_async.py" -> "response.get_data"
	"test_async.py" -> "pytest.mark.parametrize"
	"test_async.py" -> "async_app.test_client"
	"test_async.py" -> "test_client.get"
	"test_async.py" -> "pytest.mark.parametrize"
	"test_async.py" -> Flask
	"test_async.py" -> "app.route"
	"test_async.py" -> Blueprint
	"test_async.py" -> "blueprint.route"
	"test_async.py" -> "app.register_blueprint"
	"test_async.py" -> "app.test_client"
	"test_async.py" -> "test_client.get"
	"test_async.py" -> "test_client.get"
	"test_session_interface.py" -> "request_ctx.match_request"
	"test_session_interface.py" -> "flask.Flask"
	"test_session_interface.py" -> MySessionInterface
	"test_session_interface.py" -> "app.get"
	"test_session_interface.py" -> get
	"test_session_interface.py" -> "app.test_client"
	"test_instance_config.py" -> "pytest.raises"
	"test_instance_config.py" -> "flask.Flask"
	"test_instance_config.py" -> "flask.Flask"
	"test_instance_config.py" -> "os.fspath"
	"test_instance_config.py" -> "os.fspath"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> "os.fspath"
	"test_instance_config.py" -> "app.mkdir"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> "os.fspath"
	"test_instance_config.py" -> "monkeypatch.syspath_prepend"
	"test_instance_config.py" -> "os.fspath"
	"test_instance_config.py" -> "ns.mkdir"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> create_namespace
	"test_instance_config.py" -> create_namespace
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> "os.fspath"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> "os.fspath"
	"test_instance_config.py" -> "installed_path.mkdir"
	"test_instance_config.py" -> "monkeypatch.syspath_prepend"
	"test_instance_config.py" -> "app.mkdir"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> "os.fspath"
	"test_instance_config.py" -> "app.mkdir"
	"test_instance_config.py" -> write_text
	"test_instance_config.py" -> purge_module
	"test_instance_config.py" -> "os.fspath"
	"test_views.py" -> "app.test_client"
	"test_views.py" -> "c.get"
	"test_views.py" -> "c.post"
	"test_views.py" -> "c.put"
	"test_views.py" -> parse_set_header
	"test_views.py" -> "c.open"
	"test_views.py" -> sorted
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> common_test
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> common_test
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> common_test
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "BetterIndex.as_view"
	"test_views.py" -> parse_set_header
	"test_views.py" -> "client.open"
	"test_views.py" -> sorted
	"test_views.py" -> "flask.make_response"
	"test_views.py" -> f
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "flask.Flask"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index1.as_view"
	"test_views.py" -> "app.test_client"
	"test_views.py" -> "c.open"
	"test_views.py" -> "flask.Flask"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index2.as_view"
	"test_views.py" -> "app.test_client"
	"test_views.py" -> "c.open"
	"test_views.py" -> sorted
	"test_views.py" -> "flask.Flask"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index3.as_view"
	"test_views.py" -> "app.test_client"
	"test_views.py" -> "c.open"
	"test_views.py" -> "flask.Response"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.head"
	"test_views.py" -> "flask.Response"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.head"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> "pytest.raises"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "Index.as_view"
	"test_views.py" -> common_test
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "ChildView.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.open"
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "GetDeleteView.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.delete"
	"test_views.py" -> sorted
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "View.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.post"
	"test_views.py" -> sorted
	"test_views.py" -> str
	"test_views.py" -> "app.add_url_rule"
	"test_views.py" -> "CountInit.as_view"
	"test_views.py" -> "client.get"
	"test_views.py" -> "client.get"
	"test_json_tag.py" -> TaggedJSONSerializer
	"test_json_tag.py" -> "s.loads"
	"test_json_tag.py" -> "s.dumps"
	"test_json_tag.py" -> "pytest.mark.parametrize"
	"test_json_tag.py" -> Markup
	"test_json_tag.py" -> uuid4
	"test_json_tag.py" -> replace
	"test_json_tag.py" -> "datetime.now"
	"test_json_tag.py" -> TaggedJSONSerializer
	"test_json_tag.py" -> "pytest.raises"
	"test_json_tag.py" -> "s.register"
	"test_json_tag.py" -> isinstance
	"test_json_tag.py" -> isinstance
	"test_json_tag.py" -> isinstance
	"test_json_tag.py" -> "self.serializer.tag"
	"test_json_tag.py" -> Foo
	"test_json_tag.py" -> TaggedJSONSerializer
	"test_json_tag.py" -> "s.register"
	"test_json_tag.py" -> "s.loads"
	"test_json_tag.py" -> "s.dumps"
	"test_json_tag.py" -> Foo
	"test_json_tag.py" -> JSONTag
	"test_json_tag.py" -> "pytest.raises"
	"test_json_tag.py" -> "pytest.raises"
	"test_json_tag.py" -> "pytest.raises"
	"test_json_tag.py" -> TaggedJSONSerializer
	"test_json_tag.py" -> "s.register"
	"test_json_tag.py" -> isinstance
	"test_json_tag.py" -> "s.register"
	"test_json_tag.py" -> isinstance
	"test_subclassing.py" -> StringIO
	"test_subclassing.py" -> SuppressedFlask
	"test_subclassing.py" -> Exception
	"test_subclassing.py" -> "app.route"
	"test_subclassing.py" -> get
	"test_subclassing.py" -> "app.test_client"
	"test_subclassing.py" -> "out.getvalue"
	"test_reqctx.py" -> "buffer.append"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "ctx.push"
	"test_reqctx.py" -> "ctx.pop"
	"test_reqctx.py" -> "buffer.append"
	"test_reqctx.py" -> Exception
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "buffer.append"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> Exception
	"test_reqctx.py" -> "app.config.update"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "flask.url_for"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "flask.url_for"
	"test_reqctx.py" -> "warnings.catch_warnings"
	"test_reqctx.py" -> "warnings.filterwarnings"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "app.config.update"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "app.config.update"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> index
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> meh
	"test_reqctx.py" -> "flask.has_request_context"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "ctx.push"
	"test_reqctx.py" -> "flask.has_request_context"
	"test_reqctx.py" -> "ctx.pop"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.test_request_context"
	"test_reqctx.py" -> "ctx.push"
	"test_reqctx.py" -> index
	"test_reqctx.py" -> "ctx.pop"
	"test_reqctx.py" -> "pytest.raises"
	"test_reqctx.py" -> index
	"test_reqctx.py" -> "request_ctx.copy"
	"test_reqctx.py" -> "flask.session.get"
	"test_reqctx.py" -> "greenlets.append"
	"test_reqctx.py" -> greenlet
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "client.get"
	"test_reqctx.py" -> run
	"test_reqctx.py" -> "flask.session.get"
	"test_reqctx.py" -> "greenlets.append"
	"test_reqctx.py" -> greenlet
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "client.get"
	"test_reqctx.py" -> run
	"test_reqctx.py" -> "pytest.mark.skipif"
	"test_reqctx.py" -> SessionError
	"test_reqctx.py" -> FailingSessionInterface
	"test_reqctx.py" -> CustomFlask
	"test_reqctx.py" -> AssertionError
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> get
	"test_reqctx.py" -> "app.test_client"
	"test_reqctx.py" -> "flask.request.url.endswith"
	"test_reqctx.py" -> get_cookie_name
	"test_reqctx.py" -> super
	"test_reqctx.py" -> PathAwareSessionInterface
	"test_reqctx.py" -> CustomFlask
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "flask.session.get"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "flask.session.get"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> "app.test_client"
	"test_reqctx.py" -> "test_client.post"
	"test_reqctx.py" -> "test_client.post"
	"test_reqctx.py" -> "test_client.get"
	"test_reqctx.py" -> "test_client.get"
	"test_reqctx.py" -> "flask.Flask"
	"test_reqctx.py" -> EnvironBuilder
	"test_reqctx.py" -> "builder.get_environ"
	"test_reqctx.py" -> "app.request_context"
	"test_reqctx.py" -> "app.full_dispatch_request"
	"test_reqctx.py" -> "flask.Flask"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> EnvironBuilder
	"test_reqctx.py" -> "builder.get_environ"
	"test_reqctx.py" -> "app.request_context"
	"test_reqctx.py" -> "app.full_dispatch_request"
	"test_reqctx.py" -> "flask.Flask"
	"test_reqctx.py" -> "app.route"
	"test_reqctx.py" -> get
	"test_reqctx.py" -> "app.test_client"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "frontend.errorhandler"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "frontend.route"
	"test_blueprints.py" -> "backend.errorhandler"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "backend.route"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "sideend.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.errorhandler"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "blue.errorhandler"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "blue.register_error_handler"
	"test_blueprints.py" -> MyDecoratorException
	"test_blueprints.py" -> "blue.route"
	"test_blueprints.py" -> MyFunctionException
	"test_blueprints.py" -> "blue.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "errors.app_errorhandler"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "forbidden_bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "pytest.mark.parametrize"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> str
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "values.setdefault"
	"test_blueprints.py" -> "values.pop"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "app.test_client"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "rv.data.strip"
	"test_blueprints.py" -> "rv.close"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "rv.data.strip"
	"test_blueprints.py" -> "rv.close"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> parse_cache_control_header
	"test_blueprints.py" -> "rv.close"
	"test_blueprints.py" -> "app.test_request_context"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "app.test_request_context"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> test_request_context
	"test_blueprints.py" -> "flask.Flask"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> MyBlueprint
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.test_request_context"
	"test_blueprints.py" -> "blueprint.send_static_file"
	"test_blueprints.py" -> parse_cache_control_header
	"test_blueprints.py" -> "rv.close"
	"test_blueprints.py" -> sorted
	"test_blueprints.py" -> "app.jinja_env.list_templates"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "test.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> str
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "bp.add_url_rule"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "bp.add_url_rule"
	"test_blueprints.py" -> "app.url_map.add"
	"test_blueprints.py" -> Rule
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.endpoint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.filters.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.add_app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.filters.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.filters.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.add_app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.filters.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.add_app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.add_app_template_filter"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.tests.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.add_app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.tests.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.tests.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.add_app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.tests.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.add_app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> isinstance
	"test_blueprints.py" -> "bp.add_app_template_test"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.render_template"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.render_template_string"
	"test_blueprints.py" -> template_string
	"test_blueprints.py" -> "answer_bp.route"
	"test_blueprints.py" -> template_string
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.app_template_global"
	"test_blueprints.py" -> "app.jinja_env.globals.keys"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.jinja_env.globals.keys"
	"test_blueprints.py" -> <unknown_function>
	"test_blueprints.py" -> "app.app_context"
	"test_blueprints.py" -> "flask.render_template_string"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "bp.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "evts.append"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "values.setdefault"
	"test_blueprints.py" -> "values.pop"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "flask.url_for"
	"test_blueprints.py" -> "app.route"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "parent.errorhandler"
	"test_blueprints.py" -> "parent.route"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "parent.route"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "grandchild.errorhandler"
	"test_blueprints.py" -> "grandchild.route"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "grandchild.route"
	"test_blueprints.py" -> "child.register_blueprint"
	"test_blueprints.py" -> "parent.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> dict
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> dict
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> append
	"test_blueprints.py" -> "flask.g.setdefault"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"test_blueprints.py" -> dict
	"test_blueprints.py" -> join
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "flask.render_template_string"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "parent.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "parent.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "pytest.mark.parametrize"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "parent.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "child.route"
	"test_blueprints.py" -> "parent.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "pytest.raises"
	"test_blueprints.py" -> "bp.register_blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "flask.Blueprint"
	"test_blueprints.py" -> "bp.get"
	"test_blueprints.py" -> "flask.abort"
	"test_blueprints.py" -> "bp.get"
	"test_blueprints.py" -> "bp.errorhandler"
	"test_blueprints.py" -> "bp2.get"
	"test_blueprints.py" -> "bp.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "app.register_blueprint"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_blueprints.py" -> "client.get"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_pyfile"
	"test_config.py" -> "__file__.rsplit"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_object"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "os.path.dirname"
	"test_config.py" -> "os.path.abspath"
	"test_config.py" -> "app.config.from_file"
	"test_config.py" -> "os.path.join"
	"test_config.py" -> common_object_test
	"test_config.py" -> "pytest.importorskip"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "os.path.dirname"
	"test_config.py" -> "os.path.abspath"
	"test_config.py" -> "app.config.from_file"
	"test_config.py" -> "os.path.join"
	"test_config.py" -> common_object_test
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_prefixed_env"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_prefixed_env"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "monkeypatch.setenv"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_prefixed_env"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_mapping"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_mapping"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_mapping"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_mapping"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "pytest.raises"
	"test_config.py" -> "app.config.from_mapping"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_object"
	"test_config.py" -> common_object_test
	"test_config.py" -> "monkeypatch.setattr"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "pytest.raises"
	"test_config.py" -> "app.config.from_envvar"
	"test_config.py" -> str
	"test_config.py" -> "app.config.from_envvar"
	"test_config.py" -> "monkeypatch.setattr"
	"test_config.py" -> "__file__.rsplit"
	"test_config.py" -> "app.config.from_envvar"
	"test_config.py" -> common_object_test
	"test_config.py" -> "monkeypatch.setattr"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "pytest.raises"
	"test_config.py" -> "app.config.from_envvar"
	"test_config.py" -> str
	"test_config.py" -> "msg.startswith"
	"test_config.py" -> "msg.endswith"
	"test_config.py" -> "app.config.from_envvar"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "pytest.raises"
	"test_config.py" -> "app.config.from_pyfile"
	"test_config.py" -> str
	"test_config.py" -> "msg.startswith"
	"test_config.py" -> "msg.endswith"
	"test_config.py" -> "app.config.from_pyfile"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "pytest.raises"
	"test_config.py" -> "app.config.from_file"
	"test_config.py" -> str
	"test_config.py" -> "msg.startswith"
	"test_config.py" -> "msg.endswith"
	"test_config.py" -> "app.config.from_file"
	"test_config.py" -> Flask
	"test_config.py" -> isinstance
	"test_config.py" -> "app.config.from_object"
	"test_config.py" -> common_object_test
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.get_namespace"
	"test_config.py" -> len
	"test_config.py" -> "app.config.get_namespace"
	"test_config.py" -> len
	"test_config.py" -> "app.config.get_namespace"
	"test_config.py" -> len
	"test_config.py" -> "app.config.get_namespace"
	"test_config.py" -> len
	"test_config.py" -> "f.write_text"
	"test_config.py" -> "flask.Flask"
	"test_config.py" -> "app.config.from_pyfile"
	"test_config.py" -> "os.fspath"
	"test_config.py" -> "pytest.mark.parametrize"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> "pytest.raises"
	"test_user_error_handler.py" -> "app.register_error_handler"
	"test_user_error_handler.py" -> CustomException
	"test_user_error_handler.py" -> str
	"test_user_error_handler.py" -> "pytest.raises"
	"test_user_error_handler.py" -> "app.register_error_handler"
	"test_user_error_handler.py" -> str
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> type
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> "pytest.raises"
	"test_user_error_handler.py" -> "app.register_error_handler"
	"test_user_error_handler.py" -> str
	"test_user_error_handler.py" -> CustomException
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> KeyError
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "flask.abort"
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> ParentException
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> ChildExceptionUnregistered
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> ChildExceptionRegistered
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "app.test_client"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> Forbidden
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> ForbiddenSubclassRegistered
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> ForbiddenSubclassUnregistered
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "app.test_client"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "flask.Blueprint"
	"test_user_error_handler.py" -> "bp.errorhandler"
	"test_user_error_handler.py" -> InternalServerError
	"test_user_error_handler.py" -> "bp.route"
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> InternalServerError
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "app.register_blueprint"
	"test_user_error_handler.py" -> "app.test_client"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "flask.Blueprint"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "bp.errorhandler"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "bp.errorhandler"
	"test_user_error_handler.py" -> NotFound
	"test_user_error_handler.py" -> "bp.route"
	"test_user_error_handler.py" -> Forbidden
	"test_user_error_handler.py" -> "bp.route"
	"test_user_error_handler.py" -> "flask.Flask"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> Forbidden
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "app.register_blueprint"
	"test_user_error_handler.py" -> "app.test_client"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> "self.Custom"
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> KeyError
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "flask.abort"
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> InternalServerError
	"test_user_error_handler.py" -> "app.route"
	"test_user_error_handler.py" -> "pytest.fixture"
	"test_user_error_handler.py" -> getattr
	"test_user_error_handler.py" -> type
	"test_user_error_handler.py" -> type
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> "self.report_error"
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "pytest.mark.parametrize"
	"test_user_error_handler.py" -> isinstance
	"test_user_error_handler.py" -> str
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "self.report_error"
	"test_user_error_handler.py" -> "app.errorhandler"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_user_error_handler.py" -> "client.get"
	"test_helpers.py" -> "io.BytesIO"
	"test_helpers.py" -> getattr
	"test_helpers.py" -> "flask.send_file"
	"test_helpers.py" -> "app.open_resource"
	"test_helpers.py" -> "f.read"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "app.send_static_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "flask.send_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "app.send_static_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "flask.send_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "app.send_static_file"
	"test_helpers.py" -> FakePath
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> StaticFileApp
	"test_helpers.py" -> "app.test_request_context"
	"test_helpers.py" -> "app.send_static_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "flask.send_file"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "os.path.join"
	"test_helpers.py" -> "os.path.dirname"
	"test_helpers.py" -> "flask.send_from_directory"
	"test_helpers.py" -> "rv.data.strip"
	"test_helpers.py" -> "rv.close"
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "app.add_url_rule"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "MyView.as_view"
	"test_helpers.py" -> "app.add_url_rule"
	"test_helpers.py" -> "app.add_url_rule"
	"test_helpers.py" -> "app.add_url_rule"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "flask.url_for"
	"test_helpers.py" -> "flask.redirect"
	"test_helpers.py" -> "app.app_context"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "flask.redirect"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "flask.abort"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "flask.abort"
	"test_helpers.py" -> MyFlask
	"test_helpers.py" -> isinstance
	"test_helpers.py" -> "app.app_context"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "flask.abort"
	"test_helpers.py" -> write_text
	"test_helpers.py" -> "flask.Flask"
	"test_helpers.py" -> AssertionError
	"test_helpers.py" -> "flask.Response"
	"test_helpers.py" -> "flask.stream_with_context"
	"test_helpers.py" -> generate
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "client.get"
	"test_helpers.py" -> "flask.Response"
	"test_helpers.py" -> generate
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "client.get"
	"test_helpers.py" -> "called.append"
	"test_helpers.py" -> next
	"test_helpers.py" -> "flask.Response"
	"test_helpers.py" -> "flask.stream_with_context"
	"test_helpers.py" -> Wrapper
	"test_helpers.py" -> generate
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "client.get"
	"test_helpers.py" -> "flask.Response"
	"test_helpers.py" -> gen
	"test_helpers.py" -> "app.route"
	"test_helpers.py" -> "client.get"
	"test_helpers.py" -> "monkeypatch.setenv"
	"test_helpers.py" -> get_debug_flag
	"test_helpers.py" -> "pytest.mark.parametrize"
	"test_helpers.py" -> "flask.Flask"
	"test_helpers.py" -> "app.test_request_context"
	"test_helpers.py" -> "flask.helpers.make_response"
	"test_helpers.py" -> "flask.helpers.make_response"
	"test_helpers.py" -> "flask.Flask"
	"test_helpers.py" -> "app.open_resource"
	"test_helpers.py" -> str
	"test_helpers.py" -> "f.read"
	"test_helpers.py" -> "pytest.mark.parametrize"
	"test_helpers.py" -> "flask.Flask"
	"test_helpers.py" -> "pytest.raises"
	"test_helpers.py" -> "app.open_resource"
	"test_helpers.py" -> "pytest.mark.parametrize"
	"test_helpers.py" -> "flask.Flask"
	"test_helpers.py" -> "os.fspath"
	"test_helpers.py" -> write_text
	"test_helpers.py" -> "app.open_resource"
	"test_helpers.py" -> "f.read"
	"test_helpers.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "flask.request.get_json"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.post"
	"test_json.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> str
	"test_json.py" -> "flask.request.get_json"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.post"
	"test_json.py" -> "flask.request.get_json"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.post"
	"test_json.py" -> "app.json.dumps"
	"test_json.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "io.StringIO"
	"test_json.py" -> "flask.json.dump"
	"test_json.py" -> "out.seek"
	"test_json.py" -> "flask.json.load"
	"test_json.py" -> "app.add_url_rule"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "client.get"
	"test_json.py" -> "flask.json.loads"
	"test_json.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.get"
	"test_json.py" -> "flask.json.loads"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.get"
	"test_json.py" -> "flask.json.loads"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.get"
	"test_json.py" -> http_date
	"test_json.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "datetime.datetime"
	"test_json.py" -> "datetime.date"
	"test_json.py" -> "datetime.timedelta"
	"test_json.py" -> "datetime.timedelta"
	"test_json.py" -> FixedOffset
	"test_json.py" -> "datetime.datetime"
	"test_json.py" -> FixedOffset
	"test_json.py" -> strftime
	"test_json.py" -> "dt.astimezone"
	"test_json.py" -> "flask.json.dumps"
	"test_json.py" -> "pytest.mark.parametrize"
	"test_json.py" -> "uuid.UUID"
	"test_json.py" -> "app.add_url_rule"
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "client.get"
	"test_json.py" -> "flask.json.loads"
	"test_json.py" -> str
	"test_json.py" -> "uuid.UUID"
	"test_json.py" -> "flask.json.dumps"
	"test_json.py" -> "decimal.Decimal"
	"test_json.py" -> "flask.request.get_json"
	"test_json.py" -> str
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.post"
	"test_json.py" -> "flask.json.dumps"
	"test_json.py" -> "flask.render_template_string"
	"test_json.py" -> "datetime.datetime"
	"test_json.py" -> isinstance
	"test_json.py" -> "DefaultJSONProvider.default"
	"test_json.py" -> len
	"test_json.py" -> X
	"test_json.py" -> "kwargs.setdefault"
	"test_json.py" -> loads
	"test_json.py" -> super
	"test_json.py" -> CustomProvider
	"test_json.py" -> "flask.json.dumps"
	"test_json.py" -> "flask.request.get_json"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.post"
	"test_json.py" -> "flask.json.dumps"
	"test_json.py" -> "codecs.lookup"
	"test_json.py" -> "dict.fromkeys"
	"test_json.py" -> range
	"test_json.py" -> "flask.jsonify"
	"test_json.py" -> "app.route"
	"test_json.py" -> "client.get"
	"test_json.py" -> "x.strip"
	"test_json.py" -> splitlines
	"test_json.py" -> decode
	"test_json.py" -> "rv.data.strip"
	"test_json.py" -> "json.dumps"
	"test_json.py" -> ObjectWithHTML
	"test_cli.py" -> "Path.cwd"
	"test_cli.py" -> resolve
	"test_cli.py" -> Path
	"test_cli.py" -> CliRunner
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> isinstance
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> isinstance
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> isinstance
	"test_cli.py" -> Flask
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> Flask
	"test_cli.py" -> Flask
	"test_cli.py" -> find_best_app
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> Flask
	"test_cli.py" -> Flask
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> Flask
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> TypeError
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "request.addfinalizer"
	"test_cli.py" -> prepare_import
	"test_cli.py" -> str
	"test_cli.py" -> "pytest.mark.parametrize"
	"test_cli.py" -> locate_app
	"test_cli.py" -> "pytest.mark.parametrize"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> locate_app
	"test_cli.py" -> "pytest.mark.parametrize"
	"test_cli.py" -> locate_app
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> locate_app
	"test_cli.py" -> MockCtx
	"test_cli.py" -> get_version
	"test_cli.py" -> "capsys.readouterr"
	"test_cli.py" -> "platform.python_version"
	"test_cli.py" -> "importlib.metadata.version"
	"test_cli.py" -> "importlib.metadata.version"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> str
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> Flask
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "monkeypatch.chdir"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "monkeypatch.chdir"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> bool
	"test_cli.py" -> "obj.load_app"
	"test_cli.py" -> "click.get_current_context"
	"test_cli.py" -> "current_app._get_current_object"
	"test_cli.py" -> "app.cli.command"
	"test_cli.py" -> "click.argument"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "click.echo"
	"test_cli.py" -> "click.command"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> Flask
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "click.group"
	"test_cli.py" -> "click.echo"
	"test_cli.py" -> "cli.command"
	"test_cli.py" -> "cli.group"
	"test_cli.py" -> "click.echo"
	"test_cli.py" -> "subgroup.command"
	"test_cli.py" -> ScriptInfo
	"test_cli.py" -> Flask
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Flask
	"test_cli.py" -> "click.group"
	"test_cli.py" -> "click.echo"
	"test_cli.py" -> "cli.command"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Flask
	"test_cli.py" -> "click.group"
	"test_cli.py" -> "click.echo"
	"test_cli.py" -> str
	"test_cli.py" -> "cli.command"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "pytest.mark.parametrize"
	"test_cli.py" -> "click.Group"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "cli.add_command"
	"test_cli.py" -> "click.echo"
	"test_cli.py" -> "flask_group.command"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> CliRunner
	"test_cli.py" -> CliRunner
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> CliRunner
	"test_cli.py" -> CliRunner
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Exception
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> CliRunner
	"test_cli.py" -> CliRunner
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Flask
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> partial
	"test_cli.py" -> zip
	"test_cli.py" -> "output.splitlines"
	"test_cli.py" -> len
	"test_cli.py" -> invoke
	"test_cli.py" -> "self.expect_order"
	"test_cli.py" -> invoke
	"test_cli.py" -> invoke
	"test_cli.py" -> "self.expect_order"
	"test_cli.py" -> invoke
	"test_cli.py" -> "self.expect_order"
	"test_cli.py" -> invoke
	"test_cli.py" -> "app.url_map.iter_rules"
	"test_cli.py" -> "self.expect_order"
	"test_cli.py" -> invoke
	"test_cli.py" -> invoke
	"test_cli.py" -> invoke
	"test_cli.py" -> Flask
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Flask
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> Flask
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> "app.add_url_rule"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> "pytest.mark.skipif"
	"test_cli.py" -> dotenv_not_available
	"test_cli.py" -> "monkeypatch._setitem.append"
	"test_cli.py" -> "monkeypatch.setenv"
	"test_cli.py" -> "monkeypatch.chdir"
	"test_cli.py" -> load_dotenv
	"test_cli.py" -> "Path.cwd"
	"test_cli.py" -> load_dotenv
	"test_cli.py" -> "monkeypatch._setitem.append"
	"test_cli.py" -> load_dotenv
	"test_cli.py" -> "Path.cwd"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "monkeypatch.chdir"
	"test_cli.py" -> load_dotenv
	"test_cli.py" -> "monkeypatch.chdir"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "runner.invoke"
	"test_cli.py" -> FlaskGroup
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "types.ModuleType"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "ssl.SSLContext"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> "monkeypatch.setitem"
	"test_cli.py" -> "pytest.raises"
	"test_cli.py" -> "run_command.make_context"
	"test_cli.py" -> Blueprint
	"test_cli.py" -> Blueprint
	"test_cli.py" -> Blueprint
	"test_cli.py" -> Blueprint
	"test_cli.py" -> "click.echo"
	"test_cli.py" -> "custom.cli.command"
	"test_cli.py" -> "click.echo"
	"test_cli.py" -> "nested.cli.command"
	"test_cli.py" -> "click.echo"
	"test_cli.py" -> "merged.cli.command"
	"test_cli.py" -> "click.echo"
	"test_cli.py" -> "late.cli.command"
	"test_cli.py" -> "app.register_blueprint"
	"test_cli.py" -> "app.register_blueprint"
	"test_cli.py" -> "app.register_blueprint"
	"test_cli.py" -> "app.register_blueprint"
	"test_cli.py" -> "app.test_cli_runner"
	"test_cli.py" -> "app_runner.invoke"
	"test_cli.py" -> "app_runner.invoke"
	"test_cli.py" -> "app_runner.invoke"
	"test_cli.py" -> "app_runner.invoke"
	"test_cli.py" -> Blueprint
	"test_cli.py" -> "app.register_blueprint"
	"test_cli.py" -> invoke
	"test_cli.py" -> "app.test_cli_runner"
	"test_cli.py" -> "run_command.make_context"
	"ssl.py" -> "_IntEnum._convert_"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "_IntFlag._convert_"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "_IntEnum._convert_"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "_IntEnum._convert_"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "_IntFlag._convert_"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "_IntEnum._convert_"
	"ssl.py" -> "name.startswith"
	"ssl.py" -> "_SSLMethod.__members__.items"
	"ssl.py" -> getattr
	"ssl.py" -> _simple_enum
	"ssl.py" -> _simple_enum
	"ssl.py" -> _simple_enum
	"ssl.py" -> _simple_enum
	"ssl.py" -> hasattr
	"ssl.py" -> "dn.count"
	"ssl.py" -> "dn.lower"
	"ssl.py" -> "hostname.lower"
	"ssl.py" -> CertificateError
	"ssl.py" -> format
	"ssl.py" -> "dn.partition"
	"ssl.py" -> CertificateError
	"ssl.py" -> format
	"ssl.py" -> CertificateError
	"ssl.py" -> format
	"ssl.py" -> CertificateError
	"ssl.py" -> format
	"ssl.py" -> "hostname.partition"
	"ssl.py" -> "dn_remainder.lower"
	"ssl.py" -> "hostname_remainder.lower"
	"ssl.py" -> "_socket.inet_aton"
	"ssl.py" -> "_socket.inet_ntoa"
	"ssl.py" -> ValueError
	"ssl.py" -> format
	"ssl.py" -> "_socket.inet_pton"
	"ssl.py" -> ValueError
	"ssl.py" -> format
	"ssl.py" -> ValueError
	"ssl.py" -> format
	"ssl.py" -> _inet_paton
	"ssl.py" -> "cert_ipaddress.rstrip"
	"ssl.py" -> "warnings.warn"
	"ssl.py" -> ValueError
	"ssl.py" -> _inet_paton
	"ssl.py" -> "cert.get"
	"ssl.py" -> _dnsname_match
	"ssl.py" -> "dnsnames.append"
	"ssl.py" -> _ipaddress_match
	"ssl.py" -> "dnsnames.append"
	"ssl.py" -> "cert.get"
	"ssl.py" -> _dnsname_match
	"ssl.py" -> "dnsnames.append"
	"ssl.py" -> len
	"ssl.py" -> CertificateError
	"ssl.py" -> join
	"ssl.py" -> map
	"ssl.py" -> len
	"ssl.py" -> CertificateError
	"ssl.py" -> CertificateError
	"ssl.py" -> namedtuple
	"ssl.py" -> "_ssl.get_default_verify_paths"
	"ssl.py" -> "os.environ.get"
	"ssl.py" -> "os.environ.get"
	"ssl.py" -> DefaultVerifyPaths
	"ssl.py" -> "os.path.isfile"
	"ssl.py" -> "os.path.isdir"
	"ssl.py" -> namedtuple
	"ssl.py" -> __new__
	"ssl.py" -> super
	"ssl.py" -> _txt2obj
	"ssl.py" -> __new__
	"ssl.py" -> super
	"ssl.py" -> _nid2obj
	"ssl.py" -> __new__
	"ssl.py" -> super
	"ssl.py" -> _txt2obj
	"ssl.py" -> "warnings.warn"
	"ssl.py" -> "_SSLContext.__new__"
	"ssl.py" -> isinstance
	"ssl.py" -> decode
	"ssl.py" -> "hostname.encode"
	"ssl.py" -> "hostname.decode"
	"ssl.py" -> "self.sslsocket_class._create"
	"ssl.py" -> "self.sslobject_class._create"
	"ssl.py" -> "self._encode_hostname"
	"ssl.py" -> "warnings.warn"
	"ssl.py" -> bytearray
	"ssl.py" -> bytes
	"ssl.py" -> len
	"ssl.py" -> len
	"ssl.py" -> SSLError
	"ssl.py" -> "protos.append"
	"ssl.py" -> len
	"ssl.py" -> "protos.extend"
	"ssl.py" -> "self._set_npn_protocols"
	"ssl.py" -> callable
	"ssl.py" -> TypeError
	"ssl.py" -> "self._encode_hostname"
	"ssl.py" -> server_name_callback
	"ssl.py" -> bytearray
	"ssl.py" -> bytes
	"ssl.py" -> len
	"ssl.py" -> len
	"ssl.py" -> SSLError
	"ssl.py" -> "protos.append"
	"ssl.py" -> len
	"ssl.py" -> "protos.extend"
	"ssl.py" -> "self._set_alpn_protocols"
	"ssl.py" -> bytearray
	"ssl.py" -> enum_certificates
	"ssl.py" -> "certs.extend"
	"ssl.py" -> "warnings.warn"
	"ssl.py" -> "self.load_verify_locations"
	"ssl.py" -> isinstance
	"ssl.py" -> TypeError
	"ssl.py" -> "self._load_windows_store_certs"
	"ssl.py" -> "self.set_default_verify_paths"
	"ssl.py" -> hasattr
	"ssl.py" -> TLSVersion
	"ssl.py" -> super
	"ssl.py" -> "minimum_version.__set__"
	"ssl.py" -> super
	"ssl.py" -> TLSVersion
	"ssl.py" -> super
	"ssl.py" -> "maximum_version.__set__"
	"ssl.py" -> super
	"ssl.py" -> Options
	"ssl.py" -> super
	"ssl.py" -> "options.__set__"
	"ssl.py" -> super
	"ssl.py" -> hasattr
	"ssl.py" -> super
	"ssl.py" -> "_msg_callback.__set__"
	"ssl.py" -> super
	"ssl.py" -> hasattr
	"ssl.py" -> TypeError
	"ssl.py" -> TLSVersion
	"ssl.py" -> _TLSContentType
	"ssl.py" -> msg_enum
	"ssl.py" -> callback
	"ssl.py" -> "_msg_callback.__set__"
	"ssl.py" -> super
	"ssl.py" -> _SSLMethod
	"ssl.py" -> super
	"ssl.py" -> VerifyFlags
	"ssl.py" -> super
	"ssl.py" -> "verify_flags.__set__"
	"ssl.py" -> super
	"ssl.py" -> super
	"ssl.py" -> VerifyMode
	"ssl.py" -> "verify_mode.__set__"
	"ssl.py" -> super
	"ssl.py" -> isinstance
	"ssl.py" -> TypeError
	"ssl.py" -> SSLContext
	"ssl.py" -> SSLContext
	"ssl.py" -> ValueError
	"ssl.py" -> "context.load_verify_locations"
	"ssl.py" -> "context.load_default_certs"
	"ssl.py" -> hasattr
	"ssl.py" -> "os.environ.get"
	"ssl.py" -> isinstance
	"ssl.py" -> TypeError
	"ssl.py" -> ValueError
	"ssl.py" -> SSLContext
	"ssl.py" -> ValueError
	"ssl.py" -> "context.load_cert_chain"
	"ssl.py" -> "context.load_verify_locations"
	"ssl.py" -> "context.load_default_certs"
	"ssl.py" -> hasattr
	"ssl.py" -> "os.environ.get"
	"ssl.py" -> TypeError
	"ssl.py" -> "cls.__new__"
	"ssl.py" -> "context._wrap_bio"
	"ssl.py" -> "self._sslobj.read"
	"ssl.py" -> "self._sslobj.read"
	"ssl.py" -> "self._sslobj.write"
	"ssl.py" -> "self._sslobj.getpeercert"
	"ssl.py" -> "warnings.warn"
	"ssl.py" -> "self._sslobj.selected_alpn_protocol"
	"ssl.py" -> "self._sslobj.cipher"
	"ssl.py" -> "self._sslobj.shared_ciphers"
	"ssl.py" -> "self._sslobj.compression"
	"ssl.py" -> "self._sslobj.pending"
	"ssl.py" -> "self._sslobj.do_handshake"
	"ssl.py" -> "self._sslobj.shutdown"
	"ssl.py" -> "self._sslobj.get_channel_binding"
	"ssl.py" -> "self._sslobj.version"
	"ssl.py" -> "self._sslobj.verify_client_post_handshake"
	"ssl.py" -> getattr
	"ssl.py" -> TypeError
	"ssl.py" -> "sock.getsockopt"
	"ssl.py" -> NotImplementedError
	"ssl.py" -> ValueError
	"ssl.py" -> ValueError
	"ssl.py" -> ValueError
	"ssl.py" -> dict
	"ssl.py" -> "sock.fileno"
	"ssl.py" -> "cls.__new__"
	"ssl.py" -> __init__
	"ssl.py" -> super
	"ssl.py" -> "self.settimeout"
	"ssl.py" -> "sock.gettimeout"
	"ssl.py" -> "sock.detach"
	"ssl.py" -> "context._encode_hostname"
	"ssl.py" -> "self.getpeername"
	"ssl.py" -> "self._context._wrap_socket"
	"ssl.py" -> "self.gettimeout"
	"ssl.py" -> ValueError
	"ssl.py" -> "self.do_handshake"
	"ssl.py" -> "self.close"
	"ssl.py" -> NotImplementedError
	"ssl.py" -> "self.getpeername"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> "self._sslobj.read"
	"ssl.py" -> "self._sslobj.read"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> "self._sslobj.write"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._check_connected"
	"ssl.py" -> "self._sslobj.getpeercert"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "warnings.warn"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._sslobj.selected_alpn_protocol"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._sslobj.cipher"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._sslobj.shared_ciphers"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._sslobj.compression"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> "self._sslobj.write"
	"ssl.py" -> send
	"ssl.py" -> super
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> sendto
	"ssl.py" -> super
	"ssl.py" -> sendto
	"ssl.py" -> super
	"ssl.py" -> NotImplementedError
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> memoryview
	"ssl.py" -> "view.cast"
	"ssl.py" -> len
	"ssl.py" -> "self.send"
	"ssl.py" -> sendall
	"ssl.py" -> super
	"ssl.py" -> "self._sendfile_use_send"
	"ssl.py" -> sendfile
	"ssl.py" -> super
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> "self.read"
	"ssl.py" -> recv
	"ssl.py" -> super
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> len
	"ssl.py" -> ValueError
	"ssl.py" -> "self.read"
	"ssl.py" -> recv_into
	"ssl.py" -> super
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> recvfrom
	"ssl.py" -> super
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> ValueError
	"ssl.py" -> recvfrom_into
	"ssl.py" -> super
	"ssl.py" -> NotImplementedError
	"ssl.py" -> NotImplementedError
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> "self._sslobj.pending"
	"ssl.py" -> "self._checkClosed"
	"ssl.py" -> shutdown
	"ssl.py" -> super
	"ssl.py" -> "self._sslobj.shutdown"
	"ssl.py" -> ValueError
	"ssl.py" -> str
	"ssl.py" -> "self._sslobj.verify_client_post_handshake"
	"ssl.py" -> ValueError
	"ssl.py" -> str
	"ssl.py" -> _real_close
	"ssl.py" -> super
	"ssl.py" -> "self._check_connected"
	"ssl.py" -> "self.gettimeout"
	"ssl.py" -> "self.settimeout"
	"ssl.py" -> "self._sslobj.do_handshake"
	"ssl.py" -> "self.settimeout"
	"ssl.py" -> ValueError
	"ssl.py" -> ValueError
	"ssl.py" -> "self.context._wrap_socket"
	"ssl.py" -> connect_ex
	"ssl.py" -> super
	"ssl.py" -> connect
	"ssl.py" -> super
	"ssl.py" -> "self.do_handshake"
	"ssl.py" -> "self._real_connect"
	"ssl.py" -> "self._real_connect"
	"ssl.py" -> accept
	"ssl.py" -> super
	"ssl.py" -> "self.context.wrap_socket"
	"ssl.py" -> "self._sslobj.get_channel_binding"
	"ssl.py" -> ValueError
	"ssl.py" -> format
	"ssl.py" -> "self._sslobj.version"
	"ssl.py" -> "warnings.warn"
	"ssl.py" -> ValueError
	"ssl.py" -> ValueError
	"ssl.py" -> SSLContext
	"ssl.py" -> "context.load_verify_locations"
	"ssl.py" -> "context.load_cert_chain"
	"ssl.py" -> "context.set_ciphers"
	"ssl.py" -> "context.wrap_socket"
	"ssl.py" -> "months.index"
	"ssl.py" -> title
	"ssl.py" -> ValueError
	"ssl.py" -> strptime
	"ssl.py" -> timegm
	"ssl.py" -> str
	"ssl.py" -> "base64.standard_b64encode"
	"ssl.py" -> range
	"ssl.py" -> len
	"ssl.py" -> "ss.append"
	"ssl.py" -> join
	"ssl.py" -> "pem_cert_string.startswith"
	"ssl.py" -> ValueError
	"ssl.py" -> endswith
	"ssl.py" -> "pem_cert_string.strip"
	"ssl.py" -> ValueError
	"ssl.py" -> "pem_cert_string.strip"
	"ssl.py" -> len
	"ssl.py" -> len
	"ssl.py" -> "base64.decodebytes"
	"ssl.py" -> "d.encode"
	"ssl.py" -> _create_stdlib_context
	"ssl.py" -> create_connection
	"ssl.py" -> "context.wrap_socket"
	"ssl.py" -> "sslsock.getpeercert"
	"ssl.py" -> DER_cert_to_PEM_cert
	"ssl.py" -> "_PROTOCOL_NAMES.get"
	"base64.py" -> isinstance
	"base64.py" -> "s.encode"
	"base64.py" -> ValueError
	"base64.py" -> isinstance
	"base64.py" -> tobytes
	"base64.py" -> memoryview
	"base64.py" -> TypeError
	"base64.py" -> "binascii.b2a_base64"
	"base64.py" -> len
	"base64.py" -> repr
	"base64.py" -> "encoded.translate"
	"base64.py" -> "bytes.maketrans"
	"base64.py" -> _bytes_from_decode_data
	"base64.py" -> _bytes_from_decode_data
	"base64.py" -> len
	"base64.py" -> repr
	"base64.py" -> "s.translate"
	"base64.py" -> "bytes.maketrans"
	"base64.py" -> "binascii.a2b_base64"
	"base64.py" -> b64encode
	"base64.py" -> b64decode
	"base64.py" -> "bytes.maketrans"
	"base64.py" -> "bytes.maketrans"
	"base64.py" -> translate
	"base64.py" -> b64encode
	"base64.py" -> _bytes_from_decode_data
	"base64.py" -> "s.translate"
	"base64.py" -> b64decode
	"base64.py" -> bytes
	"base64.py" -> isinstance
	"base64.py" -> tobytes
	"base64.py" -> memoryview
	"base64.py" -> len
	"base64.py" -> bytearray
	"base64.py" -> range
	"base64.py" -> len
	"base64.py" -> from_bytes
	"base64.py" -> bytes
	"base64.py" -> enumerate
	"base64.py" -> _bytes_from_decode_data
	"base64.py" -> len
	"base64.py" -> "binascii.Error"
	"base64.py" -> _bytes_from_decode_data
	"base64.py" -> len
	"base64.py" -> repr
	"base64.py" -> "s.translate"
	"base64.py" -> "bytes.maketrans"
	"base64.py" -> "s.upper"
	"base64.py" -> len
	"base64.py" -> "s.rstrip"
	"base64.py" -> len
	"base64.py" -> bytearray
	"base64.py" -> range
	"base64.py" -> len
	"base64.py" -> "binascii.Error"
	"base64.py" -> "acc.to_bytes"
	"base64.py" -> "binascii.Error"
	"base64.py" -> "acc.to_bytes"
	"base64.py" -> bytes
	"base64.py" -> _b32encode
	"base64.py" -> "_B32_ENCODE_DOCSTRING.format"
	"base64.py" -> _b32decode
	"base64.py" -> "_B32_DECODE_DOCSTRING.format"
	"base64.py" -> _b32encode
	"base64.py" -> "_B32_ENCODE_DOCSTRING.format"
	"base64.py" -> _b32decode
	"base64.py" -> "_B32_DECODE_DOCSTRING.format"
	"base64.py" -> upper
	"base64.py" -> "binascii.hexlify"
	"base64.py" -> _bytes_from_decode_data
	"base64.py" -> "s.upper"
	"base64.py" -> "re.search"
	"base64.py" -> "binascii.Error"
	"base64.py" -> "binascii.unhexlify"
	"base64.py" -> isinstance
	"base64.py" -> tobytes
	"base64.py" -> memoryview
	"base64.py" -> len
	"base64.py" -> unpack
	"base64.py" -> "struct.Struct"
	"base64.py" -> len
	"base64.py" -> join
	"base64.py" -> bytes
	"base64.py" -> range
	"base64.py" -> _85encode
	"base64.py" -> max
	"base64.py" -> range
	"base64.py" -> len
	"base64.py" -> len
	"base64.py" -> "chunks.append"
	"base64.py" -> join
	"base64.py" -> _bytes_from_decode_data
	"base64.py" -> "b.endswith"
	"base64.py" -> ValueError
	"base64.py" -> format
	"base64.py" -> "b.startswith"
	"base64.py" -> "struct.Struct"
	"base64.py" -> curr_append
	"base64.py" -> len
	"base64.py" -> decoded_append
	"base64.py" -> packI
	"base64.py" -> ValueError
	"base64.py" -> curr_clear
	"base64.py" -> ValueError
	"base64.py" -> decoded_append
	"base64.py" -> ValueError
	"base64.py" -> decoded_append
	"base64.py" -> ValueError
	"base64.py" -> join
	"base64.py" -> len
	"base64.py" -> bytes
	"base64.py" -> _85encode
	"base64.py" -> enumerate
	"base64.py" -> _bytes_from_decode_data
	"base64.py" -> len
	"base64.py" -> "struct.Struct"
	"base64.py" -> range
	"base64.py" -> len
	"base64.py" -> enumerate
	"base64.py" -> ValueError
	"base64.py" -> "out.append"
	"base64.py" -> packI
	"base64.py" -> ValueError
	"base64.py" -> join
	"base64.py" -> "input.read"
	"base64.py" -> len
	"base64.py" -> "input.read"
	"base64.py" -> len
	"base64.py" -> "binascii.b2a_base64"
	"base64.py" -> "output.write"
	"base64.py" -> "input.readline"
	"base64.py" -> "binascii.a2b_base64"
	"base64.py" -> "output.write"
	"base64.py" -> memoryview
	"base64.py" -> TypeError
	"base64.py" -> TypeError
	"base64.py" -> TypeError
	"base64.py" -> _input_type_check
	"base64.py" -> range
	"base64.py" -> len
	"base64.py" -> "pieces.append"
	"base64.py" -> "binascii.b2a_base64"
	"base64.py" -> join
	"base64.py" -> _input_type_check
	"base64.py" -> "binascii.a2b_base64"
	"base64.py" -> "getopt.getopt"
	"base64.py" -> print
	"base64.py" -> print
	"base64.py" -> "sys.exit"
	"base64.py" -> test
	"base64.py" -> print
	"base64.py" -> open
	"base64.py" -> func
	"base64.py" -> func
	"base64.py" -> print
	"base64.py" -> repr
	"base64.py" -> encodebytes
	"base64.py" -> print
	"base64.py" -> repr
	"base64.py" -> decodebytes
	"base64.py" -> print
	"base64.py" -> repr
	"base64.py" -> main
	"getopt.py" -> "Exception.__init__"
	"getopt.py" -> type
	"getopt.py" -> type
	"getopt.py" -> list
	"getopt.py" -> startswith
	"getopt.py" -> startswith
	"getopt.py" -> do_longs
	"getopt.py" -> do_shorts
	"getopt.py" -> isinstance
	"getopt.py" -> list
	"getopt.py" -> "shortopts.startswith"
	"getopt.py" -> "os.environ.get"
	"getopt.py" -> do_longs
	"getopt.py" -> do_shorts
	"getopt.py" -> "prog_args.append"
	"getopt.py" -> "opt.index"
	"getopt.py" -> long_has_args
	"getopt.py" -> GetoptError
	"getopt.py" -> _
	"getopt.py" -> GetoptError
	"getopt.py" -> _
	"getopt.py" -> "opts.append"
	"getopt.py" -> "o.startswith"
	"getopt.py" -> GetoptError
	"getopt.py" -> _
	"getopt.py" -> len
	"getopt.py" -> GetoptError
	"getopt.py" -> _
	"getopt.py" -> len
	"getopt.py" -> "unique_match.endswith"
	"getopt.py" -> short_has_arg
	"getopt.py" -> GetoptError
	"getopt.py" -> _
	"getopt.py" -> "opts.append"
	"getopt.py" -> range
	"getopt.py" -> len
	"getopt.py" -> "shortopts.startswith"
	"getopt.py" -> GetoptError
	"getopt.py" -> _
	"getopt.py" -> print
	"getopt.py" -> getopt
	"testing.py" -> getattr
	"testing.py" -> "self._output.write"
	"testing.py" -> "self._echo"
	"testing.py" -> "self._input.read"
	"testing.py" -> "self._echo"
	"testing.py" -> "self._input.read1"
	"testing.py" -> "self._echo"
	"testing.py" -> "self._input.readline"
	"testing.py" -> "self._echo"
	"testing.py" -> "self._input.readlines"
	"testing.py" -> iter
	"testing.py" -> "self._echo"
	"testing.py" -> repr
	"testing.py" -> __init__
	"testing.py" -> super
	"testing.py" -> hasattr
	"testing.py" -> _find_binary_reader
	"testing.py" -> "t.cast"
	"testing.py" -> TypeError
	"testing.py" -> isinstance
	"testing.py" -> "input.encode"
	"testing.py" -> "io.BytesIO"
	"testing.py" -> replace
	"testing.py" -> "self.stdout_bytes.decode"
	"testing.py" -> ValueError
	"testing.py" -> replace
	"testing.py" -> "self.stderr_bytes.decode"
	"testing.py" -> repr
	"testing.py" -> type
	"testing.py" -> dict
	"testing.py" -> "rv.update"
	"testing.py" -> make_input_stream
	"testing.py" -> "self.make_env"
	"testing.py" -> "io.BytesIO"
	"testing.py" -> "t.cast"
	"testing.py" -> EchoingStdin
	"testing.py" -> _NamedTextIOWrapper
	"testing.py" -> _NamedTextIOWrapper
	"testing.py" -> "io.BytesIO"
	"testing.py" -> _NamedTextIOWrapper
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> rstrip
	"testing.py" -> "text_input.readline"
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> "sys.stdout.flush"
	"testing.py" -> _pause_echo
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> "sys.stdout.flush"
	"testing.py" -> rstrip
	"testing.py" -> "text_input.readline"
	"testing.py" -> _pause_echo
	"testing.py" -> "sys.stdin.read"
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> "sys.stdout.flush"
	"testing.py" -> _pause_echo
	"testing.py" -> "env.items"
	"testing.py" -> "os.environ.get"
	"testing.py" -> "old_env.items"
	"testing.py" -> "self.isolation"
	"testing.py" -> isinstance
	"testing.py" -> "shlex.split"
	"testing.py" -> "extra.pop"
	"testing.py" -> "self.get_default_prog_name"
	"testing.py" -> "cli.main"
	"testing.py" -> "sys.exc_info"
	"testing.py" -> "t.cast"
	"testing.py" -> isinstance
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> str
	"testing.py" -> "sys.stdout.write"
	"testing.py" -> "sys.exc_info"
	"testing.py" -> "sys.stdout.flush"
	"testing.py" -> getvalue
	"testing.py" -> getvalue
	"testing.py" -> Result
	"testing.py" -> "os.getcwd"
	"testing.py" -> "tempfile.mkdtemp"
	"testing.py" -> "os.chdir"
	"testing.py" -> "os.chdir"
	"testing.py" -> "shutil.rmtree"
	"tempfile.py" -> hasattr
	"tempfile.py" -> hasattr
	"tempfile.py" -> hasattr
	"tempfile.py" -> _allocate_lock
	"tempfile.py" -> "_os.lstat"
	"tempfile.py" -> isinstance
	"tempfile.py" -> "_os.fspath"
	"tempfile.py" -> isinstance
	"tempfile.py" -> TypeError
	"tempfile.py" -> TypeError
	"tempfile.py" -> isinstance
	"tempfile.py" -> _infer_return_type
	"tempfile.py" -> output_type
	"tempfile.py" -> "_os.fsencode"
	"tempfile.py" -> gettempdir
	"tempfile.py" -> gettempdirb
	"tempfile.py" -> "_os.getpid"
	"tempfile.py" -> getattr
	"tempfile.py" -> _Random
	"tempfile.py" -> join
	"tempfile.py" -> "self.rng.choices"
	"tempfile.py" -> "_os.getenv"
	"tempfile.py" -> "dirlist.append"
	"tempfile.py" -> "dirlist.extend"
	"tempfile.py" -> "_os.path.expanduser"
	"tempfile.py" -> "_os.path.expandvars"
	"tempfile.py" -> "dirlist.extend"
	"tempfile.py" -> "dirlist.append"
	"tempfile.py" -> "_os.getcwd"
	"tempfile.py" -> "dirlist.append"
	"tempfile.py" -> _RandomNameSequence
	"tempfile.py" -> _candidate_tempdir_list
	"tempfile.py" -> "_os.path.abspath"
	"tempfile.py" -> range
	"tempfile.py" -> next
	"tempfile.py" -> "_os.path.join"
	"tempfile.py" -> "_os.open"
	"tempfile.py" -> "_os.write"
	"tempfile.py" -> "_os.close"
	"tempfile.py" -> "_os.unlink"
	"tempfile.py" -> "_os.path.isdir"
	"tempfile.py" -> "_os.access"
	"tempfile.py" -> FileNotFoundError
	"tempfile.py" -> "_once_lock.acquire"
	"tempfile.py" -> _RandomNameSequence
	"tempfile.py" -> "_once_lock.release"
	"tempfile.py" -> "_os.path.abspath"
	"tempfile.py" -> _get_candidate_names
	"tempfile.py" -> map
	"tempfile.py" -> range
	"tempfile.py" -> next
	"tempfile.py" -> "_os.path.join"
	"tempfile.py" -> "_sys.audit"
	"tempfile.py" -> "_os.open"
	"tempfile.py" -> "_os.path.isdir"
	"tempfile.py" -> "_os.access"
	"tempfile.py" -> FileExistsError
	"tempfile.py" -> "_os.fsdecode"
	"tempfile.py" -> "_os.fsencode"
	"tempfile.py" -> "_once_lock.acquire"
	"tempfile.py" -> _get_default_tempdir
	"tempfile.py" -> "_once_lock.release"
	"tempfile.py" -> "_os.fsdecode"
	"tempfile.py" -> _gettempdir
	"tempfile.py" -> "_os.fsencode"
	"tempfile.py" -> _gettempdir
	"tempfile.py" -> _sanitize_params
	"tempfile.py" -> _mkstemp_inner
	"tempfile.py" -> _sanitize_params
	"tempfile.py" -> _get_candidate_names
	"tempfile.py" -> map
	"tempfile.py" -> range
	"tempfile.py" -> next
	"tempfile.py" -> "_os.path.join"
	"tempfile.py" -> "_sys.audit"
	"tempfile.py" -> "_os.mkdir"
	"tempfile.py" -> "_os.path.isdir"
	"tempfile.py" -> "_os.access"
	"tempfile.py" -> FileExistsError
	"tempfile.py" -> gettempdir
	"tempfile.py" -> _get_candidate_names
	"tempfile.py" -> range
	"tempfile.py" -> next
	"tempfile.py" -> "_os.path.join"
	"tempfile.py" -> _exists
	"tempfile.py" -> FileExistsError
	"tempfile.py" -> "self.file.close"
	"tempfile.py" -> unlink
	"tempfile.py" -> "self.close"
	"tempfile.py" -> "self.file.close"
	"tempfile.py" -> _TemporaryFileCloser
	"tempfile.py" -> getattr
	"tempfile.py" -> hasattr
	"tempfile.py" -> func
	"tempfile.py" -> "_functools.wraps"
	"tempfile.py" -> isinstance
	"tempfile.py" -> setattr
	"tempfile.py" -> "self.file.__enter__"
	"tempfile.py" -> "self.file.__exit__"
	"tempfile.py" -> "self.close"
	"tempfile.py" -> "self._closer.close"
	"tempfile.py" -> _sanitize_params
	"tempfile.py" -> "_io.text_encoding"
	"tempfile.py" -> _mkstemp_inner
	"tempfile.py" -> "_io.open"
	"tempfile.py" -> getattr
	"tempfile.py" -> getattr
	"tempfile.py" -> _TemporaryFileWrapper
	"tempfile.py" -> "file.close"
	"tempfile.py" -> "_os.unlink"
	"tempfile.py" -> hasattr
	"tempfile.py" -> "_io.text_encoding"
	"tempfile.py" -> _sanitize_params
	"tempfile.py" -> "_os.open"
	"tempfile.py" -> "_io.open"
	"tempfile.py" -> getattr
	"tempfile.py" -> getattr
	"tempfile.py" -> _mkstemp_inner
	"tempfile.py" -> "_os.unlink"
	"tempfile.py" -> "_os.close"
	"tempfile.py" -> "_io.open"
	"tempfile.py" -> getattr
	"tempfile.py" -> getattr
	"tempfile.py" -> "_io.BytesIO"
	"tempfile.py" -> "_io.text_encoding"
	"tempfile.py" -> "_io.TextIOWrapper"
	"tempfile.py" -> "_io.BytesIO"
	"tempfile.py" -> classmethod
	"tempfile.py" -> "file.tell"
	"tempfile.py" -> "self.rollover"
	"tempfile.py" -> TemporaryFile
	"tempfile.py" -> "file.tell"
	"tempfile.py" -> hasattr
	"tempfile.py" -> "newfile.buffer.write"
	"tempfile.py" -> getvalue
	"tempfile.py" -> "file.detach"
	"tempfile.py" -> "newfile.write"
	"tempfile.py" -> "file.getvalue"
	"tempfile.py" -> "newfile.seek"
	"tempfile.py" -> ValueError
	"tempfile.py" -> "self._file.close"
	"tempfile.py" -> "self._file.__iter__"
	"tempfile.py" -> "_warnings.warn"
	"tempfile.py" -> format
	"tempfile.py" -> "self.close"
	"tempfile.py" -> "self._file.close"
	"tempfile.py" -> "self.rollover"
	"tempfile.py" -> "self._file.fileno"
	"tempfile.py" -> "self._file.flush"
	"tempfile.py" -> "self._file.isatty"
	"tempfile.py" -> "self._file.readable"
	"tempfile.py" -> "self._file.read"
	"tempfile.py" -> "self._file.read1"
	"tempfile.py" -> "self._file.readinto"
	"tempfile.py" -> "self._file.readinto1"
	"tempfile.py" -> "self._file.readline"
	"tempfile.py" -> "self._file.readlines"
	"tempfile.py" -> "self._file.seekable"
	"tempfile.py" -> "self._file.seek"
	"tempfile.py" -> "self._file.tell"
	"tempfile.py" -> "self._file.truncate"
	"tempfile.py" -> "self.rollover"
	"tempfile.py" -> "self._file.truncate"
	"tempfile.py" -> "self._file.writable"
	"tempfile.py" -> "file.write"
	"tempfile.py" -> "self._check"
	"tempfile.py" -> "file.writelines"
	"tempfile.py" -> "self._check"
	"tempfile.py" -> "self._file.detach"
	"tempfile.py" -> mkdtemp
	"tempfile.py" -> "_weakref.finalize"
	"tempfile.py" -> format
	"tempfile.py" -> issubclass
	"tempfile.py" -> "_os.chflags"
	"tempfile.py" -> "_os.chmod"
	"tempfile.py" -> resetperms
	"tempfile.py" -> "_os.path.dirname"
	"tempfile.py" -> resetperms
	"tempfile.py" -> "_os.unlink"
	"tempfile.py" -> "cls._rmtree"
	"tempfile.py" -> issubclass
	"tempfile.py" -> "_shutil.rmtree"
	"tempfile.py" -> "cls._rmtree"
	"tempfile.py" -> "_warnings.warn"
	"tempfile.py" -> format
	"tempfile.py" -> "self.cleanup"
	"tempfile.py" -> "self._finalizer.detach"
	"tempfile.py" -> "_os.path.exists"
	"tempfile.py" -> "self._rmtree"
	"tempfile.py" -> classmethod
	"shlex.py" -> isinstance
	"shlex.py" -> StringIO
	"shlex.py" -> deque
	"shlex.py" -> deque
	"shlex.py" -> deque
	"shlex.py" -> "self.wordchars.maketrans"
	"shlex.py" -> "dict.fromkeys"
	"shlex.py" -> "self.wordchars.translate"
	"shlex.py" -> print
	"shlex.py" -> repr
	"shlex.py" -> "self.pushback.appendleft"
	"shlex.py" -> isinstance
	"shlex.py" -> StringIO
	"shlex.py" -> "self.filestack.appendleft"
	"shlex.py" -> print
	"shlex.py" -> print
	"shlex.py" -> "self.instream.close"
	"shlex.py" -> "self.filestack.popleft"
	"shlex.py" -> print
	"shlex.py" -> "self.pushback.popleft"
	"shlex.py" -> print
	"shlex.py" -> repr
	"shlex.py" -> "self.read_token"
	"shlex.py" -> "self.sourcehook"
	"shlex.py" -> "self.read_token"
	"shlex.py" -> "self.push_source"
	"shlex.py" -> "self.get_token"
	"shlex.py" -> "self.pop_source"
	"shlex.py" -> "self.get_token"
	"shlex.py" -> print
	"shlex.py" -> repr
	"shlex.py" -> print
	"shlex.py" -> "self._pushback_chars.pop"
	"shlex.py" -> "self.instream.read"
	"shlex.py" -> print
	"shlex.py" -> print
	"shlex.py" -> "self.instream.readline"
	"shlex.py" -> print
	"shlex.py" -> ValueError
	"shlex.py" -> print
	"shlex.py" -> ValueError
	"shlex.py" -> print
	"shlex.py" -> "self.instream.readline"
	"shlex.py" -> "self._pushback_chars.append"
	"shlex.py" -> "self._pushback_chars.append"
	"shlex.py" -> "self.pushback.appendleft"
	"shlex.py" -> print
	"shlex.py" -> print
	"shlex.py" -> repr
	"shlex.py" -> print
	"shlex.py" -> isinstance
	"shlex.py" -> "os.path.isabs"
	"shlex.py" -> "os.path.join"
	"shlex.py" -> "os.path.dirname"
	"shlex.py" -> open
	"shlex.py" -> "self.get_token"
	"shlex.py" -> "warnings.warn"
	"shlex.py" -> shlex
	"shlex.py" -> list
	"shlex.py" -> join
	"shlex.py" -> quote
	"shlex.py" -> "re.compile"
	"shlex.py" -> _find_unsafe
	"shlex.py" -> "s.replace"
	"shlex.py" -> "lexer.get_token"
	"shlex.py" -> print
	"shlex.py" -> repr
	"shlex.py" -> len
	"shlex.py" -> _print_tokens
	"shlex.py" -> shlex
	"shlex.py" -> open
	"shlex.py" -> _print_tokens
	"shlex.py" -> shlex
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "flask.render_template_string"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "flask.stream_template_string"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> dict
	"test_templating.py" -> "flask.render_template_string"
	"test_templating.py" -> "flask.render_template_string"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "rv.data.split"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> Markup
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "data.splitlines"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> Markup
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "data.splitlines"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "flask.render_template_string"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "flask.get_template_attribute"
	"test_templating.py" -> macro
	"test_templating.py" -> "app.template_filter"
	"test_templating.py" -> "app.jinja_env.filters.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> "app.add_template_filter"
	"test_templating.py" -> "app.jinja_env.filters.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> "app.template_filter"
	"test_templating.py" -> "app.jinja_env.filters.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> "app.add_template_filter"
	"test_templating.py" -> "app.jinja_env.filters.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> "app.template_filter"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "app.add_template_filter"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "app.template_filter"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "app.add_template_filter"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.template_test"
	"test_templating.py" -> "app.jinja_env.tests.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.add_template_test"
	"test_templating.py" -> "app.jinja_env.tests.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.template_test"
	"test_templating.py" -> "app.jinja_env.tests.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.add_template_test"
	"test_templating.py" -> "app.jinja_env.tests.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.template_test"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.add_template_test"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.template_test"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> isinstance
	"test_templating.py" -> "app.add_template_test"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "app.template_global"
	"test_templating.py" -> "app.jinja_env.globals.keys"
	"test_templating.py" -> <unknown_function>
	"test_templating.py" -> "flask.render_template_string"
	"test_templating.py" -> DictLoader
	"test_templating.py" -> MyFlask
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "app.test_client"
	"test_templating.py" -> "c.get"
	"test_templating.py" -> "flask.render_template"
	"test_templating.py" -> "app.route"
	"test_templating.py" -> "client.get"
	"test_templating.py" -> "flask.Flask"
	"test_templating.py" -> "flask.Flask"
	"test_templating.py" -> "flask.Flask"
	"test_templating.py" -> "flask.Flask"
	"test_templating.py" -> "flask.Flask"
	"test_templating.py" -> "monkeypatch.setattr"
	"test_templating.py" -> "app.run"
	"test_templating.py" -> "app.run"
	"test_templating.py" -> "called.append"
	"test_templating.py" -> str
	"test_templating.py" -> "app.test_client"
	"test_templating.py" -> "monkeypatch.setitem"
	"test_templating.py" -> "monkeypatch.setattr"
	"test_templating.py" -> "logging.getLogger"
	"test_templating.py" -> _TestHandler
	"test_templating.py" -> "pytest.raises"
	"test_templating.py" -> "c.get"
	"test_templating.py" -> str
	"test_templating.py" -> len
	"test_templating.py" -> CustomFlask
	"test_templating.py" -> isinstance
	"test_appctx.py" -> "app.route"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "flask.url_for"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "pytest.raises"
	"test_appctx.py" -> "flask.url_for"
	"test_appctx.py" -> "pytest.raises"
	"test_appctx.py" -> "flask.url_for"
	"test_appctx.py" -> "app.test_request_context"
	"test_appctx.py" -> "flask.current_app._get_current_object"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "flask.current_app._get_current_object"
	"test_appctx.py" -> "cleanup_stuff.append"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "cleanup_stuff.append"
	"test_appctx.py" -> Exception
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "cleanup_stuff.append"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> Exception
	"test_appctx.py" -> "cleanup_stuff.append"
	"test_appctx.py" -> Exception
	"test_appctx.py" -> "app.route"
	"test_appctx.py" -> "flask.jsonify"
	"test_appctx.py" -> str
	"test_appctx.py" -> "app.errorhandler"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "client.get"
	"test_appctx.py" -> "cleanup_stuff.append"
	"test_appctx.py" -> ValueError
	"test_appctx.py" -> "app.route"
	"test_appctx.py" -> "pytest.raises"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "client.get"
	"test_appctx.py" -> len
	"test_appctx.py" -> isinstance
	"test_appctx.py" -> str
	"test_appctx.py" -> "flask.g.get"
	"test_appctx.py" -> "flask.g.get"
	"test_appctx.py" -> "flask.g.setdefault"
	"test_appctx.py" -> "flask.g.setdefault"
	"test_appctx.py" -> "flask.g.pop"
	"test_appctx.py" -> "pytest.raises"
	"test_appctx.py" -> "flask.g.pop"
	"test_appctx.py" -> "flask.g.pop"
	"test_appctx.py" -> list
	"test_appctx.py" -> repr
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "flask.render_template_string"
	"test_appctx.py" -> "called.append"
	"test_appctx.py" -> "called.append"
	"test_appctx.py" -> "app.route"
	"test_appctx.py" -> "client.get"
	"test_appctx.py" -> "called.append"
	"test_appctx.py" -> "app.app_context"
	"test_appctx.py" -> "called.append"
	"test_regression.py" -> str
	"test_regression.py" -> "app.errorhandler"
	"test_regression.py" -> "flask.abort"
	"test_regression.py" -> "flask.redirect"
	"test_regression.py" -> "flask.url_for"
	"test_regression.py" -> "app.route"
	"test_regression.py" -> Foo
	"test_regression.py" -> "app.route"
	"test_regression.py" -> "app.test_client"
	"test_regression.py" -> "c.get"
	"test_regression.py" -> rpartition
	"test_regression.py" -> "c.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "importlib.metadata.version"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> EnvironBuilder
	"test_testing.py" -> "request.addfinalizer"
	"test_testing.py" -> "client.open"
	"test_testing.py" -> "builder.get_environ"
	"test_testing.py" -> "client.open"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> EnvironBuilder
	"test_testing.py" -> EnvironBuilder
	"test_testing.py" -> decode
	"test_testing.py" -> "eb.input_stream.read"
	"test_testing.py" -> "flask.Flask"
	"test_testing.py" -> "app.test_client"
	"test_testing.py" -> "flask.Blueprint"
	"test_testing.py" -> "bp.route"
	"test_testing.py" -> "app.register_blueprint"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "flask.redirect"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "flask.session.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "flask.session.get"
	"test_testing.py" -> "client.post"
	"test_testing.py" -> "flask.session.get"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> str
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.session_transaction"
	"test_testing.py" -> len
	"test_testing.py" -> len
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "client.session_transaction"
	"test_testing.py" -> len
	"test_testing.py" -> "flask.Flask"
	"test_testing.py" -> "app.test_client"
	"test_testing.py" -> "pytest.raises"
	"test_testing.py" -> "c.session_transaction"
	"test_testing.py" -> str
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "flask.request._get_current_object"
	"test_testing.py" -> "client.session_transaction"
	"test_testing.py" -> "flask.request._get_current_object"
	"test_testing.py" -> "app.test_client"
	"test_testing.py" -> "pytest.raises"
	"test_testing.py" -> "c.session_transaction"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> hasattr
	"test_testing.py" -> "pytest.raises"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.post"
	"test_testing.py" -> jsonify
	"test_testing.py" -> "flask.request.get_json"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.post"
	"test_testing.py" -> "flask.request.get_json"
	"test_testing.py" -> "rv.get_json"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> Namespace
	"test_testing.py" -> "appcontext_popped.connected_to"
	"test_testing.py" -> "client.post"
	"test_testing.py" -> "rv.get_data"
	"test_testing.py" -> "flask.Flask"
	"test_testing.py" -> "app.test_client"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "flask.url_for"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "app.test_request_context"
	"test_testing.py" -> "flask.url_for"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "app.test_cli_runner"
	"test_testing.py" -> isinstance
	"test_testing.py" -> "app.test_cli_runner"
	"test_testing.py" -> isinstance
	"test_testing.py" -> "click.echo"
	"test_testing.py" -> "app.cli.command"
	"test_testing.py" -> "app.test_cli_runner"
	"test_testing.py" -> "runner.invoke"
	"test_testing.py" -> "runner.invoke"
	"test_testing.py" -> "click.echo"
	"test_testing.py" -> "app.cli.command"
	"test_testing.py" -> ScriptInfo
	"test_testing.py" -> "app.test_cli_runner"
	"test_testing.py" -> "runner.invoke"
	"test_testing.py" -> "flask.stream_with_context"
	"test_testing.py" -> "app.route"
	"test_testing.py" -> "client.get"
	"test_testing.py" -> "rv.close"
	"test_testing.py" -> "_cv_request.get"
	"__init__.py" -> Flask
	"__init__.py" -> "app.register_blueprint"
	"__init__.py" -> "app.register_blueprint"
	"__init__.py" -> Blueprint
	"__init__.py" -> render_template
	"__init__.py" -> "frontend.route"
	"__init__.py" -> render_template
	"__init__.py" -> "frontend.route"
	"__init__.py" -> Blueprint
	"__init__.py" -> render_template
	"__init__.py" -> "admin.route"
	"__init__.py" -> render_template
	"__init__.py" -> "admin.route"
	"hello.py" -> Flask
	"hello.py" -> "app.route"
	"__init__.py" -> Module
	"importerrorapp.py" -> ImportError
	"importerrorapp.py" -> Flask
	"factory.py" -> Flask
	"factory.py" -> Flask
	"factory.py" -> join
	"multiapp.py" -> Flask
	"multiapp.py" -> Flask
	"app.py" -> Flask
	"__init__.py" -> Flask
	"flask.py" -> Flask
	"typing_route.py" -> Flask
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> jsonify
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> range
	"typing_route.py" -> show
	"typing_route.py" -> "app.route"
	"typing_route.py" -> encode
	"typing_route.py" -> range
	"typing_route.py" -> "app.route"
	"typing_route.py" -> iter
	"typing_route.py" -> range
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> render_template
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> stream_template
	"typing_route.py" -> "app.route"
	"typing_route.py" -> "app.route"
	"typing_route.py" -> render_template
	"typing_route.py" -> "app.add_url_rule"
	"typing_route.py" -> "RenderTemplateView.as_view"
	"typing_app_decorators.py" -> Flask
	"typing_app_decorators.py" -> Response
	"typing_app_decorators.py" -> Response
	"typing_error_handler.py" -> Flask
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"typing_error_handler.py" -> "app.errorhandler"
	"conf.py" -> get_version
	"conf.py" -> ProjectLink
	"conf.py" -> ProjectLink
	"conf.py" -> ProjectLink
	"conf.py" -> ProjectLink
	"conf.py" -> ProjectLink
	"conf.py" -> "text.endswith"
	"conf.py" -> rsplit
	"conf.py" -> "words.strip"
	"conf.py" -> "packaging.version.parse"
	"conf.py" -> set_classes
	"conf.py" -> reference
	"conf.py" -> "app.add_role"
	"conftest.py" -> open
	"conftest.py" -> "os.path.join"
	"conftest.py" -> "os.path.dirname"
	"conftest.py" -> decode
	"conftest.py" -> "f.read"
	"conftest.py" -> "tempfile.mkstemp"
	"conftest.py" -> create_app
	"conftest.py" -> "app.app_context"
	"conftest.py" -> init_db
	"conftest.py" -> executescript
	"conftest.py" -> get_db
	"conftest.py" -> "os.close"
	"conftest.py" -> "os.unlink"
	"conftest.py" -> "app.test_client"
	"conftest.py" -> "app.test_cli_runner"
	"conftest.py" -> "self._client.post"
	"conftest.py" -> "self._client.get"
	"conftest.py" -> AuthActions
	"test_auth.py" -> "client.get"
	"test_auth.py" -> "client.post"
	"test_auth.py" -> "app.app_context"
	"test_auth.py" -> fetchone
	"test_auth.py" -> execute
	"test_auth.py" -> get_db
	"test_auth.py" -> "client.post"
	"test_auth.py" -> "pytest.mark.parametrize"
	"test_auth.py" -> "client.get"
	"test_auth.py" -> "auth.login"
	"test_auth.py" -> "client.get"
	"test_auth.py" -> "auth.login"
	"test_auth.py" -> "pytest.mark.parametrize"
	"test_auth.py" -> "auth.login"
	"test_auth.py" -> "auth.logout"
	"test_db.py" -> "app.app_context"
	"test_db.py" -> get_db
	"test_db.py" -> get_db
	"test_db.py" -> "pytest.raises"
	"test_db.py" -> "db.execute"
	"test_db.py" -> str
	"test_db.py" -> "monkeypatch.setattr"
	"test_db.py" -> "runner.invoke"
	"test_factory.py" -> create_app
	"test_factory.py" -> create_app
	"test_factory.py" -> "client.get"
	"test_blog.py" -> "client.get"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.get"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "pytest.mark.parametrize"
	"test_blog.py" -> "app.app_context"
	"test_blog.py" -> get_db
	"test_blog.py" -> "db.execute"
	"test_blog.py" -> "db.commit"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "client.get"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "pytest.mark.parametrize"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.get"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "app.app_context"
	"test_blog.py" -> get_db
	"test_blog.py" -> fetchone
	"test_blog.py" -> "db.execute"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.get"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "app.app_context"
	"test_blog.py" -> get_db
	"test_blog.py" -> fetchone
	"test_blog.py" -> "db.execute"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "pytest.mark.parametrize"
	"test_blog.py" -> "auth.login"
	"test_blog.py" -> "client.post"
	"test_blog.py" -> "app.app_context"
	"test_blog.py" -> get_db
	"test_blog.py" -> fetchone
	"test_blog.py" -> "db.execute"
	"auth.py" -> Blueprint
	"auth.py" -> redirect
	"auth.py" -> url_for
	"auth.py" -> view
	"auth.py" -> "functools.wraps"
	"auth.py" -> "session.get"
	"auth.py" -> fetchone
	"auth.py" -> execute
	"auth.py" -> get_db
	"auth.py" -> get_db
	"auth.py" -> "db.execute"
	"auth.py" -> generate_password_hash
	"auth.py" -> "db.commit"
	"auth.py" -> redirect
	"auth.py" -> url_for
	"auth.py" -> flash
	"auth.py" -> render_template
	"auth.py" -> "bp.route"
	"auth.py" -> get_db
	"auth.py" -> fetchone
	"auth.py" -> "db.execute"
	"auth.py" -> check_password_hash
	"auth.py" -> "session.clear"
	"auth.py" -> redirect
	"auth.py" -> url_for
	"auth.py" -> flash
	"auth.py" -> render_template
	"auth.py" -> "bp.route"
	"auth.py" -> "session.clear"
	"auth.py" -> redirect
	"auth.py" -> url_for
	"auth.py" -> "bp.route"
	"db.py" -> "sqlite3.connect"
	"db.py" -> "g.pop"
	"db.py" -> "db.close"
	"db.py" -> get_db
	"db.py" -> "current_app.open_resource"
	"db.py" -> "db.executescript"
	"db.py" -> decode
	"db.py" -> "f.read"
	"db.py" -> init_db
	"db.py" -> "click.echo"
	"db.py" -> "click.command"
	"db.py" -> "sqlite3.register_converter"
	"db.py" -> "datetime.fromisoformat"
	"db.py" -> "v.decode"
	"db.py" -> "app.teardown_appcontext"
	"db.py" -> "app.cli.add_command"
	"__init__.py" -> "warnings.warn"
	"__init__.py" -> AttributeError
	"__init__.py" -> Flask
	"__init__.py" -> "app.config.from_mapping"
	"__init__.py" -> "os.path.join"
	"__init__.py" -> "app.config.from_pyfile"
	"__init__.py" -> "app.config.update"
	"__init__.py" -> "os.makedirs"
	"__init__.py" -> "app.route"
	"__init__.py" -> "db.init_app"
	"__init__.py" -> "app.register_blueprint"
	"__init__.py" -> "app.register_blueprint"
	"__init__.py" -> "app.add_url_rule"
	"blog.py" -> Blueprint
	"blog.py" -> get_db
	"blog.py" -> fetchall
	"blog.py" -> "db.execute"
	"blog.py" -> render_template
	"blog.py" -> "bp.route"
	"blog.py" -> fetchone
	"blog.py" -> execute
	"blog.py" -> get_db
	"blog.py" -> abort
	"blog.py" -> abort
	"blog.py" -> flash
	"blog.py" -> get_db
	"blog.py" -> "db.execute"
	"blog.py" -> "db.commit"
	"blog.py" -> redirect
	"blog.py" -> url_for
	"blog.py" -> render_template
	"blog.py" -> "bp.route"
	"blog.py" -> get_post
	"blog.py" -> flash
	"blog.py" -> get_db
	"blog.py" -> "db.execute"
	"blog.py" -> "db.commit"
	"blog.py" -> redirect
	"blog.py" -> url_for
	"blog.py" -> render_template
	"blog.py" -> "bp.route"
	"blog.py" -> get_post
	"blog.py" -> get_db
	"blog.py" -> "db.execute"
	"blog.py" -> "db.commit"
	"blog.py" -> redirect
	"blog.py" -> url_for
	"blog.py" -> "bp.route"
	"make_celery.py" -> create_app
	"tasks.py" -> shared_task
	"tasks.py" -> "time.sleep"
	"tasks.py" -> shared_task
	"tasks.py" -> range
	"tasks.py" -> "self.update_state"
	"tasks.py" -> "time.sleep"
	"tasks.py" -> shared_task
	"__init__.py" -> Flask
	"__init__.py" -> "app.config.from_mapping"
	"__init__.py" -> dict
	"__init__.py" -> "app.config.from_prefixed_env"
	"__init__.py" -> celery_init_app
	"__init__.py" -> render_template
	"__init__.py" -> "app.route"
	"__init__.py" -> "app.register_blueprint"
	"__init__.py" -> "app.app_context"
	"__init__.py" -> "self.run"
	"__init__.py" -> Celery
	"__init__.py" -> "celery_app.config_from_object"
	"__init__.py" -> "celery_app.set_default"
	"views.py" -> Blueprint
	"views.py" -> AsyncResult
	"views.py" -> "result.ready"
	"views.py" -> "result.successful"
	"views.py" -> "result.get"
	"views.py" -> "bp.get"
	"views.py" -> "request.form.get"
	"views.py" -> "request.form.get"
	"views.py" -> "tasks.add.delay"
	"views.py" -> "bp.post"
	"views.py" -> "tasks.block.delay"
	"views.py" -> "bp.post"
	"views.py" -> "tasks.process.delay"
	"views.py" -> "request.form.get"
	"views.py" -> "bp.post"
	"__init__.py" -> Flask
	"views.py" -> render_template
	"views.py" -> "app.route"
	"views.py" -> "app.route"
	"views.py" -> "request.form.get"
	"views.py" -> "request.form.get"
	"views.py" -> jsonify
	"views.py" -> "app.route"
	"test_js_example.py" -> "template_rendered.connected_to"
	"test_js_example.py" -> "client.get"
	"test_js_example.py" -> "pytest.mark.parametrize"
	"test_js_example.py" -> "client.post"
	"test_js_example.py" -> "response.get_json"
	"test_js_example.py" -> "pytest.mark.parametrize"
	"conftest.py" -> "pytest.fixture"
	"conftest.py" -> "app.test_client"
	"logging.py" -> "logger.getEffectiveLevel"
	"logging.py" -> any
	"logging.py" -> "logging.StreamHandler"
	"logging.py" -> "default_handler.setFormatter"
	"logging.py" -> "logging.Formatter"
	"logging.py" -> "logging.getLogger"
	"logging.py" -> "logger.setLevel"
	"logging.py" -> has_level_handler
	"logging.py" -> "logger.addHandler"
	"signals.py" -> Namespace
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"signals.py" -> "_signals.signal"
	"sessions.py" -> "self.get"
	"sessions.py" -> bool
	"sessions.py" -> __init__
	"sessions.py" -> super
	"sessions.py" -> __getitem__
	"sessions.py" -> super
	"sessions.py" -> get
	"sessions.py" -> super
	"sessions.py" -> setdefault
	"sessions.py" -> super
	"sessions.py" -> RuntimeError
	"sessions.py" -> "self.null_session_class"
	"sessions.py" -> isinstance
	"sessions.py" -> "datetime.now"
	"sessions.py" -> NotImplementedError
	"sessions.py" -> NotImplementedError
	"sessions.py" -> TaggedJSONSerializer
	"sessions.py" -> "hashlib.sha1"
	"sessions.py" -> staticmethod
	"sessions.py" -> "keys.extend"
	"sessions.py" -> URLSafeTimedSerializer
	"sessions.py" -> "self.get_signing_serializer"
	"sessions.py" -> "request.cookies.get"
	"sessions.py" -> "self.get_cookie_name"
	"sessions.py" -> "self.session_class"
	"sessions.py" -> int
	"sessions.py" -> "app.permanent_session_lifetime.total_seconds"
	"sessions.py" -> "s.loads"
	"sessions.py" -> "self.session_class"
	"sessions.py" -> "self.session_class"
	"sessions.py" -> "self.get_cookie_name"
	"sessions.py" -> "self.get_cookie_domain"
	"sessions.py" -> "self.get_cookie_path"
	"sessions.py" -> "self.get_cookie_secure"
	"sessions.py" -> "self.get_cookie_partitioned"
	"sessions.py" -> "self.get_cookie_samesite"
	"sessions.py" -> "self.get_cookie_httponly"
	"sessions.py" -> "response.vary.add"
	"sessions.py" -> "response.delete_cookie"
	"sessions.py" -> "response.vary.add"
	"sessions.py" -> "self.should_set_cookie"
	"sessions.py" -> "self.get_expiration_time"
	"sessions.py" -> dumps
	"sessions.py" -> "self.get_signing_serializer"
	"sessions.py" -> dict
	"sessions.py" -> "response.set_cookie"
	"sessions.py" -> "response.vary.add"
	"config.py" -> "t.TypeVar"
	"config.py" -> "self.get_converter"
	"config.py" -> __init__
	"config.py" -> super
	"config.py" -> "os.environ.get"
	"config.py" -> RuntimeError
	"config.py" -> "self.from_pyfile"
	"config.py" -> sorted
	"config.py" -> "key.startswith"
	"config.py" -> "key.removeprefix"
	"config.py" -> loads
	"config.py" -> "key.split"
	"config.py" -> "os.path.join"
	"config.py" -> "types.ModuleType"
	"config.py" -> open
	"config.py" -> exec
	"config.py" -> compile
	"config.py" -> "config_file.read"
	"config.py" -> "self.from_object"
	"config.py" -> isinstance
	"config.py" -> import_string
	"config.py" -> dir
	"config.py" -> "key.isupper"
	"config.py" -> getattr
	"config.py" -> "os.path.join"
	"config.py" -> open
	"config.py" -> load
	"config.py" -> "self.from_mapping"
	"config.py" -> "mappings.update"
	"config.py" -> "mappings.update"
	"config.py" -> "mappings.items"
	"config.py" -> "key.isupper"
	"config.py" -> "self.items"
	"config.py" -> "k.startswith"
	"config.py" -> len
	"config.py" -> "key.lower"
	"config.py" -> type
	"config.py" -> "dict.__repr__"
	"templating.py" -> "_cv_app.get"
	"templating.py" -> "_cv_request.get"
	"templating.py" -> "app.create_global_jinja_loader"
	"templating.py" -> "BaseEnvironment.__init__"
	"templating.py" -> "self._get_source_explained"
	"templating.py" -> "self._get_source_fast"
	"templating.py" -> "self._iter_loaders"
	"templating.py" -> "loader.get_source"
	"templating.py" -> "attempts.append"
	"templating.py" -> explain_template_loading_attempts
	"templating.py" -> TemplateNotFound
	"templating.py" -> "self._iter_loaders"
	"templating.py" -> "loader.get_source"
	"templating.py" -> TemplateNotFound
	"templating.py" -> "self.app.iter_blueprints"
	"templating.py" -> set
	"templating.py" -> "result.update"
	"templating.py" -> "loader.list_templates"
	"templating.py" -> "self.app.iter_blueprints"
	"templating.py" -> "loader.list_templates"
	"templating.py" -> "result.add"
	"templating.py" -> list
	"templating.py" -> "app.update_template_context"
	"templating.py" -> "before_render_template.send"
	"templating.py" -> "template.render"
	"templating.py" -> "template_rendered.send"
	"templating.py" -> "current_app._get_current_object"
	"templating.py" -> "app.jinja_env.get_or_select_template"
	"templating.py" -> _render
	"templating.py" -> "current_app._get_current_object"
	"templating.py" -> "app.jinja_env.from_string"
	"templating.py" -> _render
	"templating.py" -> "app.update_template_context"
	"templating.py" -> "before_render_template.send"
	"templating.py" -> "template.generate"
	"templating.py" -> "template_rendered.send"
	"templating.py" -> generate
	"templating.py" -> stream_with_context
	"templating.py" -> "current_app._get_current_object"
	"templating.py" -> "app.jinja_env.get_or_select_template"
	"templating.py" -> _stream
	"templating.py" -> "current_app._get_current_object"
	"templating.py" -> "app.jinja_env.from_string"
	"templating.py" -> _stream
	"globals.py" -> ContextVar
	"globals.py" -> LocalProxy
	"globals.py" -> LocalProxy
	"globals.py" -> LocalProxy
	"globals.py" -> ContextVar
	"globals.py" -> LocalProxy
	"globals.py" -> LocalProxy
	"globals.py" -> LocalProxy
	"__init__.py" -> "warnings.warn"
	"__init__.py" -> "importlib.metadata.version"
	"__init__.py" -> AttributeError
	"blueprints.py" -> __init__
	"blueprints.py" -> super
	"blueprints.py" -> AppGroup
	"blueprints.py" -> isinstance
	"blueprints.py" -> int
	"blueprints.py" -> "value.total_seconds"
	"blueprints.py" -> RuntimeError
	"blueprints.py" -> "self.get_send_file_max_age"
	"blueprints.py" -> send_from_directory
	"blueprints.py" -> "t.cast"
	"blueprints.py" -> ValueError
	"blueprints.py" -> "os.path.join"
	"blueprints.py" -> open
	"blueprints.py" -> open
	"cli.py" -> getattr
	"cli.py" -> isinstance
	"cli.py" -> "module.__dict__.values"
	"cli.py" -> isinstance
	"cli.py" -> len
	"cli.py" -> len
	"cli.py" -> NoAppException
	"cli.py" -> getattr
	"cli.py" -> "inspect.isfunction"
	"cli.py" -> app_factory
	"cli.py" -> isinstance
	"cli.py" -> _called_with_wrong_args
	"cli.py" -> NoAppException
	"cli.py" -> NoAppException
	"cli.py" -> "sys.exc_info"
	"cli.py" -> "ast.parse"
	"cli.py" -> "app_name.strip"
	"cli.py" -> NoAppException
	"cli.py" -> isinstance
	"cli.py" -> isinstance
	"cli.py" -> isinstance
	"cli.py" -> NoAppException
	"cli.py" -> "ast.literal_eval"
	"cli.py" -> "ast.literal_eval"
	"cli.py" -> NoAppException
	"cli.py" -> NoAppException
	"cli.py" -> getattr
	"cli.py" -> NoAppException
	"cli.py" -> "inspect.isfunction"
	"cli.py" -> attr
	"cli.py" -> _called_with_wrong_args
	"cli.py" -> NoAppException
	"cli.py" -> isinstance
	"cli.py" -> NoAppException
	"cli.py" -> "os.path.realpath"
	"cli.py" -> "os.path.splitext"
	"cli.py" -> "os.path.basename"
	"cli.py" -> "os.path.dirname"
	"cli.py" -> "os.path.split"
	"cli.py" -> "module_name.append"
	"cli.py" -> "os.path.exists"
	"cli.py" -> "os.path.join"
	"cli.py" -> "sys.path.insert"
	"cli.py" -> join
	"cli.py" -> __import__
	"cli.py" -> "sys.exc_info"
	"cli.py" -> NoAppException
	"cli.py" -> "traceback.format_exc"
	"cli.py" -> NoAppException
	"cli.py" -> find_best_app
	"cli.py" -> find_app_by_string
	"cli.py" -> "importlib.metadata.version"
	"cli.py" -> "importlib.metadata.version"
	"cli.py" -> "click.echo"
	"cli.py" -> "platform.python_version"
	"cli.py" -> "ctx.exit"
	"cli.py" -> "click.Option"
	"cli.py" -> get_load_dotenv
	"cli.py" -> "self.create_app"
	"cli.py" -> "re.split"
	"cli.py" -> prepare_import
	"cli.py" -> locate_app
	"cli.py" -> prepare_import
	"cli.py" -> locate_app
	"cli.py" -> NoAppException
	"cli.py" -> get_debug_flag
	"cli.py" -> "click.make_pass_decorator"
	"cli.py" -> "t.TypeVar"
	"cli.py" -> load_app
	"cli.py" -> "ctx.ensure_object"
	"cli.py" -> "ctx.with_resource"
	"cli.py" -> "app.app_context"
	"cli.py" -> "ctx.invoke"
	"cli.py" -> update_wrapper
	"cli.py" -> "kwargs.pop"
	"cli.py" -> with_appcontext
	"cli.py" -> <unknown_function>
	"cli.py" -> command
	"cli.py" -> super
	"cli.py" -> "kwargs.setdefault"
	"cli.py" -> group
	"cli.py" -> super
	"cli.py" -> "ctx.ensure_object"
	"cli.py" -> "click.Option"
	"cli.py" -> "ctx.get_parameter_source"
	"cli.py" -> "click.Option"
	"cli.py" -> "click.BadParameter"
	"cli.py" -> load_dotenv
	"cli.py" -> "click.Option"
	"cli.py" -> "click.Path"
	"cli.py" -> list
	"cli.py" -> "extra.pop"
	"cli.py" -> "params.extend"
	"cli.py" -> "params.append"
	"cli.py" -> setdefault
	"cli.py" -> __init__
	"cli.py" -> super
	"cli.py" -> "self.add_command"
	"cli.py" -> "self.add_command"
	"cli.py" -> "self.add_command"
	"cli.py" -> "metadata.entry_points"
	"cli.py" -> "self.add_command"
	"cli.py" -> "ep.load"
	"cli.py" -> "self._load_plugin_commands"
	"cli.py" -> get_command
	"cli.py" -> super
	"cli.py" -> "ctx.ensure_object"
	"cli.py" -> "info.load_app"
	"cli.py" -> "click.secho"
	"cli.py" -> "e.format_message"
	"cli.py" -> "current_app._get_current_object"
	"cli.py" -> "ctx.with_resource"
	"cli.py" -> "app.app_context"
	"cli.py" -> "app.cli.get_command"
	"cli.py" -> "self._load_plugin_commands"
	"cli.py" -> set
	"cli.py" -> list_commands
	"cli.py" -> super
	"cli.py" -> "ctx.ensure_object"
	"cli.py" -> "rv.update"
	"cli.py" -> "cli.list_commands"
	"cli.py" -> "info.load_app"
	"cli.py" -> "click.secho"
	"cli.py" -> "e.format_message"
	"cli.py" -> "click.secho"
	"cli.py" -> "traceback.format_exc"
	"cli.py" -> sorted
	"cli.py" -> ScriptInfo
	"cli.py" -> make_context
	"cli.py" -> super
	"cli.py" -> "_env_file_option.handle_parse_result"
	"cli.py" -> "_app_option.handle_parse_result"
	"cli.py" -> parse_args
	"cli.py" -> super
	"cli.py" -> "os.path.join"
	"cli.py" -> lstrip
	"cli.py" -> len
	"cli.py" -> "os.path.isfile"
	"cli.py" -> "os.path.isfile"
	"cli.py" -> "click.secho"
	"cli.py" -> "dotenv.find_dotenv"
	"cli.py" -> "dotenv.dotenv_values"
	"cli.py" -> "os.path.isfile"
	"cli.py" -> "dotenv.dotenv_values"
	"cli.py" -> "data.items"
	"cli.py" -> bool
	"cli.py" -> is_running_from_reloader
	"cli.py" -> "click.echo"
	"cli.py" -> "click.echo"
	"cli.py" -> "click.Path"
	"cli.py" -> "click.BadParameter"
	"cli.py" -> "self.path_type"
	"cli.py" -> lower
	"cli.py" -> "click.STRING"
	"cli.py" -> "click.BadParameter"
	"cli.py" -> import_string
	"cli.py" -> isinstance
	"cli.py" -> "ctx.params.get"
	"cli.py" -> isinstance
	"cli.py" -> "click.BadParameter"
	"cli.py" -> "click.BadParameter"
	"cli.py" -> "click.BadParameter"
	"cli.py" -> "click.BadParameter"
	"cli.py" -> "self.split_envvar_value"
	"cli.py" -> super
	"cli.py" -> super_convert
	"cli.py" -> "info.load_app"
	"cli.py" -> is_running_from_reloader
	"cli.py" -> "traceback.print_exc"
	"cli.py" -> get_debug_flag
	"cli.py" -> show_server_banner
	"cli.py" -> run_simple
	"cli.py" -> "click.command"
	"cli.py" -> "click.option"
	"cli.py" -> "click.option"
	"cli.py" -> "click.option"
	"cli.py" -> CertParamType
	"cli.py" -> "click.option"
	"cli.py" -> "click.Path"
	"cli.py" -> "click.option"
	"cli.py" -> "click.option"
	"cli.py" -> "click.option"
	"cli.py" -> "click.option"
	"cli.py" -> SeparatedPathType
	"cli.py" -> "click.option"
	"cli.py" -> SeparatedPathType
	"cli.py" -> "run_command.params.insert"
	"cli.py" -> "os.environ.get"
	"cli.py" -> "os.path.isfile"
	"cli.py" -> open
	"cli.py" -> eval
	"cli.py" -> compile
	"cli.py" -> "f.read"
	"cli.py" -> "ctx.update"
	"cli.py" -> "current_app.make_shell_context"
	"cli.py" -> getattr
	"cli.py" -> "readline.set_completer"
	"cli.py" -> Completer
	"cli.py" -> interactive_hook
	"cli.py" -> "code.interact"
	"cli.py" -> "click.command"
	"cli.py" -> list
	"cli.py" -> "current_app.url_map.iter_rules"
	"cli.py" -> "click.echo"
	"cli.py" -> set
	"cli.py" -> any
	"cli.py" -> join
	"cli.py" -> sorted
	"cli.py" -> set
	"cli.py" -> "row.append"
	"cli.py" -> "row.append"
	"cli.py" -> "rows.append"
	"cli.py" -> "headers.append"
	"cli.py" -> "sorts.append"
	"cli.py" -> "headers.append"
	"cli.py" -> "sorts.append"
	"cli.py" -> "rows.sort"
	"cli.py" -> itemgetter
	"cli.py" -> "sorts.index"
	"cli.py" -> "rows.insert"
	"cli.py" -> max
	"cli.py" -> len
	"cli.py" -> range
	"cli.py" -> len
	"cli.py" -> "rows.insert"
	"cli.py" -> join
	"cli.py" -> enumerate
	"cli.py" -> "click.echo"
	"cli.py" -> "template.format"
	"cli.py" -> "click.command"
	"cli.py" -> "click.option"
	"cli.py" -> "click.Choice"
	"cli.py" -> "click.option"
	"cli.py" -> FlaskGroup
	"cli.py" -> "cli.main"
	"cli.py" -> main
	"__init__.py" -> lstrip
	"__init__.py" -> "textwrap.dedent"
	"__init__.py" -> "section._replace"
	"__init__.py" -> "Pair.parse"
	"__init__.py" -> "cls.read"
	"__init__.py" -> filter
	"__init__.py" -> map
	"__init__.py" -> "text.splitlines"
	"__init__.py" -> "value.startswith"
	"__init__.py" -> "value.endswith"
	"__init__.py" -> "value.strip"
	"__init__.py" -> Pair
	"__init__.py" -> "line.startswith"
	"__init__.py" -> "re.compile"
	"__init__.py" -> update
	"__init__.py" -> vars
	"__init__.py" -> "self.pattern.match"
	"__init__.py" -> import_module
	"__init__.py" -> "match.group"
	"__init__.py" -> filter
	"__init__.py" -> split
	"__init__.py" -> "match.group"
	"__init__.py" -> "functools.reduce"
	"__init__.py" -> "self.pattern.match"
	"__init__.py" -> "match.group"
	"__init__.py" -> "self.pattern.match"
	"__init__.py" -> "match.group"
	"__init__.py" -> "self.pattern.match"
	"__init__.py" -> "re.findall"
	"__init__.py" -> "match.group"
	"__init__.py" -> update
	"__init__.py" -> vars
	"__init__.py" -> getattr
	"__init__.py" -> all
	"__init__.py" -> map
	"__init__.py" -> "params.values"
	"__init__.py" -> "self._key"
	"__init__.py" -> "other._key"
	"__init__.py" -> "self._key"
	"__init__.py" -> "other._key"
	"__init__.py" -> AttributeError
	"__init__.py" -> hash
	"__init__.py" -> "self._key"
	"__init__.py" -> next
	"__init__.py" -> iter
	"__init__.py" -> "self.select"
	"__init__.py" -> KeyError
	"__init__.py" -> tuple
	"__init__.py" -> EntryPoints
	"__init__.py" -> "_py39compat.ep_matches"
	"__init__.py" -> cls
	"__init__.py" -> "ep._for"
	"__init__.py" -> "cls._from_text"
	"__init__.py" -> EntryPoint
	"__init__.py" -> "Sectioned.section_pairs"
	"__init__.py" -> open
	"__init__.py" -> "self.locate"
	"__init__.py" -> "stream.read"
	"__init__.py" -> open
	"__init__.py" -> "self.locate"
	"__init__.py" -> "stream.read"
	"__init__.py" -> "self.dist.locate_file"
	"__init__.py" -> "spec.partition"
	"__init__.py" -> "inspect.getmro"
	"__init__.py" -> vars
	"__init__.py" -> getattr
	"__init__.py" -> getattr
	"__init__.py" -> "warnings.warn"
	"__init__.py" -> __new__
	"__init__.py" -> super
	"__init__.py" -> ValueError
	"__init__.py" -> next
	"__init__.py" -> iter
	"__init__.py" -> "cls.discover"
	"__init__.py" -> PackageNotFoundError
	"__init__.py" -> "kwargs.pop"
	"__init__.py" -> ValueError
	"__init__.py" -> "DistributionFinder.Context"
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> resolver
	"__init__.py" -> "cls._discover_resolvers"
	"__init__.py" -> PathDistribution
	"__init__.py" -> "pathlib.Path"
	"__init__.py" -> getattr
	"__init__.py" -> filter
	"__init__.py" -> "self.read_text"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> cast
	"__init__.py" -> "_adapters.Message"
	"__init__.py" -> "email.message_from_string"
	"__init__.py" -> "Prepared.normalize"
	"__init__.py" -> "EntryPoints._from_text_for"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> PackagePath
	"__init__.py" -> FileHash
	"__init__.py" -> int
	"__init__.py" -> starmap
	"__init__.py" -> "csv.reader"
	"__init__.py" -> list
	"__init__.py" -> filter
	"__init__.py" -> exists
	"__init__.py" -> "path.locate"
	"__init__.py" -> skip_missing_files
	"__init__.py" -> make_files
	"__init__.py" -> "self._read_files_distinfo"
	"__init__.py" -> "self._read_files_egginfo_installed"
	"__init__.py" -> "self._read_files_egginfo_sources"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> "text.splitlines"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> getattr
	"__init__.py" -> as_posix
	"__init__.py" -> relative_to
	"__init__.py" -> resolve
	"__init__.py" -> resolve
	"__init__.py" -> "self.locate_file"
	"__init__.py" -> "text.splitlines"
	"__init__.py" -> map
	"__init__.py" -> "self.read_text"
	"__init__.py" -> map
	"__init__.py" -> "text.splitlines"
	"__init__.py" -> "self._read_dist_info_reqs"
	"__init__.py" -> "self._read_egg_info_reqs"
	"__init__.py" -> list
	"__init__.py" -> "self.metadata.get_all"
	"__init__.py" -> "self.read_text"
	"__init__.py" -> <unknown_function>
	"__init__.py" -> pass_none
	"__init__.py" -> "cls._convert_egg_info_reqs_to_simple_reqs"
	"__init__.py" -> "Sectioned.read"
	"__init__.py" -> "section.partition"
	"__init__.py" -> list
	"__init__.py" -> filter
	"__init__.py" -> make_condition
	"__init__.py" -> join
	"__init__.py" -> url_req_space
	"__init__.py" -> quoted_marker
	"__init__.py" -> "self._load_json"
	"__init__.py" -> <unknown_function>
	"__init__.py" -> pass_none
	"__init__.py" -> "self.read_text"
	"__init__.py" -> "types.SimpleNamespace"
	"__init__.py" -> update
	"__init__.py" -> vars
	"__init__.py" -> get
	"__init__.py" -> vars
	"__init__.py" -> Context
	"__init__.py" -> __new__
	"__init__.py" -> super
	"__init__.py" -> "functools.lru_cache"
	"__init__.py" -> "pathlib.Path"
	"__init__.py" -> suppress
	"__init__.py" -> "os.listdir"
	"__init__.py" -> suppress
	"__init__.py" -> "self.zip_children"
	"__init__.py" -> "zipp.Path"
	"__init__.py" -> "zip_path.root.namelist"
	"__init__.py" -> "dict.fromkeys"
	"__init__.py" -> "child.split"
	"__init__.py" -> search
	"__init__.py" -> "self.lookup"
	"__init__.py" -> suppress
	"__init__.py" -> "os.stat"
	"__init__.py" -> "self.lookup.cache_clear"
	"__init__.py" -> Lookup
	"__init__.py" -> lower
	"__init__.py" -> "os.path.basename"
	"__init__.py" -> "base.endswith"
	"__init__.py" -> FreezableDefaultDict
	"__init__.py" -> FreezableDefaultDict
	"__init__.py" -> "path.children"
	"__init__.py" -> "child.lower"
	"__init__.py" -> "low.endswith"
	"__init__.py" -> partition
	"__init__.py" -> "low.rpartition"
	"__init__.py" -> "Prepared.normalize"
	"__init__.py" -> append
	"__init__.py" -> "path.joinpath"
	"__init__.py" -> partition
	"__init__.py" -> "base.rpartition"
	"__init__.py" -> "Prepared.legacy_normalize"
	"__init__.py" -> append
	"__init__.py" -> "path.joinpath"
	"__init__.py" -> "self.infos.freeze"
	"__init__.py" -> "self.eggs.freeze"
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> "self.infos.values"
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> "self.eggs.values"
	"__init__.py" -> "itertools.chain"
	"__init__.py" -> "self.normalize"
	"__init__.py" -> "self.legacy_normalize"
	"__init__.py" -> replace
	"__init__.py" -> lower
	"__init__.py" -> "re.sub"
	"__init__.py" -> replace
	"__init__.py" -> "name.lower"
	"__init__.py" -> bool
	"__init__.py" -> "DistributionFinder.Context"
	"__init__.py" -> "self._search_paths"
	"__init__.py" -> map
	"__init__.py" -> Prepared
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> "path.search"
	"__init__.py" -> map
	"__init__.py" -> "FastPath.__new__.cache_clear"
	"__init__.py" -> suppress
	"__init__.py" -> read_text
	"__init__.py" -> "self._path.joinpath"
	"__init__.py" -> "os.path.basename"
	"__init__.py" -> str
	"__init__.py" -> <unknown_function>
	"__init__.py" -> pass_none
	"__init__.py" -> "self._name_from_stem"
	"__init__.py" -> super
	"__init__.py" -> "os.path.splitext"
	"__init__.py" -> "filename.partition"
	"__init__.py" -> "Distribution.from_name"
	"__init__.py" -> "Distribution.discover"
	"__init__.py" -> "Distribution.from_name"
	"__init__.py" -> distribution
	"__init__.py" -> "functools.partial"
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> _unique
	"__init__.py" -> distributions
	"__init__.py" -> select
	"__init__.py" -> EntryPoints
	"__init__.py" -> distribution
	"__init__.py" -> distribution
	"__init__.py" -> "collections.defaultdict"
	"__init__.py" -> distributions
	"__init__.py" -> _top_level_declared
	"__init__.py" -> _top_level_inferred
	"__init__.py" -> append
	"__init__.py" -> dict
	"__init__.py" -> split
	"__init__.py" -> "dist.read_text"
	"__init__.py" -> _topmost
	"__init__.py" -> "inspect.getmodulename"
	"__init__.py" -> str
	"__init__.py" -> set
	"__init__.py" -> map
	"__init__.py" -> always_iterable
	"__init__.py" -> filter
	"__init__.py" -> parsestr
	"__init__.py" -> Parser
	"__init__.py" -> parsebytes
	"__init__.py" -> BytesParser
	"__init__.py" -> parse
	"__init__.py" -> Parser
	"__init__.py" -> parse
	"__init__.py" -> BytesParser
	"parser.py" -> FeedParser
	"parser.py" -> "feedparser._set_headersonly"
	"parser.py" -> "fp.read"
	"parser.py" -> "feedparser.feed"
	"parser.py" -> "feedparser.close"
	"parser.py" -> "self.parse"
	"parser.py" -> StringIO
	"parser.py" -> "Parser.parse"
	"parser.py" -> "Parser.parsestr"
	"parser.py" -> Parser
	"parser.py" -> TextIOWrapper
	"parser.py" -> "self.parser.parse"
	"parser.py" -> "fp.detach"
	"parser.py" -> "text.decode"
	"parser.py" -> "self.parser.parsestr"
	"parser.py" -> "BytesParser.parse"
	"parser.py" -> "BytesParser.parsebytes"
	"feedparser.py" -> "re.compile"
	"feedparser.py" -> "re.compile"
	"feedparser.py" -> "re.compile"
	"feedparser.py" -> "re.compile"
	"feedparser.py" -> "re.compile"
	"feedparser.py" -> object
	"feedparser.py" -> StringIO
	"feedparser.py" -> deque
	"feedparser.py" -> "self._eofstack.append"
	"feedparser.py" -> "self._eofstack.pop"
	"feedparser.py" -> "self._partial.seek"
	"feedparser.py" -> "self.pushlines"
	"feedparser.py" -> "self._partial.readlines"
	"feedparser.py" -> "self._partial.seek"
	"feedparser.py" -> "self._partial.truncate"
	"feedparser.py" -> "self._lines.popleft"
	"feedparser.py" -> reversed
	"feedparser.py" -> ateof
	"feedparser.py" -> "self._lines.appendleft"
	"feedparser.py" -> "self._lines.appendleft"
	"feedparser.py" -> "self._partial.write"
	"feedparser.py" -> "self._partial.seek"
	"feedparser.py" -> "self._partial.readlines"
	"feedparser.py" -> "self._partial.seek"
	"feedparser.py" -> "self._partial.truncate"
	"feedparser.py" -> endswith
	"feedparser.py" -> "self._partial.write"
	"feedparser.py" -> "parts.pop"
	"feedparser.py" -> "self.pushlines"
	"feedparser.py" -> "self._lines.extend"
	"feedparser.py" -> "self.readline"
	"feedparser.py" -> _factory
	"feedparser.py" -> BufferedSubFile
	"feedparser.py" -> "self._parsegen"
	"feedparser.py" -> "self._input.push"
	"feedparser.py" -> "self._call_parse"
	"feedparser.py" -> "self._parse"
	"feedparser.py" -> "self._input.close"
	"feedparser.py" -> "self._call_parse"
	"feedparser.py" -> "self._pop_message"
	"feedparser.py" -> "root.get_content_maintype"
	"feedparser.py" -> "root.is_multipart"
	"feedparser.py" -> "errors.MultipartInvariantViolationDefect"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "self._factory"
	"feedparser.py" -> "self._factory"
	"feedparser.py" -> "self._cur.get_content_type"
	"feedparser.py" -> "msg.set_default_type"
	"feedparser.py" -> attach
	"feedparser.py" -> "self._msgstack.append"
	"feedparser.py" -> "self._msgstack.pop"
	"feedparser.py" -> "self._new_message"
	"feedparser.py" -> "headerRE.match"
	"feedparser.py" -> "NLCRE.match"
	"feedparser.py" -> "errors.MissingHeaderBodySeparatorDefect"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "self._input.unreadline"
	"feedparser.py" -> "headers.append"
	"feedparser.py" -> "self._parse_headers"
	"feedparser.py" -> "self._input.readline"
	"feedparser.py" -> "lines.append"
	"feedparser.py" -> "self._cur.set_payload"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> "self._cur.get_content_type"
	"feedparser.py" -> "self._input.push_eof_matcher"
	"feedparser.py" -> "self._parsegen"
	"feedparser.py" -> "self._pop_message"
	"feedparser.py" -> "self._input.pop_eof_matcher"
	"feedparser.py" -> "self._input.readline"
	"feedparser.py" -> "self._input.readline"
	"feedparser.py" -> "self._input.unreadline"
	"feedparser.py" -> "self._cur.get_content_maintype"
	"feedparser.py" -> "self._parsegen"
	"feedparser.py" -> "self._pop_message"
	"feedparser.py" -> "self._cur.get_content_maintype"
	"feedparser.py" -> "self._cur.get_boundary"
	"feedparser.py" -> "errors.NoBoundaryInMultipartDefect"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "lines.append"
	"feedparser.py" -> "self._cur.set_payload"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> lower
	"feedparser.py" -> str
	"feedparser.py" -> "self._cur.get"
	"feedparser.py" -> "errors.InvalidMultipartContentTransferEncodingDefect"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "re.compile"
	"feedparser.py" -> "re.escape"
	"feedparser.py" -> "self._input.readline"
	"feedparser.py" -> "boundaryre.match"
	"feedparser.py" -> "mo.group"
	"feedparser.py" -> "mo.group"
	"feedparser.py" -> "NLCRE_eol.search"
	"feedparser.py" -> len
	"feedparser.py" -> "eolmo.group"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> "self._input.unreadline"
	"feedparser.py" -> "self._input.readline"
	"feedparser.py" -> "boundaryre.match"
	"feedparser.py" -> "self._input.unreadline"
	"feedparser.py" -> "self._input.push_eof_matcher"
	"feedparser.py" -> "self._parsegen"
	"feedparser.py" -> "self._last.get_content_maintype"
	"feedparser.py" -> "NLCRE_eol.search"
	"feedparser.py" -> len
	"feedparser.py" -> "mo.group"
	"feedparser.py" -> isinstance
	"feedparser.py" -> "NLCRE_eol.search"
	"feedparser.py" -> len
	"feedparser.py" -> "mo.group"
	"feedparser.py" -> "self._input.pop_eof_matcher"
	"feedparser.py" -> "self._pop_message"
	"feedparser.py" -> "preamble.append"
	"feedparser.py" -> "errors.StartBoundaryNotFoundDefect"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "self._cur.set_payload"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> "errors.CloseBoundaryNotFoundDefect"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "epilogue.append"
	"feedparser.py" -> "NLCRE_bol.match"
	"feedparser.py" -> len
	"feedparser.py" -> "bolmo.group"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> "lines.append"
	"feedparser.py" -> "self._cur.set_payload"
	"feedparser.py" -> "EMPTYSTRING.join"
	"feedparser.py" -> enumerate
	"feedparser.py" -> "errors.FirstHeaderLineIsContinuationDefect"
	"feedparser.py" -> "self.policy.handle_defect"
	"feedparser.py" -> "lastvalue.append"
	"feedparser.py" -> "self._cur.set_raw"
	"feedparser.py" -> "self.policy.header_source_parse"
	"feedparser.py" -> "line.startswith"
	"feedparser.py" -> "NLCRE_eol.search"
	"feedparser.py" -> len
	"feedparser.py" -> "mo.group"
	"feedparser.py" -> "self._cur.set_unixfrom"
	"feedparser.py" -> len
	"feedparser.py" -> "self._input.unreadline"
	"feedparser.py" -> "errors.MisplacedEnvelopeHeaderDefect"
	"feedparser.py" -> "self._cur.defects.append"
	"feedparser.py" -> "line.find"
	"feedparser.py" -> "errors.InvalidHeaderDefect"
	"feedparser.py" -> "self._cur.defects.append"
	"feedparser.py" -> "self._cur.set_raw"
	"feedparser.py" -> "self.policy.header_source_parse"
	"feedparser.py" -> feed
	"feedparser.py" -> super
	"feedparser.py" -> "data.decode"
	"__init__.py" -> "itertools.islice"
	"__init__.py" -> _ancestry
	"__init__.py" -> "path.rstrip"
	"__init__.py" -> "posixpath.split"
	"__init__.py" -> "itertools.filterfalse"
	"__init__.py" -> set
	"__init__.py" -> __init__
	"__init__.py" -> super
	"__init__.py" -> __init__
	"__init__.py" -> super
	"__init__.py" -> "itertools.chain.from_iterable"
	"__init__.py" -> map
	"__init__.py" -> _dedupe
	"__init__.py" -> _difference
	"__init__.py" -> namelist
	"__init__.py" -> super
	"__init__.py" -> list
	"__init__.py" -> "self._implied_dirs"
	"__init__.py" -> set
	"__init__.py" -> "self.namelist"
	"__init__.py" -> "self._name_set"
	"__init__.py" -> getinfo
	"__init__.py" -> super
	"__init__.py" -> "name.endswith"
	"__init__.py" -> "self._name_set"
	"__init__.py" -> "zipfile.ZipInfo"
	"__init__.py" -> isinstance
	"__init__.py" -> isinstance
	"__init__.py" -> cls
	"__init__.py" -> "cls._implied_dirs"
	"__init__.py" -> "zf.namelist"
	"__init__.py" -> "zf.writestr"
	"__init__.py" -> "contextlib.suppress"
	"__init__.py" -> namelist
	"__init__.py" -> super
	"__init__.py" -> "contextlib.suppress"
	"__init__.py" -> _name_set
	"__init__.py" -> super
	"__init__.py" -> text_encoding
	"__init__.py" -> "FastLookup.make"
	"__init__.py" -> hash
	"__init__.py" -> "self.is_dir"
	"__init__.py" -> IsADirectoryError
	"__init__.py" -> "self.exists"
	"__init__.py" -> FileNotFoundError
	"__init__.py" -> "self.root.open"
	"__init__.py" -> ValueError
	"__init__.py" -> _extract_text_encoding
	"__init__.py" -> "io.TextIOWrapper"
	"__init__.py" -> "pathlib.PurePosixPath"
	"__init__.py" -> "self._base"
	"__init__.py" -> "self._base"
	"__init__.py" -> "self._base"
	"__init__.py" -> "self._base"
	"__init__.py" -> joinpath
	"__init__.py" -> "pathlib.Path"
	"__init__.py" -> _extract_text_encoding
	"__init__.py" -> "self.open"
	"__init__.py" -> "strm.read"
	"__init__.py" -> "self.open"
	"__init__.py" -> "strm.read"
	"__init__.py" -> "posixpath.dirname"
	"__init__.py" -> "path.at.rstrip"
	"__init__.py" -> "self.at.rstrip"
	"__init__.py" -> "self.__class__"
	"__init__.py" -> "self.at.endswith"
	"__init__.py" -> "self.exists"
	"__init__.py" -> "self.is_dir"
	"__init__.py" -> "self.root._name_set"
	"__init__.py" -> "self.is_dir"
	"__init__.py" -> ValueError
	"__init__.py" -> map
	"__init__.py" -> "self.root.namelist"
	"__init__.py" -> filter
	"__init__.py" -> match
	"__init__.py" -> "pathlib.PurePosixPath"
	"__init__.py" -> ValueError
	"__init__.py" -> "re.escape"
	"__init__.py" -> "re.compile"
	"__init__.py" -> translate
	"__init__.py" -> map
	"__init__.py" -> filter
	"__init__.py" -> "self.root.namelist"
	"__init__.py" -> "self.glob"
	"__init__.py" -> "posixpath.relpath"
	"__init__.py" -> str
	"__init__.py" -> str
	"__init__.py" -> "other.joinpath"
	"__init__.py" -> "posixpath.join"
	"__init__.py" -> "self.__repr.format"
	"__init__.py" -> "posixpath.join"
	"__init__.py" -> "self._next"
	"__init__.py" -> "self.root.resolve_dir"
	"__init__.py" -> "posixpath.dirname"
	"__init__.py" -> "self.at.rstrip"
	"__init__.py" -> "self._next"
	"glob.py" -> list
	"glob.py" -> iglob
	"glob.py" -> "sys.audit"
	"glob.py" -> "sys.audit"
	"glob.py" -> "os.fspath"
	"glob.py" -> _iglob
	"glob.py" -> _isrecursive
	"glob.py" -> next
	"glob.py" -> "itertools.chain"
	"glob.py" -> "os.path.split"
	"glob.py" -> has_magic
	"glob.py" -> _lexists
	"glob.py" -> _join
	"glob.py" -> _isdir
	"glob.py" -> _join
	"glob.py" -> _isrecursive
	"glob.py" -> _glob2
	"glob.py" -> _glob1
	"glob.py" -> has_magic
	"glob.py" -> _iglob
	"glob.py" -> has_magic
	"glob.py" -> _isrecursive
	"glob.py" -> glob_in_dir
	"glob.py" -> _join
	"glob.py" -> "os.path.join"
	"glob.py" -> _listdir
	"glob.py" -> _ishidden
	"glob.py" -> _ishidden
	"glob.py" -> "fnmatch.filter"
	"glob.py" -> _lexists
	"glob.py" -> _join
	"glob.py" -> _isdir
	"glob.py" -> _glob0
	"glob.py" -> _glob1
	"glob.py" -> _isrecursive
	"glob.py" -> _rlistdir
	"glob.py" -> "os.open"
	"glob.py" -> isinstance
	"glob.py" -> isinstance
	"glob.py" -> bytes
	"glob.py" -> "os.scandir"
	"glob.py" -> "entry.is_dir"
	"glob.py" -> fsencode
	"glob.py" -> "os.close"
	"glob.py" -> "contextlib.closing"
	"glob.py" -> _iterdir
	"glob.py" -> list
	"glob.py" -> _listdir
	"glob.py" -> _ishidden
	"glob.py" -> _join
	"glob.py" -> _rlistdir
	"glob.py" -> _join
	"glob.py" -> "os.path.lexists"
	"glob.py" -> "os.lstat"
	"glob.py" -> "os.path.isdir"
	"glob.py" -> "os.stat"
	"glob.py" -> "stat.S_ISDIR"
	"glob.py" -> "os.path.join"
	"glob.py" -> "re.compile"
	"glob.py" -> "re.compile"
	"glob.py" -> isinstance
	"glob.py" -> "magic_check_bytes.search"
	"glob.py" -> "magic_check.search"
	"glob.py" -> isinstance
	"glob.py" -> "os.path.splitdrive"
	"glob.py" -> isinstance
	"glob.py" -> "magic_check_bytes.sub"
	"glob.py" -> "magic_check.sub"
	"glob.py" -> getattr
	"csv.py" -> "self._validate"
	"csv.py" -> _Dialect
	"csv.py" -> Error
	"csv.py" -> str
	"csv.py" -> register_dialect
	"csv.py" -> register_dialect
	"csv.py" -> register_dialect
	"csv.py" -> reader
	"csv.py" -> next
	"csv.py" -> next
	"csv.py" -> next
	"csv.py" -> dict
	"csv.py" -> zip
	"csv.py" -> len
	"csv.py" -> len
	"csv.py" -> "extrasaction.lower"
	"csv.py" -> ValueError
	"csv.py" -> writer
	"csv.py" -> dict
	"csv.py" -> zip
	"csv.py" -> "self.writerow"
	"csv.py" -> "rowdict.keys"
	"csv.py" -> ValueError
	"csv.py" -> join
	"csv.py" -> repr
	"csv.py" -> "rowdict.get"
	"csv.py" -> "self.writer.writerow"
	"csv.py" -> "self._dict_to_list"
	"csv.py" -> "self.writer.writerows"
	"csv.py" -> map
	"csv.py" -> "self._guess_quote_and_delimiter"
	"csv.py" -> "self._guess_delimiter"
	"csv.py" -> Error
	"csv.py" -> "re.compile"
	"csv.py" -> "regexp.findall"
	"csv.py" -> "quotes.get"
	"csv.py" -> "delims.get"
	"csv.py" -> max
	"csv.py" -> max
	"csv.py" -> "re.compile"
	"csv.py" -> "re.escape"
	"csv.py" -> "dq_regexp.search"
	"csv.py" -> list
	"csv.py" -> filter
	"csv.py" -> "data.split"
	"csv.py" -> chr
	"csv.py" -> range
	"csv.py" -> min
	"csv.py" -> len
	"csv.py" -> len
	"csv.py" -> "charFrequency.get"
	"csv.py" -> "line.count"
	"csv.py" -> "metaFrequency.get"
	"csv.py" -> "charFrequency.keys"
	"csv.py" -> list
	"csv.py" -> items
	"csv.py" -> len
	"csv.py" -> len
	"csv.py" -> max
	"csv.py" -> "items.remove"
	"csv.py" -> sum
	"csv.py" -> "modes.items"
	"csv.py" -> float
	"csv.py" -> min
	"csv.py" -> len
	"csv.py" -> len
	"csv.py" -> len
	"csv.py" -> list
	"csv.py" -> "delims.keys"
	"csv.py" -> count
	"csv.py" -> count
	"csv.py" -> len
	"csv.py" -> "delims.keys"
	"csv.py" -> count
	"csv.py" -> count
	"csv.py" -> "delims.items"
	"csv.py" -> "items.sort"
	"csv.py" -> count
	"csv.py" -> count
	"csv.py" -> reader
	"csv.py" -> StringIO
	"csv.py" -> "self.sniff"
	"csv.py" -> next
	"csv.py" -> len
	"csv.py" -> range
	"csv.py" -> len
	"csv.py" -> list
	"csv.py" -> "columnTypes.keys"
	"csv.py" -> thisType
	"csv.py" -> len
	"csv.py" -> "columnTypes.items"
	"csv.py" -> type
	"csv.py" -> type
	"csv.py" -> len
	"csv.py" -> colType
	"rlcompleter.py" -> isinstance
	"rlcompleter.py" -> TypeError
	"rlcompleter.py" -> "text.strip"
	"rlcompleter.py" -> "readline.insert_text"
	"rlcompleter.py" -> "readline.redisplay"
	"rlcompleter.py" -> "self.attr_matches"
	"rlcompleter.py" -> "self.global_matches"
	"rlcompleter.py" -> callable
	"rlcompleter.py" -> "inspect.signature"
	"rlcompleter.py" -> len
	"rlcompleter.py" -> "seen.add"
	"rlcompleter.py" -> "matches.append"
	"rlcompleter.py" -> "nspace.items"
	"rlcompleter.py" -> "seen.add"
	"rlcompleter.py" -> "matches.append"
	"rlcompleter.py" -> "self._callable_postfix"
	"rlcompleter.py" -> "re.match"
	"rlcompleter.py" -> "m.group"
	"rlcompleter.py" -> eval
	"rlcompleter.py" -> set
	"rlcompleter.py" -> dir
	"rlcompleter.py" -> "words.discard"
	"rlcompleter.py" -> hasattr
	"rlcompleter.py" -> "words.add"
	"rlcompleter.py" -> "words.update"
	"rlcompleter.py" -> get_class_members
	"rlcompleter.py" -> len
	"rlcompleter.py" -> isinstance
	"rlcompleter.py" -> getattr
	"rlcompleter.py" -> type
	"rlcompleter.py" -> "matches.append"
	"rlcompleter.py" -> getattr
	"rlcompleter.py" -> "matches.append"
	"rlcompleter.py" -> "self._callable_postfix"
	"rlcompleter.py" -> "matches.append"
	"rlcompleter.py" -> "matches.sort"
	"rlcompleter.py" -> dir
	"rlcompleter.py" -> hasattr
	"rlcompleter.py" -> get_class_members
	"rlcompleter.py" -> "readline.set_completer"
	"rlcompleter.py" -> Completer
	"rlcompleter.py" -> "atexit.register"
	"rlcompleter.py" -> "readline.set_completer"
	"code.py" -> CommandCompiler
	"code.py" -> "self.compile"
	"code.py" -> "self.showsyntaxerror"
	"code.py" -> "self.runcode"
	"code.py" -> exec
	"code.py" -> "self.showtraceback"
	"code.py" -> "sys.exc_info"
	"code.py" -> SyntaxError
	"code.py" -> "traceback.format_exception_only"
	"code.py" -> "self.write"
	"code.py" -> join
	"code.py" -> "sys.excepthook"
	"code.py" -> "sys.exc_info"
	"code.py" -> "traceback.format_exception"
	"code.py" -> "self.write"
	"code.py" -> join
	"code.py" -> "sys.excepthook"
	"code.py" -> "sys.stderr.write"
	"code.py" -> "InteractiveInterpreter.__init__"
	"code.py" -> "self.resetbuffer"
	"code.py" -> "self.write"
	"code.py" -> "self.write"
	"code.py" -> str
	"code.py" -> "self.raw_input"
	"code.py" -> "self.write"
	"code.py" -> "self.push"
	"code.py" -> "self.write"
	"code.py" -> "self.resetbuffer"
	"code.py" -> "self.write"
	"code.py" -> "self.write"
	"code.py" -> "self.buffer.append"
	"code.py" -> join
	"code.py" -> "self.runsource"
	"code.py" -> "self.resetbuffer"
	"code.py" -> input
	"code.py" -> InteractiveConsole
	"code.py" -> "console.interact"
	"code.py" -> "argparse.ArgumentParser"
	"code.py" -> "parser.add_argument"
	"code.py" -> "parser.parse_args"
	"code.py" -> interact
	"codeop.py" -> getattr
	"codeop.py" -> "source.split"
	"codeop.py" -> "line.strip"
	"codeop.py" -> "warnings.catch_warnings"
	"codeop.py" -> "warnings.simplefilter"
	"codeop.py" -> compiler
	"codeop.py" -> compiler
	"codeop.py" -> str
	"codeop.py" -> compiler
	"codeop.py" -> repr
	"codeop.py" -> repr
	"codeop.py" -> compile
	"codeop.py" -> _maybe_compile
	"codeop.py" -> compile
	"codeop.py" -> Compile
	"codeop.py" -> _maybe_compile
	"wrappers.py" -> super
	"wrappers.py" -> super
	"wrappers.py" -> super
	"wrappers.py" -> "endpoint.rpartition"
	"wrappers.py" -> _split_blueprint_path
	"wrappers.py" -> _load_form_data
	"wrappers.py" -> super
	"wrappers.py" -> attach_enctype_error_multidict
	"wrappers.py" -> on_json_loading_failed
	"wrappers.py" -> super
	"wrappers.py" -> BadRequest
	"wrappers.py" -> super
	"app.py" -> "t.TypeVar"
	"app.py" -> "t.TypeVar"
	"app.py" -> "t.TypeVar"
	"app.py" -> "t.TypeVar"
	"app.py" -> "t.TypeVar"
	"app.py" -> isinstance
	"app.py" -> timedelta
	"app.py" -> ImmutableDict
	"app.py" -> timedelta
	"app.py" -> SecureCookieSessionInterface
	"app.py" -> __init__
	"app.py" -> super
	"app.py" -> "cli.AppGroup"
	"app.py" -> bool
	"app.py" -> "weakref.ref"
	"app.py" -> "self.add_url_rule"
	"app.py" -> send_static_file
	"app.py" -> self_ref
	"app.py" -> isinstance
	"app.py" -> int
	"app.py" -> "value.total_seconds"
	"app.py" -> RuntimeError
	"app.py" -> "self.get_send_file_max_age"
	"app.py" -> send_from_directory
	"app.py" -> "t.cast"
	"app.py" -> ValueError
	"app.py" -> "os.path.join"
	"app.py" -> open
	"app.py" -> open
	"app.py" -> "os.path.join"
	"app.py" -> open
	"app.py" -> open
	"app.py" -> dict
	"app.py" -> "self.jinja_environment"
	"app.py" -> "rv.globals.update"
	"app.py" -> get_host
	"app.py" -> "self.url_map.bind_to_environ"
	"app.py" -> "self.url_map.bind"
	"app.py" -> isinstance
	"app.py" -> FormDataRoutingRedirect
	"app.py" -> chain
	"app.py" -> reversed
	"app.py" -> "context.copy"
	"app.py" -> "context.update"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "context.update"
	"app.py" -> "rv.update"
	"app.py" -> processor
	"app.py" -> "os.environ.get"
	"app.py" -> is_running_from_reloader
	"app.py" -> "click.secho"
	"app.py" -> get_load_dotenv
	"app.py" -> "cli.load_dotenv"
	"app.py" -> get_debug_flag
	"app.py" -> bool
	"app.py" -> "self.config.get"
	"app.py" -> "server_name.partition"
	"app.py" -> int
	"app.py" -> int
	"app.py" -> "options.setdefault"
	"app.py" -> "options.setdefault"
	"app.py" -> "options.setdefault"
	"app.py" -> "cli.show_server_banner"
	"app.py" -> run_simple
	"app.py" -> "t.cast"
	"app.py" -> cls
	"app.py" -> cls
	"app.py" -> isinstance
	"app.py" -> "self._find_error_handler"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> isinstance
	"app.py" -> isinstance
	"app.py" -> "self.trap_http_exception"
	"app.py" -> "self.handle_http_exception"
	"app.py" -> "self._find_error_handler"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "sys.exc_info"
	"app.py" -> "got_request_exception.send"
	"app.py" -> "self.log_exception"
	"app.py" -> InternalServerError
	"app.py" -> "self._find_error_handler"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "self.finalize_request"
	"app.py" -> "self.logger.error"
	"app.py" -> "self.raise_routing_exception"
	"app.py" -> getattr
	"app.py" -> "self.make_default_options_response"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "request_started.send"
	"app.py" -> "self.preprocess_request"
	"app.py" -> "self.dispatch_request"
	"app.py" -> "self.handle_user_exception"
	"app.py" -> "self.finalize_request"
	"app.py" -> "self.make_response"
	"app.py" -> "self.process_response"
	"app.py" -> "request_finished.send"
	"app.py" -> "self.logger.exception"
	"app.py" -> "adapter.allowed_methods"
	"app.py" -> "self.response_class"
	"app.py" -> "rv.allow.update"
	"app.py" -> iscoroutinefunction
	"app.py" -> "self.async_to_sync"
	"app.py" -> RuntimeError
	"app.py" -> asgiref_async_to_sync
	"app.py" -> "_cv_request.get"
	"app.py" -> "_cv_app.get"
	"app.py" -> "self.create_url_adapter"
	"app.py" -> RuntimeError
	"app.py" -> ValueError
	"app.py" -> "self.inject_url_defaults"
	"app.py" -> "url_adapter.build"
	"app.py" -> "values.update"
	"app.py" -> "self.handle_url_build_error"
	"app.py" -> _url_quote
	"app.py" -> isinstance
	"app.py" -> len
	"app.py" -> isinstance
	"app.py" -> TypeError
	"app.py" -> TypeError
	"app.py" -> isinstance
	"app.py" -> isinstance
	"app.py" -> isinstance
	"app.py" -> "self.response_class"
	"app.py" -> isinstance
	"app.py" -> "self.json.response"
	"app.py" -> isinstance
	"app.py" -> callable
	"app.py" -> "self.response_class.force_type"
	"app.py" -> with_traceback
	"app.py" -> TypeError
	"app.py" -> type
	"app.py" -> "sys.exc_info"
	"app.py" -> TypeError
	"app.py" -> type
	"app.py" -> "t.cast"
	"app.py" -> isinstance
	"app.py" -> "rv.headers.update"
	"app.py" -> reversed
	"app.py" -> url_func
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "request_ctx._get_current_object"
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> chain
	"app.py" -> reversed
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "self.session_interface.is_null_session"
	"app.py" -> "self.session_interface.save_session"
	"app.py" -> "sys.exc_info"
	"app.py" -> chain
	"app.py" -> reversed
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "request_tearing_down.send"
	"app.py" -> "sys.exc_info"
	"app.py" -> reversed
	"app.py" -> <unknown_function>
	"app.py" -> "self.ensure_sync"
	"app.py" -> "appcontext_tearing_down.send"
	"app.py" -> AppContext
	"app.py" -> RequestContext
	"app.py" -> EnvironBuilder
	"app.py" -> "self.request_context"
	"app.py" -> "builder.get_environ"
	"app.py" -> "builder.close"
	"app.py" -> "self.request_context"
	"app.py" -> "ctx.push"
	"app.py" -> "self.full_dispatch_request"
	"app.py" -> "self.handle_exception"
	"app.py" -> "sys.exc_info"
	"app.py" -> response
	"app.py" -> <unknown_function>
	"app.py" -> "_cv_app.get"
	"app.py" -> <unknown_function>
	"app.py" -> "_cv_request.get"
	"app.py" -> "self.should_ignore_error"
	"app.py" -> "ctx.pop"
	"app.py" -> "self.wsgi_app"
	"sync.py" -> TypeVar
	"sync.py" -> ParamSpec
	"sync.py" -> TypeVar
	"sync.py" -> "context.get"
	"sync.py" -> "cvar.get"
	"sync.py" -> "cvar.set"
	"sync.py" -> "cvar.set"
	"sync.py" -> hasattr
	"sync.py" -> "inspect.ismethod"
	"sync.py" -> isinstance
	"sync.py" -> iscoroutinefunction
	"sync.py" -> "SyncToAsync.thread_sensitive_context.get"
	"sync.py" -> "SyncToAsync.thread_sensitive_context.set"
	"sync.py" -> "SyncToAsync.context_to_thread_executor.pop"
	"sync.py" -> "executor.shutdown"
	"sync.py" -> "SyncToAsync.thread_sensitive_context.reset"
	"sync.py" -> Local
	"sync.py" -> callable
	"sync.py" -> _iscoroutinefunction_or_partial
	"sync.py" -> _iscoroutinefunction_or_partial
	"sync.py" -> getattr
	"sync.py" -> "warnings.warn"
	"sync.py" -> "asyncio.get_running_loop"
	"sync.py" -> getattr
	"sync.py" -> "os.getpid"
	"sync.py" -> getattr
	"sync.py" -> "asyncio.get_running_loop"
	"sync.py" -> "event_loop.is_running"
	"sync.py" -> RuntimeError
	"sync.py" -> "contextvars.copy_context"
	"sync.py" -> Future
	"sync.py" -> "threading.current_thread"
	"sync.py" -> hasattr
	"sync.py" -> CurrentThreadExecutor
	"sync.py" -> "self.main_wrap"
	"sync.py" -> "sys.exc_info"
	"sync.py" -> "self.main_event_loop.is_running"
	"sync.py" -> "asyncio.new_event_loop"
	"sync.py" -> ThreadPoolExecutor
	"sync.py" -> "loop_executor.submit"
	"sync.py" -> "current_executor.run_until_future"
	"sync.py" -> "loop_future.result"
	"sync.py" -> "self.main_event_loop.call_soon_threadsafe"
	"sync.py" -> "current_executor.run_until_future"
	"sync.py" -> hasattr
	"sync.py" -> _restore_context
	"sync.py" -> "call_result.result"
	"sync.py" -> "asyncio.set_event_loop"
	"sync.py" -> "loop.run_until_complete"
	"sync.py" -> "asyncio.all_tasks"
	"sync.py" -> "task.cancel"
	"sync.py" -> "asyncio.gather"
	"sync.py" -> "loop.run_until_complete"
	"sync.py" -> gather
	"sync.py" -> "task.cancelled"
	"sync.py" -> "task.exception"
	"sync.py" -> "loop.call_exception_handler"
	"sync.py" -> "task.exception"
	"sync.py" -> hasattr
	"sync.py" -> "loop.run_until_complete"
	"sync.py" -> "loop.shutdown_asyncgens"
	"sync.py" -> "loop.close"
	"sync.py" -> "asyncio.set_event_loop"
	"sync.py" -> "functools.partial"
	"sync.py" -> "functools.update_wrapper"
	"sync.py" -> _restore_context
	"sync.py" -> "SyncToAsync.get_current_task"
	"sync.py" -> "self.awaitable"
	"sync.py" -> "self.awaitable"
	"sync.py" -> "call_result.set_exception"
	"sync.py" -> "call_result.set_result"
	"sync.py" -> "contextvars.copy_context"
	"sync.py" -> "threading.local"
	"sync.py" -> ThreadPoolExecutor
	"sync.py" -> "contextvars.ContextVar"
	"sync.py" -> "contextvars.ContextVar"
	"sync.py" -> "weakref.WeakKeyDictionary"
	"sync.py" -> callable
	"sync.py" -> _iscoroutinefunction_or_partial
	"sync.py" -> _iscoroutinefunction_or_partial
	"sync.py" -> getattr
	"sync.py" -> TypeError
	"sync.py" -> "functools.update_wrapper"
	"sync.py" -> markcoroutinefunction
	"sync.py" -> TypeError
	"sync.py" -> "asyncio.get_running_loop"
	"sync.py" -> hasattr
	"sync.py" -> "self.thread_sensitive_context.get"
	"sync.py" -> "self.thread_sensitive_context.get"
	"sync.py" -> ThreadPoolExecutor
	"sync.py" -> "self.deadlock_context.get"
	"sync.py" -> RuntimeError
	"sync.py" -> "self.deadlock_context.set"
	"sync.py" -> "contextvars.copy_context"
	"sync.py" -> "functools.partial"
	"sync.py" -> "loop.run_in_executor"
	"sync.py" -> "functools.partial"
	"sync.py" -> "self.get_current_task"
	"sync.py" -> "sys.exc_info"
	"sync.py" -> _restore_context
	"sync.py" -> "self.deadlock_context.set"
	"sync.py" -> "functools.partial"
	"sync.py" -> "functools.update_wrapper"
	"sync.py" -> "os.getpid"
	"sync.py" -> "threading.current_thread"
	"sync.py" -> "AsyncToSync.launch_map.get"
	"sync.py" -> func
	"sync.py" -> func
	"sync.py" -> "asyncio.current_task"
	"sync.py" -> AsyncToSync
	"sync.py" -> AsyncToSync
	"sync.py" -> SyncToAsync
	"sync.py" -> SyncToAsync
	"__init__.py" -> AttributeError
	"debughelpers.py" -> "request.form.getlist"
	"debughelpers.py" -> join
	"debughelpers.py" -> repr
	"debughelpers.py" -> "buf.append"
	"debughelpers.py" -> join
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> "exc.new_url.partition"
	"debughelpers.py" -> "buf.append"
	"debughelpers.py" -> "buf.append"
	"debughelpers.py" -> __init__
	"debughelpers.py" -> super
	"debughelpers.py" -> join
	"debughelpers.py" -> __getitem__
	"debughelpers.py" -> super
	"debughelpers.py" -> with_traceback
	"debughelpers.py" -> DebugFilesKeyError
	"debughelpers.py" -> type
	"debughelpers.py" -> type
	"debughelpers.py" -> sorted
	"debughelpers.py" -> "loader.__dict__.items"
	"debughelpers.py" -> "key.startswith"
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> all
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> enumerate
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> isinstance
	"debughelpers.py" -> repr
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> _dump_loader_info
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "info.append"
	"debughelpers.py" -> "app.logger.info"
	"debughelpers.py" -> join
	"ctx.py" -> object
	"ctx.py" -> AttributeError
	"ctx.py" -> AttributeError
	"ctx.py" -> "self.__dict__.get"
	"ctx.py" -> "self.__dict__.pop"
	"ctx.py" -> "self.__dict__.pop"
	"ctx.py" -> "self.__dict__.setdefault"
	"ctx.py" -> iter
	"ctx.py" -> "_cv_app.get"
	"ctx.py" -> "object.__repr__"
	"ctx.py" -> "_cv_request.get"
	"ctx.py" -> RuntimeError
	"ctx.py" -> "ctx._after_request_functions.append"
	"ctx.py" -> "t.TypeVar"
	"ctx.py" -> "_cv_request.get"
	"ctx.py" -> RuntimeError
	"ctx.py" -> "ctx.copy"
	"ctx.py" -> <unknown_function>
	"ctx.py" -> "ctx.app.ensure_sync"
	"ctx.py" -> update_wrapper
	"ctx.py" -> "_cv_request.get"
	"ctx.py" -> "_cv_app.get"
	"ctx.py" -> "app.create_url_adapter"
	"ctx.py" -> "app.app_ctx_globals_class"
	"ctx.py" -> "self._cv_tokens.append"
	"ctx.py" -> "_cv_app.set"
	"ctx.py" -> "appcontext_pushed.send"
	"ctx.py" -> len
	"ctx.py" -> "sys.exc_info"
	"ctx.py" -> "self.app.do_teardown_appcontext"
	"ctx.py" -> "_cv_app.get"
	"ctx.py" -> "_cv_app.reset"
	"ctx.py" -> "self._cv_tokens.pop"
	"ctx.py" -> AssertionError
	"ctx.py" -> "appcontext_popped.send"
	"ctx.py" -> "self.push"
	"ctx.py" -> "self.pop"
	"ctx.py" -> "app.request_class"
	"ctx.py" -> "app.create_url_adapter"
	"ctx.py" -> "self.__class__"
	"ctx.py" -> "self.url_adapter.match"
	"ctx.py" -> "_cv_app.get"
	"ctx.py" -> "self.app.app_context"
	"ctx.py" -> "app_ctx.push"
	"ctx.py" -> "self._cv_tokens.append"
	"ctx.py" -> "_cv_request.set"
	"ctx.py" -> "session_interface.open_session"
	"ctx.py" -> "session_interface.make_null_session"
	"ctx.py" -> "self.match_request"
	"ctx.py" -> len
	"ctx.py" -> "sys.exc_info"
	"ctx.py" -> "self.app.do_teardown_request"
	"ctx.py" -> getattr
	"ctx.py" -> request_close
	"ctx.py" -> "_cv_request.get"
	"ctx.py" -> "self._cv_tokens.pop"
	"ctx.py" -> "_cv_request.reset"
	"ctx.py" -> "app_ctx.pop"
	"ctx.py" -> AssertionError
	"ctx.py" -> "self.push"
	"ctx.py" -> "self.pop"
	"ctx.py" -> type
	"typing.py" -> "t.TypeVar"
	"testing.py" -> bool
	"testing.py" -> "app.config.get"
	"testing.py" -> urlsplit
	"testing.py" -> "app_root.lstrip"
	"testing.py" -> __init__
	"testing.py" -> super
	"testing.py" -> "self.app.json.dumps"
	"testing.py" -> "importlib.metadata.version"
	"testing.py" -> __init__
	"testing.py" -> super
	"testing.py" -> ExitStack
	"testing.py" -> _get_werkzeug_version
	"testing.py" -> TypeError
	"testing.py" -> "app.test_request_context"
	"testing.py" -> "self._add_cookies_to_wsgi"
	"testing.py" -> "app.session_interface.open_session"
	"testing.py" -> RuntimeError
	"testing.py" -> "app.response_class"
	"testing.py" -> "app.session_interface.is_null_session"
	"testing.py" -> "app.session_interface.save_session"
	"testing.py" -> "self._update_cookies_from_response"
	"testing.py" -> "ctx.request.host.partition"
	"testing.py" -> "resp.headers.getlist"
	"testing.py" -> "self._copy_environ"
	"testing.py" -> "kwargs.get"
	"testing.py" -> EnvironBuilder
	"testing.py" -> "builder.get_request"
	"testing.py" -> "builder.close"
	"testing.py" -> isinstance
	"testing.py" -> isinstance
	"testing.py" -> copy
	"testing.py" -> "self._copy_environ"
	"testing.py" -> "builder.get_request"
	"testing.py" -> isinstance
	"testing.py" -> get_request
	"testing.py" -> "EnvironBuilder.from_environ"
	"testing.py" -> "self._copy_environ"
	"testing.py" -> copy
	"testing.py" -> "self._copy_environ"
	"testing.py" -> "self._request_from_builder_args"
	"testing.py" -> "self._context_stack.close"
	"testing.py" -> open
	"testing.py" -> super
	"testing.py" -> "self._new_contexts.pop"
	"testing.py" -> "self._context_stack.enter_context"
	"testing.py" -> RuntimeError
	"testing.py" -> "self._context_stack.close"
	"testing.py" -> __init__
	"testing.py" -> super
	"testing.py" -> ScriptInfo
	"testing.py" -> invoke
	"testing.py" -> super
	"helpers.py" -> "os.environ.get"
	"helpers.py" -> bool
	"helpers.py" -> "val.lower"
	"helpers.py" -> "os.environ.get"
	"helpers.py" -> "val.lower"
	"helpers.py" -> iter
	"helpers.py" -> generator_or_function
	"helpers.py" -> stream_with_context
	"helpers.py" -> update_wrapper
	"helpers.py" -> "_cv_request.get"
	"helpers.py" -> RuntimeError
	"helpers.py" -> hasattr
	"helpers.py" -> "gen.close"
	"helpers.py" -> generator
	"helpers.py" -> next
	"helpers.py" -> "current_app.response_class"
	"helpers.py" -> len
	"helpers.py" -> "current_app.make_response"
	"helpers.py" -> "current_app.url_for"
	"helpers.py" -> "current_app.redirect"
	"helpers.py" -> _wz_redirect
	"helpers.py" -> "current_app.aborter"
	"helpers.py" -> _wz_abort
	"helpers.py" -> getattr
	"helpers.py" -> "current_app.jinja_env.get_template"
	"helpers.py" -> "session.get"
	"helpers.py" -> "flashes.append"
	"helpers.py" -> "current_app._get_current_object"
	"helpers.py" -> "message_flashed.send"
	"helpers.py" -> "session.pop"
	"helpers.py" -> list
	"helpers.py" -> filter
	"helpers.py" -> "kwargs.get"
	"helpers.py" -> "kwargs.update"
	"helpers.py" -> "werkzeug.utils.send_file"
	"helpers.py" -> _prepare_send_file_kwargs
	"helpers.py" -> "werkzeug.utils.send_from_directory"
	"helpers.py" -> _prepare_send_file_kwargs
	"helpers.py" -> "sys.modules.get"
	"helpers.py" -> hasattr
	"helpers.py" -> "os.path.dirname"
	"helpers.py" -> "os.path.abspath"
	"helpers.py" -> "importlib.util.find_spec"
	"helpers.py" -> "os.getcwd"
	"helpers.py" -> hasattr
	"helpers.py" -> "loader.get_filename"
	"helpers.py" -> __import__
	"helpers.py" -> getattr
	"helpers.py" -> RuntimeError
	"helpers.py" -> "os.path.dirname"
	"helpers.py" -> "os.path.abspath"
	"helpers.py" -> "out.extend"
	"helpers.py" -> _split_blueprint_path
	"helpers.py" -> "name.rpartition"
	"__main__.py" -> main
	"views.py" -> "t.TypeVar"
	"views.py" -> frozenset
	"views.py" -> NotImplementedError
	"views.py" -> "view.view_class"
	"views.py" -> <unknown_function>
	"views.py" -> "current_app.ensure_sync"
	"views.py" -> cls
	"views.py" -> <unknown_function>
	"views.py" -> "current_app.ensure_sync"
	"views.py" -> decorator
	"views.py" -> __init_subclass__
	"views.py" -> super
	"views.py" -> set
	"views.py" -> getattr
	"views.py" -> "methods.update"
	"views.py" -> hasattr
	"views.py" -> "methods.add"
	"views.py" -> "key.upper"
	"views.py" -> getattr
	"views.py" -> "request.method.lower"
	"views.py" -> getattr
	"views.py" -> <unknown_function>
	"views.py" -> "current_app.ensure_sync"
	"blueprints.py" -> "t.TypeVar"
	"blueprints.py" -> "t.TypeVar"
	"blueprints.py" -> "t.TypeVar"
	"blueprints.py" -> "t.TypeVar"
	"blueprints.py" -> "t.TypeVar"
	"blueprints.py" -> "t.TypeVar"
	"blueprints.py" -> "t.TypeVar"
	"blueprints.py" -> "t.TypeVar"
	"blueprints.py" -> "t.TypeVar"
	"blueprints.py" -> "t.TypeVar"
	"blueprints.py" -> "self.options.get"
	"blueprints.py" -> "self.options.get"
	"blueprints.py" -> "self.options.get"
	"blueprints.py" -> "self.options.get"
	"blueprints.py" -> dict
	"blueprints.py" -> "self.url_defaults.update"
	"blueprints.py" -> "self.options.get"
	"blueprints.py" -> join
	"blueprints.py" -> "self.url_prefix.rstrip"
	"blueprints.py" -> "rule.lstrip"
	"blueprints.py" -> "options.setdefault"
	"blueprints.py" -> _endpoint_from_view_func
	"blueprints.py" -> dict
	"blueprints.py" -> "options.pop"
	"blueprints.py" -> "self.app.add_url_rule"
	"blueprints.py" -> lstrip
	"blueprints.py" -> __init__
	"blueprints.py" -> super
	"blueprints.py" -> ValueError
	"blueprints.py" -> ValueError
	"blueprints.py" -> AssertionError
	"blueprints.py" -> "self.deferred_functions.append"
	"blueprints.py" -> func
	"blueprints.py" -> "self.record"
	"blueprints.py" -> update_wrapper
	"blueprints.py" -> BlueprintSetupState
	"blueprints.py" -> ValueError
	"blueprints.py" -> "self._blueprints.append"
	"blueprints.py" -> "options.get"
	"blueprints.py" -> "options.get"
	"blueprints.py" -> lstrip
	"blueprints.py" -> ValueError
	"blueprints.py" -> any
	"blueprints.py" -> "app.blueprints.values"
	"blueprints.py" -> "self.make_setup_state"
	"blueprints.py" -> "state.add_url_rule"
	"blueprints.py" -> "self._merge_blueprint_funcs"
	"blueprints.py" -> deferred
	"blueprints.py" -> "options.get"
	"blueprints.py" -> "app.cli.commands.update"
	"blueprints.py" -> "app.cli.add_command"
	"blueprints.py" -> "app.cli.add_command"
	"blueprints.py" -> "bp_options.copy"
	"blueprints.py" -> "bp_options.get"
	"blueprints.py" -> "bp_options.get"
	"blueprints.py" -> "state.url_prefix.rstrip"
	"blueprints.py" -> "bp_url_prefix.lstrip"
	"blueprints.py" -> "blueprint.register"
	"blueprints.py" -> "bp_dict.items"
	"blueprints.py" -> extend
	"blueprints.py" -> "self.error_handler_spec.items"
	"blueprints.py" -> defaultdict
	"blueprints.py" -> "code_values.items"
	"blueprints.py" -> "value.items"
	"blueprints.py" -> "self.view_functions.items"
	"blueprints.py" -> extend
	"blueprints.py" -> extend
	"blueprints.py" -> extend
	"blueprints.py" -> extend
	"blueprints.py" -> extend
	"blueprints.py" -> extend
	"blueprints.py" -> ValueError
	"blueprints.py" -> hasattr
	"blueprints.py" -> ValueError
	"blueprints.py" -> "self.record"
	"blueprints.py" -> "s.add_url_rule"
	"blueprints.py" -> "self.add_app_template_filter"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> "self.add_app_template_test"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> "self.add_app_template_global"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.before_request_funcs.setdefault"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.after_request_funcs.setdefault"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.teardown_request_funcs.setdefault"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.template_context_processors.setdefault"
	"blueprints.py" -> <unknown_function>
	"blueprints.py" -> "state.app.errorhandler"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.url_value_preprocessors.setdefault"
	"blueprints.py" -> "self.record_once"
	"blueprints.py" -> append
	"blueprints.py" -> "s.app.url_default_functions.setdefault"
	"app.py" -> "t.TypeVar"
	"app.py" -> "t.TypeVar"
	"app.py" -> "t.TypeVar"
	"app.py" -> "t.TypeVar"
	"app.py" -> "t.TypeVar"
	"app.py" -> isinstance
	"app.py" -> timedelta
	"app.py" -> <unknown_function>
	"app.py" -> <unknown_function>
	"app.py" -> <unknown_function>
	"app.py" -> __init__
	"app.py" -> super
	"app.py" -> "self.auto_find_instance_path"
	"app.py" -> "os.path.isabs"
	"app.py" -> ValueError
	"app.py" -> "self.make_config"
	"app.py" -> "self.make_aborter"
	"app.py" -> "self.json_provider_class"
	"app.py" -> "self.url_map_class"
	"app.py" -> AssertionError
	"app.py" -> getattr
	"app.py" -> "os.path.splitext"
	"app.py" -> "os.path.basename"
	"app.py" -> create_logger
	"app.py" -> "self.create_jinja_environment"
	"app.py" -> NotImplementedError
	"app.py" -> dict
	"app.py" -> get_debug_flag
	"app.py" -> "self.config_class"
	"app.py" -> "self.aborter_class"
	"app.py" -> find_package
	"app.py" -> "os.path.join"
	"app.py" -> "os.path.join"
	"app.py" -> DispatchingJinjaLoader
	"app.py" -> "filename.endswith"
	"app.py" -> "blueprint.register"
	"app.py" -> "self.blueprints.values"
	"app.py" -> _endpoint_from_view_func
	"app.py" -> "options.pop"
	"app.py" -> getattr
	"app.py" -> isinstance
	"app.py" -> TypeError
	"app.py" -> "item.upper"
	"app.py" -> set
	"app.py" -> getattr
	"app.py" -> getattr
	"app.py" -> "required_methods.add"
	"app.py" -> "self.url_rule_class"
	"app.py" -> "self.url_map.add"
	"app.py" -> "self.view_functions.get"
	"app.py" -> AssertionError
	"app.py" -> "self.add_template_filter"
	"app.py" -> "self.add_template_test"
	"app.py" -> "self.add_template_global"
	"app.py" -> "self.teardown_appcontext_funcs.append"
	"app.py" -> "self.shell_context_processors.append"
	"app.py" -> "self._get_exc_class_and_code"
	"app.py" -> type
	"app.py" -> "handler_map.get"
	"app.py" -> isinstance
	"app.py" -> isinstance
	"app.py" -> _wz_redirect
	"app.py" -> chain
	"app.py" -> reversed
	"app.py" -> _split_blueprint_path
	"app.py" -> "endpoint.rpartition"
	"app.py" -> func
	"app.py" -> handler
	"app.py" -> "sys.exc_info"
	"scaffold.py" -> object
	"scaffold.py" -> "t.TypeVar"
	"scaffold.py" -> "t.TypeVar"
	"scaffold.py" -> "t.TypeVar"
	"scaffold.py" -> "t.TypeVar"
	"scaffold.py" -> "t.TypeVar"
	"scaffold.py" -> "t.TypeVar"
	"scaffold.py" -> "t.TypeVar"
	"scaffold.py" -> "t.TypeVar"
	"scaffold.py" -> "t.TypeVar"
	"scaffold.py" -> "self._check_setup_finished"
	"scaffold.py" -> f
	"scaffold.py" -> "t.cast"
	"scaffold.py" -> update_wrapper
	"scaffold.py" -> get_root_path
	"scaffold.py" -> defaultdict
	"scaffold.py" -> defaultdict
	"scaffold.py" -> defaultdict
	"scaffold.py" -> defaultdict
	"scaffold.py" -> defaultdict
	"scaffold.py" -> defaultdict
	"scaffold.py" -> defaultdict
	"scaffold.py" -> defaultdict
	"scaffold.py" -> type
	"scaffold.py" -> "os.path.join"
	"scaffold.py" -> rstrip
	"scaffold.py" -> "os.fspath"
	"scaffold.py" -> "os.path.basename"
	"scaffold.py" -> rstrip
	"scaffold.py" -> "value.rstrip"
	"scaffold.py" -> FileSystemLoader
	"scaffold.py" -> "os.path.join"
	"scaffold.py" -> TypeError
	"scaffold.py" -> "self.route"
	"scaffold.py" -> "self._method_route"
	"scaffold.py" -> "self._method_route"
	"scaffold.py" -> "self._method_route"
	"scaffold.py" -> "self._method_route"
	"scaffold.py" -> "self._method_route"
	"scaffold.py" -> "options.pop"
	"scaffold.py" -> "self.add_url_rule"
	"scaffold.py" -> append
	"scaffold.py" -> "self.before_request_funcs.setdefault"
	"scaffold.py" -> append
	"scaffold.py" -> "self.after_request_funcs.setdefault"
	"scaffold.py" -> append
	"scaffold.py" -> "self.teardown_request_funcs.setdefault"
	"scaffold.py" -> append
	"scaffold.py" -> append
	"scaffold.py" -> append
	"scaffold.py" -> "self.register_error_handler"
	"scaffold.py" -> "self._get_exc_class_and_code"
	"scaffold.py" -> isinstance
	"scaffold.py" -> ValueError
	"scaffold.py" -> isinstance
	"scaffold.py" -> TypeError
	"scaffold.py" -> issubclass
	"scaffold.py" -> ValueError
	"scaffold.py" -> issubclass
	"scaffold.py" -> "import_name.partition"
	"scaffold.py" -> "importlib.util.find_spec"
	"scaffold.py" -> ValueError
	"scaffold.py" -> "os.getcwd"
	"scaffold.py" -> "importlib.util.find_spec"
	"scaffold.py" -> "pathlib.Path"
	"scaffold.py" -> "os.path.commonpath"
	"scaffold.py" -> next
	"scaffold.py" -> "package_path.is_relative_to"
	"scaffold.py" -> "os.path.dirname"
	"scaffold.py" -> "os.path.dirname"
	"scaffold.py" -> "os.path.dirname"
	"scaffold.py" -> "os.path.dirname"
	"scaffold.py" -> _find_package_path
	"scaffold.py" -> "os.path.abspath"
	"scaffold.py" -> is_relative_to
	"scaffold.py" -> "pathlib.PurePath"
	"scaffold.py" -> "os.path.split"
	"scaffold.py" -> "site_folder.lower"
	"scaffold.py" -> "os.path.split"
	"scaffold.py" -> "folder.lower"
	"scaffold.py" -> lower
	"scaffold.py" -> "os.path.basename"
	"scaffold.py" -> "os.path.dirname"
	"provider.py" -> "weakref.proxy"
	"provider.py" -> "fp.write"
	"provider.py" -> "self.dumps"
	"provider.py" -> "self.loads"
	"provider.py" -> "fp.read"
	"provider.py" -> TypeError
	"provider.py" -> len
	"provider.py" -> "self._prepare_response_obj"
	"provider.py" -> "self._app.response_class"
	"provider.py" -> "self.dumps"
	"provider.py" -> isinstance
	"provider.py" -> http_date
	"provider.py" -> isinstance
	"provider.py" -> str
	"provider.py" -> "dataclasses.is_dataclass"
	"provider.py" -> "dataclasses.asdict"
	"provider.py" -> hasattr
	"provider.py" -> str
	"provider.py" -> "o.__html__"
	"provider.py" -> TypeError
	"provider.py" -> type
	"provider.py" -> staticmethod
	"provider.py" -> "kwargs.setdefault"
	"provider.py" -> "kwargs.setdefault"
	"provider.py" -> "kwargs.setdefault"
	"provider.py" -> "json.dumps"
	"provider.py" -> "json.loads"
	"provider.py" -> "self._prepare_response_obj"
	"provider.py" -> "dump_args.setdefault"
	"provider.py" -> "dump_args.setdefault"
	"provider.py" -> "self._app.response_class"
	"provider.py" -> "self.dumps"
	"__init__.py" -> JSONEncoder
	"__init__.py" -> "_default_encoder.iterencode"
	"__init__.py" -> iterencode
	"__init__.py" -> cls
	"__init__.py" -> "fp.write"
	"__init__.py" -> "_default_encoder.encode"
	"__init__.py" -> encode
	"__init__.py" -> cls
	"__init__.py" -> JSONDecoder
	"__init__.py" -> bstartswith
	"__init__.py" -> bstartswith
	"__init__.py" -> bstartswith
	"__init__.py" -> len
	"__init__.py" -> len
	"__init__.py" -> loads
	"__init__.py" -> "fp.read"
	"__init__.py" -> isinstance
	"__init__.py" -> "s.startswith"
	"__init__.py" -> JSONDecodeError
	"__init__.py" -> isinstance
	"__init__.py" -> TypeError
	"__init__.py" -> "s.decode"
	"__init__.py" -> detect_encoding
	"__init__.py" -> "_default_decoder.decode"
	"__init__.py" -> decode
	"__init__.py" -> cls
	"__init__.py" -> "current_app.json.dumps"
	"__init__.py" -> "kwargs.setdefault"
	"__init__.py" -> "_json.dumps"
	"__init__.py" -> "current_app.json.dump"
	"__init__.py" -> "kwargs.setdefault"
	"__init__.py" -> "_json.dump"
	"__init__.py" -> "current_app.json.loads"
	"__init__.py" -> "_json.loads"
	"__init__.py" -> "current_app.json.load"
	"__init__.py" -> "_json.load"
	"__init__.py" -> "current_app.json.response"
	"tag.py" -> "self.to_json"
	"tag.py" -> isinstance
	"tag.py" -> len
	"tag.py" -> next
	"tag.py" -> iter
	"tag.py" -> next
	"tag.py" -> iter
	"tag.py" -> "self.serializer.tag"
	"tag.py" -> next
	"tag.py" -> iter
	"tag.py" -> isinstance
	"tag.py" -> "self.serializer.tag"
	"tag.py" -> "value.items"
	"tag.py" -> isinstance
	"tag.py" -> "self.serializer.tag"
	"tag.py" -> tuple
	"tag.py" -> isinstance
	"tag.py" -> "self.serializer.tag"
	"tag.py" -> isinstance
	"tag.py" -> decode
	"tag.py" -> b64encode
	"tag.py" -> b64decode
	"tag.py" -> callable
	"tag.py" -> getattr
	"tag.py" -> str
	"tag.py" -> "value.__html__"
	"tag.py" -> Markup
	"tag.py" -> isinstance
	"tag.py" -> UUID
	"tag.py" -> isinstance
	"tag.py" -> http_date
	"tag.py" -> parse_date
	"tag.py" -> "self.register"
	"tag.py" -> tag_class
	"tag.py" -> KeyError
	"tag.py" -> "self.order.append"
	"tag.py" -> "self.order.insert"
	"tag.py" -> "tag.check"
	"tag.py" -> "tag.tag"
	"tag.py" -> len
	"tag.py" -> next
	"tag.py" -> iter
	"tag.py" -> to_python
	"tag.py" -> isinstance
	"tag.py" -> "self._untag_scan"
	"tag.py" -> "value.items"
	"tag.py" -> "self.untag"
	"tag.py" -> isinstance
	"tag.py" -> "self._untag_scan"
	"tag.py" -> dumps
	"tag.py" -> "self.tag"
	"tag.py" -> "self._untag_scan"
	"tag.py" -> loads
	subgraph cluster_flask {
		node [color=white style=filled]
		label=flask
		color=lightgrey style=filled
		"test_basic.py"
		"conftest.py"
		"test_converters.py"
		"test_logging.py"
		"test_signals.py"
		"test_request.py"
		"test_async.py"
		"test_session_interface.py"
		"test_instance_config.py"
		"test_views.py"
		"test_json_tag.py"
		"test_subclassing.py"
		"test_reqctx.py"
		"test_blueprints.py"
		"test_config.py"
		"test_user_error_handler.py"
		"test_helpers.py"
		"test_json.py"
		"test_cli.py"
		"test_templating.py"
		"test_appctx.py"
		"test_regression.py"
		"test_testing.py"
		"hello.py"
		"wsgi.py"
		"importerrorapp.py"
		"factory.py"
		"multiapp.py"
		"app.py"
		"flask.py"
		"typing_route.py"
		"typing_app_decorators.py"
		"typing_error_handler.py"
		"conf.py"
		"test_auth.py"
		"test_db.py"
		"test_factory.py"
		"test_blog.py"
		"auth.py"
		"db.py"
		"blog.py"
		"make_celery.py"
		"tasks.py"
		"views.py"
		"test_js_example.py"
		"logging.py"
		"signals.py"
		"sessions.py"
		"config.py"
		"templating.py"
		"globals.py"
		"blueprints.py"
		"cli.py"
		"wrappers.py"
		"debughelpers.py"
		"ctx.py"
		"helpers.py"
		"__main__.py"
		"scaffold.py"
		"provider.py"
		"tag.py"
	}
	subgraph "cluster_Built-in (sys)" {
		node [color=white style=filled]
		label="Built-in (sys)"
		color=lightgrey style=filled
		"built-in"
	}
	subgraph "cluster_Standard Library" {
		node [color=white style=filled]
		label="Standard Library"
		color=lightblue style=filled
		"platform.py"
		"__init__.py"
		"datetime.py"
		"uuid.py"
		"dataclasses.py"
		"pathlib.py"
		"contextlib.py"
		"warnings.py"
		"weakref.py"
		"enum.py"
		"functools.py"
		"copyreg.py"
		"linecache.py"
		"tracemalloc.py"
		"traceback.py"
		"abc.py"
		frozen
		"fnmatch.py"
		"pickle.py"
		"struct.py"
		"_pickle.cpython-311-darwin.so"
		"doctest.py"
		"argparse.py"
		"pprint.py"
		"tokenize.py"
		"ast.py"
		"textwrap.py"
		"inspect.py"
		"types.py"
		"reprlib.py"
		"operator.py"
		"keyword.py"
		"heapq.py"
		"copy.py"
		"typing.py"
		"typing_extensions.py"
		"string.py"
		"dis.py"
		"opcode.py"
		"shutil.py"
		"gettext.py"
		"token.py"
		"math.cpython-311-darwin.so"
		"_strptime.py"
		"locale.py"
		"calendar.py"
		"_weakrefset.py"
		"parse.py"
		"grp.cpython-311-darwin.so"
		"unicodedata.cpython-311-darwin.so"
		"ipaddress.py"
		"subprocess.py"
		"socket.py"
		"random.py"
		"hashlib.py"
		"_socket.cpython-311-darwin.so"
		"selectors.py"
		"array.cpython-311-darwin.so"
		"select.cpython-311-darwin.so"
		"tarfile.py"
		"zipfile.py"
		"zlib.cpython-311-darwin.so"
		"bz2.py"
		"lzma.py"
		"gzip.py"
		"_compression.py"
		"_bz2.cpython-311-darwin.so"
		"threading.py"
		"py_compile.py"
		"signal.py"
		"fcntl.cpython-311-darwin.so"
		"_posixsubprocess.cpython-311-darwin.so"
		"_hashlib.cpython-311-darwin.so"
		"statistics.py"
		"fractions.py"
		"decimal.py"
		"bisect.py"
		"plistlib.py"
		"binascii.cpython-311-darwin.so"
		"expat.py"
		"testing.py"
		"ssl.py"
		"_ssl.cpython-311-darwin.so"
		"base64.py"
		"getopt.py"
		"shlex.py"
		"tempfile.py"
		"contextvars.py"
		"readline.cpython-311-darwin.so"
		"rlcompleter.py"
		"code.py"
		"csv.py"
		"parser.py"
		"feedparser.py"
		"glob.py"
		"_csv.cpython-311-darwin.so"
		"codeop.py"
		"sync.py"
	}
	"pickle.py" -> AttributeError
	"test_views.py" -> "client.get"
	"zipfile.py" -> "self.root.open"
	"app.py" -> "self.session_interface.save_session"
	"contextlib.py" -> "self._create_async_cb_wrapper"
	"argparse.py" -> isinstance
	"traceback.py" -> func
	"ast.py" -> encode
	"tarfile.py" -> "self.fileobject"
	"base64.py" -> open
	"typing_extensions.py" -> "optional_keys.update"
	"test_helpers.py" -> "rv.data.strip"
	"argparse.py" -> "action_tuples.append"
	"functools.py" -> "args.extend"
	"copy.py" -> isinstance
	"zipfile.py" -> "dirlist.remove"
	"typing.py" -> "params.extend"
	"ssl.py" -> server_name_callback
	"sync.py" -> "inspect.ismethod"
	"subprocess.py" -> "self.terminate"
	"test_templating.py" -> "called.append"
	"feedparser.py" -> "NLCRE_bol.match"
	"typing_extensions.py" -> __setattr__
	"argparse.py" -> "self._split_lines"
	"pickle.py" -> setattr
	"tarfile.py" -> "fileobj.seek"
	"random.py" -> range
	"typing_route.py" -> range
	"argparse.py" -> "self._dedent"
	"parse.py" -> "nv.append"
	"__init__.py" -> search
	"locale.py" -> "norm_encoding.replace"
	"locale.py" -> isinstance
	"traceback.py" -> _safe_string
	"_strptime.py" -> "_regex_cache.clear"
	"scaffold.py" -> lower
	"dis.py" -> isinstance
	"subprocess.py" -> "self.stdin.flush"
	"tarfile.py" -> "tarinfo.isblk"
	"pathlib.py" -> "self.open"
	"__init__.py" -> replace
	"string.py" -> "_string.formatter_field_name_split"
	"locale.py" -> getencoding
	"test_blog.py" -> "db.execute"
	"enum.py" -> delattr
	"inspect.py" -> object
	"app.py" -> "got_request_exception.send"
	"scaffold.py" -> "os.fspath"
	"test_testing.py" -> hasattr
	"parse.py" -> _splitquery
	"test_config.py" -> "pytest.importorskip"
	"pathlib.py" -> "self.is_dir"
	"pathlib.py" -> format
	"conftest.py" -> "app.test_cli_runner"
	"pathlib.py" -> "os.stat"
	"_weakrefset.py" -> "self.__iand__"
	"test_logging.py" -> "app.route"
	"datetime.py" -> "year.encode"
	"traceback.py" -> iter
	"tarfile.py" -> "argparse.ArgumentParser"
	"enum.py" -> list
	"test_reqctx.py" -> "flask.has_request_context"
	"zipfile.py" -> "data.encode"
	"gzip.py" -> "self._buffer.readline"
	"subprocess.py" -> "process.poll"
	"ipaddress.py" -> next
	"statistics.py" -> bisect_left
	"__init__.py" -> "self.data.ljust"
	"copyreg.py" -> base
	"debughelpers.py" -> "request.form.getlist"
	"tarfile.py" -> "pax_headers.items"
	"test_blueprints.py" -> join
	"shutil.py" -> int
	"test_blueprints.py" -> parse_cache_control_header
	"pickle.py" -> add
	"ast.py" -> "args.append"
	"tarfile.py" -> LZMAFile
	"pickle.py" -> UnpicklingError
	"inspect.py" -> "itertools.chain"
	"_strptime.py" -> "msg.format"
	"parse.py" -> "_hostprog.match"
	"provider.py" -> "json.loads"
	"typing.py" -> _check_generic
	"app.py" -> get_load_dotenv
	"fractions.py" -> "a._richcmp"
	"argparse.py" -> "extras.extend"
	"code.py" -> "self.raw_input"
	"parse.py" -> "n.replace"
	"weakref.py" -> id
	"ssl.py" -> "_SSLMethod.__members__.items"
	"tracemalloc.py" -> super
	"testing.py" -> make_input_stream
	"platform.py" -> len
	"__init__.py" -> "os.getpid"
	"argparse.py" -> "self._pop_action_class"
	"tarfile.py" -> divmod
	"typing_extensions.py" -> __arg
	"zipfile.py" -> "fp.seek"
	"tarfile.py" -> "name.rstrip"
	"typing.py" -> cached
	"inspect.py" -> "named.items"
	"parse.py" -> _coerce_args
	"conftest.py" -> "pytest.fixture"
	"test_cli.py" -> TypeError
	"datetime.py" -> "newformat.append"
	"pathlib.py" -> "io.open"
	"__init__.py" -> clear
	"argparse.py" -> "text.splitlines"
	"tarfile.py" -> "self.addfile"
	"_weakrefset.py" -> selfref
	"enum.py" -> tuple
	"dataclasses.py" -> values
	"__init__.py" -> "os.register_at_fork"
	"pickle.py" -> list
	"functools.py" -> set
	"__init__.py" -> "root.log"
	"__init__.py" -> "value.endswith"
	"parse.py" -> _splitnport
	"pathlib.py" -> hasattr
	"sync.py" -> "loop.call_exception_handler"
	"test_helpers.py" -> "io.BytesIO"
	"ipaddress.py" -> IPv6Network
	"inspect.py" -> p
	"argparse.py" -> "parser.parse_known_args"
	"gzip.py" -> "zlib.compress"
	"hashlib.py" -> "inner.update"
	"types.py" -> "self.fget"
	"uuid.py" -> "shutil.which"
	"tarfile.py" -> join
	"pathlib.py" -> "flavour.compile_pattern"
	"test_cli.py" -> "monkeypatch.setitem"
	"ssl.py" -> "self._sslobj.shutdown"
	"enum.py" -> "num.bit_length"
	"operator.py" -> repr
	"base64.py" -> enumerate
	"traceback.py" -> "linecache.checkcache"
	"tarfile.py" -> "stat.S_ISDIR"
	"lzma.py" -> "builtins.open"
	"__init__.py" -> "Logger.__init__"
	"shutil.py" -> "nt._getdiskusage"
	"tag.py" -> b64encode
	"tarfile.py" -> "self._create_header"
	"inspect.py" -> BlockFinder
	"inspect.py" -> "self._bind"
	"textwrap.py" -> "chunk.rfind"
	"blueprints.py" -> "state.add_url_rule"
	"tokenize.py" -> "_itertools.repeat"
	"signal.py" -> "name.startswith"
	"__init__.py" -> _recursive_repr
	"warnings.py" -> "args.append"
	"__init__.py" -> "ph.loggerMap.keys"
	"parse.py" -> "l.append"
	"app.py" -> __init__
	"tarfile.py" -> "sparse.append"
	"__init__.py" -> sorted
	"socket.py" -> "selector.register"
	"argparse.py" -> action
	"shutil.py" -> _destinsrc
	"pickle.py" -> tuple
	"_strptime.py" -> "z.startswith"
	"locale.py" -> "string.replace"
	"typing.py" -> _should_unflatten_callable_args
	"zipfile.py" -> "ZipFile.__init__"
	"weakref.py" -> "self._commit_removals"
	"tag.py" -> "value.__html__"
	"app.py" -> "rv.allow.update"
	"feedparser.py" -> "parts.pop"
	"test_converters.py" -> super
	"wrappers.py" -> attach_enctype_error_multidict
	"ipaddress.py" -> "obj._get_networks_key"
	"cli.py" -> "params.append"
	"textwrap.py" -> predicate
	"zipfile.py" -> addToZip
	"ast.py" -> dump
	"__init__.py" -> "current_app.json.loads"
	"inspect.py" -> getter
	"conf.py" -> "app.add_role"
	"socket.py" -> list
	"subprocess.py" -> "_winapi.GetStdHandle"
	"__init__.py" -> "self.data.copy"
	"__init__.py" -> "self.createLock"
	"zipfile.py" -> "endrec.append"
	"typing.py" -> "subargs.append"
	"test_config.py" -> Flask
	"argparse.py" -> "self._registry_get"
	"__init__.py" -> "frontend.route"
	"cli.py" -> "t.TypeVar"
	"inspect.py" -> Exception
	"datetime.py" -> _local_timezone
	"tarfile.py" -> "self.map.append"
	"blog.py" -> "bp.route"
	"app.py" -> AppContext
	"statistics.py" -> "x.is_finite"
	"py_compile.py" -> "Exception.__init__"
	"test_basic.py" -> "app.app_context"
	"inspect.py" -> _signature_from_callable
	"base64.py" -> range
	"types.py" -> enumerate
	"sync.py" -> "threading.current_thread"
	"weakref.py" -> dict
	"enum.py" -> "mcls._check_for_existing_members_"
	"enum.py" -> "members.append"
	"operator.py" -> hint
	"subprocess.py" -> "self._waitpid_lock.acquire"
	"csv.py" -> range
	"ipaddress.py" -> "parts.pop"
	"helpers.py" -> "importlib.util.find_spec"
	"inspect.py" -> "names.append"
	"typing.py" -> <unknown_function>
	"ast.py" -> write_key_value_pair
	"test_logging.py" -> "logging.root.addHandler"
	"socket.py" -> getdefaulttimeout
	"gzip.py" -> "self._fp.read"
	"zipfile.py" -> "os.path.split"
	"pathlib.py" -> "f.read"
	"gzip.py" -> "self.compress.compress"
	"dataclasses.py" -> _process_class
	"linecache.py" -> "os.path.isabs"
	"test_user_error_handler.py" -> str
	"tokenize.py" -> "parser.add_argument"
	"weakref.py" -> "gc.disable"
	"ssl.py" -> "self.settimeout"
	"views.py" -> frozenset
	"argparse.py" -> str
	"inspect.py" -> "kwo_params.values"
	"argparse.py" -> "lines.append"
	"tokenize.py" -> _get_normal_name
	"sync.py" -> "context.get"
	"typing_extensions.py" -> "_DefaultMixin.__init__"
	"__init__.py" -> PathDistribution
	"socket.py" -> "sock.listen"
	"__init__.py" -> _top_level_declared
	"functools.py" -> "typ.__subclasses__"
	"py_compile.py" -> "parser.parse_args"
	"typing.py" -> _TypedDictMeta
	"pickle.py" -> "x.to_bytes"
	"bz2.py" -> "comp.flush"
	"_strptime.py" -> weekday
	"plistlib.py" -> "self.add_object"
	"sessions.py" -> RuntimeError
	"ast.py" -> _format
	"shlex.py" -> "self.pop_source"
	"fractions.py" -> "math.isinf"
	"test_async.py" -> "pytest.fixture"
	"gzip.py" -> TypeError
	"inspect.py" -> vars
	"platform.py" -> _parse_os_release
	"cli.py" -> "os.path.split"
	"test_logging.py" -> Exception
	"ctx.py" -> update_wrapper
	"parse.py" -> "netloc.replace"
	"csv.py" -> "items.remove"
	"ssl.py" -> "self.send"
	"__init__.py" -> "self.data.rpartition"
	"__init__.py" -> "dict.clear"
	"testing.py" -> RuntimeError
	"tempfile.py" -> "self._file.seekable"
	"tarfile.py" -> len
	"enum.py" -> bit_length
	"dis.py" -> "lines.append"
	"zipfile.py" -> "zf.extractall"
	"ctx.py" -> "self.__dict__.pop"
	"dataclasses.py" -> _is_kw_only
	"shutil.py" -> "logger.debug"
	"ctx.py" -> "app.request_class"
	"__init__.py" -> "self._fixupChildren"
	"test_blueprints.py" -> "pytest.raises"
	"linecache.py" -> "cache.pop"
	"_strptime.py" -> datetime_timezone
	"inspect.py" -> "other._hash_basis"
	"app.py" -> "self.url_map.add"
	"app.py" -> "sys.exc_info"
	"test_config.py" -> "pytest.mark.parametrize"
	"traceback.py" -> isspace
	"warnings.py" -> extract
	"datetime.py" -> date
	"app.py" -> "request_ctx._get_current_object"
	"cli.py" -> super_convert
	"py_compile.py" -> "importlib._bootstrap_external._write_atomic"
	"pathlib.py" -> "grp.getgrgid"
	"argparse.py" -> "self._get_help_string"
	"tarfile.py" -> "stat.S_ISLNK"
	"gzip.py" -> "warnings.warn"
	"datetime.py" -> _isoweek_to_gregorian
	"fractions.py" -> "self.from_float"
	"tarfile.py" -> "self.close"
	"gzip.py" -> _GzipReader
	"test_json.py" -> CustomProvider
	"dis.py" -> "entries.append"
	"ssl.py" -> NotImplementedError
	"helpers.py" -> "sys.modules.get"
	"weakref.py" -> self_wr
	"parse.py" -> "ipaddress.ip_address"
	"ssl.py" -> TLSVersion
	"_weakrefset.py" -> "self.data.remove"
	"feedparser.py" -> "self._call_parse"
	"gzip.py" -> getattr
	"test_views.py" -> "Index2.as_view"
	"test_templating.py" -> "rv.data.split"
	"blueprints.py" -> "code_values.items"
	"test_templating.py" -> "flask.render_template"
	"zipfile.py" -> "zlib.compressobj"
	"__init__.py" -> "self.warning"
	"test_basic.py" -> len
	"uuid.py" -> "socket.gethostname"
	"sync.py" -> "functools.partial"
	"typing.py" -> ValueError
	"__init__.py" -> "self.process"
	"warnings.py" -> _getaction
	"test_testing.py" -> "builder.get_environ"
	"test_helpers.py" -> "rv.close"
	"statistics.py" -> "m.bit_length"
	"pathlib.py" -> zip
	"testing.py" -> open
	"zipfile.py" -> IsADirectoryError
	"zipfile.py" -> _compile
	"argparse.py" -> "shutil.get_terminal_size"
	"auth.py" -> "session.get"
	"argparse.py" -> "action.format_usage"
	"pickle.py" -> partial
	"blueprints.py" -> "self.add_app_template_filter"
	"_strptime.py" -> "self.__seqToRE"
	"py_compile.py" -> PyCompileError
	"pathlib.py" -> "cls._from_parts"
	"__init__.py" -> StreamHandler
	"test_helpers.py" -> "os.path.join"
	"csv.py" -> filter
	"tarfile.py" -> "stat.S_ISCHR"
	"py_compile.py" -> "parser.add_argument"
	"tempfile.py" -> hasattr
	"tempfile.py" -> "_os.fsdecode"
	"__init__.py" -> "self.data.clear"
	"__init__.py" -> UserDict
	"datetime.py" -> "self._cmp"
	"argparse.py" -> "self.register"
	"threading.py" -> "self._target"
	"typing_extensions.py" -> "deduped_pairs.remove"
	"ssl.py" -> ValueError
	"test_views.py" -> "client.delete"
	"lzma.py" -> "io.BufferedReader"
	"tarfile.py" -> "self._create_pax_generic_header"
	"templating.py" -> "template.generate"
	"helpers.py" -> __import__
	"views.py" -> "current_app.ensure_sync"
	"tokenize.py" -> "self.compat"
	"contextlib.py" -> "self._old_targets.append"
	"gzip.py" -> "os.fspath"
	"traceback.py" -> "itertools.islice"
	"ipaddress.py" -> "ip_str.split"
	"bz2.py" -> "self._buffer.seekable"
	"subprocess.py" -> "self._wait"
	"test_cli.py" -> len
	"hashlib.py" -> __get_hash
	"statistics.py" -> hash
	"socket.py" -> ExceptionGroup
	"cli.py" -> find_best_app
	"subprocess.py" -> "os.fsdecode"
	"tarfile.py" -> "cls.taropen"
	"textwrap.py" -> "line.startswith"
	"enum.py" -> "object.__dir__"
	"cli.py" -> "click.echo"
	"typing.py" -> type
	"code.py" -> CommandCompiler
	"test_basic.py" -> "flask.session.setdefault"
	"gzip.py" -> join
	"platform.py" -> "_os_release_line.match"
	"ctx.py" -> AssertionError
	"gzip.py" -> "io.text_encoding"
	"pickle.py" -> "self.memo.get"
	"subprocess.py" -> Popen
	"traceback.py" -> "code.co_positions"
	"subprocess.py" -> format
	"tarfile.py" -> "self._getmember"
	"cli.py" -> is_running_from_reloader
	"pathlib.py" -> "self.stat"
	"ctx.py" -> "_cv_app.reset"
	"typing.py" -> "functools.lru_cache"
	"ast.py" -> "argparse.ArgumentParser"
	"weakref.py" -> "self.update"
	"shutil.py" -> rmtree
	"argparse.py" -> update
	"test_templating.py" -> _TestHandler
	"zipfile.py" -> bytes
	"rlcompleter.py" -> "words.update"
	"inspect.py" -> "parameters.append"
	"__init__.py" -> "csv.reader"
	"test_regression.py" -> "flask.url_for"
	"typing_extensions.py" -> "typing._GenericAlias"
	"sync.py" -> "SyncToAsync.get_current_task"
	"datetime.py" -> "other._to_microseconds"
	"test_basic.py" -> "flask.flash"
	"threading.py" -> "self._lock.release"
	"argparse.py" -> "action_conflicts.setdefault"
	"scaffold.py" -> isinstance
	"pickle.py" -> float
	"config.py" -> "mappings.items"
	"debughelpers.py" -> sorted
	"app.py" -> "request_started.send"
	"tarfile.py" -> "self.zlib.crc32"
	"pickle.py" -> next
	"datetime.py" -> list
	"parse.py" -> "bracketed.partition"
	"lzma.py" -> "self._fp.write"
	"test_instance_config.py" -> "flask.Flask"
	"test_logging.py" -> "app.test_request_context"
	"bz2.py" -> "self._buffer.seek"
	"tempfile.py" -> "_warnings.warn"
	"templating.py" -> "template.render"
	"enum.py" -> "sys._getframe"
	"app.py" -> "self.trap_http_exception"
	"zipfile.py" -> "os.getcwd"
	"test_views.py" -> "GetDeleteView.as_view"
	"__init__.py" -> "time.strftime"
	"bz2.py" -> "self._buffer.readinto"
	"blog.py" -> fetchall
	"plistlib.py" -> "value.encode"
	"_strptime.py" -> "locale_time.a_month.index"
	"weakref.py" -> "self._scrub_removals"
	"platform.py" -> super
	"inspect.py" -> "new_params.move_to_end"
	"platform.py" -> V
	"test_cli.py" -> "pytest.raises"
	"selectors.py" -> close
	"test_basic.py" -> "app.response_class"
	"tokenize.py" -> perror
	"ctx.py" -> "_cv_request.set"
	"__init__.py" -> "self._search_paths"
	"weakref.py" -> "sys.excepthook"
	"dis.py" -> hex
	"csv.py" -> "self.writerow"
	"__init__.py" -> "dict.__eq__"
	"zipfile.py" -> cls
	"subprocess.py" -> "io.open"
	"tracemalloc.py" -> any
	"subprocess.py" -> _use_posix_spawn
	"test_blueprints.py" -> "flask.g.setdefault"
	"__init__.py" -> "t.TypeVar"
	"blueprints.py" -> func
	"dataclasses.py" -> replace
	"shlex.py" -> list
	"subprocess.py" -> "self._make_inheritable"
	"types.py" -> _C
	"platform.py" -> "m.groups"
	"inspect.py" -> "base.__dict__.items"
	"platform.py" -> system_alias
	"shutil.py" -> "path.split"
	"traceback.py" -> print
	"views.py" -> "view.view_class"
	"datetime.py" -> tuple
	"subprocess.py" -> "self._handle_exitstatus"
	"enum.py" -> "cls._iter_member_"
	"typing.py" -> _flatten_literal_params
	"typing.py" -> "subargs.extend"
	"conftest.py" -> get_db
	"testing.py" -> "self.stderr_bytes.decode"
	"zipfile.py" -> "member.is_dir"
	"test_testing.py" -> "flask.stream_with_context"
	"tempfile.py" -> _exists
	"__init__.py" -> "self.eggs.freeze"
	"feedparser.py" -> "self._msgstack.append"
	"functools.py" -> get_type_hints
	"random.py" -> _repeat
	"__init__.py" -> sizeof
	"typing.py" -> _collect_parameters
	"test_templating.py" -> "app.add_template_filter"
	"code.py" -> "self.resetbuffer"
	"app.py" -> _split_blueprint_path
	"test_templating.py" -> DictLoader
	"statistics.py" -> iter
	"inspect.py" -> format
	"socket.py" -> "lsock.getsockname"
	"cli.py" -> "platform.python_version"
	"tarfile.py" -> "self.isreg"
	"parse.py" -> _coerce_result
	"plistlib.py" -> "self.stack.append"
	"csv.py" -> chr
	"test_instance_config.py" -> "monkeypatch.syspath_prepend"
	"threading.py" -> "self._lock.__exit__"
	"contextlib.py" -> RuntimeError
	"tempfile.py" -> "self.file.close"
	"calendar.py" -> "cal.formatmonth"
	"test_testing.py" -> "bp.route"
	"sync.py" -> "asyncio.set_event_loop"
	"random.py" -> ValueError
	"ctx.py" -> RuntimeError
	"dis.py" -> rstrip
	"blog.py" -> fetchone
	"calendar.py" -> IllegalWeekdayError
	"tempfile.py" -> _allocate_lock
	"string.py" -> ValueError
	"config.py" -> "key.lower"
	"tarfile.py" -> "self._load"
	"subprocess.py" -> _GetExitCodeProcess
	"scaffold.py" -> f
	"tag.py" -> tuple
	"linecache.py" -> "tokenize.open"
	"datetime.py" -> "t._getstate"
	"test_basic.py" -> "app.test_client"
	"tarfile.py" -> "re.search"
	"pathlib.py" -> "self._parse_args"
	"typing.py" -> "self._make_substitution"
	"ssl.py" -> "context.load_cert_chain"
	"zipfile.py" -> "fpin.tell"
	"getopt.py" -> GetoptError
	"enum.py" -> _is_private
	"socket.py" -> "self._sock.recv_into"
	"gzip.py" -> len
	"helpers.py" -> "current_app.aborter"
	"platform.py" -> "os.path.exists"
	"platform.py" -> "_sys_version_cache.get"
	"plistlib.py" -> "fp.getvalue"
	"_strptime.py" -> "current_format.replace"
	"datetime.py" -> combine
	"tempfile.py" -> "self._file.seek"
	"shutil.py" -> "entry.is_symlink"
	"parse.py" -> _splitpasswd
	"test_request.py" -> "app.errorhandler"
	"_weakrefset.py" -> "self.data.discard"
	"__init__.py" -> "h.close"
	"feedparser.py" -> deque
	"functools.py" -> "kwds.values"
	"inspect.py" -> "object.__getattribute__"
	"typing_extensions.py" -> issubclass
	"selectors.py" -> "select.kqueue"
	"ssl.py" -> _ipaddress_match
	"helpers.py" -> getattr
	"test_views.py" -> "c.open"
	"tokenize.py" -> lower
	"linecache.py" -> getattr
	"typing.py" -> _tp_cache
	"fractions.py" -> pow
	"ipaddress.py" -> "octet_str.isascii"
	"argparse.py" -> "group_map.get"
	"__init__.py" -> "self.data.format"
	"pathlib.py" -> "cls._flavour.join"
	"traceback.py" -> "row.append"
	"fractions.py" -> "_RATIONAL_FORMAT.match"
	"feedparser.py" -> "self._input.push_eof_matcher"
	"sync.py" -> "sys.exc_info"
	"string.py" -> "_re.compile"
	"weakref.py" -> "info.func"
	"templating.py" -> "template_rendered.send"
	"random.py" -> floor
	"tempfile.py" -> "_os.chflags"
	"test_cli.py" -> isinstance
	"__init__.py" -> _tuplegetter
	"random.py" -> mean
	"test_auth.py" -> fetchone
	"zipfile.py" -> "zlib.decompressobj"
	"calendar.py" -> LocaleTextCalendar
	"test_basic.py" -> "re.search"
	"test_user_error_handler.py" -> "flask.Flask"
	"tokenize.py" -> join
	"operator.py" -> getter
	"ast.py" -> property
	"ipaddress.py" -> __eq__
	"test_reqctx.py" -> "app.test_client"
	"datetime.py" -> int
	"subprocess.py" -> map
	"linecache.py" -> "functools.partial"
	"typing_extensions.py" -> "own_annotations.items"
	"selectors.py" -> getattr
	"csv.py" -> "delims.keys"
	"ssl.py" -> recv
	"pathlib.py" -> "part.find"
	"getopt.py" -> len
	"typing.py" -> __init_subclass__
	"test_templating.py" -> Markup
	"platform.py" -> "_Processor.get"
	"__init__.py" -> "self.data.swapcase"
	"__init__.py" -> "self._tpl.substitute"
	"test_user_error_handler.py" -> "app.register_blueprint"
	"test_json_tag.py" -> TaggedJSONSerializer
	"traceback.py" -> "exc.stack.format"
	"tarfile.py" -> "os.fstat"
	"uuid.py" -> range
	"tarfile.py" -> super
	"locale.py" -> "defmod.lower"
	"__init__.py" -> "io.TextIOWrapper"
	"__init__.py" -> repr
	"__init__.py" -> "_compiler.isstring"
	"types.py" -> <unknown_function>
	"lzma.py" -> "self._buffer.close"
	"dataclasses.py" -> "cls_fields.append"
	"provider.py" -> "self.dumps"
	"dataclasses.py" -> "fields.values"
	"pickle.py" -> "self.save_global"
	"conf.py" -> rsplit
	"calendar.py" -> formatstring
	"csv.py" -> "self.writer.writerow"
	"enum.py" -> "members.keys"
	"zipfile.py" -> _SharedFile
	"__init__.py" -> "fmt.format"
	"tempfile.py" -> "_io.TextIOWrapper"
	"parse.py" -> AttributeError
	"dataclasses.py" -> "result.append"
	"test_blueprints.py" -> "bp.register_blueprint"
	"shutil.py" -> "os.path.samefile"
	"typing_extensions.py" -> __new__
	"__init__.py" -> joinpath
	"contextlib.py" -> "self.__exit__"
	"inspect.py" -> attrgetter
	"argparse.py" -> "parser.print_help"
	"conftest.py" -> "sys.modules.pop"
	"argparse.py" -> "self._container._add_action"
	"__init__.py" -> IsADirectoryError
	"__init__.py" -> _compile
	"tempfile.py" -> "file.detach"
	"dataclasses.py" -> setattr
	"ast.py" -> _splitlines_no_ff
	"test_blueprints.py" -> str
	"ssl.py" -> "months.index"
	"_strptime.py" -> "calendar.isleap"
	"textwrap.py" -> "self._fix_sentence_endings"
	"provider.py" -> "weakref.proxy"
	"plistlib.py" -> id
	"__init__.py" -> "self.critical"
	"test_templating.py" -> "app.jinja_env.filters.keys"
	"threading.py" -> hasattr
	"subprocess.py" -> "result.extend"
	"platform.py" -> hasattr
	"linecache.py" -> "cache.clear"
	"test_testing.py" -> "_cv_request.get"
	"test_blueprints.py" -> "flask.render_template_string"
	"test_logging.py" -> "app.logger.error"
	"zipfile.py" -> FileNotFoundError
	"gzip.py" -> _PaddedFile
	"__init__.py" -> "self.formatFooter"
	"base64.py" -> ValueError
	"pathlib.py" -> "os.scandir"
	"scaffold.py" -> "self.add_url_rule"
	"inspect.py" -> "kwargs.update"
	"selectors.py" -> "self._selector.control"
	"tag.py" -> "tag.tag"
	"shutil.py" -> _rmtree_islink
	"random.py" -> "self.setstate"
	"ipaddress.py" -> "ip_str.partition"
	"plistlib.py" -> "value.items"
	"zipfile.py" -> "struct.Struct"
	"__init__.py" -> __repr__
	"test_reqctx.py" -> get_cookie_name
	"templating.py" -> "result.add"
	"calendar.py" -> _localized_month
	"weakref.py" -> KeyError
	"pickle.py" -> save
	"platform.py" -> "_ver_output.match"
	"test_blueprints.py" -> "bp.app_template_global"
	"shutil.py" -> "errors.extend"
	"calendar.py" -> repr
	"shlex.py" -> "self.sourcehook"
	"enum.py" -> _make_class_unpicklable
	"ast.py" -> "self.traverse"
	"subprocess.py" -> "self.stdin.write"
	"app.py" -> "self.teardown_appcontext_funcs.append"
	"subprocess.py" -> child_exception_type
	"tarfile.py" -> "os.path.exists"
	"test_async.py" -> "pytest.mark.parametrize"
	"codeop.py" -> "warnings.simplefilter"
	"pickle.py" -> "self.readline"
	"calendar.py" -> "_locale.setlocale"
	"test_appctx.py" -> "app.errorhandler"
	"inspect.py" -> unwrap
	"__init__.py" -> "warnings.catch_warnings"
	"lzma.py" -> "self._buffer.read"
	"platform.py" -> "s.decode"
	"argparse.py" -> enumerate
	"ast.py" -> "argparse.FileType"
	"typing_extensions.py" -> "new_parameters.append"
	"tokenize.py" -> len
	"feedparser.py" -> "self._eofstack.pop"
	"views.py" -> <unknown_function>
	"testing.py" -> "self._context_stack.close"
	"zipfile.py" -> "self.fp.write"
	"ast.py" -> Load
	"dataclasses.py" -> delattr
	"test_reqctx.py" -> super
	"operator.py" -> "attr.split"
	"__init__.py" -> "path.joinpath"
	"shutil.py" -> "os.rename"
	"__init__.py" -> "root.manager._clear_cache"
	"datetime.py" -> _check_date_fields
	"enum.py" -> "cls._get_mixins_"
	"ipaddress.py" -> iter
	"ipaddress.py" -> _collapse_addresses_internal
	"fnmatch.py" -> "chunks.append"
	"typing_extensions.py" -> "_overload_registry.clear"
	"dis.py" -> "labels.add"
	"test_reqctx.py" -> "test_client.get"
	"tarfile.py" -> "self.create_gnu_header"
	"csv.py" -> type
	"locale.py" -> delocalize
	"linecache.py" -> "module_globals.get"
	"weakref.py" -> "cls._registry.items"
	"app.py" -> "ctx.pop"
	"typing_extensions.py" -> original_new
	"make_celery.py" -> create_app
	"functools.py" -> "self._make_unbound_method"
	"ipaddress.py" -> "to_merge.pop"
	"helpers.py" -> len
	"argparse.py" -> "parser.exit"
	"__init__.py" -> cls
	"tracemalloc.py" -> "statistics.append"
	"__init__.py" -> "self.dist.locate_file"
	"__init__.py" -> "_bootstrap_external._set_bootstrap_module"
	"linecache.py" -> len
	"ast.py" -> "self._for_helper"
	"helpers.py" -> "kwargs.get"
	"dis.py" -> compile
	"test_testing.py" -> "flask.request.get_json"
	"string.py" -> "mo.group"
	"sync.py" -> "self.main_event_loop.call_soon_threadsafe"
	"__init__.py" -> escape
	"__init__.py" -> "self.linefmt.format"
	"bz2.py" -> BZ2Decompressor
	"pickle.py" -> "self.current_frame.readline"
	"platform.py" -> "f.read"
	"getopt.py" -> short_has_arg
	"__init__.py" -> FileHash
	"plistlib.py" -> "self.end_element"
	"test_blueprints.py" -> "bp.app_template_filter"
	"functools.py" -> "self.dispatcher.dispatch"
	"helpers.py" -> stream_with_context
	"__init__.py" -> "name.lower"
	"string.py" -> __init_subclass__
	"weakref.py" -> type
	"socket.py" -> object
	"tag.py" -> next
	"tracemalloc.py" -> "trace_filter._match"
	"plistlib.py" -> "self.writeln"
	"enum.py" -> "enum_member.__init__"
	"zipfile.py" -> "self._open_to_write"
	"dataclasses.py" -> _KW_ONLY_TYPE
	"enum.py" -> "auto_valued.append"
	"platform.py" -> "socket.gethostname"
	"shutil.py" -> _access_check
	"random.py" -> "self.getstate"
	"datetime.py" -> _parse_hh_mm_ss_ff
	"platform.py" -> any
	"platform.py" -> "_ironpython26_sys_version_parser.match"
	"argparse.py" -> "new_arg_strings.extend"
	"tarfile.py" -> "self.tarinfo.fromtarfile"
	"argparse.py" -> min
	"pickle.py" -> "self.file_readline"
	"zipfile.py" -> "os.path.sep.join"
	"test_json.py" -> "dict.fromkeys"
	"dataclasses.py" -> tuple
	"test_basic.py" -> make_dataclass
	"__init__.py" -> "_bootstrap._setup"
	"ssl.py" -> "sock.getsockopt"
	"argparse.py" -> "formatter.add_text"
	"warnings.py" -> _setoption
	"parse.py" -> tuple
	"selectors.py" -> len
	"test_cli.py" -> str
	"zipfile.py" -> "self._fileobj.close"
	"test_cli.py" -> invoke
	"test_cli.py" -> "importlib.metadata.version"
	"random.py" -> _accumulate
	"platform.py" -> libc_ver
	"pathlib.py" -> TypeError
	"plistlib.py" -> range
	"app.py" -> "self.full_dispatch_request"
	"enum.py" -> Exception
	"cli.py" -> "rv.update"
	"typing_extensions.py" -> _ConcatenateForm
	"inspect.py" -> set
	"shutil.py" -> func
	"functools.py" -> issubclass
	"inspect.py" -> indentsize
	"selectors.py" -> "select.select"
	"enum.py" -> "names.append"
	"__init__.py" -> "self._fmt.find"
	"argparse.py" -> "inserts.get"
	"tokenize.py" -> "endmatch.end"
	"app.py" -> "blueprint.register"
	"helpers.py" -> "val.lower"
	"threading.py" -> "_shutdown_locks.add"
	"parse.py" -> unquote_to_bytes
	"subprocess.py" -> count
	"functools.py" -> get_args
	"__init__.py" -> _checkLevel
	"typing_extensions.py" -> "base.__dict__.get"
	"tarfile.py" -> "self._check"
	"test_blueprints.py" -> "grandchild.errorhandler"
	"zipfile.py" -> "self.filelist.append"
	"tarfile.py" -> hasattr
	"__init__.py" -> mapping_get
	"zipfile.py" -> "io.UnsupportedOperation"
	"cli.py" -> Completer
	"shutil.py" -> getgrnam
	"__init__.py" -> "_str_formatter.parse"
	"typing.py" -> "new_args.extend"
	"ast.py" -> "self.visit"
	"sync.py" -> "SyncToAsync.thread_sensitive_context.reset"
	"sync.py" -> markcoroutinefunction
	"subprocess.py" -> _waitstatus_to_exitcode
	"pathlib.py" -> getattr
	"inspect.py" -> "importlib.import_module"
	"pathlib.py" -> "parts.append"
	"typing_extensions.py" -> super
	"tarfile.py" -> "value.encode"
	"_weakrefset.py" -> list
	"tarfile.py" -> "next._block"
	"bz2.py" -> _builtin_open
	"zipfile.py" -> "itertools.chain.from_iterable"
	"test_signals.py" -> "client.session_transaction"
	"dis.py" -> _parse_exception_table
	"calendar.py" -> repeat
	"argparse.py" -> "self._parser_class"
	"threading.py" -> "_sys.setprofile"
	"shutil.py" -> "os.access"
	"debughelpers.py" -> repr
	"platform.py" -> open
	"conftest.py" -> old_get_loader
	"shutil.py" -> ignore
	"subprocess.py" -> "os.path.isabs"
	"cli.py" -> "e.format_message"
	"ipaddress.py" -> __str__
	"sync.py" -> "asyncio.all_tasks"
	"random.py" -> Random
	"fractions.py" -> fallback_operator
	"parse.py" -> "netloc.rpartition"
	"ssl.py" -> "self.sslobject_class._create"
	"__init__.py" -> "_json.dumps"
	"copyreg.py" -> "cls.__dict__.get"
	"tarfile.py" -> "s.decode"
	"statistics.py" -> set
	"test_appctx.py" -> len
	"dis.py" -> _get_const_value
	"scaffold.py" -> "folder.lower"
	"zipfile.py" -> "self._zipfile.filelist.append"
	"fractions.py" -> float
	"templating.py" -> _stream
	"tarfile.py" -> "name.split"
	"debughelpers.py" -> "exc.new_url.partition"
	"ipaddress.py" -> "cls._compress_hextets"
	"selectors.py" -> "math.ceil"
	"threading.py" -> Lock
	"test_reqctx.py" -> "ctx.pop"
	"test_json.py" -> "io.StringIO"
	"tracemalloc.py" -> "self._filter_trace"
	"argparse.py" -> items
	"config.py" -> "key.startswith"
	"zipfile.py" -> "sys.exit"
	"__init__.py" -> "current_app.json.dumps"
	"sessions.py" -> "hashlib.sha1"
	"calendar.py" -> "self.formatweekday"
	"pathlib.py" -> "os.fspath"
	"bz2.py" -> BZ2File
	"threading.py" -> "_active.values"
	"sync.py" -> "self.main_wrap"
	"enum.py" -> "cls._numeric_repr_"
	"cli.py" -> prepare_import
	"functools.py" -> __new__
	"calendar.py" -> "self.monthdays2calendar"
	"parse.py" -> int
	"__init__.py" -> "self.emit"
	"shutil.py" -> "entry.is_dir"
	"threading.py" -> id
	"tarfile.py" -> "structs.append"
	"datetime.py" -> "self.dst"
	"subprocess.py" -> call
	"locale.py" -> "match.group"
	"conf.py" -> "packaging.version.parse"
	"csv.py" -> "extrasaction.lower"
	"test_templating.py" -> "app.jinja_env.tests.keys"
	"ast.py" -> Tuple
	"blueprints.py" -> "app.cli.commands.update"
	"random.py" -> _urandom
	"py_compile.py" -> "os.path.islink"
	"feedparser.py" -> "headers.append"
	"platform.py" -> __iter__
	"ast.py" -> super
	"tarfile.py" -> "member.issym"
	"zipfile.py" -> "threading.RLock"
	"zipfile.py" -> LargeZipFile
	"ast.py" -> "Constant.__new__"
	"test_appctx.py" -> "pytest.raises"
	"subprocess.py" -> "self.lpAttributeList.copy"
	"pathlib.py" -> "os.rmdir"
	"tarfile.py" -> "targetpath.rstrip"
	"tokenize.py" -> "endpats.get"
	"cli.py" -> "traceback.format_exc"
	"pathlib.py" -> "self._flavour.is_reserved"
	"tarfile.py" -> "tarinfo.issym"
	"test_blueprints.py" -> "bp.add_app_template_test"
	"subprocess.py" -> "sigset.append"
	"threading.py" -> RLock
	"test_cli.py" -> get_version
	"textwrap.py" -> map
	"ctx.py" -> "_cv_request.get"
	"pathlib.py" -> "self.relative_to"
	"typing.py" -> repr
	"shutil.py" -> lookup
	"ipaddress.py" -> "self._address_class"
	"weakref.py" -> isinstance
	"sessions.py" -> TaggedJSONSerializer
	"shutil.py" -> LookupError
	"__init__.py" -> "_bootstrap._find_spec"
	"test_blueprints.py" -> "bp.add_app_template_filter"
	"sessions.py" -> "self.null_session_class"
	"__init__.py" -> make_files
	"test_blueprints.py" -> "flask.Flask"
	"testing.py" -> "self.isolation"
	"testing.py" -> ValueError
	"parse.py" -> "self._decoded_counterpart"
	"dis.py" -> findlabels
	"__init__.py" -> "s.startswith"
	"glob.py" -> "os.path.split"
	"dis.py" -> "linestarts.values"
	"test_views.py" -> "ChildView.as_view"
	"tarfile.py" -> filter_function
	"testing.py" -> "input.encode"
	"ssl.py" -> "_PROTOCOL_NAMES.get"
	"test_templating.py" -> "flask.stream_template_string"
	"sync.py" -> Future
	"pickle.py" -> "self._batch_appends"
	"app.py" -> "self.async_to_sync"
	"glob.py" -> "os.close"
	"warnings.py" -> warn
	"gzip.py" -> "self._decomp_factory"
	"warnings.py" -> "self._module._filters_mutated"
	"datetime.py" -> object
	"shutil.py" -> "os.path.normpath"
	"conftest.py" -> "request_ctx._get_current_object"
	"test_blueprints.py" -> "app.register_blueprint"
	"tempfile.py" -> "dirlist.append"
	"__init__.py" -> "self.data.format_map"
	"functools.py" -> _c3_mro
	"test_instance_config.py" -> write_text
	"enum.py" -> _iter_bits_lsb
	"pathlib.py" -> "os.readlink"
	"enum.py" -> _simple_enum
	"app.py" -> "self.jinja_environment"
	"enum.py" -> "_order_.replace"
	"statistics.py" -> NormalDist
	"plistlib.py" -> "datetime.timedelta"
	"test_async.py" -> "response.get_data"
	"__init__.py" -> _Link
	"__init__.py" -> basicConfig
	"__init__.py" -> match
	"argparse.py" -> add_mutually_exclusive_group
	"cli.py" -> make_context
	"shlex.py" -> "self._pushback_chars.pop"
	"subprocess.py" -> "_winapi.GetFileType"
	"functools.py" -> is_strict_base
	"copy.py" -> "_copy_dispatch.get"
	"argparse.py" -> "self.exit"
	"locale.py" -> _group
	"typing_extensions.py" -> t
	"csv.py" -> writer
	"test_basic.py" -> RuntimeError
	"statistics.py" -> _ss
	"zipfile.py" -> "self.writepy"
	"typing.py" -> __repr__
	"argparse.py" -> conflict_handler
	"tarfile.py" -> open
	"zipfile.py" -> "os.path.dirname"
	"cli.py" -> "click.make_pass_decorator"
	"subprocess.py" -> "self._get_handles"
	"pathlib.py" -> type
	"subprocess.py" -> "os.write"
	"uuid.py" -> "platform.system"
	"textwrap.py" -> zip
	"test_session_interface.py" -> "request_ctx.match_request"
	"subprocess.py" -> _cleanup
	"inspect.py" -> "wrapped_sig.parameters.values"
	"locale.py" -> globals
	"test_session_interface.py" -> "app.get"
	"typing_extensions.py" -> "abc.ABCMeta.__instancecheck__"
	"zipfile.py" -> "zf.testzip"
	"inspect.py" -> "sys.modules.get"
	"threading.py" -> range
	"calendar.py" -> "textgroup.add_argument"
	"test_json.py" -> "dt.astimezone"
	"sync.py" -> hasattr
	"app.py" -> "self.aborter_class"
	"statistics.py" -> Fraction
	"__init__.py" -> "self.data.isnumeric"
	"zipfile.py" -> LZMACompressor
	"ast.py" -> auto
	"tempfile.py" -> "_os.getenv"
	"getopt.py" -> "opts.append"
	"testing.py" -> replace
	"tarfile.py" -> EOFHeaderError
	"db.py" -> "db.close"
	"test_blueprints.py" -> "parent.register_blueprint"
	"hashlib.py" -> "_hashlib.new"
	"gzip.py" -> "self.fileobj.flush"
	"threading.py" -> Event
	"uuid.py" -> ValueError
	"tempfile.py" -> getattr
	"feedparser.py" -> "self._new_message"
	"globals.py" -> ContextVar
	"tarfile.py" -> "os.chown"
	"tarfile.py" -> "next.isreg"
	"app.py" -> "builder.get_environ"
	"__init__.py" -> "self.data.find"
	"ssl.py" -> bytes
	"tarfile.py" -> id
	"ssl.py" -> "self._set_alpn_protocols"
	"datetime.py" -> "s.replace"
	"typing_extensions.py" -> hasattr
	"locale.py" -> "localename.split"
	"test_basic.py" -> "flask.Flask"
	"subprocess.py" -> "self.poll"
	"__init__.py" -> "self._key"
	"pathlib.py" -> "self.cwd"
	"test_basic.py" -> open
	"__init__.py" -> "app.config.from_mapping"
	"operator.py" -> "args.extend"
	"views.py" -> __init_subclass__
	"hashlib.py" -> "ocpy.digest"
	"pathlib.py" -> reversed
	"hashlib.py" -> "digestobj.update"
	"contextlib.py" -> <unknown_function>
	"ipaddress.py" -> "s1.subnets"
	"tarfile.py" -> "value.decode"
	"testing.py" -> "builder.close"
	"auth.py" -> Blueprint
	"ctx.py" -> <unknown_function>
	"test_signals.py" -> "app.route"
	"enum.py" -> __setitem__
	"gzip.py" -> "self._read_eof"
	"tokenize.py" -> "single_quoted.add"
	"test_appctx.py" -> "flask.g.setdefault"
	"__init__.py" -> "inst.__dict__.update"
	"_strptime.py" -> _getlang
	"test_basic.py" -> "app.register_blueprint"
	"subprocess.py" -> "attribute_list.get"
	"copyreg.py" -> "names.append"
	"__init__.py" -> "textwrap.dedent"
	"shlex.py" -> "s.replace"
	"inspect.py" -> _too_many
	"ipaddress.py" -> set
	"test_basic.py" -> "app.url_map.add"
	"shutil.py" -> _copytree
	"cli.py" -> "extra.pop"
	"typing_extensions.py" -> "abc.ABCMeta.__new__"
	"subprocess.py" -> TypeError
	"subprocess.py" -> "os.dup"
	"tokenize.py" -> "collections.namedtuple"
	"shlex.py" -> "lexer.get_token"
	"__init__.py" -> "Sectioned.read"
	"conftest.py" -> "app.test_client"
	"functools.py" -> super
	"config.py" -> "self.items"
	"bisect.py" -> "a.insert"
	"feedparser.py" -> "line.find"
	"pickle.py" -> format
	"blueprints.py" -> "self.options.get"
	"__init__.py" -> "self.formatMessage"
	"string.py" -> repr
	"__init__.py" -> "atexit.register"
	"shutil.py" -> "os.makedirs"
	"tempfile.py" -> "_os.unlink"
	"views.py" -> "result.get"
	"glob.py" -> has_magic
	"__init__.py" -> url_req_space
	"dataclasses.py" -> "types.MappingProxyType"
	"__init__.py" -> bool
	"testing.py" -> copy
	"plistlib.py" -> <unknown_function>
	"string.py" -> ascii
	"traceback.py" -> issubclass
	"subprocess.py" -> "_winapi.CloseHandle"
	"socket.py" -> "self._sock._decref_socketios"
	"app.py" -> dict
	"ssl.py" -> "self.sslsocket_class._create"
	"platform.py" -> _node
	"copy.py" -> "x.items"
	"__init__.py" -> "itertools.chain.from_iterable"
	"ast.py" -> hasattr
	"pathlib.py" -> "sys.audit"
	"plistlib.py" -> "self._fp.seek"
	"test_cli.py" -> "click.argument"
	"app.py" -> "ctx.push"
	"__init__.py" -> "self.logger.getEffectiveLevel"
	"warnings.py" -> format
	"__init__.py" -> hash
	"typing.py" -> "self._getitem"
	"sync.py" -> "functools.update_wrapper"
	"logging.py" -> "logger.setLevel"
	"glob.py" -> bytes
	"test_basic.py" -> python_implementation
	"subprocess.py" -> "warnings.warn"
	"calendar.py" -> _nextmonth
	"cli.py" -> "click.STRING"
	"subprocess.py" -> getattr
	"enum.py" -> "self._iter_member_"
	"test_testing.py" -> isinstance
	"inspect.py" -> ismemberdescriptor
	"test_cli.py" -> "flask_group.command"
	"ssl.py" -> _inet_paton
	"platform.py" -> filter
	"argparse.py" -> "_re.match"
	"sync.py" -> RuntimeError
	"argparse.py" -> NotImplementedError
	"ssl.py" -> "dnsnames.append"
	"feedparser.py" -> "boundaryre.match"
	"ssl.py" -> CertificateError
	"contextlib.py" -> "self._create_cb_wrapper"
	"__init__.py" -> "weakref.ref"
	"socket.py" -> format
	"pickle.py" -> _Pickler
	"tarfile.py" -> "parser.exit"
	"ipaddress.py" -> "self._make_netmask"
	"traceback.py" -> "sys.exc_info"
	"feedparser.py" -> "self.pushlines"
	"test_cli.py" -> "current_app._get_current_object"
	"subprocess.py" -> "self.wait"
	"app.py" -> "self.make_aborter"
	"ctx.py" -> request_close
	"weakref.py" -> "self.data.values"
	"shutil.py" -> _samefile
	"__init__.py" -> func
	"helpers.py" -> update_wrapper
	"tarfile.py" -> "tarinfo.tobuf"
	"functools.py" -> "found.sort"
	"glob.py" -> "os.path.splitdrive"
	"pathlib.py" -> S_ISLNK
	"pickle.py" -> "set_obj.update"
	"test_reqctx.py" -> "builder.get_environ"
	"pickle.py" -> "cls.__new__"
	"pathlib.py" -> "self.exists"
	"typing.py" -> _value_and_type_iter
	"tarfile.py" -> range
	"warnings.py" -> hasattr
	"ctx.py" -> "self.url_adapter.match"
	"zipfile.py" -> "lzma.LZMADecompressor"
	"cli.py" -> "self._load_plugin_commands"
	"scaffold.py" -> "site_folder.lower"
	"test_logging.py" -> "pytestconfig.pluginmanager.unregister"
	"sync.py" -> "weakref.WeakKeyDictionary"
	"tarfile.py" -> "pwd.getpwnam"
	"weakref.py" -> "self._func_ref"
	"shlex.py" -> deque
	"__init__.py" -> "threading.RLock"
	"typing_extensions.py" -> "attr.startswith"
	"tracemalloc.py" -> type
	"typing.py" -> ParamSpecKwargs
	"py_compile.py" -> str
	"shutil.py" -> Error
	"subprocess.py" -> join
	"pickle.py" -> "obj.raw"
	"pathlib.py" -> isinstance
	"base64.py" -> upper
	"cli.py" -> "headers.append"
	"__init__.py" -> "root.critical"
	"parse.py" -> _splittag
	"ast.py" -> "self.visit_FormattedValue"
	"__init__.py" -> dict_setitem
	"shutil.py" -> set
	"glob.py" -> fsencode
	"plistlib.py" -> ValueError
	"zipfile.py" -> "itertools.islice"
	"random.py" -> bisect
	"test_blog.py" -> fetchone
	"typing_extensions.py" -> _should_collect_from_parameters
	"threading.py" -> "self._block.locked"
	"ctx.py" -> type
	"lzma.py" -> LZMAError
	"tempfile.py" -> "file.write"
	"__init__.py" -> iter
	"tokenize.py" -> "_itertools.product"
	"test_async.py" -> "app.test_client"
	"parse.py" -> "path.split"
	"inspect.py" -> "argparse.ArgumentParser"
	"test_converters.py" -> "value.split"
	"ipaddress.py" -> "IPv4Address.__init__"
	"warnings.py" -> "filters.append"
	"functools.py" -> mycmp
	"socket.py" -> detach
	"gzip.py" -> open
	"sessions.py" -> dumps
	"__init__.py" -> "_lock._at_fork_reinit"
	"argparse.py" -> "_re.compile"
	"subprocess.py" -> "self._waitpid_lock.release"
	"typing.py" -> "types.items"
	"pickle.py" -> "re.match"
	"test_config.py" -> "monkeypatch.setattr"
	"test_request.py" -> AssertionError
	"socket.py" -> "self._sendfile_use_sendfile"
	"test_appctx.py" -> str
	"shutil.py" -> "zipfile.is_zipfile"
	"conftest.py" -> "app.test_request_context"
	"functools.py" -> lru_cache
	"inspect.py" -> getargs
	"typing.py" -> GenericAlias
	"test_json.py" -> len
	"base64.py" -> repr
	"threading.py" -> "self._tstate_lock._at_fork_reinit"
	"test_basic.py" -> "app.config.update"
	"views.py" -> "t.TypeVar"
	"tempfile.py" -> "self._file.read"
	"csv.py" -> repr
	"subprocess.py" -> "to_close.append"
	"ast.py" -> "attr.startswith"
	"db.py" -> "g.pop"
	"inspect.py" -> "functools.partial"
	"enum.py" -> "name.append"
	"plistlib.py" -> type
	"test_basic.py" -> "bp.route"
	"test_appctx.py" -> "flask.render_template_string"
	"zipfile.py" -> max
	"argparse.py" -> "_os.path.basename"
	"argparse.py" -> setdefault
	"inspect.py" -> iscode
	"selectors.py" -> "self.register"
	"argparse.py" -> strip
	"cli.py" -> "self.path_type"
	"pickle.py" -> "doctest.testmod"
	"copyreg.py" -> "base.__new__"
	"plistlib.py" -> "file.write"
	"__init__.py" -> "os.path.dirname"
	"__init__.py" -> "self.logger.hasHandlers"
	"argparse.py" -> "conflicts.extend"
	"inspect.py" -> join
	"_strptime.py" -> "_regex_cache.get"
	"app.py" -> _url_quote
	"pathlib.py" -> "cls._flavour.parse_parts"
	"subprocess.py" -> "self._translate_newlines"
	"tarfile.py" -> "os.lstat"
	"typing.py" -> "t.copy_with"
	"__init__.py" -> "self.data.islower"
	"db.py" -> get_db
	"calendar.py" -> "self.iterweekdays"
	"bz2.py" -> "self.readable"
	"helpers.py" -> "name.rpartition"
	"functools.py" -> hasattr
	"dataclasses.py" -> "itertools.chain"
	"platform.py" -> "ver.split"
	"tarfile.py" -> filter
	"pathlib.py" -> "os.open"
	"ast.py" -> zip
	"__init__.py" -> _count_elements
	"bz2.py" -> "self._buffer.peek"
	"__init__.py" -> "self.loggerDict.values"
	"zipfile.py" -> print
	"sync.py" -> "SyncToAsync.thread_sensitive_context.get"
	"app.py" -> iscoroutinefunction
	"__init__.py" -> "_parser.expand_template"
	"pathlib.py" -> "s.lower"
	"copy.py" -> "slotstate.items"
	"dis.py" -> "self.opname.ljust"
	"shlex.py" -> _print_tokens
	"enum.py" -> "cls.__dict__.items"
	"subprocess.py" -> len
	"subprocess.py" -> "kwargs.get"
	"sync.py" -> CurrentThreadExecutor
	"platform.py" -> "_pypy_sys_version_parser.match"
	"base64.py" -> bytes
	"enum.py" -> "cls._iter_member_by_value_"
	"threading.py" -> "Semaphore.__init__"
	"random.py" -> _log
	"threading.py" -> "threads.update"
	"testing.py" -> "self.stdout_bytes.decode"
	"zipfile.py" -> "self._file.tell"
	"app.py" -> "self.create_url_adapter"
	"__init__.py" -> "self.formatHeader"
	"app.py" -> "_cv_request.get"
	"cli.py" -> set
	"_strptime.py" -> _calc_julian_from_V
	"__init__.py" -> "re.sub"
	"__init__.py" -> as_posix
	"test_signals.py" -> "flask.redirect"
	"ast.py" -> "self._str_literal_helper"
	"test_db.py" -> "app.app_context"
	"tarfile.py" -> "self._proc_pax"
	"feedparser.py" -> "NLCRE_eol.search"
	"random.py" -> _isfinite
	"traceback.py" -> "collections.deque"
	"codeop.py" -> repr
	"test_cli.py" -> "app.cli.command"
	"ssl.py" -> enum_certificates
	"test_basic.py" -> "recwarn.pop"
	"socket.py" -> "sock.setsockopt"
	"dis.py" -> max
	"statistics.py" -> fabs
	"cli.py" -> "click.Choice"
	"test_async.py" -> "test_client.get"
	"argparse.py" -> "self._get_option_tuples"
	"test_reqctx.py" -> SessionError
	"plistlib.py" -> "ValueError.__init__"
	"enum.py" -> "value.replace"
	"shutil.py" -> "__all__.append"
	"test_async.py" -> "asyncio.sleep"
	"helpers.py" -> RuntimeError
	"provider.py" -> "fp.write"
	"ssl.py" -> "dn.partition"
	"subprocess.py" -> "err_close_fds.extend"
	"feedparser.py" -> "root.is_multipart"
	"socket.py" -> startswith
	"sessions.py" -> "response.delete_cookie"
	"tarfile.py" -> bytearray
	"test_signals.py" -> "flask.appcontext_tearing_down.connect"
	"__init__.py" -> "self.subtract"
	"argparse.py" -> "self._positionals._add_action"
	"_strptime.py" -> "base.__getitem__"
	"plistlib.py" -> sorted
	"test_basic.py" -> "rv.headers.get_all"
	"zipfile.py" -> "struct.pack"
	"csv.py" -> sum
	"locale.py" -> print
	"bz2.py" -> "mode.replace"
	"datetime.py" -> time
	"random.py" -> _test_generator
	"ssl.py" -> "context.wrap_socket"
	"platform.py" -> "os.path.abspath"
	"app.py" -> TypeError
	"typing.py" -> _LiteralGenericAlias
	"tempfile.py" -> isinstance
	"copyreg.py" -> "cls.__new__"
	"traceback.py" -> "queue.extend"
	"functools.py" -> any
	"gzip.py" -> range
	"__init__.py" -> "field_names.replace"
	"pathlib.py" -> str
	"templating.py" -> stream_with_context
	"__init__.py" -> "self.getEffectiveLevel"
	"inspect.py" -> len
	"provider.py" -> "self._app.response_class"
	"argparse.py" -> "self._defaults.update"
	"random.py" -> IndexError
	"argparse.py" -> _
	"fnmatch.py" -> "functools.lru_cache"
	"__init__.py" -> "zipp.Path"
	"test_basic.py" -> "data.strip"
	"inspect.py" -> "results.sort"
	"argparse.py" -> "result.append"
	"test_signals.py" -> "flask.appcontext_pushed.disconnect"
	"selectors.py" -> RuntimeError
	"shutil.py" -> "os.getenv"
	"datetime.py" -> "object.tzname"
	"zipfile.py" -> _ancestry
	"cli.py" -> "row.append"
	"test_instance_config.py" -> "app.mkdir"
	"typing.py" -> TypeVar
	"zipfile.py" -> "os.path.splitext"
	"__init__.py" -> error
	"fractions.py" -> "numerator.as_integer_ratio"
	"blueprints.py" -> __init__
	"dataclasses.py" -> "cls_dict.pop"
	"logging.py" -> "logging.StreamHandler"
	"app.py" -> "self.session_interface.is_null_session"
	"test_json.py" -> isinstance
	"typing.py" -> "annotations.keys"
	"datetime.py" -> push
	"__init__.py" -> "other.items"
	"ssl.py" -> _SSLMethod
	"typing.py" -> bool
	"ast.py" -> "parser.parse_args"
	"parser.py" -> "BytesParser.parse"
	"threading.py" -> "self._cond.wait_for"
	"threading.py" -> "self._stop"
	"tarfile.py" -> "tarinfo.isdir"
	"argparse.py" -> ArgumentError
	"__init__.py" -> ImportError
	"test_blueprints.py" -> template_string
	"__init__.py" -> get
	"zipfile.py" -> "self._init"
	"codeop.py" -> "warnings.catch_warnings"
	"typing.py" -> hash
	"test_reqctx.py" -> CustomFlask
	"debughelpers.py" -> all
	"weakref.py" -> "dict.items"
	"platform.py" -> ValueError
	"enum.py" -> "missing.append"
	"parser.py" -> "fp.detach"
	"app.py" -> getattr
	"test_blueprints.py" -> <unknown_function>
	"threading.py" -> "_shutdown_locks.difference_update"
	"shutil.py" -> "os.terminal_size"
	"__init__.py" -> sub
	"parse.py" -> "netloc.partition"
	"base64.py" -> test
	"argparse.py" -> _MutuallyExclusiveGroup
	"_weakrefset.py" -> "newset.symmetric_difference_update"
	"blueprints.py" -> lstrip
	"conftest.py" -> "monkeypatch.setattr"
	"test_blueprints.py" -> "parent.route"
	"calendar.py" -> "self.monthdayscalendar"
	"functools.py" -> "weakref.WeakKeyDictionary"
	"getopt.py" -> range
	"datetime.py" -> "self.toordinal"
	"cli.py" -> "os.path.splitext"
	"test_views.py" -> "c.get"
	"test_basic.py" -> "flask.session.pop"
	"testing.py" -> "old_env.items"
	"locale.py" -> _init_categories
	"tarfile.py" -> "name.seek"
	"enum.py" -> "simple_enum._member_map_.keys"
	"datetime.py" -> "cls._fromtimestamp"
	"sync.py" -> _iscoroutinefunction_or_partial
	"tempfile.py" -> _TemporaryFileWrapper
	"glob.py" -> _glob2
	"sync.py" -> ParamSpec
	"__init__.py" -> "sio.write"
	"debughelpers.py" -> "app.logger.info"
	"typing_extensions.py" -> "typing.TypeVar"
	"zipfile.py" -> "parser.add_mutually_exclusive_group"
	"locale.py" -> "_percent_re.match"
	"selectors.py" -> "self._fd_to_key.values"
	"statistics.py" -> issubclass
	"__init__.py" -> "itertools.islice"
	"__init__.py" -> splitlines
	"functools.py" -> is_related
	"argparse.py" -> delattr
	"tarfile.py" -> <unknown_function>
	"helpers.py" -> "current_app._get_current_object"
	"plistlib.py" -> append
	"tokenize.py" -> _tokenize
	"argparse.py" -> "dest.replace"
	"ast.py" -> "new_fstring_parts.append"
	"enum.py" -> __setattr__
	"glob.py" -> _iglob
	"test_instance_config.py" -> "installed_path.mkdir"
	"uuid.py" -> _windll_getnode
	"csv.py" -> "regexp.findall"
	"__init__.py" -> "pathlib.PurePosixPath"
	"test_json.py" -> decode
	"conftest.py" -> "f.read"
	"__init__.py" -> "self.data.upper"
	"tokenize.py" -> "buffer.close"
	"textwrap.py" -> "self.wordsep_simple_re.split"
	"subprocess.py" -> classmethod
	"views.py" -> cls
	"test_cli.py" -> "click.command"
	"config.py" -> "os.environ.get"
	"typing_extensions.py" -> _UnpackForm
	"base64.py" -> "acc.to_bytes"
	"typing.py" -> globals
	"gzip.py" -> "self.write"
	"test_config.py" -> "__file__.rsplit"
	"string.py" -> "self._invalid"
	"ssl.py" -> "dn_remainder.lower"
	"random.py" -> ord
	"testing.py" -> "app.session_interface.open_session"
	"__init__.py" -> "path.search"
	"argparse.py" -> action_class
	"test_config.py" -> "msg.endswith"
	"locale.py" -> list
	"typing.py" -> all
	"test_db.py" -> "db.execute"
	"datetime.py" -> map
	"testing.py" -> repr
	"conftest.py" -> "monkeypatch._setitem.extend"
	"test_basic.py" -> <unknown_function>
	"dis.py" -> list
	"signal.py" -> "_IntEnum._convert_"
	"typing.py" -> _unpack_args
	"ast.py" -> iter_child_nodes
	"dataclasses.py" -> is_type_predicate
	"inspect.py" -> _is_type
	"argparse.py" -> "self.formatter._indent"
	"__init__.py" -> "_cache.clear"
	"traceback.py" -> "stack.reverse"
	"auth.py" -> url_for
	"tarfile.py" -> "os.path.abspath"
	"test_helpers.py" -> "flask.send_from_directory"
	"test_helpers.py" -> next
	"test_basic.py" -> "client.head"
	"datetime.py" -> _index
	"enum.py" -> _is_descriptor
	"ast.py" -> nullcontext
	"copy.py" -> tuple
	"test_templating.py" -> "client.get"
	"inspect.py" -> "expline.lstrip"
	"warnings.py" -> _filters_mutated
	"tasks.py" -> "self.update_state"
	"test_basic.py" -> KeyboardInterrupt
	"ast.py" -> "self.get_type_comment"
	"subprocess.py" -> "data.replace"
	"datetime.py" -> "_time.strftime"
	"provider.py" -> hasattr
	"getopt.py" -> long_has_args
	"ipaddress.py" -> join
	"inspect.py" -> _signature_get_user_defined_method
	"zipfile.py" -> "self._RealGetContents"
	"functools.py" -> RLock
	"__init__.py" -> "self.data.isascii"
	"parser.py" -> "Parser.parse"
	"locale.py" -> tuple
	"__init__.py" -> set
	"tarfile.py" -> KeyError
	"ast.py" -> parse
	"base64.py" -> "struct.Struct"
	"ssl.py" -> SSLError
	"pickle.py" -> "obj.replace"
	"socket.py" -> "self.fileno"
	"test_helpers.py" -> "MyView.as_view"
	"__init__.py" -> "self._log"
	"tracemalloc.py" -> "lines.append"
	"parse.py" -> unquote
	"csv.py" -> "rowdict.keys"
	"fnmatch.py" -> isinstance
	"shutil.py" -> "tarfile.open"
	"test_testing.py" -> "client.open"
	"test_templating.py" -> "app.template_filter"
	"__init__.py" -> "self.data.rjust"
	"tarfile.py" -> ValueError
	"textwrap.py" -> "self._munge_whitespace"
	"zipfile.py" -> unpack
	"selectors.py" -> "self._selector_cls"
	"getopt.py" -> do_shorts
	"cli.py" -> __import__
	"traceback.py" -> hasattr
	"test_cli.py" -> locate_app
	"__init__.py" -> Pair
	"subprocess.py" -> "fd.Close"
	"warnings.py" -> _showwarnmsg
	"test_reqctx.py" -> "request_ctx.copy"
	"cli.py" -> "cli.list_commands"
	"socket.py" -> "self._sendfile_use_send"
	"typing.py" -> "nm_tpl.__init_subclass__"
	"ssl.py" -> connect_ex
	"uuid.py" -> repr
	"dataclasses.py" -> tuple_factory
	"linecache.py" -> endswith
	"plistlib.py" -> "self._read_ints"
	"cli.py" -> get_command
	"helpers.py" -> "current_app.url_for"
	"sessions.py" -> "app.permanent_session_lifetime.total_seconds"
	"app.py" -> type
	"__init__.py" -> "zf.namelist"
	"calendar.py" -> "self.itermonthdates"
	"argparse.py" -> "items.extend"
	"py_compile.py" -> compile
	"test_json.py" -> str
	"code.py" -> interact
	"pathlib.py" -> "os.replace"
	"tempfile.py" -> "_os.lstat"
	"app.py" -> "self.shell_context_processors.append"
	"feedparser.py" -> "epilogue.append"
	"__init__.py" -> "self.logger._log"
	"random.py" -> func
	"typing.py" -> SyntaxError
	"base64.py" -> "binascii.Error"
	"app.py" -> callable
	"__init__.py" -> "dict.pop"
	"tempfile.py" -> gettempdir
	"ast.py" -> traverser
	"pickle.py" -> __import__
	"tarfile.py" -> type
	"textwrap.py" -> "text.translate"
	"subprocess.py" -> "locale.getencoding"
	"datetime.py" -> _build_struct_time
	"pickle.py" -> "self.get_extension"
	"py_compile.py" -> "parser.exit"
	"gzip.py" -> chr
	"app.py" -> "os.path.basename"
	"auth.py" -> "functools.wraps"
	"__init__.py" -> encode
	"test_json.py" -> "rv.data.strip"
	"test_testing.py" -> "rv.close"
	"ssl.py" -> "hostname.lower"
	"parse.py" -> format
	"socket.py" -> "fds.frombytes"
	"parse.py" -> "scheme.strip"
	"app.py" -> SecureCookieSessionInterface
	"app.py" -> reversed
	"locale.py" -> "perc.group"
	"textwrap.py" -> len
	"base64.py" -> tobytes
	"ssl.py" -> "hostname.partition"
	"ipaddress.py" -> "cls._parse_hextet"
	"platform.py" -> "mo.group"
	"datetime.py" -> _check_tzname
	"pickle.py" -> "self.find_class"
	"tag.py" -> http_date
	"enum.py" -> "checked_value.replace"
	"pathlib.py" -> "self._flavour.casefold_parts"
	"blueprints.py" -> "rule.lstrip"
	"tarfile.py" -> "self._proc_gnusparse_00"
	"traceback.py" -> "queue.pop"
	"ssl.py" -> create_connection
	"functools.py" -> "registry.get"
	"string.py" -> "self.pattern.sub"
	"feedparser.py" -> "self._parse_headers"
	"bz2.py" -> hasattr
	"glob.py" -> "entry.is_dir"
	"signal.py" -> "_signal.valid_signals"
	"tarfile.py" -> SpecialFileError
	"inspect.py" -> "roots.append"
	"ipaddress.py" -> len
	"tarfile.py" -> "os.path.basename"
	"subprocess.py" -> "self.stdout_thread.is_alive"
	"feedparser.py" -> "self._cur.get_boundary"
	"linecache.py" -> "filename.endswith"
	"typing_route.py" -> iter
	"uuid.py" -> bytes
	"__init__.py" -> "os.path.splitext"
	"parse.py" -> partition
	"__init__.py" -> "posixpath.split"
	"inspect.py" -> isroutine
	"shutil.py" -> "stat.S_ISDIR"
	"_weakrefset.py" -> "self._pending_removals.append"
	"app.py" -> "cli.show_server_banner"
	"__init__.py" -> split
	"auth.py" -> "db.execute"
	"types.py" -> exec_body
	"inspect.py" -> super
	"fractions.py" -> _index
	"fractions.py" -> "math.gcd"
	"__init__.py" -> _topmost
	"enum.py" -> TypeError
	"weakref.py" -> selfref
	"parse.py" -> ParseResult
	"pathlib.py" -> "os.symlink"
	"tarfile.py" -> "bz2.BZ2Decompressor"
	"socket.py" -> "lsock.listen"
	"shutil.py" -> fdst_write
	"test_signals.py" -> "flask.appcontext_popped.disconnect"
	"inspect.py" -> "l.encode"
	"cli.py" -> "os.environ.get"
	"helpers.py" -> _wz_abort
	"test_blueprints.py" -> sorted
	"base64.py" -> "binascii.hexlify"
	"calendar.py" -> encode
	"__init__.py" -> "self.data.lower"
	"parse.py" -> _to_bytes
	"rlcompleter.py" -> "readline.redisplay"
	"warnings.py" -> _formatwarnmsg
	"textwrap.py" -> "chunks.pop"
	"csv.py" -> "self._validate"
	"test_blueprints.py" -> "evts.append"
	"test_user_error_handler.py" -> "bp.errorhandler"
	"_strptime.py" -> "locale_time.f_weekday.index"
	"ast.py" -> "self.buffered"
	"socket.py" -> selector_select
	"tempfile.py" -> "self._file.readlines"
	"test_blueprints.py" -> "frontend.route"
	"__init__.py" -> complex
	"operator.py" -> "self._call"
	"tokenize.py" -> "c_tokenizer.TokenizerIter"
	"platform.py" -> "_os_release_cache.copy"
	"__init__.py" -> "Filterer.__init__"
	"pickle.py" -> TypeError
	"test_helpers.py" -> "app.route"
	"enum.py" -> "warnings.warn"
	"test_helpers.py" -> "flask.abort"
	"parse.py" -> "_byte_quoter_factory.cache_clear"
	"pickle.py" -> setstate
	"socket.py" -> OSError
	"uuid.py" -> _find_mac_near_keyword
	"plistlib.py" -> "_DumbXMLWriter.__init__"
	"cli.py" -> "self.add_command"
	"tarfile.py" -> "info.get"
	"ipaddress.py" -> "cls._prefix_from_ip_int"
	"tarfile.py" -> sorted
	"test_views.py" -> "pytest.raises"
	"testing.py" -> "self._input.read1"
	"parse.py" -> "netloc.isascii"
	"app.py" -> "self.make_default_options_response"
	"ssl.py" -> "context.load_default_certs"
	"pathlib.py" -> "self._iterate_directories"
	"test_reqctx.py" -> FailingSessionInterface
	"typing_extensions.py" -> "inspect.signature"
	"socket.py" -> "sock.connect"
	"base64.py" -> "sys.exit"
	"parser.py" -> Parser
	"warnings.py" -> TypeError
	"blueprints.py" -> "app.cli.add_command"
	"tokenize.py" -> "ut.untokenize"
	"subprocess.py" -> "process.kill"
	"argparse.py" -> consume_positionals
	"pickle.py" -> "obj.encode"
	"ssl.py" -> strptime
	"plistlib.py" -> repr
	"types.py" -> bool
	"py_compile.py" -> "msg.format"
	"tempfile.py" -> "self._file.read1"
	"traceback.py" -> zip
	"wrappers.py" -> BadRequest
	"base64.py" -> func
	"blueprints.py" -> super
	"parse.py" -> "re.match"
	"subprocess.py" -> "err_close_fds.append"
	"tarfile.py" -> OutsideDestinationError
	"warnings.py" -> WarningMessage
	"pickle.py" -> "int.from_bytes"
	"__init__.py" -> "pattern.finditer"
	"typing_extensions.py" -> _concatenate_getitem
	"helpers.py" -> "session.pop"
	"app.py" -> isinstance
	"pickle.py" -> getattr
	"sessions.py" -> "response.vary.add"
	"dis.py" -> next
	"socket.py" -> TypeError
	"fractions.py" -> "decimal.replace"
	"ssl.py" -> "ss.append"
	"subprocess.py" -> "fh.close"
	"test_basic.py" -> sorted
	"platform.py" -> win32_edition
	"__init__.py" -> "self.data.sort"
	"templating.py" -> "loader.list_templates"
	"typing_error_handler.py" -> Flask
	"shlex.py" -> "dict.fromkeys"
	"tokenize.py" -> Untokenizer
	"tarfile.py" -> "next.isdir"
	"gzip.py" -> ValueError
	"test_basic.py" -> "flask.make_response"
	"shlex.py" -> "os.path.isabs"
	"test_basic.py" -> "evts.append"
	"enum.py" -> join
	"cli.py" -> join
	"__init__.py" -> "types.SimpleNamespace"
	"traceback.py" -> id
	"warnings.py" -> getattr
	"ipaddress.py" -> "self._string_from_ip_int"
	"test_async.py" -> Blueprint
	"blueprints.py" -> "self.error_handler_spec.items"
	"warnings.py" -> "parts.append"
	"__init__.py" -> PackageNotFoundError
	"parse.py" -> "url.rfind"
	"warnings.py" -> "msg_lines.append"
	"provider.py" -> "json.dumps"
	"cli.py" -> "app.app_context"
	"datetime.py" -> plural
	"contextlib.py" -> "os.getcwd"
	"__init__.py" -> "celery_app.set_default"
	"calendar.py" -> "cal.formatyear"
	"zipfile.py" -> "self._extract_member"
	"sync.py" -> "SyncToAsync.thread_sensitive_context.set"
	"pathlib.py" -> "p.lower"
	"datetime.py" -> "self._getstate"
	"argparse.py" -> "self._get_values"
	"tokenize.py" -> detect_encoding
	"dataclasses.py" -> "locals.update"
	"helpers.py" -> "werkzeug.utils.send_file"
	"lzma.py" -> "self._buffer.read1"
	"types.py" -> func
	"test_signals.py" -> "flask.appcontext_tearing_down.disconnect"
	"shutil.py" -> "stat.S_ISLNK"
	"pickle.py" -> "self._decode_string"
	"traceback.py" -> "queue.append"
	"test_templating.py" -> "app.route"
	"zipfile.py" -> "itertools.filterfalse"
	"ipaddress.py" -> "cls._prefix_from_prefix_string"
	"threading.py" -> local_print
	"parser.py" -> "self.parser.parse"
	"tarfile.py" -> "self.tarinfo"
	"statistics.py" -> exp
	"socket.py" -> getattr
	"platform.py" -> _syscmd_file
	"gzip.py" -> "self.readall"
	"cli.py" -> "template.format"
	"traceback.py" -> klass
	"typing_extensions.py" -> type
	"_strptime.py" -> datetime_date
	"shutil.py" -> "sys.exc_info"
	"testing.py" -> "resp.headers.getlist"
	"tokenize.py" -> "line.decode"
	"pathlib.py" -> "self._format_parsed_parts"
	"threading.py" -> namedtuple
	"testing.py" -> "self.get_default_prog_name"
	"types.py" -> globals
	"fnmatch.py" -> "os.path.normcase"
	"ctx.py" -> "app.app_ctx_globals_class"
	"ast.py" -> _convert_num
	"gzip.py" -> _read_exact
	"types.py" -> _GeneratorWrapper
	"pathlib.py" -> "re.compile"
	"traceback.py" -> "StackSummary.from_list"
	"datetime.py" -> "self._tzinfo.utcoffset"
	"inspect.py" -> _ParameterKind
	"test_testing.py" -> "flask.url_for"
	"typing.py" -> print
	"app.py" -> EnvironBuilder
	"plistlib.py" -> "_controlCharPat.search"
	"test_views.py" -> "c.post"
	"helpers.py" -> "current_app.jinja_env.get_template"
	"test_config.py" -> "os.fspath"
	"tarfile.py" -> "directories.sort"
	"uuid.py" -> "self.int.to_bytes"
	"config.py" -> import_string
	"test_helpers.py" -> "monkeypatch.setenv"
	"tokenize.py" -> find_cookie
	"_strptime.py" -> toordinal
	"dataclasses.py" -> _astuple_inner
	"test_cli.py" -> "runner.invoke"
	"inspect.py" -> "doc.expandtabs"
	"types.py" -> "self.fdel"
	"parse.py" -> "bs.rstrip"
	"dataclasses.py" -> "cls.__dict__.items"
	"test_helpers.py" -> "app.open_resource"
	"test_basic.py" -> parse_date
	"_weakrefset.py" -> "self.intersection"
	"parse.py" -> "scheme.lower"
	"_weakrefset.py" -> map
	"ctx.py" -> "self.match_request"
	"typing.py" -> __subclasscheck__
	"enum.py" -> property
	"typing.py" -> AttributeError
	"app.py" -> "cli.AppGroup"
	"textwrap.py" -> "text.splitlines"
	"test_json.py" -> "app.json.dumps"
	"subprocess.py" -> "buffer.append"
	"ast.py" -> type
	"debughelpers.py" -> DebugFilesKeyError
	"dataclasses.py" -> set
	"tarfile.py" -> bltn_open
	"tempfile.py" -> "self.file.__exit__"
	"inspect.py" -> ismethod
	"argparse.py" -> "self._get_default_metavar_for_optional"
	"testing.py" -> "rv.update"
	"plistlib.py" -> "text.replace"
	"calendar.py" -> _localized_day
	"inspect.py" -> eval
	"typing.py" -> setattr
	"enum.py" -> len
	"statistics.py" -> "n.bit_length"
	"subprocess.py" -> RuntimeError
	"feedparser.py" -> super
	"typing_extensions.py" -> _UnpackAlias
	"enum.py" -> "self.__class__"
	"enum.py" -> "str.__format__"
	"sessions.py" -> "self.get_cookie_path"
	"argparse.py" -> get_subactions
	"__init__.py" -> parsestr
	"codeop.py" -> Compile
	"argparse.py" -> "self._group_actions.remove"
	"argparse.py" -> "self._current_section.items.append"
	"blueprints.py" -> "self.view_functions.items"
	"pickle.py" -> _Unframer
	"tempfile.py" -> gettempdirb
	"typing.py" -> __mro_entries__
	"fractions.py" -> Fraction
	"string.py" -> splitlines
	"ssl.py" -> "self.set_default_verify_paths"
	"hashlib.py" -> TypeError
	"zipfile.py" -> "dest.write"
	"helpers.py" -> "os.path.abspath"
	"subprocess.py" -> "self._on_error_fd_closer"
	"test_views.py" -> f
	"copy.py" -> "_deepcopy_dispatch.get"
	"csv.py" -> colType
	"scaffold.py" -> "t.TypeVar"
	"subprocess.py" -> "env.items"
	"dis.py" -> _try_compile
	"app.py" -> "self.handle_url_build_error"
	"shutil.py" -> "_UNPACK_FORMATS.items"
	"copyreg.py" -> TypeError
	"__init__.py" -> "base.endswith"
	"ast.py" -> "c.encode"
	"copy.py" -> reductor
	"_strptime.py" -> LocaleTime
	"tempfile.py" -> "self.rollover"
	"argparse.py" -> "positionals.append"
	"test_views.py" -> "CountInit.as_view"
	"ast.py" -> "self._write_docstring"
	"ipaddress.py" -> super
	"socket.py" -> "sock.close"
	"test_user_error_handler.py" -> "flask.abort"
	"datetime.py" -> "dt.utcoffset"
	"pickle.py" -> len
	"tokenize.py" -> ValueError
	"calendar.py" -> "parser.add_argument_group"
	"subprocess.py" -> "self.stdout.close"
	"importerrorapp.py" -> ImportError
	"warnings.py" -> type
	"tarfile.py" -> "s.insert"
	"blueprints.py" -> hasattr
	"pickle.py" -> callable
	"test_converters.py" -> base_to_url
	"fractions.py" -> "m.group"
	"sessions.py" -> bool
	"locale.py" -> getlocale
	"random.py" -> max
	"cli.py" -> "sys.exc_info"
	"tarfile.py" -> itn
	"datetime.py" -> "hour.encode"
	"ipaddress.py" -> "m.groups"
	"enum.py" -> MappingProxyType
	"argparse.py" -> "self._get_optional_actions"
	"tarfile.py" -> stn
	"subprocess.py" -> "_active.append"
	"threading.py" -> "self._set_native_id"
	"plistlib.py" -> "self.begin_element"
	"pathlib.py" -> "self._flavour.make_uri"
	"inspect.py" -> any
	"platform.py" -> repr
	"random.py" -> getstate
	"testing.py" -> "self._update_cookies_from_response"
	"blueprints.py" -> "blueprint.register"
	"hashlib.py" -> getattr
	"test_regression.py" -> Foo
	"tempfile.py" -> _RandomNameSequence
	"testing.py" -> bool
	"socket.py" -> "self.getsockname"
	"datetime.py" -> TypeError
	"threading.py" -> "waiter.release"
	"warnings.py" -> callable
	"zipfile.py" -> "self.NameToInfo.get"
	"test_cli.py" -> "request.addfinalizer"
	"pickle.py" -> "f.getvalue"
	"ast.py" -> "operator_precedence.next"
	"inspect.py" -> "line.lstrip"
	"subprocess.py" -> "process.wait"
	"copyreg.py" -> getattr
	"dataclasses.py" -> _is_classvar
	"tarfile.py" -> "regex.match"
	"test_signals.py" -> "flask.request_started.connect"
	"typing.py" -> list
	"__init__.py" -> "root.removeHandler"
	"threading.py" -> hex
	"scaffold.py" -> "os.path.split"
	"test_helpers.py" -> "flask.redirect"
	"string.py" -> _ChainMap
	"code.py" -> "self.buffer.append"
	"random.py" -> print
	"inspect.py" -> Arguments
	"zipfile.py" -> "self._readbuffer.find"
	"pickle.py" -> "args.pop"
	"warnings.py" -> reversed
	"socket.py" -> len
	"threading.py" -> atexit_call
	"threading.py" -> "self._tstate_lock.acquire"
	"config.py" -> super
	"socket.py" -> "self.__class__"
	"code.py" -> "traceback.format_exception_only"
	"textwrap.py" -> "self.wordsep_re.split"
	"test_basic.py" -> "app.add_url_rule"
	"fractions.py" -> Decimal
	"tokenize.py" -> replace
	"dis.py" -> _get_code_array
	"typing_extensions.py" -> isinstance
	"inspect.py" -> ismethodwrapper
	"selectors.py" -> ValueError
	"calendar.py" -> _monthlen
	"calendar.py" -> "argparse.ArgumentParser"
	"datetime.py" -> getattr
	"conftest.py" -> getattr
	"tag.py" -> "self.to_json"
	"random.py" -> "self.getrandbits"
	"shutil.py" -> fsrc_read
	"typing.py" -> tuple
	"__init__.py" -> "_bootstrap._gcd_import"
	"zipfile.py" -> "self._decompressor.flush"
	"test_views.py" -> str
	"hashlib.py" -> "outer.copy"
	"typing.py" -> __reduce__
	"parse.py" -> "port.isascii"
	"functools.py" -> _is_valid_dispatch_type
	"typing.py" -> "self.__origin__"
	"socket.py" -> "self.gettimeout"
	"dis.py" -> "code.co_lines"
	"argparse.py" -> "required_actions.append"
	"datetime.py" -> total_seconds
	"parse.py" -> urlparse
	"ipaddress.py" -> IPv6Address
	"weakref.py" -> "pending.pop"
	"__init__.py" -> "logger.addHandler"
	"parse.py" -> "user.partition"
	"tarfile.py" -> "os.close"
	"auth.py" -> "session.clear"
	"shlex.py" -> "warnings.warn"
	"test_logging.py" -> StringIO
	"ast.py" -> "self._function_helper"
	"test_config.py" -> "pytest.raises"
	"pickle.py" -> "self._batch_setitems"
	"tarfile.py" -> "self.zlib.compressobj"
	"test_blueprints.py" -> "bp.errorhandler"
	"cli.py" -> import_string
	"datetime.py" -> divmod
	"random.py" -> _sha512
	"uuid.py" -> hash
	"cli.py" -> "rows.insert"
	"pathlib.py" -> S_ISBLK
	"plistlib.py" -> "datetime.datetime"
	"tarfile.py" -> "re.finditer"
	"locale.py" -> _build_localename
	"shutil.py" -> "os.fstat"
	"tarfile.py" -> _LowLevelFile
	"test_user_error_handler.py" -> InternalServerError
	"test_cli.py" -> "click.Group"
	"lzma.py" -> format
	"warnings.py" -> "onceregistry.get"
	"__init__.py" -> getLogger
	"subprocess.py" -> "os.waitpid"
	"__init__.py" -> "self.scanner.scanner"
	"threading.py" -> _CRLock
	"cli.py" -> "traceback.print_exc"
	"functools.py" -> type
	"dis.py" -> "linestarts.get"
	"scaffold.py" -> "self.after_request_funcs.setdefault"
	"test_basic.py" -> ForbiddenSubclass
	"__init__.py" -> "itertools.filterfalse"
	"test_cli.py" -> "cli.command"
	"typing_route.py" -> encode
	"ast.py" -> isinstance
	"__init__.py" -> "self.values"
	"platform.py" -> "os.path.realpath"
	"tempfile.py" -> _sanitize_params
	"tarfile.py" -> "self._block"
	"ssl.py" -> "self._sslobj.get_channel_binding"
	"testing.py" -> iter
	"datetime.py" -> join
	"templating.py" -> "current_app._get_current_object"
	"scaffold.py" -> next
	"__init__.py" -> "sys.stderr.write"
	"__init__.py" -> lstrip
	"test_appctx.py" -> ValueError
	"inspect.py" -> frozenset
	"__init__.py" -> "_parser.SubPattern"
	"zipfile.py" -> "time.time"
	"test_config.py" -> "app.config.from_file"
	"statistics.py" -> partials_get
	"typing.py" -> no_type_check
	"__init__.py" -> "section._replace"
	"__init__.py" -> subn
	"__init__.py" -> pop
	"dataclasses.py" -> "sys.modules.get"
	"inspect.py" -> "srch_cls.__getattr__"
	"zipfile.py" -> "contextlib.suppress"
	"enum.py" -> "metacls.__prepare__"
	"platform.py" -> "System.getProperty"
	"zipfile.py" -> "name.endswith"
	"tokenize.py" -> sorted
	"base64.py" -> max
	"datetime.py" -> _parse_isoformat_date
	"__init__.py" -> property
	"conftest.py" -> "sys.modules.keys"
	"textwrap.py" -> "re.escape"
	"shlex.py" -> join
	"__init__.py" -> "_default_encoder.encode"
	"csv.py" -> max
	"ipaddress.py" -> ip
	"tarfile.py" -> "self._init_read_gz"
	"ipaddress.py" -> "subnets.get"
	"subprocess.py" -> "_winapi.GetCurrentProcess"
	"test_blueprints.py" -> "bp.endpoint"
	"__init__.py" -> _unique
	"fractions.py" -> TypeError
	"gzip.py" -> _read_gzip_header
	"pathlib.py" -> scandir
	"tarfile.py" -> "os.unlink"
	"__init__.py" -> "self.escape"
	"rlcompleter.py" -> TypeError
	"parse.py" -> "safe.encode"
	"statistics.py" -> _integer_sqrt_of_frac_rto
	"app.py" -> "self.handle_exception"
	"tarfile.py" -> AbsoluteLinkError
	"subprocess.py" -> "pwd.getpwnam"
	"subprocess.py" -> min
	"warnings.py" -> isinstance
	"functools.py" -> recursive_repr
	"__init__.py" -> issubclass
	"shutil.py" -> "os.path.exists"
	"__init__.py" -> "self.most_common"
	"base64.py" -> print
	"tarfile.py" -> "stat.S_ISBLK"
	"hashlib.py" -> len
	"uuid.py" -> all
	"traceback.py" -> TypeError
	"test_basic.py" -> "rv.headers.get"
	"dis.py" -> "names.append"
	"dataclasses.py" -> "_thread.get_ident"
	"inspect.py" -> enumerate
	"typing.py" -> _is_typevar_like
	"__init__.py" -> "self._read_files_distinfo"
	"platform.py" -> "os.path.join"
	"parser.py" -> "text.decode"
	"platform.py" -> "vms_lib.getsyi"
	"test_config.py" -> isinstance
	"__init__.py" -> "Distribution.from_name"
	"test_basic.py" -> repr
	"zipfile.py" -> "fp.close"
	"feedparser.py" -> "errors.FirstHeaderLineIsContinuationDefect"
	"ipaddress.py" -> AssertionError
	"uuid.py" -> "subprocess.Popen"
	"copyreg.py" -> callable
	"subprocess.py" -> "os.confstr"
	"zipfile.py" -> "zf.printdir"
	"testing.py" -> "extra.pop"
	"textwrap.py" -> "self._split"
	"pathlib.py" -> "self.successor._select_from"
	"calendar.py" -> property
	"rlcompleter.py" -> getattr
	"subprocess.py" -> "self._try_wait"
	"__init__.py" -> "self.makeRecord"
	"app.py" -> "self.handle_user_exception"
	"__init__.py" -> "sys.exc_info"
	"test_async.py" -> "app.errorhandler"
	"ast.py" -> "_const_node_type_names.items"
	"shutil.py" -> "srcentry.is_symlink"
	"views.py" -> "request.method.lower"
	"ssl.py" -> "maximum_version.__set__"
	"zipfile.py" -> filterfunc
	"pickle.py" -> decode
	"__init__.py" -> "name.isidentifier"
	"pickle.py" -> "self.current_frame.tell"
	"typing.py" -> _is_callable_members_only
	"cli.py" -> super
	"__init__.py" -> "self.filters.append"
	"feedparser.py" -> "self._input.unreadline"
	"shutil.py" -> "stat.S_IMODE"
	"templating.py" -> "app.jinja_env.get_or_select_template"
	"shutil.py" -> "os.path.isfile"
	"tarfile.py" -> bytes
	"shutil.py" -> _ensure_directory
	"__init__.py" -> "self.select"
	"__init__.py" -> "_adapters.Message"
	"locale.py" -> format_string
	"calendar.py" -> isleap
	"pickle.py" -> f
	"traceback.py" -> getattr
	"typing.py" -> "ann.items"
	"datetime.py" -> len
	"__init__.py" -> "self.read_text"
	"fractions.py" -> divmod
	"inspect.py" -> range
	"traceback.py" -> "fnames.add"
	"__init__.py" -> __delitem__
	"pathlib.py" -> NotImplementedError
	"test_testing.py" -> "client.post"
	"plistlib.py" -> BytesIO
	"auth.py" -> view
	"operator.py" -> hasattr
	"debughelpers.py" -> __getitem__
	"__init__.py" -> render_template
	"shlex.py" -> quote
	"inspect.py" -> min
	"ssl.py" -> "self.read"
	"gzip.py" -> "self._write_gzip_header"
	"parse.py" -> urlunparse
	"threading.py" -> _make_invoke_excepthook
	"argparse.py" -> "_re.sub"
	"fnmatch.py" -> "re.compile"
	"shutil.py" -> copystat
	"__init__.py" -> __new__
	"contextlib.py" -> func
	"test_cli.py" -> find_best_app
	"tempfile.py" -> "_os.open"
	"plistlib.py" -> hash
	"bz2.py" -> TypeError
	"tarfile.py" -> "os.path.realpath"
	"conftest.py" -> executescript
	"test_basic.py" -> "app.url_build_error_handlers.append"
	"typing.py" -> "t._evaluate"
	"test_cli.py" -> "click.echo"
	"datetime.py" -> timezone
	"shlex.py" -> len
	"feedparser.py" -> "eolmo.group"
	"tarfile.py" -> cls
	"test_subclassing.py" -> "out.getvalue"
	"__init__.py" -> "_lock.release"
	"gzip.py" -> int
	"zipfile.py" -> "os.path.exists"
	"debughelpers.py" -> "loader.__dict__.items"
	"test_subclassing.py" -> "app.test_client"
	"functools.py" -> "abcs.remove"
	"ssl.py" -> "os.environ.get"
	"ipaddress.py" -> any
	"ssl.py" -> "options.__set__"
	"typing_extensions.py" -> "parameters.extend"
	"tarfile.py" -> sum
	"ipaddress.py" -> "prefixlen_str.isdigit"
	"__init__.py" -> __mod__
	"shutil.py" -> "path.rstrip"
	"tag.py" -> len
	"argparse.py" -> func
	"__init__.py" -> _OrderedDictKeysView
	"copy.py" -> func
	"test_signals.py" -> "flask.request_finished.disconnect"
	"functools.py" -> isinstance
	"conf.py" -> "text.endswith"
	"shutil.py" -> copy_function
	"__init__.py" -> "self.locate"
	"cli.py" -> command
	"parse.py" -> TypeError
	"test_signals.py" -> "flask.got_request_exception.disconnect"
	"blueprints.py" -> dict
	"shutil.py" -> hasattr
	"tracemalloc.py" -> Snapshot
	"tarfile.py" -> "mode.split"
	"enum.py" -> str
	"statistics.py" -> range
	"cli.py" -> "os.path.exists"
	"__init__.py" -> "name.rfind"
	"ssl.py" -> "hostname.encode"
	"ast.py" -> "lines.append"
	"sessions.py" -> get
	"_weakrefset.py" -> "s.remove"
	"app.py" -> "os.path.join"
	"test_reqctx.py" -> meh
	"argparse.py" -> "self.parse_known_intermixed_args"
	"debughelpers.py" -> __init__
	"subprocess.py" -> "os.kill"
	"pickle.py" -> "klass.__new__"
	"test_basic.py" -> "client.open"
	"test_basic.py" -> "flask.g.get"
	"__init__.py" -> "__file__.replace"
	"socket.py" -> "array.array"
	"__init__.py" -> "h.setFormatter"
	"test_reqctx.py" -> greenlet
	"typing.py" -> "ns.get"
	"blog.py" -> get_db
	"zipfile.py" -> "self.open"
	"parse.py" -> "obj.encode"
	"tempfile.py" -> _TemporaryFileCloser
	"csv.py" -> list
	"tarfile.py" -> "os.symlink"
	"testing.py" -> "self.make_env"
	"locale.py" -> _setlocale
	"shutil.py" -> "seen.add"
	"test_blueprints.py" -> "flask.abort"
	"enum.py" -> "failed.append"
	"zipfile.py" -> "self.is_dir"
	"argparse.py" -> iter
	"typing_route.py" -> jsonify
	"ssl.py" -> "d.encode"
	"_strptime.py" -> TypeError
	"zipfile.py" -> format
	"parse.py" -> "warnings.warn"
	"typing.py" -> __getitem__
	"plistlib.py" -> globals
	"zipfile.py" -> "os.stat"
	"shutil.py" -> copyfile
	"hello.py" -> Flask
	"tarfile.py" -> "os.path.join"
	"views.py" -> "request.form.get"
	"zipfile.py" -> LZMADecompressor
	"plistlib.py" -> "line.encode"
	"pickle.py" -> str
	"pathlib.py" -> replace
	"app.py" -> "rv.headers.update"
	"shutil.py" -> memoryview
	"sessions.py" -> setdefault
	"uuid.py" -> digest
	"cli.py" -> update_wrapper
	"inspect.py" -> dir
	"inspect.py" -> items
	"weakref.py" -> list
	"shutil.py" -> "entry.stat"
	"statistics.py" -> most_common
	"test_cli.py" -> "platform.python_version"
	"datetime.py" -> _cmp
	"tarfile.py" -> "cls._create_payload"
	"socket.py" -> "lsock.bind"
	"tarfile.py" -> _Stream
	"feedparser.py" -> "self._partial.readlines"
	"provider.py" -> type
	"cli.py" -> "os.path.isfile"
	"typing.py" -> decorator
	"test_json_tag.py" -> "pytest.mark.parametrize"
	"warnings.py" -> str
	"test_views.py" -> "flask.Flask"
	"pathlib.py" -> "self.is_absolute"
	"shutil.py" -> "os.listxattr"
	"zipfile.py" -> _name_set
	"threading.py" -> _ExceptHookArgs
	"tarfile.py" -> "cls._create_pax_generic_header"
	"gzip.py" -> "io.TextIOWrapper"
	"gzip.py" -> repr
	"ssl.py" -> "self._real_connect"
	"app.py" -> "self.make_config"
	"test_signals.py" -> len
	"parse.py" -> lower
	"zipfile.py" -> "path.rstrip"
	"zipfile.py" -> main
	"test_basic.py" -> "rv.close"
	"bz2.py" -> "self._compressor.flush"
	"typing.py" -> ForwardRef
	"gzip.py" -> "zlib.compressobj"
	"zipfile.py" -> "io.open"
	"glob.py" -> _listdir
	"glob.py" -> "os.path.lexists"
	"types.py" -> _cell_factory
	"test_auth.py" -> get_db
	"weakref.py" -> "self.data.setdefault"
	"fractions.py" -> len
	"test_config.py" -> str
	"locale.py" -> _localize
	"zipfile.py" -> hasattr
	"zipfile.py" -> _strip_extra
	"fractions.py" -> "self.__class__"
	"threading.py" -> "lock.locked"
	"dataclasses.py" -> join
	"socket.py" -> str
	"datetime.py" -> "dt.dst"
	"shutil.py" -> any
	"traceback.py" -> type
	"parse.py" -> join
	"statistics.py" -> "Y.cdf"
	"typing.py" -> __init__
	"__init__.py" -> "contextlib.suppress"
	"rlcompleter.py" -> callable
	"__init__.py" -> "name.endswith"
	"plistlib.py" -> OverflowError
	"config.py" -> open
	"plistlib.py" -> "keys.append"
	"typing_extensions.py" -> _Sentinel
	"_strptime.py" -> lower
	"shlex.py" -> "self.instream.readline"
	"testing.py" -> "self._request_from_builder_args"
	"plistlib.py" -> handler
	"ast.py" -> inter
	"selectors.py" -> "self._selector._fileobj_lookup"
	"dis.py" -> format
	"inspect.py" -> isframe
	"threading.py" -> "_os.register_at_fork"
	"threading.py" -> _print_exception
	"__init__.py" -> wr
	"calendar.py" -> "weeks.append"
	"scaffold.py" -> _find_package_path
	"argparse.py" -> extend
	"statistics.py" -> log
	"test_reqctx.py" -> "greenlets.append"
	"__init__.py" -> rpartition
	"test_testing.py" -> "runner.invoke"
	"enum.py" -> "metacls._find_data_repr_"
	"textwrap.py" -> enumerate
	"hashlib.py" -> f
	"__init__.py" -> "self._style.validate"
	"inspect.py" -> getblock
	"warnings.py" -> "registry.clear"
	"__init__.py" -> "current_app.json.dump"
	"test_signals.py" -> "flask.flash"
	"_strptime.py" -> join
	"inspect.py" -> _has_code_flag
	"argparse.py" -> "self._action_groups.append"
	"traceback.py" -> reversed
	"contextlib.py" -> anext
	"selectors.py" -> "selector_obj.poll"
	"datetime.py" -> "self._tzinfo.tzname"
	"threading.py" -> "self._wait_for_tstate_lock"
	"test_auth.py" -> "pytest.mark.parametrize"
	"zipfile.py" -> "self.fp.flush"
	"shlex.py" -> shlex
	"__init__.py" -> super
	"inspect.py" -> getfullargspec
	"datetime.py" -> "self._local_timezone"
	"gzip.py" -> "do.decompress"
	"socket.py" -> TimeoutError
	"test_helpers.py" -> "flask.Response"
	"copy.py" -> "memo.get"
	"pathlib.py" -> hardlink_to
	"glob.py" -> "stat.S_ISDIR"
	"cli.py" -> eval
	"socket.py" -> _GiveupOnSendfile
	"typing.py" -> "cls.__dict__.get"
	"hashlib.py" -> "fileobj.readable"
	"pathlib.py" -> "path.as_posix"
	"glob.py" -> _glob1
	"base64.py" -> unpack
	"inspect.py" -> getsource
	"signal.py" -> "_signal.sigpending"
	"__init__.py" -> "fp.write"
	"test_reqctx.py" -> "pytest.mark.skipif"
	"shutil.py" -> open
	"__init__.py" -> "heapq.nlargest"
	"zipfile.py" -> "f.read"
	"feedparser.py" -> "self._lines.appendleft"
	"conftest.py" -> "mp.delenv"
	"argparse.py" -> _add_action
	"__init__.py" -> "self.field_spec.match"
	"test_basic.py" -> "response.vary.add"
	"functools.py" -> namedtuple
	"zipfile.py" -> "zinfo.is_dir"
	"dis.py" -> pretty_flags
	"parse.py" -> "url.replace"
	"conftest.py" -> decode
	"warnings.py" -> "re.escape"
	"ctx.py" -> "self.app.do_teardown_appcontext"
	"app.py" -> send_from_directory
	"zipfile.py" -> "self._zinfo.FileHeader"
	"__init__.py" -> JSONDecoder
	"argparse.py" -> "self._get_formatter"
	"inspect.py" -> formatvarargs
	"datetime.py" -> "time_string.removeprefix"
	"code.py" -> InteractiveConsole
	"conftest.py" -> create_app
	"ssl.py" -> DER_cert_to_PEM_cert
	"typing_extensions.py" -> sum
	"copy.py" -> deepcopy
	"textwrap.py" -> "re.compile"
	"__init__.py" -> "inspect.getmro"
	"inspect.py" -> "kwargs.pop"
	"parse.py" -> quote
	"zipfile.py" -> map
	"tracemalloc.py" -> Frame
	"tokenize.py" -> "last_line.strip"
	"shutil.py" -> "os.chown"
	"argparse.py" -> "self._metavar_formatter"
	"parse.py" -> "url.encode"
	"inspect.py" -> _signature_fromstr
	"cli.py" -> "f.read"
	"app.py" -> create_logger
	"platform.py" -> "sys.exit"
	"pickle.py" -> "name.split"
	"ipaddress.py" -> range
	"pickle.py" -> "name.rpartition"
	"ssl.py" -> shutdown
	"inspect.py" -> wrap_value
	"sessions.py" -> "self.get_cookie_domain"
	"dataclasses.py" -> len
	"blueprints.py" -> "s.app.teardown_request_funcs.setdefault"
	"testing.py" -> "app_root.lstrip"
	"tarfile.py" -> "grp.getgrnam"
	"calendar.py" -> super
	"parse.py" -> len
	"csv.py" -> "data.split"
	"__init__.py" -> "self.__update"
	"tempfile.py" -> "_os.path.exists"
	"ast.py" -> "self.items_view"
	"enum.py" -> any
	"cli.py" -> any
	"test_session_interface.py" -> MySessionInterface
	"app.py" -> "self.url_rule_class"
	"datetime.py" -> "self.__getstate__"
	"ssl.py" -> "self.close"
	"sync.py" -> "self.main_event_loop.is_running"
	"socket.py" -> "C.startswith"
	"inspect.py" -> _missing_arguments
	"__init__.py" -> _itemgetter
	"_weakrefset.py" -> "self.data.pop"
	"plistlib.py" -> "self._read_refs"
	"test_signals.py" -> "app.test_client"
	"test_user_error_handler.py" -> "pytest.fixture"
	"socket.py" -> os_sendfile
	"app.py" -> "self.json.response"
	"app.py" -> "filename.endswith"
	"provider.py" -> isinstance
	"inspect.py" -> OrderedDict
	"zipfile.py" -> "self._file.seek"
	"inspect.py" -> <unknown_function>
	"signal.py" -> int
	"ast.py" -> _convert_signed_num
	"test_testing.py" -> "request.addfinalizer"
	"ipaddress.py" -> "self._split_addr_prefix"
	"uuid.py" -> _parse_mac
	"inspect.py" -> stop
	"test_cli.py" -> "cli.add_command"
	"argparse.py" -> "new_arg_strings.append"
	"typing.py" -> _GenericAlias
	"tokenize.py" -> _compile
	"plistlib.py" -> UID
	"blueprints.py" -> "s.app.template_context_processors.setdefault"
	"pathlib.py" -> "self.chmod"
	"__init__.py" -> "logger._cache.clear"
	"_strptime.py" -> len
	"rlcompleter.py" -> isinstance
	"subprocess.py" -> ValueError
	"feedparser.py" -> ateof
	"typing.py" -> __new__
	"dataclasses.py" -> "cls_annotations.items"
	"argparse.py" -> "help.strip"
	"tarfile.py" -> ord
	"argparse.py" -> "self._registries.setdefault"
	"scaffold.py" -> FileSystemLoader
	"lzma.py" -> "self._buffer.readline"
	"subprocess.py" -> "sys.__stdout__.fileno"
	"test_json_tag.py" -> "self.serializer.tag"
	"zipfile.py" -> "self.fp.tell"
	"subprocess.py" -> "self._remaining_time"
	"csv.py" -> float
	"scaffold.py" -> "os.path.commonpath"
	"testing.py" -> "app.session_interface.save_session"
	"__init__.py" -> "self.open"
	"traceback.py" -> isinstance
	"gzip.py" -> "self._init_read"
	"calendar.py" -> "HTMLCalendar.__init__"
	"warnings.py" -> fw
	"ssl.py" -> __new__
	"blueprints.py" -> "self.url_prefix.rstrip"
	"typing_extensions.py" -> _value_and_type_iter
	"inspect.py" -> ArgInfo
	"argparse.py" -> splitlines
	"pathlib.py" -> list
	"enum.py" -> "enum_class._value2member_map_.setdefault"
	"pickle.py" -> "self.get"
	"__init__.py" -> quoted_marker
	"ctx.py" -> "session_interface.make_null_session"
	"tarfile.py" -> "match.group"
	"contextlib.py" -> "self._recreate_cm"
	"ast.py" -> "_Precedence.BOR.next"
	"gzip.py" -> "zlib.decompressobj"
	"__init__.py" -> "os.stat"
	"inspect.py" -> "os.path.abspath"
	"types.py" -> "self.__wrapped.send"
	"test_cli.py" -> "monkeypatch.setenv"
	"test_basic.py" -> "flask.url_for"
	"cli.py" -> open
	"datetime.py" -> _days_before_year
	"datetime.py" -> str
	"test_cli.py" -> "types.ModuleType"
	"threading.py" -> _set_sentinel
	"selectors.py" -> "self._key_from_fd"
	"typing_extensions.py" -> ParamSpecKwargs
	"weakref.py" -> next
	"inspect.py" -> "sig.replace"
	"fnmatch.py" -> "re.sub"
	"argparse.py" -> "self.add_mutually_exclusive_group"
	"copy.py" -> "dispatch_table.get"
	"socket.py" -> "self.getpeername"
	"_weakrefset.py" -> len
	"csv.py" -> "quotes.get"
	"typing.py" -> _get_protocol_attrs
	"inspect.py" -> "object.__dict__.items"
	"tarfile.py" -> bool
	"_weakrefset.py" -> "self.__class__"
	"threading.py" -> "self._block.release"
	"functools.py" -> update
	"locale.py" -> "categories.items"
	"blueprints.py" -> "self.add_app_template_global"
	"dis.py" -> dis
	"zipfile.py" -> "self._encodeFilenameFlags"
	"subprocess.py" -> replace
	"pathlib.py" -> tuple
	"calendar.py" -> "self.itermonthdays3"
	"platform.py" -> "os.path.dirname"
	"__init__.py" -> "path.rstrip"
	"__init__.py" -> currentframe
	"pickle.py" -> "self.metastack.pop"
	"zipfile.py" -> "self.at.endswith"
	"traceback.py" -> "te.format"
	"test_regression.py" -> "c.get"
	"tarfile.py" -> "value.rstrip"
	"types.py" -> "co.replace"
	"feedparser.py" -> "self._cur.get_content_maintype"
	"enum.py" -> "data_types.add"
	"test_basic.py" -> "match.group"
	"dataclasses.py" -> _is_type
	"inspect.py" -> ValueError
	"__init__.py" -> _escape_argspec
	"__init__.py" -> hasattr
	"uuid.py" -> split
	"enum.py" -> "self.fget"
	"__init__.py" -> EscapeFormatter
	"test_blog.py" -> "client.post"
	"test_reqctx.py" -> "flask.url_for"
	"tarfile.py" -> "self._get_filter_function"
	"tarfile.py" -> ReadError
	"subprocess.py" -> "_winapi.WaitForSingleObject"
	"zipfile.py" -> _extract_text_encoding
	"weakref.py" -> "self._Info"
	"typing.py" -> "required_keys.add"
	"bz2.py" -> isinstance
	"traceback.py" -> decode
	"feedparser.py" -> "self._cur.get_content_type"
	"zipfile.py" -> "strm.read"
	"tracemalloc.py" -> "self.traces._traces.copy"
	"plistlib.py" -> max
	"bz2.py" -> "self._fp.close"
	"copy.py" -> Error
	"py_compile.py" -> "filename.rstrip"
	"test_blueprints.py" -> "answer_bp.route"
	"__init__.py" -> "_parser.State"
	"selectors.py" -> _fileobj_to_fd
	"debughelpers.py" -> super
	"__init__.py" -> "enum._simple_enum"
	"test_helpers.py" -> "app.send_static_file"
	"__init__.py" -> "child.lower"
	"argparse.py" -> set
	"inspect.py" -> isgenerator
	"zipfile.py" -> "zef_file.close"
	"test_appctx.py" -> repr
	"tempfile.py" -> "self._file.tell"
	"cli.py" -> "click.Path"
	"ast.py" -> "self.fill"
	"inspect.py" -> "self.generic_visit"
	"tokenize.py" -> read_or_stop
	"__init__.py" -> "self.lock.acquire"
	"dataclasses.py" -> _add_slots
	"pickle.py" -> "parser.print_help"
	"tracemalloc.py" -> get_traceback_limit
	"__init__.py" -> "s.decode"
	"ctx.py" -> AttributeError
	"plistlib.py" -> "d.items"
	"zipfile.py" -> "parser.parse_args"
	"pickle.py" -> frozenset
	"pickle.py" -> "value.decode"
	"tarfile.py" -> "self.name.endswith"
	"pathlib.py" -> "self._split_extended_path"
	"typing_route.py" -> render_template
	"tempfile.py" -> setattr
	"subprocess.py" -> TimeoutExpired
	"pathlib.py" -> "p.stat"
	"tarfile.py" -> "self._dbg"
	"zipfile.py" -> "struct.unpack"
	"traceback.py" -> _parse_value_tb
	"datetime.py" -> converter
	"contextlib.py" -> setattr
	"socket.py" -> "name.strip"
	"typing_extensions.py" -> "t.copy_with"
	"tokenize.py" -> "endprog.match"
	"test_testing.py" -> "client.get"
	"test_config.py" -> "os.path.join"
	"helpers.py" -> generator_or_function
	"test_basic.py" -> "weakref.ref"
	"inspect.py" -> isdigit
	"scaffold.py" -> get_root_path
	"parse.py" -> classmethod
	"_weakrefset.py" -> "newset.difference_update"
	"typing.py" -> vars
	"tempfile.py" -> _infer_return_type
	"ipaddress.py" -> "IPv6Address.__init__"
	"shlex.py" -> "self.filestack.popleft"
	"test_subclassing.py" -> StringIO
	"enum.py" -> enumerate
	"test_cli.py" -> prepare_import
	"tag.py" -> "tag.check"
	"ast.py" -> compile
	"random.py" -> random
	"pickle.py" -> intern
	"test_regression.py" -> "app.errorhandler"
	"base64.py" -> "out.append"
	"traceback.py" -> "text.rstrip"
	"subprocess.py" -> sorted
	"_weakrefset.py" -> _IterationGuard
	"contextlib.py" -> callback
	"__init__.py" -> _OrderedDictValuesView
	"pathlib.py" -> "pwd.getpwuid"
	"lzma.py" -> TypeError
	"subprocess.py" -> "self.stderr_thread.start"
	"app.py" -> self_ref
	"typing.py" -> "base.__dict__.get"
	"argparse.py" -> "self._get_positional_kwargs"
	"typing.py" -> "cls.__init__"
	"uuid.py" -> _UuidCreate
	"ast.py" -> unparse_inner
	"zipfile.py" -> "stat.filemode"
	"parse.py" -> urlunsplit
	"cli.py" -> run_simple
	"db.py" -> "current_app.open_resource"
	"uuid.py" -> "os.urandom"
	"datetime.py" -> "other.toordinal"
	"shutil.py" -> "os.lstat"
	"contextlib.py" -> "self._old_cwd.pop"
	"functools.py" -> make_key
	"fractions.py" -> str
	"gzip.py" -> "self._buffer.read1"
	"tokenize.py" -> toks_append
	"threading.py" -> "self._invoke_excepthook"
	"statistics.py" -> type
	"templating.py" -> explain_template_loading_attempts
	"test_basic.py" -> "app.post"
	"tarfile.py" -> _safe_print
	"weakref.py" -> _atomic_removal
	"tarfile.py" -> "self.__write"
	"subprocess.py" -> "msvcrt.get_osfhandle"
	"enum.py" -> range
	"parse.py" -> decode
	"cli.py" -> range
	"pickle.py" -> "pprint.pprint"
	"argparse.py" -> Namespace
	"tracemalloc.py" -> list
	"__init__.py" -> "cls._from_text"
	"app.py" -> get_host
	"warnings.py" -> _add_filter
	"platform.py" -> _unknown_as_blank
	"weakref.py" -> "self.data.get"
	"socket.py" -> "IntFlag._convert_"
	"platform.py" -> "platform.replace"
	"inspect.py" -> "suffixes.sort"
	"plistlib.py" -> "writer.write"
	"enum.py" -> min
	"traceback.py" -> str
	"plistlib.py" -> "struct.pack"
	"getopt.py" -> do_longs
	"tarfile.py" -> "os.path.dirname"
	"zipfile.py" -> "parser.add_argument"
	"feedparser.py" -> "lastvalue.append"
	"hello.py" -> "app.route"
	"ssl.py" -> super
	"__init__.py" -> Link
	"ssl.py" -> VerifyMode
	"__init__.py" -> "h.flush"
	"py_compile.py" -> "traceback.format_exception_only"
	"locale.py" -> count
	"argparse.py" -> get_metavar
	"views.py" -> decorator
	"subprocess.py" -> "threading.Lock"
	"test_appctx.py" -> "flask.g.get"
	"threading.py" -> "self._waiters.append"
	"test_testing.py" -> "click.echo"
	"feedparser.py" -> "self._lines.popleft"
	"parser.py" -> "feedparser._set_headersonly"
	"__init__.py" -> rsplit
	"sync.py" -> TypeVar
	"typing.py" -> ParamSpecArgs
	"_weakrefset.py" -> classmethod
	"lzma.py" -> LZMAFile
	"socket.py" -> "io.BufferedReader"
	"ipaddress.py" -> "parts.append"
	"traceback.py" -> print_list
	"pickle.py" -> range
	"parser.py" -> FeedParser
	"tracemalloc.py" -> tuple
	"app.py" -> "value.total_seconds"
	"inspect.py" -> "sys.modules.copy"
	"test_basic.py" -> "pytest.warns"
	"provider.py" -> "fp.read"
	"types.py" -> "_c.close"
	"_weakrefset.py" -> "self.copy"
	"sync.py" -> "asyncio.gather"
	"csv.py" -> "columnTypes.keys"
	"__init__.py" -> "zf.writestr"
	"test_testing.py" -> "eb.input_stream.read"
	"__init__.py" -> "zip_path.root.namelist"
	"plistlib.py" -> split
	"testing.py" -> "os.environ.get"
	"ipaddress.py" -> v4_int_to_packed
	"plistlib.py" -> "self.file.write"
	"testing.py" -> "self._copy_environ"
	"testing.py" -> "shlex.split"
	"test_testing.py" -> "c.session_transaction"
	"app.py" -> NotImplementedError
	"_strptime.py" -> "found.groupdict"
	"argparse.py" -> "self._get_default_metavar_for_positional"
	"ssl.py" -> "self._checkClosed"
	"tracemalloc.py" -> _Traces
	"blueprints.py" -> AppGroup
	"__init__.py" -> zip
	"ssl.py" -> "self._context._wrap_socket"
	"shutil.py" -> bytearray
	"tarfile.py" -> "fileobj.close"
	"__init__.py" -> "self.handle"
	"warnings.py" -> "re.compile"
	"platform.py" -> "_platform_cache.get"
	"_strptime.py" -> "self.__calc_weekday"
	"inspect.py" -> "wrapped_sig.bind_partial"
	"threading.py" -> "_limbo.values"
	"traceback.py" -> "ast.parse"
	"parse.py" -> parse_qsl
	"lzma.py" -> join
	"tarfile.py" -> "prefix.encode"
	"lzma.py" -> "io.text_encoding"
	"zipfile.py" -> filter
	"__init__.py" -> "fields.add"
	"__init__.py" -> "self.flush"
	"tarfile.py" -> "self.create_pax_header"
	"ssl.py" -> "sock.detach"
	"calendar.py" -> "TextCalendar.__init__"
	"enum.py" -> "metacls._check_for_existing_members_"
	"platform.py" -> uname_result
	"conftest.py" -> "monkeypatch.MonkeyPatch"
	"argparse.py" -> match_partial
	"platform.py" -> "subprocess.check_output"
	"argparse.py" -> "self.parse_known_args"
	"pathlib.py" -> "self.match"
	"__init__.py" -> "name.startswith"
	"ssl.py" -> "view.cast"
	"sync.py" -> func
	"inspect.py" -> "dict.get"
	"tarfile.py" -> "cls.frombuf"
	"tarfile.py" -> "buf.count"
	"socket.py" -> min
	"typing_extensions.py" -> "tvars.append"
	"subprocess.py" -> "signal.Signals"
	"enum.py" -> dir
	"__init__.py" -> "self.validation_pattern.search"
	"statistics.py" -> sorted
	"types.py" -> "self.__wrapped.throw"
	"plistlib.py" -> tuple
	"shlex.py" -> StringIO
	"bz2.py" -> "self._fp.fileno"
	"types.py" -> object
	"gzip.py" -> "sys.exit"
	"ssl.py" -> "_IntFlag._convert_"
	"typing.py" -> prepare
	"functools.py" -> "self.keywords.items"
	"threading.py" -> max
	"testing.py" -> "sys.stdin.read"
	"tokenize.py" -> match
	"string.py" -> "_re.escape"
	"parse.py" -> str
	"__init__.py" -> "StreamHandler.close"
	"platform.py" -> max
	"test_cli.py" -> "click.get_current_context"
	"test_appctx.py" -> "flask.jsonify"
	"typing_extensions.py" -> values
	"tarfile.py" -> "tf.add"
	"pickle.py" -> _Framer
	"ctx.py" -> "object.__repr__"
	"socket.py" -> "self._checkReadable"
	"inspect.py" -> ismethoddescriptor
	"app.py" -> FormDataRoutingRedirect
	"plistlib.py" -> "self.simple_element"
	"ssl.py" -> _real_close
	"test_templating.py" -> "c.get"
	"inspect.py" -> "results.append"
	"sessions.py" -> __getitem__
	"__init__.py" -> "self._read_dist_info_reqs"
	"uuid.py" -> "os.environ.get"
	"pickle.py" -> islice
	"typing_extensions.py" -> "required_keys.update"
	"textwrap.py" -> ValueError
	"__init__.py" -> "self.at.endswith"
	"dataclasses.py" -> _repr_fn
	"shutil.py" -> copymode
	"cli.py" -> "params.extend"
	"test_helpers.py" -> "os.fspath"
	"typing_extensions.py" -> _make_nmtuple
	"shutil.py" -> "zf.write"
	"typing.py" -> format
	"_weakrefset.py" -> "self.__getstate__"
	"shutil.py" -> "os.path.samestat"
	"threading.py" -> current_thread
	"typing.py" -> "bases.index"
	"scaffold.py" -> "self._get_exc_class_and_code"
	"ast.py" -> "inspect.cleandoc"
	"enum.py" -> _high_bit
	"__init__.py" -> Blueprint
	"enum.py" -> "self._value_.bit_count"
	"pickle.py" -> dir
	"getopt.py" -> "shortopts.startswith"
	"conf.py" -> "words.strip"
	"pickle.py" -> items
	"test_basic.py" -> "rv.data.decode"
	"bz2.py" -> "self._buffer.readlines"
	"subprocess.py" -> "self.stderr.close"
	"datetime.py" -> "time_comps.append"
	"parse.py" -> quote_from_bytes
	"ssl.py" -> "os.path.isfile"
	"__init__.py" -> _extract_text_encoding
	"threading.py" -> print
	"inspect.py" -> append
	"ipaddress.py" -> ValueError
	"conftest.py" -> "os.path.join"
	"test_user_error_handler.py" -> "pytest.mark.parametrize"
	"platform.py" -> print
	"traceback.py" -> format_exception
	"app.py" -> "self.process_response"
	"pickle.py" -> "self.write"
	"__init__.py" -> "strm.read"
	"zipfile.py" -> bytearray
	"lzma.py" -> "self._check_can_seek"
	"test_helpers.py" -> "flask.helpers.make_response"
	"dis.py" -> "io.StringIO"
	"test_helpers.py" -> "app.app_context"
	"zipfile.py" -> "shutil.copyfileobj"
	"test_templating.py" -> "monkeypatch.setitem"
	"zipfile.py" -> "args.create.pop"
	"__init__.py" -> "m.update"
	"shlex.py" -> open
	"typing_extensions.py" -> all
	"pathlib.py" -> "os.fsencode"
	"fnmatch.py" -> add
	"shutil.py" -> <unknown_function>
	"__init__.py" -> "f_globals.get"
	"__init__.py" -> "sio.close"
	"tarfile.py" -> "self.cmp.flush"
	"uuid.py" -> md5
	"bisect.py" -> key
	"traceback.py" -> _Sentinel
	"shutil.py" -> "os.walk"
	"tarfile.py" -> "lzma.LZMADecompressor"
	"tarfile.py" -> "self.chown"
	"dataclasses.py" -> "copy.deepcopy"
	"datetime.py" -> "_DAYS_BEFORE_MONTH.append"
	"uuid.py" -> _generate_time_safe
	"app.py" -> "builder.close"
	"socket.py" -> "sock.recvmsg"
	"__init__.py" -> dict
	"sessions.py" -> __init__
	"lzma.py" -> len
	"test_basic.py" -> "client.post"
	"subprocess.py" -> "time.sleep"
	"uuid.py" -> "keywords.index"
	"blueprints.py" -> isinstance
	"ipaddress.py" -> type
	"tempfile.py" -> "dirlist.extend"
	"zipfile.py" -> TypeError
	"ipaddress.py" -> _count_righthand_zero_bits
	"__init__.py" -> "self.data.casefold"
	"argparse.py" -> "self._format_action_invocation"
	"ipaddress.py" -> "functools.lru_cache"
	"textwrap.py" -> strip
	"enum.py" -> "source.items"
	"py_compile.py" -> "importlib.machinery.SourceFileLoader"
	"__init__.py" -> "pickle.PicklingError"
	"feedparser.py" -> reversed
	"subprocess.py" -> "self._get_devnull"
	"statistics.py" -> "X.cdf"
	"test_cli.py" -> "app.test_cli_runner"
	"test_basic.py" -> get
	"ssl.py" -> hasattr
	"test_json_tag.py" -> uuid4
	"_strptime.py" -> "format_regex.match"
	"db.py" -> "sqlite3.connect"
	"datetime.py" -> _days_before_month
	"__init__.py" -> "_strip_tags_re.sub"
	"enum.py" -> "self._generate_next_value"
	"__init__.py" -> "obj.append"
	"test_blog.py" -> get_db
	"__init__.py" -> pass_none
	"inspect.py" -> "tokenize.tokenize"
	"test_testing.py" -> "app.route"
	"threading.py" -> "stderr.flush"
	"platform.py" -> "match.groups"
	"pathlib.py" -> "os.chmod"
	"shutil.py" -> "os.path.abspath"
	"zipfile.py" -> "zf.write"
	"traceback.py" -> "self._line.strip"
	"__init__.py" -> FileHandler
	"tag.py" -> "value.items"
	"ipaddress.py" -> "self._ip_int_from_string"
	"blueprints.py" -> append
	"rlcompleter.py" -> "matches.sort"
	"test_converters.py" -> "client.get"
	"enum.py" -> "__dict__.update"
	"sync.py" -> "contextvars.ContextVar"
	"glob.py" -> "os.stat"
	"feedparser.py" -> "NLCRE.match"
	"testing.py" -> "app.config.get"
	"hashlib.py" -> range
	"threading.py" -> "Thread.__init__"
	"typing_extensions.py" -> "nm_tpl.__init_subclass__"
	"datetime.py" -> _wrap_strftime
	"pathlib.py" -> "os.mkdir"
	"ssl.py" -> msg_enum
	"hashlib.py" -> "fileobj.readinto"
	"__init__.py" -> "self.acquire"
	"__init__.py" -> "self.data.split"
	"zipfile.py" -> getattr
	"calendar.py" -> "parser.parse_args"
	"cli.py" -> "kwargs.pop"
	"zipfile.py" -> "filename.decode"
	"dataclasses.py" -> _field_assign
	"cli.py" -> "click.secho"
	"config.py" -> type
	"helpers.py" -> bool
	"argparse.py" -> "action_header.endswith"
	"test_signals.py" -> "flask.Flask"
	"datetime.py" -> _is_leap
	"testing.py" -> "t.cast"
	"tarfile.py" -> max
	"rlcompleter.py" -> "self.global_matches"
	"ssl.py" -> memoryview
	"base64.py" -> "input.readline"
	"dataclasses.py" -> "seen.add"
	"test_reqctx.py" -> get
	"operator.py" -> type
	"ipaddress.py" -> NetmaskValueError
	"weakref.py" -> "gc.enable"
	"tokenize.py" -> "sys.exit"
	"_weakrefset.py" -> "self.data.add"
	"uuid.py" -> _find_mac_under_heading
	"platform.py" -> split
	"tempfile.py" -> next
	"argparse.py" -> "textwrap.wrap"
	"textwrap.py" -> "w.fill"
	"subprocess.py" -> "os.close"
	"ssl.py" -> "self._sslobj.selected_alpn_protocol"
	"test_views.py" -> common_test
	"codeop.py" -> compiler
	"__init__.py" -> "te.ParamSpec"
	"tokenize.py" -> "c.upper"
	"__init__.py" -> popitem
	"enum.py" -> "cls._member_map_.items"
	"feedparser.py" -> "self._cur.get"
	"locale.py" -> TypeError
	"cli.py" -> FlaskGroup
	"test_blog.py" -> "pytest.mark.parametrize"
	"string.py" -> format
	"shutil.py" -> "os.get_terminal_size"
	"test_cli.py" -> "app.url_map.iter_rules"
	"threading.py" -> list
	"datetime.py" -> "timezone._create"
	"typing_extensions.py" -> _strip_extras
	"calendar.py" -> range
	"threading.py" -> "waiters.remove"
	"platform.py" -> list
	"typing_extensions.py" -> "inspect.getattr_static"
	"dis.py" -> TypeError
	"zipfile.py" -> "os.fspath"
	"argparse.py" -> "self._check_conflict"
	"test_cli.py" -> "run_command.make_context"
	"inspect.py" -> "old_params.items"
	"datetime.py" -> range
	"cli.py" -> "current_app.url_map.iter_rules"
	"sync.py" -> "task.exception"
	"tarfile.py" -> print
	"parse.py" -> "bs.decode"
	"hashlib.py" -> "loop.to_bytes"
	"inspect.py" -> namedtuple
	"enum.py" -> <unknown_function>
	"cli.py" -> <unknown_function>
	"enum.py" -> "simple_dict.keys"
	"datetime.py" -> min
	"testing.py" -> "self._input.readlines"
	"tarfile.py" -> "t.close"
	"datetime.py" -> _format_time
	"__init__.py" -> "cls._implied_dirs"
	"ipaddress.py" -> sorted
	"inspect.py" -> "itertools.zip_longest"
	"__init__.py" -> FreezableDefaultDict
	"zipfile.py" -> "self._compressor.flush"
	"plistlib.py" -> float
	"code.py" -> "sys.excepthook"
	"test_request.py" -> "app.post"
	"auth.py" -> flash
	"subprocess.py" -> "stack.callback"
	"test_user_error_handler.py" -> "app.register_error_handler"
	"tracemalloc.py" -> "include_filters.append"
	"plistlib.py" -> "lst.append"
	"dataclasses.py" -> _tuple_str
	"locale.py" -> "warnings.warn"
	"__init__.py" -> parse
	"platform.py" -> tuple
	"contextlib.py" -> "self.__aexit__"
	"tarfile.py" -> "self.makedir"
	"__init__.py" -> "string.Formatter.format_field"
	"testing.py" -> "sys.exc_info"
	"test_views.py" -> sorted
	"feedparser.py" -> "mo.group"
	"shutil.py" -> "fn.is_symlink"
	"random.py" -> hasattr
	"subprocess.py" -> "self._execute_child"
	"locale.py" -> "_locale._getdefaultlocale"
	"dis.py" -> "int.from_bytes"
	"enum.py" -> "classdict.setdefault"
	"__init__.py" -> filter
	"shutil.py" -> _GiveupOnFastCopy
	"subprocess.py" -> "self._internal_poll"
	"sessions.py" -> "self.get_cookie_partitioned"
	"tokenize.py" -> iter
	"pickle.py" -> <unknown_function>
	"fractions.py" -> "a.from_float"
	"__init__.py" -> "current_app.json.response"
	"zipfile.py" -> KeyError
	"test_blog.py" -> "client.get"
	"subprocess.py" -> "io.TextIOWrapper"
	"debughelpers.py" -> "info.append"
	"feedparser.py" -> isinstance
	"warnings.py" -> "a.startswith"
	"tracemalloc.py" -> is_tracing
	"parse.py" -> _check_bracketed_host
	"uuid.py" -> "line.rstrip"
	"tarfile.py" -> setattr
	"dataclasses.py" -> "base_fields.values"
	"statistics.py" -> groupby
	"socket.py" -> "_socket.getaddrinfo"
	"string.py" -> "used_args.add"
	"zipfile.py" -> "self.__repr.format"
	"socket.py" -> "_socket.CMSG_LEN"
	"calendar.py" -> "c.center"
	"__init__.py" -> "self.update"
	"string.py" -> "self.check_unused_args"
	"shutil.py" -> SpecialFileError
	"test_json_tag.py" -> Foo
	"shlex.py" -> "self._pushback_chars.append"
	"shutil.py" -> "os.path.basename"
	"socket.py" -> "sock.settimeout"
	"__init__.py" -> "slots.copy"
	"typing_extensions.py" -> is_protocol
	"random.py" -> "self.random"
	"test_basic.py" -> "response.vary.update"
	"locale.py" -> lower
	"test_templating.py" -> len
	"pickle.py" -> "self._write_large_bytes"
	"config.py" -> loads
	"statistics.py" -> namedtuple
	"random.py" -> _warn
	"textwrap.py" -> dedent
	"socket.py" -> "_ss.close"
	"lzma.py" -> "self._check_can_write"
	"tokenize.py" -> "self.tokens.append"
	"uuid.py" -> "part.rjust"
	"platform.py" -> "x.strip"
	"conftest.py" -> "request_ctx.pop"
	"helpers.py" -> iter
	"typing.py" -> zip
	"tarfile.py" -> "match.groups"
	"argparse.py" -> join
	"argparse.py" -> "self.format_usage"
	"parse.py" -> "url.split"
	"test_cli.py" -> Path
	"testing.py" -> Result
	"config.py" -> sorted
	"testing.py" -> "app.response_class"
	"tarfile.py" -> "self.fromtarfile"
	"test_testing.py" -> ScriptInfo
	"pickle.py" -> "self.file_write"
	"ast.py" -> "unparser.set_precedence"
	"blog.py" -> abort
	"app.py" -> with_traceback
	"datetime.py" -> "_strptime._strptime_datetime"
	"tracemalloc.py" -> __init__
	"tarfile.py" -> "struct.pack"
	"scaffold.py" -> "pathlib.Path"
	"tarfile.py" -> "tarinfo.isreg"
	"datetime.py" -> _cmperror
	"argparse.py" -> "self._root_section.format_help"
	"shutil.py" -> _rmtree_unsafe
	"pickle.py" -> "self.save_bytes"
	"selectors.py" -> "self._fd_to_key.clear"
	"app.py" -> "self.auto_find_instance_path"
	"shutil.py" -> "os.path.isdir"
	"ssl.py" -> "context._encode_hostname"
	"dis.py" -> join
	"enum.py" -> ValueError
	"_strptime.py" -> "locale_time.a_weekday.index"
	"calendar.py" -> write
	"gzip.py" -> "self._buffer.seek"
	"weakref.py" -> "self._pending_removals.append"
	"calendar.py" -> _get_default_locale
	"functools.py" -> all
	"selectors.py" -> iter
	"base64.py" -> "getopt.getopt"
	"tempfile.py" -> "_os.fspath"
	"zipfile.py" -> "zinfo._encodeFilenameFlags"
	"textwrap.py" -> "margin.startswith"
	"contextlib.py" -> "self.gen.throw"
	"tarfile.py" -> "os.path.splitext"
	"zipfile.py" -> type
	"multiapp.py" -> Flask
	"inspect.py" -> "framelist.append"
	"hashlib.py" -> new
	"test_templating.py" -> "pytest.raises"
	"datetime.py" -> "self.tzname"
	"__init__.py" -> Parser
	"traceback.py" -> "te.print"
	"app.py" -> Flask
	"helpers.py" -> "os.path.dirname"
	"tarfile.py" -> split
	"shutil.py" -> _islink
	"cli.py" -> "ctx.update"
	"threading.py" -> "_sys.settrace"
	"tempfile.py" -> _mkstemp_inner
	"__init__.py" -> "low.endswith"
	"__init__.py" -> ModuleNotFoundError
	"subprocess.py" -> bytes
	"py_compile.py" -> _get_default_invalidation_mode
	"test_cli.py" -> "cli.group"
	"pickle.py" -> "self._buffer_callback"
	"parse.py" -> "attr.partition"
	"socket.py" -> "self._sock.fileno"
	"pathlib.py" -> S_ISFIFO
	"tokenize.py" -> lookup
	"base64.py" -> format
	"gzip.py" -> write32u
	"tempfile.py" -> "file.tell"
	"platform.py" -> "_ver_stages.get"
	"inspect.py" -> repr
	"fractions.py" -> op
	"statistics.py" -> _sum
	"tokenize.py" -> SyntaxError
	"shutil.py" -> sorted
	"pathlib.py" -> "other_path.stat"
	"tarfile.py" -> list
	"__init__.py" -> "_handlerList.append"
	"dataclasses.py" -> _is_dataclass_instance
	"shutil.py" -> "_ARCHIVE_FORMATS.items"
	"pickle.py" -> ValueError
	"subprocess.py" -> _PopenSelector
	"random.py" -> map
	"tarfile.py" -> "self._read"
	"ast.py" -> "self._write_docstring_and_traverse_body"
	"subprocess.py" -> "env_list.append"
	"subprocess.py" -> "p.wait"
	"locale.py" -> "d.update"
	"string.py" -> map
	"warnings.py" -> "line.strip"
	"fractions.py" -> "re.compile"
	"operator.py" -> isinstance
	"inspect.py" -> "_filesbymodname.get"
	"cli.py" -> "kwargs.setdefault"
	"zipfile.py" -> "os.path.basename"
	"app.py" -> "self.json_provider_class"
	"__init__.py" -> "dist.read_text"
	"ast.py" -> "c.isprintable"
	"tarfile.py" -> "copy.copy"
	"random.py" -> _index
	"threading.py" -> get_native_id
	"scaffold.py" -> "self.before_request_funcs.setdefault"
	"tracemalloc.py" -> Traceback
	"zipfile.py" -> "self._file.read"
	"argparse.py" -> "sup.__init__"
	"argparse.py" -> "self._has_negative_number_optionals.append"
	"enum.py" -> isdigit
	"subprocess.py" -> _optim_args_from_interpreter_flags
	"weakref.py" -> format
	"__init__.py" -> "state.pop"
	"parse.py" -> frozenset
	"test_helpers.py" -> get_debug_flag
	"traceback.py" -> extract_stack
	"enum.py" -> replace
	"cli.py" -> "module_name.append"
	"tarfile.py" -> "parser.add_mutually_exclusive_group"
	"rlcompleter.py" -> "words.discard"
	"base64.py" -> main
	"test_regression.py" -> str
	"enum.py" -> "member_names.append"
	"ctx.py" -> "appcontext_pushed.send"
	"typing.py" -> "optional_keys.add"
	"argparse.py" -> match_argument
	"statistics.py" -> "sx_partials.items"
	"subprocess.py" -> list2cmdline
	"test_cli.py" -> "capsys.readouterr"
	"__init__.py" -> "kwargs.pop"
	"tarfile.py" -> "match.end"
	"db.py" -> decode
	"inspect.py" -> "class_finder.visit"
	"typing.py" -> "f_globals.get"
	"provider.py" -> staticmethod
	"typing_extensions.py" -> "annotations.update"
	"test_json.py" -> "flask.jsonify"
	"cli.py" -> "os.path.basename"
	"bz2.py" -> "io.BufferedReader"
	"argparse.py" -> len
	"parse.py" -> _checknetloc
	"blueprints.py" -> "s.app.after_request_funcs.setdefault"
	"copy.py" -> len
	"code.py" -> join
	"templating.py" -> generate
	"sync.py" -> "task.cancel"
	"__init__.py" -> _register_at_fork_reinit_lock
	"test_testing.py" -> "flask.redirect"
	"socket.py" -> ValueError
	"socket.py" -> "self._sock.send"
	"locale.py" -> "locale_encoding_alias.items"
	"pickle.py" -> load
	"tempfile.py" -> "_weakref.finalize"
	"typing.py" -> dict
	"test_blueprints.py" -> "app.jinja_env.globals.keys"
	"__init__.py" -> "value.startswith"
	"datetime.py" -> "tz.fromutc"
	"test_blueprints.py" -> "pytest.mark.parametrize"
	"tokenize.py" -> "self._replace"
	"copy.py" -> issubclass
	"scaffold.py" -> is_relative_to
	"_strptime.py" -> frozenset
	"pickle.py" -> "self.current_frame.read"
	"typing_extensions.py" -> "type.__instancecheck__"
	"tarfile.py" -> "member.isreg"
	"locale.py" -> len
	"__init__.py" -> "self.normalize"
	"pathlib.py" -> "os.rename"
	"platform.py" -> "os.environ.get"
	"bz2.py" -> BZ2Compressor
	"dis.py" -> len
	"ssl.py" -> "cert.get"
	"calendar.py" -> "parser.error"
	"plistlib.py" -> "data.decode"
	"subprocess.py" -> _time
	"subprocess.py" -> "self._check_timeout"
	"pickle.py" -> "list.append"
	"__init__.py" -> "self.data.join"
	"cli.py" -> app_factory
	"enum.py" -> "failed_member.append"
	"contextlib.py" -> "self._old_cwd.append"
	"ctx.py" -> object
	"test_testing.py" -> "app.test_request_context"
	"testing.py" -> "tempfile.mkdtemp"
	"tokenize.py" -> error
	"__init__.py" -> "_compile_repl.cache_clear"
	"locale.py" -> "functools.wraps"
	"__init__.py" -> "handler._at_fork_reinit"
	"sync.py" -> gather
	"__init__.py" -> "self.data.title"
	"globals.py" -> LocalProxy
	"random.py" -> randbelow
	"tempfile.py" -> _get_default_tempdir
	"pickle.py" -> "self.framer.commit_frame"
	"ssl.py" -> recv_into
	"blueprints.py" -> "options.get"
	"inspect.py" -> "os.path.realpath"
	"bz2.py" -> "self._fp.write"
	"pathlib.py" -> "os.link"
	"typing.py" -> "self.copy_with"
	"hashlib.py" -> <unknown_function>
	"inspect.py" -> cls
	"threading.py" -> "self._cond._at_fork_reinit"
	"feedparser.py" -> "lines.append"
	"app.py" -> int
	"inspect.py" -> Parameter
	"threading.py" -> "self.notify_all"
	"tracemalloc.py" -> "linecache.getline"
	"typing_extensions.py" -> AttributeError
	"argparse.py" -> "name.isidentifier"
	"locale.py" -> "locale_encoding_alias.setdefault"
	"ipaddress.py" -> "self._explode_shorthand_ip_string"
	"dataclasses.py" -> Field
	"ctx.py" -> "_cv_request.reset"
	"feedparser.py" -> "errors.InvalidMultipartContentTransferEncodingDefect"
	"blueprints.py" -> "bp_url_prefix.lstrip"
	"weakref.py" -> deepcopy
	"rlcompleter.py" -> dir
	"argparse.py" -> "self._get_value"
	"pickle.py" -> "slotstate.items"
	"weakref.py" -> key
	"db.py" -> "sqlite3.register_converter"
	"testing.py" -> super
	"argparse.py" -> "text.strip"
	"enum.py" -> sorted
	"test_config.py" -> "msg.startswith"
	"cli.py" -> sorted
	"_strptime.py" -> enumerate
	"_strptime.py" -> "time.struct_time"
	"pickle.py" -> "self.save"
	"typing_extensions.py" -> setattr
	"plistlib.py" -> "self._write_size"
	"tarfile.py" -> "self.fileobj.tell"
	"__init__.py" -> "db.init_app"
	"subprocess.py" -> "contextlib.ExitStack"
	"locale.py" -> "thousands_sep.join"
	"ast.py" -> "type.__instancecheck__"
	"typing_extensions.py" -> _caller
	"datetime.py" -> _find_isoformat_datetime_separator
	"zipfile.py" -> "self.exists"
	"plistlib.py" -> object
	"parse.py" -> range
	"csv.py" -> thisType
	"ast.py" -> "todo.extend"
	"lzma.py" -> "self._fp.fileno"
	"ast.py" -> print
	"inspect.py" -> __get__
	"ctx.py" -> "ctx.copy"
	"parse.py" -> min
	"ctx.py" -> "app_ctx.pop"
	"provider.py" -> "self._prepare_response_obj"
	"lzma.py" -> "_compression.DecompressReader"
	"socket.py" -> socket
	"tokenize.py" -> "result.add"
	"parse.py" -> "x.encode"
	"cli.py" -> "readline.set_completer"
	"test_basic.py" -> "pytest.mark.parametrize"
	"fnmatch.py" -> "fixed.append"
	"functools.py" -> __le__
	"helpers.py" -> "kwargs.update"
	"parse.py" -> _splitparams
	"gzip.py" -> "struct.pack"
	"gzip.py" -> encode
	"typing.py" -> __dir__
	"plistlib.py" -> "raw.startswith"
	"zipfile.py" -> isinstance
	"datetime.py" -> <unknown_function>
	"parse.py" -> UnicodeError
	"typing.py" -> _UnpackGenericAlias
	"tarfile.py" -> BZ2File
	"csv.py" -> map
	"pickle.py" -> "sys.modules.copy"
	"__init__.py" -> KeyError
	"plistlib.py" -> "itertools.chain"
	"zipfile.py" -> "self._read2"
	"argparse.py" -> "self.print_usage"
	"linecache.py" -> "fp.readlines"
	"statistics.py" -> cls
	"hashlib.py" -> "rkey.to_bytes"
	"functools.py" -> _is_union_type
	"inspect.py" -> FullArgSpec
	"helpers.py" -> "current_app.make_response"
	"__init__.py" -> "self.__repr.format"
	"textwrap.py" -> "self.placeholder.lstrip"
	"typing_extensions.py" -> "deprecation_msg.format"
	"_strptime.py" -> range
	"views.py" -> "bp.get"
	"statistics.py" -> sum
	"typing_error_handler.py" -> "app.errorhandler"
	"functools.py" -> get
	"__init__.py" -> "logger.getEffectiveLevel"
	"csv.py" -> register_dialect
	"parse.py" -> _splitattr
	"dataclasses.py" -> "_MODULE_IDENTIFIER_RE.match"
	"ast.py" -> setattr
	"subprocess.py" -> "selector.unregister"
	"uuid.py" -> UUID
	"datetime.py" -> "self.__reduce_ex__"
	"pathlib.py" -> "self._pathcls._from_parsed_parts"
	"subprocess.py" -> "_winapi.DuplicateHandle"
	"config.py" -> "self.from_object"
	"warnings.py" -> "linecache.getlines"
	"feedparser.py" -> "self._input.readline"
	"platform.py" -> "winreg.QueryValueEx"
	"hashlib.py" -> ValueError
	"tarfile.py" -> "cls._create_header"
	"app.py" -> "request_finished.send"
	"test_async.py" -> AppError
	"zipfile.py" -> BadZipFile
	"test_helpers.py" -> FakePath
	"typing_extensions.py" -> list
	"test_user_error_handler.py" -> "app.test_client"
	"platform.py" -> "output.decode"
	"test_basic.py" -> "client.get"
	"argparse.py" -> "parts.extend"
	"pathlib.py" -> S_ISCHR
	"threading.py" -> "_active.update"
	"subprocess.py" -> FileNotFoundError
	"copyreg.py" -> ValueError
	"statistics.py" -> "sxx_partials.items"
	"datetime.py" -> NotImplementedError
	"feedparser.py" -> "re.escape"
	"__init__.py" -> "self.data.splitlines"
	"traceback.py" -> "c.isspace"
	"hashlib.py" -> "cache.get"
	"datetime.py" -> "tzinfo.__new__"
	"zipfile.py" -> "self._read1"
	"zipfile.py" -> "self.namelist"
	"platform.py" -> _get_machine_win32
	"csv.py" -> zip
	"locale.py" -> _grouping_intervals
	"argparse.py" -> "formatter.format_help"
	"__init__.py" -> type
	"pathlib.py" -> "entry.is_dir"
	"lzma.py" -> "decomp.decompress"
	"__init__.py" -> "kwargs.setdefault"
	"py_compile.py" -> "os.makedirs"
	"sync.py" -> "self.get_current_task"
	"shutil.py" -> "pathext_source.split"
	"tokenize.py" -> set
	"traceback.py" -> suppress
	"__init__.py" -> "functools.lru_cache"
	"dataclasses.py" -> _create_fn
	"typing_extensions.py" -> _AnnotatedAlias
	"datetime.py" -> "self.__setstate"
	"test_async.py" -> "blueprint.errorhandler"
	"statistics.py" -> "math.isqrt"
	"scaffold.py" -> "self.teardown_request_funcs.setdefault"
	"ast.py" -> "self.set_precedence"
	"hashlib.py" -> "icpy.digest"
	"typing_extensions.py" -> tuple
	"db.py" -> "v.decode"
	"typing_extensions.py" -> _collect_type_vars
	"zipfile.py" -> "path.at.rstrip"
	"fnmatch.py" -> "stuff.replace"
	"tarfile.py" -> "os.path.lexists"
	"argparse.py" -> _format_args
	"parse.py" -> "unicodedata.normalize"
	"datetime.py" -> ValueError
	"locale.py" -> resetlocale
	"gzip.py" -> EOFError
	"datetime.py" -> round
	"blog.py" -> Blueprint
	"sync.py" -> "self.deadlock_context.get"
	"fnmatch.py" -> object
	"blueprints.py" -> "os.path.join"
	"typing.py" -> __getattr__
	"test_reqctx.py" -> "client.get"
	"subprocess.py" -> _WIFSTOPPED
	"feedparser.py" -> "headerRE.match"
	"bz2.py" -> "self._buffer.close"
	"__init__.py" -> "os.path.basename"
	"dataclasses.py" -> wrap
	"subprocess.py" -> "grp.getgrnam"
	"shutil.py" -> _ntuple_diskusage
	"ast.py" -> list
	"functools.py" -> max
	"argparse.py" -> "option_strings.append"
	"gzip.py" -> _create_simple_gzip_header
	"ipaddress.py" -> IPv4Address
	"ast.py" -> "_Precedence.TEST.next"
	"zipfile.py" -> namelist
	"test_templating.py" -> str
	"ssl.py" -> VerifyFlags
	"lzma.py" -> memoryview
	"shlex.py" -> ValueError
	"calendar.py" -> "result.encode"
	"feedparser.py" -> "errors.InvalidHeaderDefect"
	"locale.py" -> _parse_localename
	"tempfile.py" -> "_io.open"
	"test_blueprints.py" -> "app.app_context"
	"statistics.py" -> _normal_dist_inv_cdf
	"test_helpers.py" -> "flask.send_file"
	"py_compile.py" -> "loader.get_data"
	"ctx.py" -> "self.push"
	"pathlib.py" -> partition
	"glob.py" -> "os.lstat"
	"typing_extensions.py" -> "params.append"
	"pickle.py" -> "self.commit_frame"
	"app.py" -> "self.view_functions.get"
	"contextlib.py" -> MethodType
	"inspect.py" -> _findclass
	"ipaddress.py" -> "self._reverse_pointer"
	"test_templating.py" -> "flask.render_template_string"
	"parse.py" -> "port.partition"
	"signal.py" -> _enum_to_int
	"statistics.py" -> _isfinite
	"dis.py" -> get_name
	"random.py" -> _ceil
	"ssl.py" -> bytearray
	"selectors.py" -> set
	"weakref.py" -> "self._meth_type"
	"shutil.py" -> "os.close"
	"functools.py" -> "dispatch_cache.clear"
	"tarfile.py" -> "error_msgs.append"
	"zipfile.py" -> "FastLookup.make"
	"ast.py" -> tuple
	"templating.py" -> "before_render_template.send"
	"argparse.py" -> "self._group_actions.append"
	"selectors.py" -> "select.kevent"
	"pickle.py" -> "self._unframer.load_frame"
	"__init__.py" -> "self.data.removesuffix"
	"pathlib.py" -> "os.PathLike.register"
	"testing.py" -> hasattr
	"glob.py" -> "os.scandir"
	"dis.py" -> _deoptop
	"tempfile.py" -> "_os.chmod"
	"datetime.py" -> replace
	"sync.py" -> "current_executor.run_until_future"
	"typing_extensions.py" -> _ConcatenateGenericAlias
	"types.py" -> "kwds.pop"
	"typing.py" -> TypeError
	"fnmatch.py" -> translate
	"typing_extensions.py" -> _ensure_subclassable
	"dataclasses.py" -> _init_param
	"statistics.py" -> sqrt
	"warnings.py" -> list
	"ast.py" -> is_non_empty_tuple
	"argparse.py" -> super
	"__init__.py" -> "root.addHandler"
	"__init__.py" -> loads
	"test_helpers.py" -> AssertionError
	"pathlib.py" -> _WindowsFlavour
	"app.py" -> ImmutableDict
	"__init__.py" -> "finder.invalidate_caches"
	"ast.py" -> "self.delimit_if"
	"inspect.py" -> "posonlyargs.append"
	"bz2.py" -> "self._buffer.read"
	"subprocess.py" -> "low_fds_to_close.append"
	"csv.py" -> dict
	"sync.py" -> "call_result.set_exception"
	"ssl.py" -> "self._load_windows_store_certs"
	"__init__.py" -> "self.root._cache.clear"
	"tracemalloc.py" -> "pickle.dump"
	"ssl.py" -> "pem_cert_string.startswith"
	"enum.py" -> "simple_value.replace"
	"app.py" -> "self.add_template_filter"
	"functools.py" -> setattr
	"statistics.py" -> fsum
	"feedparser.py" -> "root.get_content_maintype"
	"statistics.py" -> "counts.items"
	"ast.py" -> "self.block"
	"argparse.py" -> "confl_optionals.append"
	"__init__.py" -> Formatter
	"tarfile.py" -> "self.members.append"
	"typing.py" -> "warnings.warn"
	"csv.py" -> count
	"__init__.py" -> "self._fixupParents"
	"uuid.py" -> "object.__setattr__"
	"subprocess.py" -> bool
	"tarfile.py" -> __init__
	"test_cli.py" -> "ssl.SSLContext"
	"test_logging.py" -> "logging.root.setLevel"
	"tarfile.py" -> "self._extract_member"
	"__init__.py" -> open_func
	"typing.py" -> getattr
	"parse.py" -> chr
	"inspect.py" -> formatarg
	"scaffold.py" -> "t.cast"
	"inspect.py" -> _getmembers
	"test_templating.py" -> macro
	"ssl.py" -> "self._sslobj.getpeercert"
	"enum.py" -> "simple_member_dict.keys"
	"test_cli.py" -> "late.cli.command"
	"_strptime.py" -> "regex_chars.sub"
	"_strptime.py" -> "datetime_date.fromordinal"
	"contextlib.py" -> "self._push_async_cm_exit"
	"py_compile.py" -> "importlib.util.cache_from_source"
	"platform.py" -> "itertools.chain"
	"test_converters.py" -> "app.test_request_context"
	"pathlib.py" -> attrgetter
	"test_blueprints.py" -> "parent.errorhandler"
	"__init__.py" -> "_json.loads"
	"warnings.py" -> _processoptions
	"sessions.py" -> "self.get_cookie_samesite"
	"textwrap.py" -> "text.expandtabs"
	"pathlib.py" -> cf
	"test_templating.py" -> "app.run"
	"__init__.py" -> "self.exists"
	"datetime.py" -> _check_time_fields
	"uuid.py" -> hasattr
	"socket.py" -> enum_klass
	"signal.py" -> "name.isupper"
	"shutil.py" -> "os.unlink"
	"tarfile.py" -> "self.gettarinfo"
	"zipfile.py" -> "extra.append"
	"_strptime.py" -> "am_pm.append"
	"types.py" -> dict
	"scaffold.py" -> issubclass
	"test_basic.py" -> method_route
	"pathlib.py" -> _PathParents
	"fractions.py" -> ValueError
	"test_testing.py" -> "flask.Blueprint"
	"fractions.py" -> round
	"socket.py" -> "self._accept"
	"selectors.py" -> "self.get_map"
	"parse.py" -> _splitport
	"typing.py" -> "functools.partial"
	"__init__.py" -> isinstance
	"random.py" -> _exp
	"shutil.py" -> "fnmatch.filter"
	"feedparser.py" -> "self._parsegen"
	"app.py" -> timedelta
	"plistlib.py" -> "self._get_size"
	"locale.py" -> "s.rstrip"
	"zipfile.py" -> "fp.read"
	"argparse.py" -> "textwrap.fill"
	"tag.py" -> tag_class
	"warnings.py" -> _OptionError
	"locale.py" -> str
	"__init__.py" -> "sio.getvalue"
	"inspect.py" -> "match.group"
	"dis.py" -> "collections.namedtuple"
	"argparse.py" -> "self._indent"
	"dataclasses.py" -> <unknown_function>
	"argparse.py" -> "args_file.read"
	"test_json.py" -> "DefaultJSONProvider.default"
	"enum.py" -> "duplicates.append"
	"inspect.py" -> _signature_is_functionlike
	"dis.py" -> str
	"blueprints.py" -> send_from_directory
	"ssl.py" -> "self._sslobj.verify_client_post_handshake"
	"views.py" -> Blueprint
	"types.py" -> _calculate_meta
	"ipaddress.py" -> "cls._HEX_DIGITS.issuperset"
	"cli.py" -> "ast.parse"
	"warnings.py" -> "tracemalloc.get_object_traceback"
	"test_json_tag.py" -> "s.dumps"
	"functools.py" -> list
	"debughelpers.py" -> type
	"tempfile.py" -> format
	"scaffold.py" -> defaultdict
	"shutil.py" -> _rmtree_isdir
	"__init__.py" -> append
	"pickle.py" -> int
	"inspect.py" -> bool
	"socket.py" -> "exceptions.append"
	"__init__.py" -> "self.lock.release"
	"test_cli.py" -> resolve
	"_strptime.py" -> "_TimeRE_cache.compile"
	"threading.py" -> "thread._reset_internal_locks"
	"csv.py" -> "delims.get"
	"pickle.py" -> "self.framer.start_framing"
	"testing.py" -> "env.items"
	"__init__.py" -> _difference
	"ast.py" -> "self.get_raw_docstring"
	"inspect.py" -> hash
	"__init__.py" -> "self.formatException"
	"conftest.py" -> AttributeError
	"_weakrefset.py" -> "self.__isub__"
	"random.py" -> TypeError
	"uuid.py" -> _get_command_stdout
	"__init__.py" -> "self.root.open"
	"cli.py" -> "sorts.append"
	"warnings.py" -> int
	"warnings.py" -> "msg.match"
	"pathlib.py" -> startswith
	"feedparser.py" -> "self._parse"
	"zipfile.py" -> "io.BytesIO"
	"datetime.py" -> "self.strftime"
	"shutil.py" -> "os.getcwd"
	"test_helpers.py" -> "flask.Flask"
	"test_blueprints.py" -> "bp.add_url_rule"
	"conftest.py" -> "mp.undo"
	"hashlib.py" -> from_bytes
	"functools.py" -> tuple
	"hashlib.py" -> "logging.exception"
	"argparse.py" -> add_group
	"getopt.py" -> "os.environ.get"
	"__init__.py" -> "_json.dump"
	"inspect.py" -> "sys.exit"
	"ipaddress.py" -> "address.to_bytes"
	"bisect.py" -> len
	"tarfile.py" -> object
	"operator.py" -> _abs
	"tokenize.py" -> _builtin_open
	"threading.py" -> "self.run"
	"ipaddress.py" -> "IPv4Address.__lt__"
	"__init__.py" -> skip_missing_files
	"locale.py" -> "_percent_re.sub"
	"typing_extensions.py" -> "ns.get"
	"config.py" -> exec
	"zipfile.py" -> "x._decodeExtra"
	"config.py" -> "os.path.join"
	"subprocess.py" -> "os.get_exec_path"
	"glob.py" -> _ishidden
	"enum.py" -> repr
	"typing_extensions.py" -> "sys._getframe"
	"platform.py" -> _java_getprop
	"dis.py" -> "infile.read"
	"tarfile.py" -> "self.makefile"
	"zipfile.py" -> "pathsep.join"
	"enum.py" -> "enum_class._member_names_.append"
	"dataclasses.py" -> _DataclassParams
	"gzip.py" -> _rewind
	"wrappers.py" -> _load_form_data
	"string.py" -> getattr
	"shutil.py" -> copytree
	"warnings.py" -> _is_internal_frame
	"platform.py" -> "release.split"
	"pathlib.py" -> "_Selector.__init__"
	"gzip.py" -> "self._check_not_closed"
	"blueprints.py" -> "self.deferred_functions.append"
	"argparse.py" -> "nargs_errors.get"
	"platform.py" -> _syscmd_ver
	"code.py" -> str
	"ast.py" -> next
	"argparse.py" -> hasattr
	"parse.py" -> quoter
	"dataclasses.py" -> ValueError
	"subprocess.py" -> "os.path.dirname"
	"subprocess.py" -> "stdout.fileno"
	"copy.py" -> hasattr
	"pathlib.py" -> set
	"warnings.py" -> warn_explicit
	"feedparser.py" -> BufferedSubFile
	"test_request.py" -> Request
	"parse.py" -> ValueError
	"__init__.py" -> namelist
	"inspect.py" -> globals
	"feedparser.py" -> "self._cur.set_payload"
	"app.py" -> InternalServerError
	"__init__.py" -> _warnings_showwarning
	"blueprints.py" -> "s.app.url_value_preprocessors.setdefault"
	"typing.py" -> _type_convert
	"__init__.py" -> action
	"pickle.py" -> "self.memoize"
	"__init__.py" -> tuple_new
	"test_reqctx.py" -> "app.route"
	"pickle.py" -> repr
	"ssl.py" -> recvfrom_into
	"shutil.py" -> "os.symlink"
	"tarfile.py" -> "tf.list"
	"typing.py" -> "self.__class__"
	"keyword.py" -> frozenset
	"ipaddress.py" -> IndexError
	"typing.py" -> callable
	"inspect.py" -> iter
	"inspect.py" -> visit
	"test_blueprints.py" -> "app.test_client"
	"test_cli.py" -> "app_runner.invoke"
	"test_blueprints.py" -> MyFunctionException
	"test_cli.py" -> "nested.cli.command"
	"feedparser.py" -> "re.compile"
	"tag.py" -> parse_date
	"conftest.py" -> LimitedLoader
	"shutil.py" -> "os.path.join"
	"test_basic.py" -> "app.url_map.is_endpoint_expecting"
	"__init__.py" -> "FastLookup.make"
	"tag.py" -> "self._untag_scan"
	"subprocess.py" -> "file_actions.append"
	"test_templating.py" -> "flask.Flask"
	"base64.py" -> bytearray
	"__init__.py" -> "app.add_url_rule"
	"test_json.py" -> "flask.json.dumps"
	"inspect.py" -> ClosureVars
	"ssl.py" -> send
	"tag.py" -> dumps
	"socket.py" -> "io.RawIOBase.close"
	"selectors.py" -> "self._selector.modify"
	"zipfile.py" -> "buffer.append"
	"typing.py" -> "functools.wraps"
	"_strptime.py" -> ValueError
	"tarfile.py" -> "self.fileobj.seekable"
	"conftest.py" -> Flask
	"typing.py" -> reversed
	"ipaddress.py" -> "prefixlen_str.isascii"
	"random.py" -> _sin
	"conftest.py" -> "request.addfinalizer"
	"dis.py" -> distb
	"typing.py" -> "newargs.extend"
	"typing_extensions.py" -> __init__
	"app.py" -> "rv.update"
	"dis.py" -> _parse_varint
	"traceback.py" -> "self.format"
	"templating.py" -> "_cv_app.get"
	"subprocess.py" -> STARTUPINFO
	"ast.py" -> "self.maybe_newline"
	"platform.py" -> "sys_version.startswith"
	"test_async.py" -> "pytest.importorskip"
	"gzip.py" -> "g.close"
	"test_json.py" -> ObjectWithHTML
	"app.py" -> _wz_redirect
	"selectors.py" -> "self._selector.unregister"
	"socket.py" -> "io.TextIOWrapper"
	"parse.py" -> replace
	"calendar.py" -> "datetime.date"
	"test_basic.py" -> "app.endpoint"
	"__init__.py" -> relative_to
	"uuid.py" -> "hex.strip"
	"__init__.py" -> "_lock.acquire"
	"test_js_example.py" -> "client.post"
	"inspect.py" -> ismodule
	"socket.py" -> "lsock.accept"
	"sessions.py" -> dict
	"csv.py" -> "rowdict.get"
	"inspect.py" -> "functools._unwrap_partial"
	"pathlib.py" -> encode
	"__init__.py" -> Module
	"tempfile.py" -> map
	"test_reqctx.py" -> run
	"test_blueprints.py" -> MyBlueprint
	"parse.py" -> strip
	"dataclasses.py" -> "locals.keys"
	"gzip.py" -> lstrip
	"base64.py" -> TypeError
	"__init__.py" -> "fmt.find"
	"cli.py" -> "os.path.realpath"
	"argparse.py" -> "params.get"
	"inspect.py" -> "linecache.checkcache"
	"zipfile.py" -> "time.localtime"
	"test_cli.py" -> "obj.load_app"
	"enum.py" -> cls
	"statistics.py" -> fmean
	"cli.py" -> "click.option"
	"helpers.py" -> "os.environ.get"
	"string.py" -> "self._vformat"
	"pickle.py" -> bytes
	"typing_extensions.py" -> "tvars.extend"
	"debughelpers.py" -> isinstance
	"argparse.py" -> any
	"socket.py" -> "csock.setblocking"
	"warnings.py" -> "sys._getframe"
	"tracemalloc.py" -> "fnmatch.fnmatch"
	"ssl.py" -> "os.path.isdir"
	"functools.py" -> partial
	"threading.py" -> "tlock.locked"
	"templating.py" -> "result.update"
	"random.py" -> "self.normalvariate"
	"enum.py" -> "name.lower"
	"enum.py" -> "bltns.bin"
	"_strptime.py" -> replace
	"csv.py" -> reader
	"test_converters.py" -> "app.get"
	"typing_extensions.py" -> "cls.__dict__.get"
	"feedparser.py" -> "self._pop_message"
	"traceback.py" -> "result.append"
	"tokenize.py" -> "argparse.ArgumentParser"
	"weakref.py" -> TypeError
	"_weakrefset.py" -> itemref
	"calendar.py" -> "self.itermonthdays2"
	"test_blueprints.py" -> "flask.g.seen.pop"
	"__init__.py" -> "value.strip"
	"enum.py" -> "attrs.items"
	"_weakrefset.py" -> "self.data.intersection_update"
	"parse.py" -> quote_via
	"zipfile.py" -> "os.path.join"
	"csv.py" -> "dq_regexp.search"
	"pathlib.py" -> "fnmatch.fnmatchcase"
	"tarfile.py" -> "time.time"
	"copyreg.py" -> int
	"traceback.py" -> "note.split"
	"platform.py" -> win32_ver
	"test_testing.py" -> "rv.get_data"
	"test_json.py" -> splitlines
	"types.py" -> TypeError
	"inspect.py" -> "a.append"
	"test_basic.py" -> MyException
	"test_helpers.py" -> "flask.stream_with_context"
	"warnings.py" -> _formatwarnmsg_impl
	"zipfile.py" -> "self._comp.compress"
	"config.py" -> "key.removeprefix"
	"weakref.py" -> WeakKeyDictionary
	"socket.py" -> "csock.connect"
	"test_views.py" -> parse_set_header
	"__init__.py" -> "fp.read"
	"feedparser.py" -> "errors.CloseBoundaryNotFoundDefect"
	"inspect.py" -> "re.sub"
	"gzip.py" -> "myfileobj.close"
	"inspect.py" -> _check_class
	"weakref.py" -> "c.update"
	"random.py" -> type
	"dis.py" -> RuntimeError
	"string.py" -> "s.split"
	"__init__.py" -> "self.__map.clear"
	"test_user_error_handler.py" -> "flask.Blueprint"
	"zipfile.py" -> "zef_file.read"
	"shutil.py" -> FileNotFoundError
	"tarfile.py" -> "self._proc_sparse"
	"__init__.py" -> "os.path.normcase"
	"dataclasses.py" -> _recursive_repr
	"dataclasses.py" -> "module.__dict__.get"
	"__init__.py" -> "filename.partition"
	"__init__.py" -> "self._style.usesTime"
	"uuid.py" -> dict
	"py_compile.py" -> "os.environ.get"
	"_weakrefset.py" -> "self.add"
	"cli.py" -> "os.path.join"
	"statistics.py" -> _mean_stdev
	"types.py" -> _c
	"__init__.py" -> "stream.close"
	"testing.py" -> "self._new_contexts.pop"
	"functools.py" -> function
	"__init__.py" -> celery_init_app
	"ipaddress.py" -> __format__
	"test_request.py" -> "app.app_context"
	"socket.py" -> "os.get_inheritable"
	"functools.py" -> next
	"argparse.py" -> open
	"dis.py" -> "output.getvalue"
	"uuid.py" -> count
	"glob.py" -> "os.path.isdir"
	"typing_extensions.py" -> "object.__hash__"
	"test_reqctx.py" -> "app.full_dispatch_request"
	"inspect.py" -> getfile
	"zipfile.py" -> _get_compressor
	"base64.py" -> "pieces.append"
	"test_async.py" -> Flask
	"typing_extensions.py" -> object
	"test_blueprints.py" -> "app.test_request_context"
	"glob.py" -> "magic_check_bytes.sub"
	"argparse.py" -> "line.append"
	"test_reqctx.py" -> Exception
	"zipfile.py" -> "self._fileobj.tell"
	"types.py" -> getattr
	"typing.py" -> isinstance
	"lzma.py" -> "self._compressor.compress"
	"inspect.py" -> "attrs.split"
	"platform.py" -> format
	"weakref.py" -> KeyedRef
	"datetime.py" -> abs
	"test_json.py" -> http_date
	"blog.py" -> url_for
	"subprocess.py" -> "args.extend"
	"tarfile.py" -> "member.path.lstrip"
	"signal.py" -> "_signal.getsignal"
	"zipfile.py" -> "self.root.namelist"
	"subprocess.py" -> "stderr.fileno"
	"random.py" -> reversed
	"copyreg.py" -> "base.__init__"
	"__init__.py" -> fullmatch
	"ipaddress.py" -> hash
	"plistlib.py" -> zip
	"plistlib.py" -> "result.extend"
	"test_blueprints.py" -> "child.register_blueprint"
	"typing.py" -> classmethod
	"dis.py" -> _is_backward_jump
	"locale.py" -> _replace_encoding
	"glob.py" -> "sys.audit"
	"tracemalloc.py" -> "grouped.values"
	"inspect.py" -> "comments.append"
	"_strptime.py" -> sorted
	"tempfile.py" -> "_functools.wraps"
	"inspect.py" -> getframeinfo
	"traceback.py" -> list
	"inspect.py" -> "target.partition"
	"ssl.py" -> isinstance
	"base64.py" -> "b.startswith"
	"py_compile.py" -> "argparse.ArgumentParser"
	"__init__.py" -> update
	"locale.py" -> setlocale
	"test_helpers.py" -> Wrapper
	"pathlib.py" -> "self._make_child"
	"copy.py" -> id
	"typing.py" -> "default_names.append"
	"plistlib.py" -> "_FORMATS.values"
	"test_js_example.py" -> "template_rendered.connected_to"
	"contextlib.py" -> "os.chdir"
	"test_basic.py" -> "r.set_cookie"
	"typing.py" -> "base.__dict__.keys"
	"blueprints.py" -> "value.total_seconds"
	"test_logging.py" -> "pytestconfig.pluginmanager.register"
	"ssl.py" -> Options
	"app.py" -> "item.upper"
	"tarfile.py" -> "self.next"
	"__init__.py" -> text_encoding
	"ssl.py" -> _create_stdlib_context
	"threading.py" -> "waiter.acquire"
	"copyreg.py" -> "c.__name__.lstrip"
	"subprocess.py" -> "p.kill"
	"tempfile.py" -> output_type
	"threading.py" -> hook
	"tarfile.py" -> nts
	"typing_extensions.py" -> "abc.ABCMeta.__init__"
	"dis.py" -> findlinestarts
	"gzip.py" -> "self._buffer.peek"
	"subprocess.py" -> "errread.Detach"
	"inspect.py" -> "self.parameters.values"
	"tokenize.py" -> "sys.stderr.write"
	"tarfile.py" -> "info.items"
	"test_basic.py" -> "exc_info.errisinstance"
	"__init__.py" -> "stream.read"
	"parse.py" -> "port.isdigit"
	"_weakrefset.py" -> discard
	"__init__.py" -> "DistributionFinder.Context"
	"templating.py" -> "self._get_source_fast"
	"app.py" -> DispatchingJinjaLoader
	"platform.py" -> "cls.__new__"
	"scaffold.py" -> update_wrapper
	"weakref.py" -> "self.data.pop"
	"plistlib.py" -> "self.write_value"
	"typing_extensions.py" -> _get_protocol_attrs
	"py_compile.py" -> join
	"test_basic.py" -> "app.test_request_context"
	"functools.py" -> "types.MappingProxyType"
	"inspect.py" -> formatvalue
	"traceback.py" -> "frame_summary.line.lstrip"
	"operator.py" -> "a.__index__"
	"zipfile.py" -> "self._writing"
	"ctx.py" -> "self.app.app_context"
	"shutil.py" -> "ext.lower"
	"test_config.py" -> common_object_test
	"inspect.py" -> "args.extend"
	"__init__.py" -> "self.error"
	"shutil.py" -> "zip.open"
	"views.py" -> getattr
	"dis.py" -> rjust
	"argparse.py" -> get_invocation
	"tempfile.py" -> "_os.close"
	"inspect.py" -> getsourcefile
	"statistics.py" -> "self.inv_cdf"
	"sync.py" -> "contextvars.copy_context"
	"app.py" -> send_static_file
	"inspect.py" -> "itertools.islice"
	"dis.py" -> _Unknown
	"zipfile.py" -> min
	"tokenize.py" -> "_itertools.chain"
	"datetime.py" -> "fmt.format"
	"selectors.py" -> __init__
	"subprocess.py" -> set
	"glob.py" -> isinstance
	"__init__.py" -> "Logger.manager.getLogger"
	"inspect.py" -> _signature_bound_method
	"__init__.py" -> _top_level_inferred
	"debughelpers.py" -> "buf.append"
	"app.py" -> "self.finalize_request"
	"cli.py" -> "cli.main"
	"tempfile.py" -> resetperms
	"traceback.py" -> _byte_offset_to_character_offset
	"enum.py" -> "names.replace"
	"test_logging.py" -> "pytest.fixture"
	"dis.py" -> _get_const_info
	"shutil.py" -> "cmd.lower"
	"typing.py" -> "attr.endswith"
	"socket.py" -> gethostname
	"hashlib.py" -> bytes
	"parse.py" -> "url.rpartition"
	"hashlib.py" -> "outer.update"
	"test_config.py" -> "f.write_text"
	"random.py" -> _cos
	"tempfile.py" -> "_sys.audit"
	"tarfile.py" -> "stat.S_ISFIFO"
	"inspect.py" -> isdatadescriptor
	"shlex.py" -> repr
	"_strptime.py" -> _strptime
	"selectors.py" -> "self._selector.register"
	"test_json_tag.py" -> "pytest.raises"
	"cli.py" -> SeparatedPathType
	"inspect.py" -> "code.co_positions"
	"app.py" -> "appcontext_tearing_down.send"
	"typing_extensions.py" -> "required_keys.add"
	"zipfile.py" -> ZipFile
	"enum.py" -> "member.__init__"
	"dis.py" -> enumerate
	"shlex.py" -> "self.push_source"
	"csv.py" -> len
	"argparse.py" -> "self._get_positional_actions"
	"parse.py" -> _splittype
	"cli.py" -> "ctx.with_resource"
	"test_reqctx.py" -> "app.test_request_context"
	"__init__.py" -> "_at_fork_reinit_lock_weakset.add"
	"test_appctx.py" -> "app.app_context"
	"db.py" -> "click.command"
	"platform.py" -> "sys.platform.startswith"
	"__init__.py" -> sum
	"fractions.py" -> int
	"app.py" -> "self.logger.error"
	"__init__.py" -> "_json.load"
	"typing.py" -> _is_dunder
	"tracemalloc.py" -> "old_group.pop"
	"gzip.py" -> "mode.replace"
	"argparse.py" -> "dest_option_string.lstrip"
	"random.py" -> isinstance
	"inspect.py" -> max
	"plistlib.py" -> dict
	"cli.py" -> "module.__dict__.values"
	"plistlib.py" -> "struct.unpack"
	"argparse.py" -> range
	"string.py" -> isinstance
	"socket.py" -> SocketIO
	"tarfile.py" -> format
	"calendar.py" -> rstrip
	"tarfile.py" -> "target.seek"
	"tarfile.py" -> "os.stat"
	"fractions.py" -> abs
	"blog.py" -> "db.execute"
	"flask.py" -> Flask
	"lzma.py" -> "self._buffer.tell"
	"traceback.py" -> format_list
	"test_blueprints.py" -> "bp.get"
	"weakref.py" -> len
	"typing_extensions.py" -> "_types.GenericAlias"
	"shutil.py" -> ReadError
	"py_compile.py" -> "sys.stderr.write"
	"warnings.py" -> "linecache.getline"
	"weakref.py" -> "self.__class__"
	"types.py" -> type
	"argparse.py" -> "self._add_action"
	"templating.py" -> set
	"datetime.py" -> bytes
	"platform.py" -> map
	"test_blueprints.py" -> "sideend.route"
	"test_signals.py" -> "flask.appcontext_popped.connect"
	"shutil.py" -> "os.sendfile"
	"locale.py" -> "re.compile"
	"tarfile.py" -> "self.makelink"
	"feedparser.py" -> "self._eofstack.append"
	"dis.py" -> range
	"logging.py" -> has_level_handler
	"selectors.py" -> "self._selector.fileno"
	"inspect.py" -> print
	"sync.py" -> SyncToAsync
	"argparse.py" -> "self.formatter._dedent"
	"functools.py" -> get_cache_token
	"pathlib.py" -> successor_select
	"__init__.py" -> "record.getMessage"
	"test_user_error_handler.py" -> "bp.route"
	"zipfile.py" -> "self._decompressor.decompress"
	"types.py" -> callable
	"auth.py" -> execute
	"threading.py" -> _allocate_lock
	"typing.py" -> "collections.namedtuple"
	"tarfile.py" -> main
	"argparse.py" -> _copy_items
	"plistlib.py" -> _date_from_string
	"tarfile.py" -> "os.minor"
	"typing.py" -> str
	"plistlib.py" -> _count_to_size
	"glob.py" -> "os.open"
	"dataclasses.py" -> "obj.__class__"
	"enum.py" -> "object.__new__"
	"__init__.py" -> "os.path.join"
	"selectors.py" -> "self.close"
	"contextlib.py" -> _enter
	"pickle.py" -> "self.framer.end_framing"
	"datetime.py" -> cls
	"types.py" -> "functools.wraps"
	"threading.py" -> "_limbo.clear"
	"statistics.py" -> max
	"warnings.py" -> filterwarnings
	"typing_extensions.py" -> "collections.defaultdict"
	"py_compile.py" -> FileExistsError
	"argparse.py" -> "formatter.start_section"
	"pathlib.py" -> "warnings.warn"
	"ssl.py" -> namedtuple
	"base64.py" -> _b32decode
	"templating.py" -> "app.create_global_jinja_loader"
	"conftest.py" -> init_db
	"subprocess.py" -> split
	"subprocess.py" -> "selector.register"
	"enum.py" -> "enumeration._member_map_.items"
	"glob.py" -> _iterdir
	"gzip.py" -> super
	"socket.py" -> gethostbyaddr
	"test_json_tag.py" -> isinstance
	"tokenize.py" -> tokenize
	"functools.py" -> object
	"datetime.py" -> "_time.struct_time"
	"traceback.py" -> _get_code_position
	"socket.py" -> sock_send
	"tempfile.py" -> "_os.path.expandvars"
	"plistlib.py" -> "self._getrefnum"
	"_weakrefset.py" -> "self.data.difference_update"
	"__init__.py" -> "cls._discover_resolvers"
	"datetime.py" -> fromordinal
	"_weakrefset.py" -> "self.data.clear"
	"platform.py" -> "result.extend"
	"feedparser.py" -> "self._partial.seek"
	"test_config.py" -> "monkeypatch.setenv"
	"parse.py" -> "bytes.fromhex"
	"dataclasses.py" -> _FIELD_BASE
	"tarfile.py" -> "numbytes.append"
	"_strptime.py" -> isoweekday
	"tempfile.py" -> "self._file.__iter__"
	"subprocess.py" -> "args.append"
	"inspect.py" -> findsource
	"test_logging.py" -> "logger.setLevel"
	"_strptime.py" -> "time.strftime"
	"inspect.py" -> "tokenize.generate_tokens"
	"weakref.py" -> WeakValueDictionary
	"enum.py" -> bool
	"cli.py" -> bool
	"lzma.py" -> ValueError
	"blueprints.py" -> "self.record"
	"test_request.py" -> "app.test_client"
	"tempfile.py" -> "self._file.writable"
	"rlcompleter.py" -> "self._callable_postfix"
	"plistlib.py" -> "self.get_data"
	"threading.py" -> "self._block._at_fork_reinit"
	"inspect.py" -> expandtabs
	"__init__.py" -> EntryPoints
	"typing_extensions.py" -> ParamSpecArgs
	"test_user_error_handler.py" -> ChildExceptionUnregistered
	"enum.py" -> hash
	"uuid.py" -> int_
	"test_helpers.py" -> write_text
	"scaffold.py" -> "import_name.partition"
	"tarfile.py" -> "fileobj.getcomptype"
	"weakref.py" -> _IterationGuard
	"app.py" -> "self.add_template_global"
	"inspect.py" -> "blockfinder.tokeneater"
	"ssl.py" -> "self._sslobj.cipher"
	"locale.py" -> items
	"zipfile.py" -> "posixpath.dirname"
	"traceback.py" -> next
	"pathlib.py" -> "self._from_parts"
	"pathlib.py" -> "io.text_encoding"
	"test_js_example.py" -> "pytest.mark.parametrize"
	"argparse.py" -> "option_string.startswith"
	"test_basic.py" -> "monkeypatch.setattr"
	"dis.py" -> items
	"shutil.py" -> "os.path.dirname"
	"selectors.py" -> _SelectorMapping
	"feedparser.py" -> "self._msgstack.pop"
	"socket.py" -> "os.set_inheritable"
	"datetime.py" -> "t.utcoffset"
	"test_config.py" -> "app.config.from_mapping"
	"tarfile.py" -> "target.truncate"
	"typing_extensions.py" -> "parameters.append"
	"base64.py" -> isinstance
	"inspect.py" -> "os.path.splitext"
	"pickle.py" -> bool
	"calendar.py" -> _prevmonth
	"uuid.py" -> getattr
	"tempfile.py" -> "_os.path.dirname"
	"test_signals.py" -> "flask.render_template"
	"test_json.py" -> "flask.json.dump"
	"functools.py" -> _c3_merge
	"inspect.py" -> _get_signature_of
	"plistlib.py" -> "valRefs.append"
	"inspect.py" -> split
	"datetime.py" -> timedelta
	"subprocess.py" -> "errpipe_data.split"
	"test_cli.py" -> "subgroup.command"
	"typing_route.py" -> "app.add_url_rule"
	"enum.py" -> _EnumDict
	"inspect.py" -> "processed.add"
	"_strptime.py" -> int
	"cli.py" -> "ctx.invoke"
	"pathlib.py" -> check_eloop
	"test_blueprints.py" -> "flask.Blueprint"
	"calendar.py" -> "self.itermonthdays"
	"types.py" -> _g
	"__init__.py" -> FileNotFoundError
	"test_json_tag.py" -> JSONTag
	"traceback.py" -> "sys._getframe"
	"test_templating.py" -> <unknown_function>
	"threading.py" -> "self.function"
	"__init__.py" -> "self.glob"
	"inspect.py" -> "args.append"
	"pathlib.py" -> "self.as_posix"
	"__init__.py" -> _simple_escaping_wrapper
	"argparse.py" -> "invocations.append"
	"test_reqctx.py" -> index
	"plistlib.py" -> "value.to_bytes"
	"tempfile.py" -> "file.close"
	"test_testing.py" -> len
	"warnings.py" -> simplefilter
	"helpers.py" -> _split_blueprint_path
	"__init__.py" -> "self.data.strip"
	"string.py" -> str
	"test_basic.py" -> "app.get"
	"shutil.py" -> "zipfile.ZipFile"
	"plistlib.py" -> _escape
	"tarfile.py" -> "tarfile.pax_headers.copy"
	"__init__.py" -> "celery_app.config_from_object"
	"test_js_example.py" -> "client.get"
	"types.py" -> isinstance
	"tracemalloc.py" -> TypeError
	"cli.py" -> group
	"uuid.py" -> "path_dirs.extend"
	"gzip.py" -> "fp.tell"
	"socket.py" -> "io.BufferedRWPair"
	"__init__.py" -> "re.compile"
	"pickle.py" -> func
	"fractions.py" -> cls
	"typing_extensions.py" -> _maybe_adjust_parameters
	"weakref.py" -> "self.copy"
	"test_cli.py" -> "self.expect_order"
	"inspect.py" -> RewriteSymbolics
	"traceback.py" -> "_seen.add"
	"subprocess.py" -> "fh.read"
	"parser.py" -> "self.parser.parsestr"
	"ast.py" -> _simple_enum
	"threading.py" -> "_dangling.add"
	"tempfile.py" -> TypeError
	"dataclasses.py" -> repr
	"typing.py" -> "name.rpartition"
	"inspect.py" -> "kwonlyargs.append"
	"test_blueprints.py" -> "app.url_map.add"
	"blueprints.py" -> "state.url_prefix.rstrip"
	"tarfile.py" -> "grp.getgrgid"
	"platform.py" -> dict
	"inspect.py" -> parse_name
	"contextlib.py" -> TypeError
	"app.py" -> url_func
	"shutil.py" -> "fdst.fileno"
	"parse.py" -> repr
	"test_blueprints.py" -> "values.setdefault"
	"string.py" -> "Template.__init_subclass__"
	"typing.py" -> "kwargs.items"
	"getopt.py" -> "opt.index"
	"test_auth.py" -> "auth.login"
	"__init__.py" -> finditer
	"enum.py" -> "self.fdel"
	"plistlib.py" -> "self._fp.read"
	"subprocess.py" -> "p2cwrite.Detach"
	"weakref.py" -> "ref.__new__"
	"pathlib.py" -> property
	"statistics.py" -> list
	"tarfile.py" -> zip
	"weakref.py" -> "info.weakref"
	"code.py" -> "self.write"
	"socket.py" -> "a.detach"
	"shutil.py" -> "dst.startswith"
	"testing.py" -> type
	"ast.py" -> "self.do_visit_try"
	"tarfile.py" -> "self.fileobj.close"
	"base64.py" -> "binascii.b2a_base64"
	"zipfile.py" -> "self._fileobj.write"
	"threading.py" -> sys_excepthook
	"locale.py" -> "encodings.aliases.aliases.get"
	"ipaddress.py" -> "to_merge.append"
	"test_testing.py" -> "pytest.raises"
	"app.py" -> set
	"pathlib.py" -> len
	"logging.py" -> "default_handler.setFormatter"
	"dis.py" -> _disassemble_bytes
	"pathlib.py" -> "self.__class__"
	"testing.py" -> "text_input.readline"
	"calendar.py" -> "spacing.join"
	"argparse.py" -> "kwargs.pop"
	"pickle.py" -> iter
	"test_basic.py" -> "flask.Blueprint"
	"dataclasses.py" -> user_function
	"datetime.py" -> _check_utc_offset
	"gzip.py" -> main
	"parse.py" -> "string.split"
	"argparse.py" -> "formatter.add_usage"
	"datetime.py" -> "self._tzstr"
	"weakref.py" -> f
	"plistlib.py" -> TypeError
	"enum.py" -> "cls._value2member_map_.setdefault"
	"contextlib.py" -> getattr
	"string.py" -> "self.vformat"
	"test_db.py" -> get_db
	"__init__.py" -> "self.manager._clear_cache"
	"cli.py" -> "os.path.dirname"
	"tarfile.py" -> "name.startswith"
	"tarfile.py" -> "self.buf.startswith"
	"ctx.py" -> getattr
	"__init__.py" -> "self.findCaller"
	"__init__.py" -> "root.info"
	"gzip.py" -> hasattr
	"shutil.py" -> "logger.info"
	"statistics.py" -> "math.isfinite"
	"__init__.py" -> "self.infos.values"
	"app.py" -> "self.ensure_sync"
	"test_async.py" -> "app.route"
	"statistics.py" -> "counts.values"
	"tarfile.py" -> "self.name.encode"
	"cli.py" -> "ctx.exit"
	"argparse.py" -> "parts.append"
	"__init__.py" -> "Pair.parse"
	"parse.py" -> bytes
	"__init__.py" -> "self.__class__.__new__"
	"threading.py" -> "self._set_tstate_lock"
	"argparse.py" -> <unknown_function>
	"zipfile.py" -> NotImplementedError
	"selectors.py" -> super
	"__init__.py" -> "match.group"
	"app.py" -> "server_name.partition"
	"copy.py" -> <unknown_function>
	"tempfile.py" -> "self._file.readinto1"
	"glob.py" -> "fnmatch.filter"
	"__init__.py" -> "msg.format"
	"test_basic.py" -> "values.setdefault"
	"plistlib.py" -> "int.from_bytes"
	"__init__.py" -> acquire
	"subprocess.py" -> "os.environ.get"
	"__init__.py" -> "self.logger.isEnabledFor"
	"_weakrefset.py" -> repr
	"ssl.py" -> "pem_cert_string.strip"
	"parser.py" -> "feedparser.close"
	"plistlib.py" -> getattr
	"inspect.py" -> Attribute
	"threading.py" -> "self.is_alive"
	"auth.py" -> "db.commit"
	"cli.py" -> interactive_hook
	"lzma.py" -> "self._check_can_read"
	"dataclasses.py" -> _set_qualname
	"ast.py" -> main
	"test_blueprints.py" -> dict
	"tempfile.py" -> join
	"linecache.py" -> getlines
	"gzip.py" -> memoryview
	"copyreg.py" -> "_extension_cache.clear"
	"test_views.py" -> "flask.Response"
	"base64.py" -> "s.rstrip"
	"subprocess.py" -> "stdin.fileno"
	"enum.py" -> "text.split"
	"__init__.py" -> RootLogger
	"enum.py" -> "last_values.sort"
	"test_cli.py" -> "app.register_blueprint"
	"weakref.py" -> "ref.__ne__"
	"__init__.py" -> "StreamHandler.__init__"
	"__init__.py" -> "root.warning"
	"argparse.py" -> "items.append"
	"shutil.py" -> "dst.endswith"
	"string.py" -> "ids.append"
	"subprocess.py" -> "self.stdin.close"
	"csv.py" -> str
	"shutil.py" -> _fastcopy_fcopyfile
	"parse.py" -> _Quoter
	"subprocess.py" -> "flag_opt_map.items"
	"lzma.py" -> "results.append"
	"argparse.py" -> "long_option_strings.append"
	"locale.py" -> "warnings.simplefilter"
	"tarfile.py" -> _StreamProxy
	"pickle.py" -> extend
	"tempfile.py" -> "self._file.readinto"
	"enum.py" -> "metacls._get_mixins_"
	"datetime.py" -> ord
	"types.py" -> _ag
	"gzip.py" -> "f.read"
	"tarfile.py" -> "parser.parse_args"
	"plistlib.py" -> "pieces.append"
	"pathlib.py" -> "name.upper"
	"enum.py" -> "redirect.__set_name__"
	"test_json_tag.py" -> "datetime.now"
	"tarfile.py" -> dict
	"test_reqctx.py" -> "warnings.filterwarnings"
	"parse.py" -> _splitnetloc
	"feedparser.py" -> "errors.StartBoundaryNotFoundDefect"
	"__init__.py" -> JSONDecodeError
	"zipfile.py" -> _dedupe
	"threading.py" -> _counter
	"ast.py" -> "cls._fields.index"
	"test_logging.py" -> "handler.setLevel"
	"_strptime.py" -> cls
	"dataclasses.py" -> "repr_running.add"
	"zipfile.py" -> "self._implied_dirs"
	"inspect.py" -> "ann.items"
	"test_signals.py" -> "flask.template_rendered.disconnect"
	"test_user_error_handler.py" -> KeyError
	"app.py" -> "os.path.isabs"
	"__init__.py" -> "self.data.expandtabs"
	"__init__.py" -> "self.data.isprintable"
	"zipfile.py" -> "fileobj.tell"
	"ssl.py" -> "_IntEnum._convert_"
	"shutil.py" -> max
	"test_instance_config.py" -> "pytest.raises"
	"__init__.py" -> "handlers.remove"
	"__init__.py" -> "posixpath.dirname"
	"test_blueprints.py" -> "bp.route"
	"tarfile.py" -> "struct.unpack_from"
	"pathlib.py" -> "os.listdir"
	"typing.py" -> frozenset
	"datetime.py" -> "self._to_microseconds"
	"blueprints.py" -> int
	"base64.py" -> "_B32_DECODE_DOCSTRING.format"
	"dataclasses.py" -> exec
	"threading.py" -> "self._release"
	"app.py" -> "self.get_send_file_max_age"
	"argparse.py" -> ValueError
	"sessions.py" -> isinstance
	"typing_extensions.py" -> "typing.TypeVarTuple"
	"tarfile.py" -> "stat.filemode"
	"calendar.py" -> "self.monthdatescalendar"
	"pickle.py" -> "state.items"
	"__init__.py" -> suppress
	"test_basic.py" -> dict
	"textwrap.py" -> "dict.fromkeys"
	"ast.py" -> "self._type_ignores.clear"
	"__init__.py" -> "f.filter"
	"test_converters.py" -> url_for
	"argparse.py" -> "self.formatter_class"
	"sync.py" -> ThreadPoolExecutor
	"datetime.py" -> hash
	"zipfile.py" -> "self.filename.encode"
	"app.py" -> "self.response_class.force_type"
	"inspect.py" -> "signature.split"
	"py_compile.py" -> "os.path.exists"
	"argparse.py" -> "_sys.exit"
	"linecache.py" -> "filename.startswith"
	"test_signals.py" -> "flask.before_render_template.connect"
	"testing.py" -> isinstance
	"statistics.py" -> Counter
	"ipaddress.py" -> split
	"glob.py" -> "magic_check_bytes.search"
	"tracemalloc.py" -> len
	"locale.py" -> ValueError
	"traceback.py" -> "linecache.getline"
	"subprocess.py" -> "exception_name.decode"
	"contextlib.py" -> type
	"enum.py" -> "checked_enum._member_map_.keys"
	"tarfile.py" -> "self.create_ustar_header"
	"socket.py" -> "sock.bind"
	"parse.py" -> isalpha
	"__init__.py" -> all
	"typing.py" -> _CallableGenericAlias
	"test_testing.py" -> decode
	"test_basic.py" -> "gc.disable"
	"calendar.py" -> "sys.exit"
	"inspect.py" -> "parameters.pop"
	"enum.py" -> "self.__class__.__module__.split"
	"hashlib.py" -> globals
	"ast.py" -> _raise_malformed_node
	"parse.py" -> "_ALWAYS_SAFE.union"
	"__init__.py" -> "self.data.isdecimal"
	"platform.py" -> OSError
	"ipaddress.py" -> list
	"argparse.py" -> "self._get_optional_kwargs"
	"socket.py" -> "addrlist.append"
	"threading.py" -> "self._lock._at_fork_reinit"
	"sessions.py" -> "keys.extend"
	"test_testing.py" -> EnvironBuilder
	"ast.py" -> map
	"random.py" -> _sqrt
	"tarfile.py" -> "parser.add_argument"
	"ipaddress.py" -> "obj._get_address_key"
	"__init__.py" -> "self.data.remove"
	"getopt.py" -> "unique_match.endswith"
	"test_user_error_handler.py" -> type
	"helpers.py" -> "flashes.append"
	"argparse.py" -> type
	"ctx.py" -> "self.__class__"
	"argparse.py" -> "kwargs.setdefault"
	"ssl.py" -> "self._sslobj.read"
	"tempfile.py" -> FileExistsError
	"typing.py" -> enumerate
	"functools.py" -> format
	"tracemalloc.py" -> reversed
	"zipfile.py" -> "filename.find"
	"typing.py" -> compile
	"cli.py" -> setdefault
	"glob.py" -> "os.path.join"
	"functools.py" -> cache_len
	"argparse.py" -> "file.write"
	"helpers.py" -> hasattr
	"tokenize.py" -> TextIOWrapper
	"argparse.py" -> "inserts.pop"
	"csv.py" -> "re.escape"
	"functools.py" -> _HashedSeq
	"test_reqctx.py" -> "ctx.push"
	"py_compile.py" -> "os.path.isfile"
	"inspect.py" -> ClassFoundException
	"__init__.py" -> self_get
	"statistics.py" -> "minus.as_integer_ratio"
	"__init__.py" -> "Sectioned.section_pairs"
	"zipfile.py" -> "self._fileobj.seek"
	"tarfile.py" -> "self._init_write_gz"
	"pickle.py" -> pack
	"argparse.py" -> "action.help.strip"
	"inspect.py" -> "self.arguments.items"
	"statistics.py" -> float
	"inspect.py" -> iskeyword
	"csv.py" -> "self.writer.writerows"
	"tarfile.py" -> "self._handle_nonfatal_error"
	"platform.py" -> TypeError
	"pickle.py" -> "self.file_read"
	"__init__.py" -> "self.data.isidentifier"
	"gzip.py" -> id
	"locale.py" -> replace
	"uuid.py" -> isinstance
	"zipfile.py" -> "self._sanitize_windows_name"
	"ssl.py" -> accept
	"selectors.py" -> "self._writers.add"
	"parse.py" -> "host.rpartition"
	"string.py" -> "mo.start"
	"socket.py" -> error
	"warnings.py" -> "tracemalloc.is_tracing"
	"selectors.py" -> hasattr
	"tarfile.py" -> "self._decode_pax_field"
	"gzip.py" -> "self.fileobj.fileno"
	"fnmatch.py" -> join
	"test_async.py" -> "async_app.test_client"
	"testing.py" -> EnvironBuilder
	"tempfile.py" -> "_os.write"
	"rlcompleter.py" -> Completer
	"__init__.py" -> "copyreg.pickle"
	"test_blueprints.py" -> "blue.errorhandler"
	"typing.py" -> min
	"subprocess.py" -> _fork_exec
	"cli.py" -> max
	"enum.py" -> "cls._create_"
	"test_blueprints.py" -> "bp2.get"
	"shutil.py" -> "fsrc.fileno"
	"test_basic.py" -> nullcontext
	"locale.py" -> "localename.lower"
	"__init__.py" -> import_module
	"tracemalloc.py" -> "self._group_by"
	"threading.py" -> "warnings.warn"
	"pickle.py" -> _Stop
	"inspect.py" -> "Signature.from_callable"
	"inspect.py" -> predicate
	"ctx.py" -> "session_interface.open_session"
	"platform.py" -> getattr
	"tokenize.py" -> any
	"cli.py" -> attr
	"pathlib.py" -> expanduser
	"tarfile.py" -> "targetpath.replace"
	"statistics.py" -> _float_sqrt_of_frac
	"ctx.py" -> "self._cv_tokens.pop"
	"subprocess.py" -> issubclass
	"operator.py" -> tuple
	"weakref.py" -> "kwargs.items"
	"subprocess.py" -> CalledProcessError
	"tarfile.py" -> "self.get_info"
	"string.py" -> "_string.formatter_parser"
	"zipfile.py" -> "arcname.translate"
	"shutil.py" -> chmod_func
	"test_user_error_handler.py" -> ForbiddenSubclassUnregistered
	"ssl.py" -> "base64.decodebytes"
	"test_testing.py" -> str
	"base64.py" -> "b.endswith"
	"parser.py" -> "self.parse"
	"tarfile.py" -> "sys.getfilesystemencoding"
	"fractions.py" -> bool
	"typing_extensions.py" -> "optional_keys.add"
	"enum.py" -> set
	"test_testing.py" -> "importlib.metadata.version"
	"tag.py" -> iter
	"threading.py" -> "self.wait"
	"inspect.py" -> getabsfile
	"sessions.py" -> "self.get_cookie_httponly"
	"zipfile.py" -> "result.append"
	"pickle.py" -> "f.tell"
	"typing_extensions.py" -> _allow_reckless_class_checks
	"shutil.py" -> list
	"typing_extensions.py" -> "f_globals.get"
	"tarfile.py" -> "os.write"
	"typing_extensions.py" -> "typing._alias"
	"socket.py" -> "exceptions.clear"
	"fractions.py" -> hash
	"__init__.py" -> "self.data.rsplit"
	"__init__.py" -> unescape
	"argparse.py" -> sorted
	"bz2.py" -> "self._buffer.read1"
	"tokenize.py" -> "pseudomatch.span"
	"threading.py" -> "functools.partial"
	"parse.py" -> "scheme.replace"
	"gzip.py" -> "parser.parse_args"
	"test_helpers.py" -> "app.add_url_rule"
	"test_instance_config.py" -> purge_module
	"inspect.py" -> lstrip
	"feedparser.py" -> "self._input.close"
	"shutil.py" -> _basename
	"inspect.py" -> _main
	"pickle.py" -> PicklingError
	"typing_extensions.py" -> dict
	"tag.py" -> "self.untag"
	"textwrap.py" -> patsearch
	"gzip.py" -> "struct.unpack"
	"copyreg.py" -> pickle
	"feedparser.py" -> "errors.MultipartInvariantViolationDefect"
	"tarfile.py" -> OSError
	"tarfile.py" -> "obj.isdir"
	"dataclasses.py" -> fields
	"locale.py" -> sorted
	"test_subclassing.py" -> get
	"test_basic.py" -> "values.pop"
	"blueprints.py" -> "bp_dict.items"
	"socket.py" -> "os._get_exports_list"
	"getopt.py" -> "Exception.__init__"
	"tempfile.py" -> "self._file.flush"
	"types.py" -> "self.__wrapped.close"
	"tracemalloc.py" -> isinstance
	"tarfile.py" -> "shutil.copyfileobj"
	"tarfile.py" -> "args.create.pop"
	"statistics.py" -> gauss
	"shlex.py" -> "os.path.dirname"
	"pickle.py" -> set
	"dis.py" -> sorted
	"pathlib.py" -> S_ISDIR
	"cli.py" -> CertParamType
	"app.py" -> asgiref_async_to_sync
	"shlex.py" -> "self.instream.close"
	"platform.py" -> _sys_version
	"typing.py" -> _type_repr
	"ipaddress.py" -> bit_length
	"datetime.py" -> "self._mktime"
	"test_signals.py" -> "flask.message_flashed.connect"
	"glob.py" -> "re.compile"
	"app.py" -> "handler_map.get"
	"ipaddress.py" -> IPv4Interface
	"inspect.py" -> "specs.append"
	"contextlib.py" -> isinstance
	"typing.py" -> dir
	"hashlib.py" -> digest
	"__init__.py" -> "self.__class__.__missing__"
	"inspect.py" -> "line.expandtabs"
	"tarfile.py" -> exception
	"functools.py" -> map
	"zipfile.py" -> "arcname.split"
	"fnmatch.py" -> len
	"dis.py" -> _disassemble_recursive
	"tempfile.py" -> classmethod
	"__init__.py" -> _dedupe
	"inspect.py" -> issubclass
	"calendar.py" -> "sys.getdefaultencoding"
	"contextlib.py" -> classmethod
	"blueprints.py" -> "bp_options.copy"
	"statistics.py" -> hypot
	"test_user_error_handler.py" -> isinstance
	"threading.py" -> "self._started.set"
	"tarfile.py" -> TypeError
	"pickle.py" -> "obj.items"
	"tarfile.py" -> "obj._proc_member"
	"pickle.py" -> "x.bit_length"
	"__init__.py" -> "self._implied_dirs"
	"tarfile.py" -> "stat.S_ISREG"
	"ast.py" -> dict
	"pickle.py" -> "self.pop_mark"
	"socket.py" -> set
	"__init__.py" -> "section.partition"
	"ast.py" -> "possible_quotes.sort"
	"ast.py" -> "self.get_precedence"
	"__init__.py" -> "value.__html__"
	"zipfile.py" -> list
	"dataclasses.py" -> "match.group"
	"lzma.py" -> "io.TextIOWrapper"
	"test_basic.py" -> "rv.headers.getlist"
	"random.py" -> min
	"glob.py" -> _glob0
	"dataclasses.py" -> _MISSING_TYPE
	"plistlib.py" -> isinstance
	"argparse.py" -> "arg_strings.append"
	"typing_extensions.py" -> _is_unpack
	"cli.py" -> "code.interact"
	"__init__.py" -> "self.formatTime"
	"gzip.py" -> "parser.add_argument"
	"test_blueprints.py" -> "app.errorhandler"
	"typing.py" -> _deduplicate
	"test_user_error_handler.py" -> ParentException
	"sync.py" -> "self.deadlock_context.set"
	"test_templating.py" -> "app.template_test"
	"test_basic.py" -> "c.get"
	"inspect.py" -> "sys.exc_info"
	"tokenize.py" -> "buffer.seek"
	"platform.py" -> "os.readlink"
	"__init__.py" -> "base.rpartition"
	"pickle.py" -> encode
	"test_views.py" -> "Index1.as_view"
	"enum.py" -> split
	"copy.py" -> append
	"inspect.py" -> "name.isidentifier"
	"locale.py" -> "norm_encoding.lower"
	"dataclasses.py" -> bool
	"test_basic.py" -> TypeError
	"statistics.py" -> LinearRegression
	"tarfile.py" -> getattr
	"app.py" -> "url_adapter.build"
	"__init__.py" -> "self.data.encode"
	"parse.py" -> bool
	"dataclasses.py" -> "itertools.chain.from_iterable"
	"sessions.py" -> "datetime.now"
	"__init__.py" -> "zipfile.ZipInfo"
	"uuid.py" -> str
	"typing.py" -> values
	"typing_extensions.py" -> "functools.reduce"
	"warnings.py" -> "filters.remove"
	"cli.py" -> list
	"__init__.py" -> "state.copy"
	"random.py" -> _floor
	"tokenize.py" -> "self.add_whitespace"
	"ssl.py" -> "dn.lower"
	"typing.py" -> "required_keys.update"
	"operator.py" -> partial
	"subprocess.py" -> "self.stdout_thread.start"
	"typing.py" -> _UnionGenericAlias
	"tarfile.py" -> "t.append"
	"parse.py" -> "url.find"
	"testing.py" -> get_request
	"scaffold.py" -> "os.path.abspath"
	"base64.py" -> decoded_append
	"typing.py" -> _make_nmtuple
	"tarfile.py" -> "self.utime"
	"__init__.py" -> "Prepared.legacy_normalize"
	"gzip.py" -> "self.file.read"
	"__init__.py" -> "h.release"
	"py_compile.py" -> "loader.path_stats"
	"test_json.py" -> "out.seek"
	"scaffold.py" -> "self._method_route"
	"inspect.py" -> __new__
	"test_json_tag.py" -> Markup
	"threading.py" -> len
	"dis.py" -> "x.__dict__.items"
	"testing.py" -> "self._input.readline"
	"__init__.py" -> "root.error"
	"locale.py" -> getdefaultlocale
	"shutil.py" -> _find_unpack_format
	"parse.py" -> "resolved_path.pop"
	"tempfile.py" -> "_os.path.abspath"
	"locale.py" -> "new_val.append"
	"tarfile.py" -> CompressionError
	"tokenize.py" -> _all_string_prefixes
	"csv.py" -> "metaFrequency.get"
	"ast.py" -> "parser.add_argument"
	"db.py" -> "click.echo"
	"test_basic.py" -> getattr
	"views.py" -> AsyncResult
	"__init__.py" -> "re.findall"
	"sync.py" -> "threading.local"
	"sync.py" -> iscoroutinefunction
	"helpers.py" -> "out.extend"
	"dataclasses.py" -> func
	"random.py" -> "_os.register_at_fork"
	"test_factory.py" -> create_app
	"tarfile.py" -> copyfileobj
	"tokenize.py" -> "parser.parse_args"
	"debughelpers.py" -> _dump_loader_info
	"operator.py" -> obj
	"random.py" -> _acos
	"__init__.py" -> "self.lookup"
	"zipfile.py" -> "self._fpclose"
	"__init__.py" -> copy
	"calendar.py" -> LocaleHTMLCalendar
	"threading.py" -> reversed
	"ssl.py" -> "minimum_version.__set__"
	"threading.py" -> "self._cond.wait"
	"uuid.py" -> getnode
	"testing.py" -> "io.BytesIO"
	"textwrap.py" -> join
	"tokenize.py" -> "indents.pop"
	"rlcompleter.py" -> "words.add"
	"scaffold.py" -> ValueError
	"sync.py" -> "loop.run_until_complete"
	"traceback.py" -> format
	"test_json.py" -> super
	"argparse.py" -> "group_actions.add"
	"pickle.py" -> "__all__.append"
	"test_blueprints.py" -> "bp.app_template_test"
	"cli.py" -> "click.BadParameter"
	"test_basic.py" -> "app.errorhandler"
	"plistlib.py" -> "binascii.b2a_base64"
	"test_basic.py" -> lower
	"argparse.py" -> "self._ChoicesPseudoAction"
	"__init__.py" -> "self.format"
	"__init__.py" -> "self.zip_children"
	"ctx.py" -> "self.__dict__.setdefault"
	"sessions.py" -> "self.get_signing_serializer"
	"typing.py" -> "new_params.append"
	"plistlib.py" -> "self._objlist.append"
	"app.py" -> "options.setdefault"
	"selectors.py" -> "selector_obj.close"
	"test_cli.py" -> FlaskGroup
	"__init__.py" -> "self.logger.setLevel"
	"__init__.py" -> "kwargs.keys"
	"warnings.py" -> "mod.match"
	"__init__.py" -> "self._open"
	"typing_extensions.py" -> "self._raise_attribute_error"
	"argparse.py" -> "self._expand_help"
	"test_user_error_handler.py" -> "self.report_error"
	"pathlib.py" -> "name.split"
	"zipfile.py" -> _check_compression
	"datetime.py" -> _isoweek1monday
	"shutil.py" -> _fastcopy_sendfile
	"tempfile.py" -> "self._file.readable"
	"threading.py" -> "self.finished.wait"
	"pathlib.py" -> memoryview
	"copyreg.py" -> getstate
	"zipfile.py" -> "directory_name.endswith"
	"typing.py" -> _type_check
	"shutil.py" -> "os.environ.get"
	"tempfile.py" -> TemporaryFile
	"tracemalloc.py" -> str
	"csv.py" -> "self.sniff"
	"inspect.py" -> _signature_from_builtin
	"test_basic.py" -> weak
	"typing_extensions.py" -> "abc.ABCMeta.__eq__"
	"test_views.py" -> "c.put"
	"feedparser.py" -> "self.policy.header_source_parse"
	"test_regression.py" -> "app.route"
	"tarfile.py" -> "os.mknod"
	"subprocess.py" -> _WSTOPSIG
	"tarfile.py" -> "self.tarinfo.create_pax_global_header"
	"__init__.py" -> "_levelToName.get"
	"test_regression.py" -> "flask.abort"
	"scaffold.py" -> type
	"platform.py" -> "os.path.islink"
	"__init__.py" -> "self.data.isupper"
	"hashlib.py" -> set
	"typing.py" -> "self._determine_new_args"
	"gzip.py" -> OSError
	"enum.py" -> "classdict.pop"
	"socket.py" -> "__all__.append"
	"ast.py" -> "_const_node_type_names.get"
	"plistlib.py" -> "header.startswith"
	"__init__.py" -> cast
	"app.py" -> "required_methods.add"
	"typing.py" -> copy_with
	"calendar.py" -> max
	"calendar.py" -> IllegalMonthError
	"base64.py" -> b64decode
	"csv.py" -> "re.compile"
	"tempfile.py" -> "self._closer.close"
	"__init__.py" -> AttributeError
	"ssl.py" -> "self._sslobj.do_handshake"
	"test_helpers.py" -> generate
	"testing.py" -> rstrip
	"__init__.py" -> _proxy
	"uuid.py" -> "io.BytesIO"
	"app.py" -> "t.cast"
	"csv.py" -> min
	"functools.py" -> dict
	"pickle.py" -> dump
	"uuid.py" -> "os.pathsep.join"
	"tarfile.py" -> "os.readlink"
	"test_signals.py" -> "flask.message_flashed.disconnect"
	"zipfile.py" -> "fileobj.seekable"
	"sync.py" -> TypeError
	"ssl.py" -> DefaultVerifyPaths
	"datetime.py" -> datetime
	"test_blueprints.py" -> "app.jinja_env.list_templates"
	"test_blog.py" -> "auth.login"
	"app.py" -> len
	"db.py" -> init_db
	"enum.py" -> "classdict.update"
	"inspect.py" -> "self.visit"
	"templating.py" -> "loader.get_source"
	"dis.py" -> Instruction
	"scaffold.py" -> "os.path.basename"
	"ssl.py" -> "_socket.inet_pton"
	"scaffold.py" -> "self._check_setup_finished"
	"traceback.py" -> "frame_summary.line.strip"
	"conf.py" -> set_classes
	"testing.py" -> "os.getcwd"
	"calendar.py" -> print
	"ssl.py" -> "_SSLContext.__new__"
	"typing.py" -> "attrs.add"
	"inspect.py" -> _get_code_position_from_tb
	"test_testing.py" -> "flask.Flask"
	"__init__.py" -> "_default_encoder.iterencode"
	"warnings.py" -> "message.format"
	"locale.py" -> "groups.append"
	"test_json.py" -> "flask.render_template_string"
	"sessions.py" -> "self.get"
	"typing_extensions.py" -> TypeError
	"pathlib.py" -> "self._select_from"
	"tempfile.py" -> "self.file.__enter__"
	"socket.py" -> getaddrinfo
	"test_signals.py" -> get
	"codeop.py" -> compile
	"conftest.py" -> set
	"typing.py" -> "res.append"
	"inspect.py" -> formatvarkw
	"bisect.py" -> ValueError
	"__init__.py" -> "other._key"
	"pathlib.py" -> RuntimeError
	"conf.py" -> reference
	"cli.py" -> parse_args
	"feedparser.py" -> "data.decode"
	"enum.py" -> "missing_names.append"
	"tracemalloc.py" -> "Sequence.__init__"
	"tracemalloc.py" -> "statistics.sort"
	"pathlib.py" -> stat
	"test_testing.py" -> "rv.get_json"
	"rlcompleter.py" -> "re.match"
	"dataclasses.py" -> dict_factory
	"calendar.py" -> "cal.formatyearpage"
	"sync.py" -> "warnings.warn"
	"test_testing.py" -> "app.register_blueprint"
	"signal.py" -> "_signal.sigwait"
	"warnings.py" -> __import__
	"socket.py" -> "self._checkWritable"
	"tracemalloc.py" -> "os.path.normcase"
	"tarfile.py" -> callable
	"inspect.py" -> _signature_get_partial
	"parse.py" -> "_portprog.fullmatch"
	"string.py" -> "self.get_value"
	"uuid.py" -> _is_universal
	"sync.py" -> getattr
	"typing.py" -> NotImplementedError
	"locale.py" -> int
	"config.py" -> __init__
	"shlex.py" -> print
	"pickle.py" -> unpack
	"tempfile.py" -> "_os.fsencode"
	"parse.py" -> "hostname.lower"
	"tarfile.py" -> "arcname.lstrip"
	"feedparser.py" -> "self._input.push"
	"typing_route.py" -> "RenderTemplateView.as_view"
	"pathlib.py" -> "self.lstat"
	"uuid.py" -> rstrip
	"__init__.py" -> _ancestry
	"pathlib.py" -> "part.replace"
	"parser.py" -> "BytesParser.parsebytes"
	"parse.py" -> "hostname.partition"
	"fnmatch.py" -> fnmatchcase
	"ssl.py" -> connect
	"tarfile.py" -> reversed
	"typing_extensions.py" -> "warnings.warn"
	"test_basic.py" -> type
	"locale.py" -> abs
	"zipfile.py" -> "io.TextIOWrapper"
	"sync.py" -> AsyncToSync
	"typing.py" -> get_origin
	"test_config.py" -> "app.config.from_envvar"
	"dataclasses.py" -> "abc.update_abstractmethods"
	"typing_extensions.py" -> getattr
	"socket.py" -> "csock.close"
	"__init__.py" -> Celery
	"typing.py" -> "new_args.append"
	"zipfile.py" -> "filename.replace"
	"__init__.py" -> "self.data.zfill"
	"feedparser.py" -> "self.readline"
	"shutil.py" -> "os.fsencode"
	"test_basic.py" -> "kwargs.get"
	"tempfile.py" -> "_shutil.rmtree"
	"ipaddress.py" -> IPv6Interface
	"auth.py" -> render_template
	"feedparser.py" -> object
	"zipfile.py" -> joinpath
	"shutil.py" -> "srcentry.is_dir"
	"zipfile.py" -> _Tellable
	"ast.py" -> TypeError
	"__init__.py" -> list
	"argparse.py" -> "arg_string.split"
	"csv.py" -> items
	"locale.py" -> "code.index"
	"subprocess.py" -> "err_msg.decode"
	"test_blueprints.py" -> "backend.errorhandler"
	"test_basic.py" -> "self.app"
	"types.py" -> "self.fset"
	"tempfile.py" -> "self._check"
	"helpers.py" -> filter
	"subprocess.py" -> "_winapi.CreateProcess"
	"functools.py" -> "format_string.format"
	"sessions.py" -> "self.get_expiration_time"
	"threading.py" -> "self._release_save"
	"plistlib.py" -> "fp.read"
	"__init__.py" -> Flask
	"feedparser.py" -> "self._partial.write"
	"code.py" -> "traceback.format_exception"
	"inspect.py" -> _static_getmro
	"__init__.py" -> bstartswith
	"__init__.py" -> "copy.copy"
	"argparse.py" -> "parser._get_formatter"
	"pickle.py" -> "self.read"
	"ssl.py" -> "context._wrap_bio"
	"typing_extensions.py" -> "functools.partial"
	"textwrap.py" -> "text.strip"
	"traceback.py" -> normalize
	"locale.py" -> atof
	"sync.py" -> "loop_future.result"
	"__init__.py" -> "self.converter"
	"app.py" -> _endpoint_from_view_func
	"shutil.py" -> "ignored_names.extend"
	"enum.py" -> "metacls._find_new_"
	"feedparser.py" -> "line.startswith"
	"scaffold.py" -> "self.register_error_handler"
	"shutil.py" -> "posix._fcopyfile"
	"__init__.py" -> tuple
	"argparse.py" -> repr
	"ast.py" -> "warnings.warn"
	"typing_extensions.py" -> join
	"provider.py" -> http_date
	"__init__.py" -> "self.eggs.values"
	"inspect.py" -> _signature_is_builtin
	"test_basic.py" -> "pytest.raises"
	"ast.py" -> getattr
	"__init__.py" -> "params.values"
	"ssl.py" -> "certs.extend"
	"traceback.py" -> "_ctx.emit"
	"__init__.py" -> _starmap
	"app.py" -> "self.handle_http_exception"
	"datetime.py" -> "tstr.find"
	"shutil.py" -> _stat
	"calendar.py" -> "self.formatmonth"
	"tarfile.py" -> "offsets.append"
	"typing_extensions.py" -> _ExtensionsSpecialForm
	"parser.py" -> "Parser.parsestr"
	"locale.py" -> repr
	"__init__.py" -> "self.filters.remove"
	"glob.py" -> _lexists
	"string.py" -> "field_name.isdigit"
	"calendar.py" -> list
	"inspect.py" -> "os.path.exists"
	"dis.py" -> repr
	"tarfile.py" -> "self._posix_split_name"
	"dataclasses.py" -> _HAS_DEFAULT_FACTORY_CLASS
	"fnmatch.py" -> str
	"dis.py" -> _format_code_info
	"lzma.py" -> "comp.compress"
	"test_blueprints.py" -> isinstance
	"zipfile.py" -> "self._fileobj.read"
	"socket.py" -> seekable
	"helpers.py" -> "_cv_request.get"
	"ipaddress.py" -> "self._split_scope_id"
	"typing_extensions.py" -> _set_default
	"datetime.py" -> _days_in_month
	"argparse.py" -> "action.container._remove_action"
	"test_templating.py" -> "app.add_template_test"
	"zipfile.py" -> _EndRecData64
	"plistlib.py" -> update
	"threading.py" -> "self.finished.set"
	"shutil.py" -> _rmtree_safe_fd
	"datetime.py" -> "args.append"
	"feedparser.py" -> _factory
	"ssl.py" -> timegm
	"test_templating.py" -> "data.splitlines"
	"test_templating.py" -> "app.template_global"
	"zipfile.py" -> _ZipDecrypter
	"contextlib.py" -> "self._create_async_exit_wrapper"
	"subprocess.py" -> "startupinfo.copy"
	"views.py" -> "key.upper"
	"tarfile.py" -> "os.listdir"
	"weakref.py" -> "itertools.count"
	"ast.py" -> _fix
	"pickle.py" -> "argparse.ArgumentParser"
	"testing.py" -> "ctx.request.host.partition"
	"rlcompleter.py" -> set
	"string.py" -> "self.format_field"
	"ipaddress.py" -> "octet_str.isdigit"
	"tarfile.py" -> "parser.format_help"
	"zipfile.py" -> "os.path.splitdrive"
	"functools.py" -> _find_impl
	"cli.py" -> get_load_dotenv
	"random.py" -> NotImplementedError
	"views.py" -> "bp.post"
	"parse.py" -> _decode_args
	"locale.py" -> "code.split"
	"test_reqctx.py" -> "pytest.raises"
	"scaffold.py" -> append
	"socket.py" -> "aliases.insert"
	"subprocess.py" -> hasattr
	"random.py" -> "cum_counts.pop"
	"random.py" -> selected_add
	"app.py" -> chain
	"ast.py" -> join
	"subprocess.py" -> "os.strerror"
	"test_blueprints.py" -> append
	"app.py" -> get_debug_flag
	"traceback.py" -> set
	"tarfile.py" -> isinstance
	"argparse.py" -> "self.error"
	"tracemalloc.py" -> RuntimeError
	"gzip.py" -> "self._add_read_data"
	"tasks.py" -> shared_task
	"__init__.py" -> "self._read_egg_info_reqs"
	"conf.py" -> get_version
	"enum.py" -> "mcls._find_data_type_"
	"app.py" -> "self.request_context"
	"traceback.py" -> _walk_tb_with_full_positions
	"warnings.py" -> lower
	"subprocess.py" -> _warn
	"signal.py" -> "_signal.pthread_sigmask"
	"typing.py" -> "annotations.update"
	"random.py" -> "a.decode"
	"__init__.py" -> int
	"ast.py" -> "self._write_str_avoiding_backslashes"
	"pathlib.py" -> "part.lstrip"
	"testing.py" -> "cli.main"
	"locale.py" -> "warnings.catch_warnings"
	"contextlib.py" -> typ
	"locale.py" -> "k.replace"
	"sync.py" -> callable
	"rlcompleter.py" -> "self.attr_matches"
	"test_regression.py" -> "flask.redirect"
	"argparse.py" -> "self._format_action"
	"app.py" -> "endpoint.rpartition"
	"datetime.py" -> _check_tzinfo_arg
	"statistics.py" -> "root.as_integer_ratio"
	"zipfile.py" -> "struct.calcsize"
	"zipfile.py" -> "self._init_decrypter"
	"enum.py" -> __init__
	"subprocess.py" -> memoryview
	"cli.py" -> __init__
	"platform.py" -> "collections.namedtuple"
	"test_views.py" -> "app.test_client"
	"pathlib.py" -> range
	"pathlib.py" -> "os.path.expanduser"
	"zipfile.py" -> "os.mkdir"
	"threading.py" -> str
	"platform.py" -> str
	"test_basic.py" -> isinstance
	"typing_extensions.py" -> len
	"__init__.py" -> _logRecordFactory
	"cli.py" -> "re.split"
	"zipfile.py" -> "self._writecheck"
	"warnings.py" -> join
	"textwrap.py" -> "cur_line.append"
	"shutil.py" -> _is_immutable
	"test_basic.py" -> "app.json.loads"
	"tracemalloc.py" -> open
	"zipfile.py" -> "self.tell"
	"threading.py" -> "self._block.acquire"
	"__init__.py" -> "logger.warning"
	"tempfile.py" -> _get_candidate_names
	"typing_extensions.py" -> callable
	"functools.py" -> TypeError
	"argparse.py" -> "self._option_string_actions.pop"
	"plistlib.py" -> "self.write_dict"
	"socket.py" -> file_read
	"app.py" -> "self.dispatch_request"
	"getopt.py" -> "o.startswith"
	"sessions.py" -> URLSafeTimedSerializer
	"dis.py" -> cls
	"test_json.py" -> strftime
	"test_testing.py" -> "app.cli.command"
	"cli.py" -> lstrip
	"typing_extensions.py" -> get_args
	"argparse.py" -> "self._add_item"
	"config.py" -> "types.ModuleType"
	"uuid.py" -> "random.getrandbits"
	"inspect.py" -> hasattr
	"gzip.py" -> "os.path.basename"
	"debughelpers.py" -> with_traceback
	"typing_extensions.py" -> "functools.wraps"
	"tarfile.py" -> decode
	"__init__.py" -> Counter
	"pathlib.py" -> "self.splitroot"
	"linecache.py" -> <unknown_function>
	"__init__.py" -> _is_internal_frame
	"fnmatch.py" -> "re.escape"
	"subprocess.py" -> "warnopts.remove"
	"__init__.py" -> "self.data.insert"
	"tempfile.py" -> "_once_lock.release"
	"testing.py" -> "self._echo"
	"sessions.py" -> staticmethod
	"provider.py" -> "dataclasses.is_dataclass"
	"socket.py" -> "io.text_encoding"
	"ipaddress.py" -> summarize_address_range
	"test_logging.py" -> "wsgi_errors_stream._get_current_object"
	"enum.py" -> "self._name_.split"
	"parse.py" -> urlsplit
	"app.py" -> super
	"test_session_interface.py" -> "app.test_client"
	"getopt.py" -> type
	"tarfile.py" -> "self.fileobj.write"
	"gzip.py" -> "decompressed_members.append"
	"__init__.py" -> "self.handlers.append"
	"tarfile.py" -> "os.open"
	"threading.py" -> _enumerate
	"pathlib.py" -> "self.parent.stat"
	"inspect.py" -> _finddoc
	"subprocess.py" -> CloseHandle
	"enum.py" -> "cls.__dict__.get"
	"tracemalloc.py" -> "old_group.items"
	"argparse.py" -> "action.dest.upper"
	"app.py" -> find_package
	"test_helpers.py" -> "flask.url_for"
	"weakref.py" -> <unknown_function>
	"functools.py" -> getattr
	"pickle.py" -> "self.append"
	"platform.py" -> java_ver
	"ast.py" -> len
	"typing.py" -> _caller
	"traceback.py" -> "linecache.lazycache"
	"ast.py" -> "self.__class__"
	"tarfile.py" -> "self._handle_fatal_error"
	"blueprints.py" -> "self._merge_blueprint_funcs"
	"enum.py" -> issubclass
	"threading.py" -> "self.release"
	"dis.py" -> _disassemble_str
	"threading.py" -> "self._enter"
	"db.py" -> "db.executescript"
	"sessions.py" -> "self.get_cookie_name"
	"inspect.py" -> "file.endswith"
	"typing.py" -> _is_param_expr
	"base64.py" -> curr_append
	"tempfile.py" -> "newfile.seek"
	"inspect.py" -> isbuiltin
	"views.py" -> "tasks.block.delay"
	"__init__.py" -> float
	"base64.py" -> "input.read"
	"parse.py" -> "userinfo.partition"
	"blueprints.py" -> extend
	"pathlib.py" -> "self.parent.mkdir"
	"shlex.py" -> "self.wordchars.maketrans"
	"ast.py" -> iter_fields
	"dataclasses.py" -> "obj.items"
	"plistlib.py" -> _date_to_string
	"__init__.py" -> "self.data.startswith"
	"contextlib.py" -> _fix_exception_context
	"fractions.py" -> complex
	"__init__.py" -> next
	"inspect.py" -> "self.stack.append"
	"__init__.py" -> "self.lock._at_fork_reinit"
	"templating.py" -> "app.jinja_env.from_string"
	"tracemalloc.py" -> _compare_grouped_stats
	"textwrap.py" -> prefixed_lines
	"test_blueprints.py" -> "forbidden_bp.route"
	"traceback.py" -> "tb.tb_frame.clear"
	"selectors.py" -> "self._readers.discard"
	"cli.py" -> "dotenv.find_dotenv"
	"selectors.py" -> selector
	"typing_route.py" -> stream_template
	"enum.py" -> "checked_member_dict.keys"
	"selectors.py" -> _can_use
	"traceback.py" -> _ExceptionPrintContext
	"ssl.py" -> callback
	"test_db.py" -> "monkeypatch.setattr"
	"pickle.py" -> issubclass
	"inspect.py" -> "func.__qualname__.split"
	"datetime.py" -> "date.fromordinal"
	"tarfile.py" -> "fileobj.fileno"
	"__init__.py" -> "_parser.parse"
	"tokenize.py" -> "initial.isidentifier"
	"platform.py" -> "m.end"
	"rlcompleter.py" -> "m.group"
	"functools.py" -> join
	"rlcompleter.py" -> "nspace.items"
	"warnings.py" -> len
	"linecache.py" -> "cache.keys"
	"uuid.py" -> sha1
	"enum.py" -> "interesting.discard"
	"test_json_tag.py" -> replace
	"parse.py" -> "match.groups"
	"ipaddress.py" -> "IPv6Address.__lt__"
	"cli.py" -> load_app
	"argparse.py" -> "self.add_argument"
	"textwrap.py" -> "_leading_whitespace_re.findall"
	"tarfile.py" -> "os.major"
	"test_blueprints.py" -> "rv.data.strip"
	"warnings.py" -> issubclass
	"test_basic.py" -> "called.append"
	"csv.py" -> ValueError
	"parse.py" -> encode
	"subprocess.py" -> _waitpid
	"sync.py" -> "loop.close"
	"test_json.py" -> "json.dumps"
	"__init__.py" -> "sys._getframe"
	"ast.py" -> "node_or_string.lstrip"
	"test_reqctx.py" -> EnvironBuilder
	"sync.py" -> isinstance
	"provider.py" -> "dataclasses.asdict"
	"tarfile.py" -> str
	"zipfile.py" -> crc32
	"test_config.py" -> len
	"selectors.py" -> KeyError
	"test_blueprints.py" -> "blue.route"
	"app.py" -> "self.add_url_rule"
	"tarfile.py" -> "self._apply_pax_info"
	"_weakrefset.py" -> set
	"__init__.py" -> "self._load_json"
	"enum.py" -> __new__
	"pickle.py" -> "self.metastack.append"
	"ipaddress.py" -> "IPv4Address.__eq__"
	"pickle.py" -> "sys.exc_info"
	"typing.py" -> __getattribute__
	"threading.py" -> "self._cond.notify"
	"blueprints.py" -> "bp_options.get"
	"functools.py" -> _compose_mro
	"_strptime.py" -> "locale.getlocale"
	"platform.py" -> "_libc_search.search"
	"test_basic.py" -> client_method
	"ssl.py" -> "_msg_callback.__set__"
	"cli.py" -> "sys.path.insert"
	"base64.py" -> b64encode
	"ctx.py" -> "appcontext_popped.send"
	"functools.py" -> "cache.clear"
	"__init__.py" -> "self._base"
	"test_auth.py" -> "client.post"
	"dis.py" -> _get_code_object
	"gzip.py" -> isinstance
	"wrappers.py" -> _split_blueprint_path
	"shutil.py" -> "name.endswith"
	"argparse.py" -> "self._add_container_actions"
	"tracemalloc.py" -> "self._match_traceback"
	"textwrap.py" -> "self._handle_long_word"
	"warnings.py" -> _getcategory
	"test_reqctx.py" -> "app.request_context"
	"tarfile.py" -> SubsequentHeaderError
	"shutil.py" -> getpwnam
	"typing.py" -> _AnnotatedAlias
	"tempfile.py" -> "newfile.write"
	"typing_extensions.py" -> __instancecheck__
	"argparse.py" -> "self._get_args"
	"datetime.py" -> "other._getstate"
	"argparse.py" -> "self._print_message"
	"tarfile.py" -> "keyword.encode"
	"plistlib.py" -> _decode_base64
	"copy.py" -> _keep_alive
	"views.py" -> "tasks.add.delay"
	"tempfile.py" -> range
	"typing_extensions.py" -> classmethod
	"auth.py" -> redirect
	"code.py" -> exec
	"socket.py" -> "self.close"
	"plistlib.py" -> "keyRefs.append"
	"pickle.py" -> "self._instantiate"
	"cli.py" -> "click.Option"
	"wrappers.py" -> "endpoint.rpartition"
	"test_auth.py" -> "auth.logout"
	"test_user_error_handler.py" -> CustomException
	"test_basic.py" -> str
	"inspect.py" -> "classes.sort"
	"threading.py" -> _MainThread
	"base64.py" -> _85encode
	"gzip.py" -> "mode.startswith"
	"dis.py" -> Positions
	"datetime.py" -> _is_ascii_digit
	"argparse.py" -> "self._choices_actions.append"
	"pathlib.py" -> _PosixFlavour
	"statistics.py" -> map
	"string.py" -> "result.append"
	"dis.py" -> "instr._disassemble"
	"__init__.py" -> "self._path.joinpath"
	"test_cli.py" -> "app.add_url_rule"
	"pickle.py" -> "argparse.FileType"
	"copy.py" -> "y.__setstate__"
	"test_views.py" -> "Index.as_view"
	"typing_extensions.py" -> "default_names.append"
	"__init__.py" -> resolver
	"inspect.py" -> zip
	"contextlib.py" -> "self._old_targets.pop"
	"dataclasses.py" -> "types.new_class"
	"__init__.py" -> _zip
	"test_json.py" -> X
	"csv.py" -> "line.count"
	"calendar.py" -> "self.formatday"
	"tempfile.py" -> "_os.path.isdir"
	"test_json.py" -> range
	"__init__.py" -> "self.data.replace"
	"csv.py" -> "charFrequency.get"
	"subprocess.py" -> "__all__.extend"
	"codeop.py" -> "line.strip"
	"shlex.py" -> "self.pushback.popleft"
	"scaffold.py" -> "options.pop"
	"__init__.py" -> __init__
	"calendar.py" -> "s.center"
	"test_signals.py" -> "client.get"
	"test_blueprints.py" -> "errors.app_errorhandler"
	"templating.py" -> _render
	"tarfile.py" -> "copy.deepcopy"
	"cli.py" -> ScriptInfo
	"test_basic.py" -> "rv.data.strip"
	"conftest.py" -> "os.fspath"
	"pickle.py" -> "self.current_frame.readinto"
	"bz2.py" -> "self._buffer.readline"
	"ctx.py" -> "self.pop"
	"shutil.py" -> _check_unpack_options
	"getopt.py" -> isinstance
	"subprocess.py" -> "process.communicate"
	"lzma.py" -> LZMACompressor
	"views.py" -> NotImplementedError
	"shlex.py" -> "self.get_token"
	"typing.py" -> "params.append"
	"ssl.py" -> _txt2obj
	"locale.py" -> "s.replace"
	"lzma.py" -> "comp.flush"
	"cli.py" -> "info.load_app"
	"test_subclassing.py" -> "app.route"
	"plistlib.py" -> "self._fp.write"
	"functools.py" -> len
	"argparse.py" -> "action.option_strings.remove"
	"ipaddress.py" -> format
	"inspect.py" -> id
	"tarfile.py" -> "self._extract_one"
	"threading.py" -> RuntimeError
	"tarfile.py" -> "stream.close"
	"__init__.py" -> "self.infos.freeze"
	"wrappers.py" -> super
	"plistlib.py" -> "re.compile"
	"contextlib.py" -> cb
	"glob.py" -> list
	"typing.py" -> "t.TypeVar"
	"functools.py" -> callable
	"argparse.py" -> superinit
	"shutil.py" -> "tarobj.extractall"
	"conftest.py" -> "app.app_context"
	"calendar.py" -> "htmlgroup.add_argument"
	"platform.py" -> "_sys_version_parser.match"
	"testing.py" -> EchoingStdin
	"tracemalloc.py" -> "filename.endswith"
	"inspect.py" -> isfunction
	"gzip.py" -> "self.fileobj.write"
	"typing.py" -> _ConcatenateGenericAlias
	"string.py" -> "self.convert_field"
	"ipaddress.py" -> _split_optional_netmask
	"templating.py" -> "self._iter_loaders"
	"pathlib.py" -> "os.path.samestat"
	"ipaddress.py" -> "cls._prefix_from_ip_string"
	"statistics.py" -> zip
	"provider.py" -> TypeError
	"app.py" -> AssertionError
	"zipfile.py" -> "x.rstrip"
	"__init__.py" -> "posixpath.relpath"
	"gzip.py" -> "fname.endswith"
	"enum.py" -> v_repr
	"test_user_error_handler.py" -> "self.Custom"
	"functools.py" -> reversed
	"contextlib.py" -> _GeneratorContextManager
	"pathlib.py" -> "parsed.reverse"
	"base64.py" -> "bytes.maketrans"
	"tag.py" -> "self.serializer.tag"
	"code.py" -> "console.interact"
	"pathlib.py" -> "self._make_child_relpath"
	"test_basic.py" -> "datetime.now"
	"app.py" -> "context.copy"
	"gzip.py" -> ArgumentParser
	"test_helpers.py" -> "os.path.dirname"
	"weakref.py" -> "gc.isenabled"
	"random.py" -> list
	"random.py" -> "self.sample"
	"py_compile.py" -> "importlib._bootstrap_external._code_to_timestamp_pyc"
	"selectors.py" -> "self._select"
	"_strptime.py" -> "self.__calc_month"
	"signal.py" -> "_signal.signal"
	"__init__.py" -> "app.route"
	"__init__.py" -> "path.children"
	"typing.py" -> _is_unpacked_typevartuple
	"scaffold.py" -> rstrip
	"_weakrefset.py" -> "w._commit_removals"
	"bisect.py" -> bisect_right
	"enum.py" -> "cls._member_type_.__new__"
	"threading.py" -> _deque
	"pathlib.py" -> <unknown_function>
	"sessions.py" -> "self.session_class"
	"pathlib.py" -> "self.mkdir"
	"typing_route.py" -> Flask
	"test_basic.py" -> "app.run"
	"subprocess.py" -> "self.stderr_thread.is_alive"
	"datetime.py" -> "other.replace"
	"ast.py" -> decode
	"textwrap.py" -> "self._wrap_chunks"
	"test_blueprints.py" -> "flask.render_template"
	"copy.py" -> _copy_immutable
	"calendar.py" -> "self.formatyear"
	"locale.py" -> "code.partition"
	"ctx.py" -> "app.create_url_adapter"
	"blog.py" -> flash
	"test_blueprints.py" -> "grandchild.route"
	"functools.py" -> "mro.append"
	"ast.py" -> f
	"argparse.py" -> "match.group"
	"scaffold.py" -> "os.getcwd"
	"__init__.py" -> "path.locate"
	"fractions.py" -> ZeroDivisionError
	"enum.py" -> "base.__dict__.get"
	"random.py" -> tuple
	"inspect.py" -> "parser.parse_args"
	"shutil.py" -> "stat.S_ISFIFO"
	"locale.py" -> "encodings.normalize_encoding"
	"tarfile.py" -> "arcname.replace"
	"gzip.py" -> BadGzipFile
	"dis.py" -> _get_name_info
	"inspect.py" -> dict
	"random.py" -> "self.gammavariate"
	"platform.py" -> architecture
	"lzma.py" -> "self._buffer.seekable"
	"plistlib.py" -> P
	"socket.py" -> "self._real_close"
	"test_testing.py" -> "flask.request._get_current_object"
	"threading.py" -> _maintain_shutdown_locks
	"__init__.py" -> object
	"textwrap.py" -> "chunks.reverse"
	"dis.py" -> disassemble
	"inspect.py" -> "pat.match"
	"ssl.py" -> "self._sslobj.write"
	"base64.py" -> _b32encode
	"inspect.py" -> getmro
	"argparse.py" -> "self._subparsers._add_action"
	"warnings.py" -> "category.rpartition"
	"hashlib.py" -> "icpy.update"
	"enum.py" -> super
	"shutil.py" -> "os.fsdecode"
	"test_views.py" -> "BetterIndex.as_view"
	"ssl.py" -> sendall
	"sessions.py" -> NotImplementedError
	"__init__.py" -> "self._style.format"
	"pathlib.py" -> "suffix.startswith"
	"inspect.py" -> "wrapped_sig.replace"
	"__init__.py" -> "self.lookup.cache_clear"
	"calendar.py" -> formatweekday
	"typing.py" -> "newargs.append"
	"config.py" -> "config_file.read"
	"typing_extensions.py" -> "collections.namedtuple"
	"pathlib.py" -> _TerminatingSelector
	"selectors.py" -> "self._selector.poll"
	"app.py" -> RuntimeError
	"tarfile.py" -> "os.lchown"
	"shutil.py" -> format
	"typing_extensions.py" -> str
	"types.py" -> meta
	"plistlib.py" -> "self._fp.tell"
	"datetime.py" -> _IsoCalendarDate
	"shutil.py" -> "os.stat"
	"datetime.py" -> "object.utcoffset"
	"datetime.py" -> "mytz.utcoffset"
	"fnmatch.py" -> range
	"socket.py" -> "_socket.socketpair"
	"textwrap.py" -> any
	"pathlib.py" -> "self._flavour.join_parsed_parts"
	"dis.py" -> bool
	"views.py" -> "result.successful"
	"__init__.py" -> "itertools.chain"
	"test_helpers.py" -> StaticFileApp
	"zipfile.py" -> "data.rfind"
	"__init__.py" -> "line.startswith"
	"__init__.py" -> parsebytes
	"ipaddress.py" -> "net.supernet"
	"lzma.py" -> "self._buffer.seek"
	"cli.py" -> with_appcontext
	"importerrorapp.py" -> Flask
	"feedparser.py" -> "self._input.pop_eof_matcher"
	"types.py" -> AttributeError
	"plistlib.py" -> "start.decode"
	"tokenize.py" -> "token.endswith"
	"test_json.py" -> "datetime.timedelta"
	"test_reqctx.py" -> AssertionError
	"subprocess.py" -> filter
	"__init__.py" -> "Handler.__init__"
	"pathlib.py" -> ValueError
	"selectors.py" -> isinstance
	"dis.py" -> _unpack_opargs
	"ipaddress.py" -> map
	"inspect.py" -> "file.startswith"
	"test_subclassing.py" -> Exception
	"__init__.py" -> translate
	"statistics.py" -> count
	"__init__.py" -> "self.data.extend"
	"zipfile.py" -> "bz2.BZ2Compressor"
	"test_blueprints.py" -> "rv.close"
	"base64.py" -> from_bytes
	"ssl.py" -> "context.set_ciphers"
	"uuid.py" -> "word.replace"
	"scaffold.py" -> "os.path.join"
	"app.py" -> open
	"app.py" -> "self.inject_url_defaults"
	"inspect.py" -> "self._bound_arguments_cls"
	"__init__.py" -> union
	"inspect.py" -> "parser.add_argument"
	"app.py" -> "self.config.get"
	"traceback.py" -> join
	"argparse.py" -> "nargs_pattern.replace"
	"factory.py" -> Flask
	"locale.py" -> func
	"functools.py" -> singledispatch
	"tarfile.py" -> "time.localtime"
	"functools.py" -> classmethod
	"__init__.py" -> "self._fmt.format"
	"tarfile.py" -> TruncatedHeaderError
	"locale.py" -> "windows_locale.get"
	"random.py" -> int
	"inspect.py" -> "text.removeprefix"
	"argparse.py" -> "self._container._remove_action"
	"tarfile.py" -> InvalidHeaderError
	"config.py" -> "self.from_pyfile"
	"datetime.py" -> "_time.time"
	"gzip.py" -> "fp.read"
	"__init__.py" -> "lastResort.handle"
	"plistlib.py" -> "self.stack.pop"
	"testing.py" -> getvalue
	"socket.py" -> "os.fstat"
	"socket.py" -> super
	"subprocess.py" -> "self.stdout.read"
	"__init__.py" -> "cls._convert_egg_info_reqs_to_simple_reqs"
	"app.py" -> "request_tearing_down.send"
	"typing.py" -> "sys._getframe"
	"parse.py" -> "query.items"
	"__init__.py" -> "self.manager.getLogger"
	"tokenize.py" -> maybe
	"datetime.py" -> __new__
	"pickle.py" -> "self.readinto"
	"feedparser.py" -> "self._cur.defects.append"
	"pathlib.py" -> "functools.lru_cache"
	"__init__.py" -> read_text
	"argparse.py" -> _remove_action
	"inspect.py" -> getsourcelines
	"threading.py" -> Condition
	"enum.py" -> auto
	"platform.py" -> "re.compile"
	"argparse.py" -> "self.__dict__.items"
	"typing_extensions.py" -> "_PROTO_ALLOWLIST.get"
	"test_json.py" -> "flask.request.get_json"
	"tempfile.py" -> "self._file.truncate"
	"zipfile.py" -> _ZipWriteFile
	"subprocess.py" -> OSError
	"__init__.py" -> "self.data.istitle"
	"subprocess.py" -> bytearray
	"operator.py" -> map
	"zipfile.py" -> "self.fp.close"
	"test_reqctx.py" -> "buffer.append"
	"calendar.py" -> "_months.insert"
	"enum.py" -> "enum_class._member_map_.items"
	"typing.py" -> _TupleType
	"test_appctx.py" -> isinstance
	"__init__.py" -> "_strip_comments_re.sub"
	"bz2.py" -> "self._check_not_closed"
	"_strptime.py" -> "found_dict.keys"
	"blueprints.py" -> "app.blueprints.values"
	"plistlib.py" -> "self.write_bytes"
	"dataclasses.py" -> "ns.get"
	"zipfile.py" -> "self._update_crc"
	"dis.py" -> iter
	"subprocess.py" -> "self._posix_spawn"
	"dataclasses.py" -> _is_initvar
	"uuid.py" -> "proc.communicate"
	"socket.py" -> "self._checkClosed"
	"shutil.py" -> "os.lseek"
	"blueprints.py" -> "self.get_send_file_max_age"
	"subprocess.py" -> "self._filter_handle_list"
	"test_basic.py" -> "app.json.dumps"
	"bz2.py" -> join
	"types.py" -> list
	"bz2.py" -> "io.text_encoding"
	"tarfile.py" -> "self._create_gnu_long_header"
	"gzip.py" -> "io.BytesIO"
	"provider.py" -> len
	"conf.py" -> ProjectLink
	"__init__.py" -> "self.run"
	"shutil.py" -> "sys.platform.startswith"
	"ast.py" -> "infile.read"
	"typing_extensions.py" -> _set_module
	"sync.py" -> "asyncio.current_task"
	"glob.py" -> next
	"pathlib.py" -> "name.lstrip"
	"enum.py" -> "cls._value2member_map_.get"
	"cli.py" -> show_server_banner
	"test_async.py" -> "AsyncMethodView.as_view"
	"platform.py" -> "os.confstr"
	"inspect.py" -> "lines.pop"
	"zipfile.py" -> "os.path.normpath"
	"__init__.py" -> "time.time"
	"gzip.py" -> hex
	"typing_extensions.py" -> AssertionError
	"rlcompleter.py" -> len
	"pathlib.py" -> urlquote_from_bytes
	"ssl.py" -> "self._encode_hostname"
	"tracemalloc.py" -> _normalize_filename
	"zipfile.py" -> _get_decompressor
	"subprocess.py" -> check_output
	"calendar.py" -> TextCalendar
	"platform.py" -> "_WIN32_CLIENT_RELEASES.get"
	"__init__.py" -> vars
	"subprocess.py" -> "self._communicate"
	"pickle.py" -> "self.save_bytearray"
	"argparse.py" -> consume_optional
	"__init__.py" -> "current_app.json.load"
	"__init__.py" -> Prepared
	"plistlib.py" -> ParserCreate
	"fractions.py" -> "dec.as_integer_ratio"
	"types.py" -> tuple
	"typing_extensions.py" -> "name.rpartition"
	"cli.py" -> main
	"tarfile.py" -> "self.zlib.decompressobj"
	"inspect.py" -> _ClassFinder
	"templating.py" -> "_cv_request.get"
	"test_session_interface.py" -> "flask.Flask"
	"blog.py" -> get_post
	"ast.py" -> "self._source.extend"
	"traceback.py" -> len
	"__init__.py" -> _compile_repl
	"typing.py" -> substfunc
	"test_basic.py" -> "pytest.mark.skipif"
	"copy.py" -> "y.__dict__.update"
	"parse.py" -> _splitvalue
	"pathlib.py" -> "rel.split"
	"feedparser.py" -> "self._factory"
	"typing_extensions.py" -> "kwargs.items"
	"uuid.py" -> replace
	"test_reqctx.py" -> "flask.Flask"
	"cli.py" -> "ep.load"
	"subprocess.py" -> "ver.split"
	"enum.py" -> hasattr
	"ssl.py" -> __init__
	"threading.py" -> _newname
	"statistics.py" -> Decimal
	"traceback.py" -> "te.format_exception_only"
	"signal.py" -> enum_klass
	"ast.py" -> "fstring_parts.append"
	"__init__.py" -> "self.data.endswith"
	"inspect.py" -> OSError
	"threading.py" -> "_shutdown_locks.clear"
	"bisect.py" -> bisect_left
	"tempfile.py" -> "self._file.detach"
	"subprocess.py" -> "os.pipe"
	"app.py" -> run_simple
	"__init__.py" -> __add__
	"argparse.py" -> "_option_strings.append"
	"copyreg.py" -> "name.endswith"
	"signal.py" -> _wraps
	"__init__.py" -> "collections.defaultdict"
	"test_basic.py" -> "app.inject_url_defaults"
	"locale.py" -> lookup
	"testing.py" -> urlsplit
	"enum.py" -> "cls.__new__"
	"selectors.py" -> "fileobj.fileno"
	"argparse.py" -> "self._iter_indented_subactions"
	"gzip.py" -> "self.file.seek"
	"tarfile.py" -> "s.strip"
	"test_config.py" -> "app.config.from_prefixed_env"
	"traceback.py" -> "frame_summary.locals.items"
	"ipaddress.py" -> "s2.subnets"
	"sync.py" -> "cvar.set"
	"bz2.py" -> "self._check_can_seek"
	"platform.py" -> "_ironpython_sys_version_parser.match"
	"tracemalloc.py" -> ValueError
	"feedparser.py" -> "EMPTYSTRING.join"
	"test_cli.py" -> "pytest.mark.skipif"
	"enum.py" -> "gnv_last_values.append"
	"dataclasses.py" -> "itertools.filterfalse"
	"subprocess.py" -> "fcntl.fcntl"
	"__init__.py" -> "self.data.lstrip"
	"subprocess.py" -> "gids.append"
	"gzip.py" -> "builtins.open"
	"typing_extensions.py" -> "functools.update_wrapper"
	"typing_extensions.py" -> any
	"pickle.py" -> hasattr
	"rlcompleter.py" -> "text.strip"
	"test_blueprints.py" -> "blue.register_error_handler"
	"app.py" -> "self.wsgi_app"
	"selectors.py" -> namedtuple
	"tempfile.py" -> ValueError
	"test_reqctx.py" -> PathAwareSessionInterface
	"ipaddress.py" -> IPv4Network
	"contextlib.py" -> "self._create_exit_wrapper"
	"base64.py" -> "binascii.unhexlify"
	"test_basic.py" -> "uuid.uuid4"
	"parse.py" -> "urlsplit.cache_clear"
	"subprocess.py" -> "self._close_pipe_fds"
	"shutil.py" -> "os.statvfs"
	"platform.py" -> "_component_re.split"
	"test_blueprints.py" -> "app.jinja_env.filters.keys"
	"inspect.py" -> TypeError
	"codeop.py" -> "source.split"
	"fractions.py" -> __new__
	"pickle.py" -> "codecs.escape_decode"
	"base64.py" -> "s.upper"
	"app.py" -> "self.config_class"
	"scaffold.py" -> "self.route"
	"functools.py" -> cache_get
	"bz2.py" -> len
	"__init__.py" -> release
	"__init__.py" -> "formatter.vformat"
	"tarfile.py" -> "re.compile"
	"test_appctx.py" -> "called.append"
	"auth.py" -> "bp.route"
	"cli.py" -> "inspect.isfunction"
	"test_logging.py" -> "logging.getLogger"
	"tarfile.py" -> min
	"tarfile.py" -> endswith
	"__init__.py" -> "self._format"
	"__init__.py" -> "FastPath.__new__.cache_clear"
	"socket.py" -> "file.fileno"
	"dataclasses.py" -> "cls.__dict__.get"
	"argparse.py" -> "self._join_parts"
	"typing_extensions.py" -> _RequiredForm
	"zipfile.py" -> "os.makedirs"
	"argparse.py" -> "_re.findall"
	"shutil.py" -> "name.startswith"
	"test_basic.py" -> Markup
	"test_auth.py" -> "client.get"
	"__init__.py" -> "weakref.WeakValueDictionary"
	"test_blueprints.py" -> "flask.url_for"
	"typing_extensions.py" -> _LiteralForm
	"subprocess.py" -> "self._save_input"
	"parse.py" -> "_typeprog.match"
	"pickle.py" -> memoryview
	"gzip.py" -> "g.write"
	"zipfile.py" -> "self._name_set"
	"tarfile.py" -> "self._get_extract_tarinfo"
	"test_json_tag.py" -> "s.loads"
	"random.py" -> seed
	"socket.py" -> hasattr
	"enum.py" -> "enumeration.__members__.items"
	"functools.py" -> update_wrapper
	"datetime.py" -> super
	"base64.py" -> encodebytes
	"__init__.py" -> "self.handlers.remove"
	"blueprints.py" -> "self.app.add_url_rule"
	"inspect.py" -> getattr
	"parse.py" -> isascii
	"ipaddress.py" -> "subnets.values"
	"zipfile.py" -> "str.maketrans"
	"weakref.py" -> "cls._select_for_exit"
	"tracemalloc.py" -> strip
	"csv.py" -> "modes.items"
	"argparse.py" -> get
	"shutil.py" -> "os.chdir"
	"tokenize.py" -> "triple_quoted.add"
	"statistics.py" -> TypeError
	"test_json.py" -> "kwargs.setdefault"
	"code.py" -> SyntaxError
	"platform.py" -> "l.append"
	"test_json_tag.py" -> "s.register"
	"__init__.py" -> Lookup
	"shutil.py" -> "fdst.write"
	"traceback.py" -> "rtext.lstrip"
	"cli.py" -> list_commands
	"cli.py" -> load_dotenv
	"__init__.py" -> "base.__html__"
	"statistics.py" -> "root.next_plus"
	"parser.py" -> TextIOWrapper
	"code.py" -> "self.showtraceback"
	"inspect.py" -> cleandoc
	"plistlib.py" -> InvalidFileException
	"tokenize.py" -> TokenInfo
	"tag.py" -> UUID
	"socket.py" -> memoryview
	"uuid.py" -> "stdout.readline"
	"tarfile.py" -> "self.cmp.compress"
	"tarfile.py" -> "s.find"
	"test_basic.py" -> Data
	"dataclasses.py" -> "name.isidentifier"
	"plistlib.py" -> load
	"argparse.py" -> "args.extend"
	"zipfile.py" -> "member.filename.replace"
	"test_blueprints.py" -> "frontend.errorhandler"
	"__init__.py" -> Template
	"csv.py" -> next
	"traceback.py" -> extended_frame_gen
	"ssl.py" -> "hostname.decode"
	"_weakrefset.py" -> pop
	"enum.py" -> "base_chain.add"
	"scaffold.py" -> "value.rstrip"
	"__init__.py" -> "self.data.capitalize"
	"typing_extensions.py" -> frozenset
	"test_user_error_handler.py" -> ChildExceptionRegistered
	"zipfile.py" -> getinfo
	"shutil.py" -> "formats.sort"
	"__init__.py" -> "self.is_dir"
	"ctx.py" -> "ctx.app.ensure_sync"
	"__init__.py" -> format
	"py_compile.py" -> "importlib._bootstrap_external._calc_mode"
	"linecache.py" -> clearcache
	"__init__.py" -> warning
	"templating.py" -> "app.update_template_context"
	"locale.py" -> normalize
	"shutil.py" -> dict
	"base64.py" -> "s.encode"
	"helpers.py" -> "werkzeug.utils.send_from_directory"
	"__init__.py" -> "self.isEnabledFor"
	"tokenize.py" -> rstrip
	"subprocess.py" -> "_winapi.GetExitCodeProcess"
	"warnings.py" -> RuntimeError
	"contextlib.py" -> "self.gen.athrow"
	"random.py" -> perf_counter
	"wrappers.py" -> on_json_loading_failed
	"zipfile.py" -> set
	"subprocess.py" -> type
	"zipfile.py" -> "group.add_argument"
	"test_reqctx.py" -> "app.config.update"
	"datetime.py" -> "_math.modf"
	"test_views.py" -> "View.as_view"
	"logging.py" -> "logging.Formatter"
	"base64.py" -> "_B32_ENCODE_DOCSTRING.format"
	"__init__.py" -> _addHandlerRef
	"typing.py" -> "hints.items"
	"app.py" -> RequestContext
	"tracemalloc.py" -> _format_size
	"typing_route.py" -> "app.route"
	"feedparser.py" -> "msg.set_default_type"
	"statistics.py" -> divmod
	"__init__.py" -> _name_set
	"__init__.py" -> "self.metadata.get_all"
	"types.py" -> next
	"ipaddress.py" -> "self.subnets"
	"__init__.py" -> partition
	"inspect.py" -> getinnerframes
	"parse.py" -> "hostinfo.partition"
	"blueprints.py" -> "self.make_setup_state"
	"inspect.py" -> _signature_strip_non_python_syntax
	"argparse.py" -> max
	"enum.py" -> "classdict.get"
	"pickle.py" -> _test
	"cli.py" -> "_app_option.handle_parse_result"
	"enum.py" -> "name.startswith"
	"typing.py" -> _remove_dups_flatten
	"tokenize.py" -> "indents.append"
	"app.py" -> "self.make_response"
	"csv.py" -> "delims.items"
	"platform.py" -> platform
	"argparse.py" -> "seen_actions.add"
	"_weakrefset.py" -> "w._iterating.add"
	"datetime.py" -> "self.isoformat"
	"threading.py" -> _start_new_thread
	"gzip.py" -> "io.BufferedReader"
	"test_json.py" -> loads
	"parser.py" -> StringIO
	"pickle.py" -> decode_long
	"__init__.py" -> "self.data.isalnum"
	"string.py" -> "self.pattern.finditer"
	"traceback.py" -> "StackSummary._extract_from_extended_frame_gen"
	"ast.py" -> frozenset
	"zipfile.py" -> "importlib.util.cache_from_source"
	"db.py" -> "app.teardown_appcontext"
	"helpers.py" -> "os.getcwd"
	"threading.py" -> _PyRLock
	"glob.py" -> "itertools.chain"
	"plistlib.py" -> "self.indent.replace"
	"tarfile.py" -> "member.islnk"
	"bz2.py" -> "self._check_can_write"
	"pickle.py" -> "_extension_registry.get"
	"hashlib.py" -> hasattr
	"ssl.py" -> sendfile
	"inspect.py" -> "sigcls.from_callable"
	"zipfile.py" -> "self._write_end_record"
	"tarfile.py" -> "directories.append"
	"fractions.py" -> super
	"test_helpers.py" -> gen
	"__init__.py" -> "s.closegroup"
	"blueprints.py" -> join
	"threading.py" -> "self._waiters.remove"
	"__init__.py" -> "self.__map.pop"
	"datetime.py" -> _ymd2ord
	"tarfile.py" -> EmptyHeaderError
	"locale.py" -> Error
	"pickle.py" -> id
	"copyreg.py" -> hasattr
	"_weakrefset.py" -> "self.data.symmetric_difference_update"
	"__init__.py" -> _map
	"test_config.py" -> "flask.Flask"
	"__init__.py" -> "self.logger.log"
	"threading.py" -> "self._action"
	"test_testing.py" -> "flask.session.get"
	"traceback.py" -> "exc.format_exception_only"
	"enum.py" -> "enum_class._unhashable_values_.append"
	"ctx.py" -> "app_ctx.push"
	"inspect.py" -> type
	"__init__.py" -> "Prepared.normalize"
	"test_helpers.py" -> "pytest.mark.parametrize"
	"tarfile.py" -> "self.isdir"
	"dis.py" -> print
	"contextlib.py" -> "self._exit_callbacks.pop"
	"calendar.py" -> main
	"dis.py" -> set
	"hashlib.py" -> _warn
	"tempfile.py" -> "_os.path.expanduser"
	"test_cli.py" -> bool
	"cli.py" -> itemgetter
	"test_blueprints.py" -> "app.jinja_env.tests.keys"
	"shutil.py" -> _copyfileobj_readinto
	"conftest.py" -> "leaks.append"
	"cli.py" -> "ctx.params.get"
	"selectors.py" -> "ready.append"
	"argparse.py" -> "self._actions.remove"
	"shlex.py" -> "self.instream.read"
	"cli.py" -> "app_name.strip"
	"pickle.py" -> encode_long
	"locale.py" -> "_percent_re.finditer"
	"config.py" -> "key.isupper"
	"subprocess.py" -> "sys.audit"
	"parse.py" -> "qs.split"
	"ast.py" -> enumerate
	"ast.py" -> _convert
	"app.py" -> "click.secho"
	"types.py" -> "meta.__prepare__"
	"inspect.py" -> callable
	"sessions.py" -> int
	"hashlib.py" -> memoryview
	"fnmatch.py" -> replace
	"pickle.py" -> klass
	"argparse.py" -> setattr
	"functools.py" -> RuntimeError
	"datetime.py" -> hasattr
	"copy.py" -> setattr
	"__init__.py" -> "Distribution.discover"
	"blueprints.py" -> "options.setdefault"
	"base64.py" -> packI
	"zipfile.py" -> "posixpath.split"
	"scaffold.py" -> "os.path.dirname"
	"argparse.py" -> "parser._print_message"
	"app.py" -> "cli.load_dotenv"
	"inspect.py" -> "os.path.basename"
	"enum.py" -> dict
	"linecache.py" -> "data.splitlines"
	"provider.py" -> str
	"test_instance_config.py" -> create_namespace
	"pickle.py" -> "__all__.extend"
	"test_templating.py" -> "flask.get_template_attribute"
	"dataclasses.py" -> _get_field
	"inspect.py" -> reversed
	"threading.py" -> ValueError
	"zipfile.py" -> "pathlib.Path"
	"__init__.py" -> "root.debug"
	"argparse.py" -> "match.groups"
	"enum.py" -> "enum_class._new_member_"
	"tarfile.py" -> _FileInFile
	"__init__.py" -> "_sys._getframe"
	"dis.py" -> "co.co_positions"
	"argparse.py" -> "self._actions.append"
	"contextlib.py" -> _AsyncGeneratorContextManager
	"pickle.py" -> "m.toreadonly"
	"linecache.py" -> "os.path.join"
	"tempfile.py" -> "_os.path.join"
	"ipaddress.py" -> TypeError
	"glob.py" -> _rlistdir
	"enum.py" -> "self.__class__.mro"
	"calendar.py" -> funcs
	"__init__.py" -> "ep._for"
	"auth.py" -> fetchone
	"typing_extensions.py" -> staticmethod
	"zipfile.py" -> "lzma._encode_filter_properties"
	"__init__.py" -> "admin.route"
	"locale.py" -> "formatted.split"
	"tasks.py" -> range
	"pathlib.py" -> "os.close"
	"__init__.py" -> map
	"test_helpers.py" -> "client.get"
	"sessions.py" -> "self.get_cookie_secure"
	"app.py" -> <unknown_function>
	"ssl.py" -> "self._sslobj.shared_ciphers"
	"templating.py" -> "self.app.iter_blueprints"
	"test_logging.py" -> "stream.getvalue"
	"enum.py" -> "cls._missing_"
	"test_cli.py" -> "Path.cwd"
	"__init__.py" -> "os.makedirs"
	"traceback.py" -> "textwrap.indent"
	"pickle.py" -> "parser.parse_args"
	"shutil.py" -> "os.scandir"
	"tarfile.py" -> LinkOutsideDestinationError
	"config.py" -> "self.from_mapping"
	"contextlib.py" -> wraps
	"tarfile.py" -> ExtractError
	"traceback.py" -> "collections.namedtuple"
	"statistics.py" -> len
	"argparse.py" -> "lines.extend"
	"shutil.py" -> "zip.close"
	"__init__.py" -> "self._name_set"
	"statistics.py" -> types_add
	"test_testing.py" -> "client.session_transaction"
	"argparse.py" -> "self.add_argument_group"
	"blueprints.py" -> "t.cast"
	"inspect.py" -> "obj_dict.get"
	"weakref.py" -> "self.data.popitem"
	"test_templating.py" -> "app.jinja_env.globals.keys"
	"typing_route.py" -> show
	"code.py" -> "self.runsource"
	"warnings.py" -> "s.strip"
	"typing.py" -> func
	"shutil.py" -> "tar.close"
	"zipfile.py" -> "lzma.LZMACompressor"
	"socket.py" -> "__all__.extend"
	"subprocess.py" -> isinstance
	"ipaddress.py" -> "int.from_bytes"
	"feedparser.py" -> lower
	"datetime.py" -> "_time.localtime"
	"ipaddress.py" -> getattr
	"typing_extensions.py" -> _type_repr
	"datetime.py" -> "sys.platform.startswith"
	"gzip.py" -> "self._decompressor.decompress"
	"__init__.py" -> "self.data.translate"
	"dis.py" -> "fields.append"
	"ssl.py" -> "self.context.wrap_socket"
	"traceback.py" -> StackSummary
	"tarfile.py" -> "self.fileobj.read"
	"uuid.py" -> int
	"argparse.py" -> list
	"shlex.py" -> "self.pushback.appendleft"
	"app.py" -> "values.update"
	"subprocess.py" -> "fds_to_keep.add"
	"enum.py" -> "qualname.endswith"
	"csv.py" -> "self._dict_to_list"
	"feedparser.py" -> feed
	"__init__.py" -> "self.handleError"
	"test_db.py" -> "pytest.raises"
	"pickle.py" -> "self.put"
	"threading.py" -> get_ident
	"operator.py" -> TypeError
	"__init__.py" -> "self.items"
	"platform.py" -> strip
	"sync.py" -> "loop.shutdown_asyncgens"
	"warnings.py" -> range
	"threading.py" -> "self._acquire_restore"
	"shutil.py" -> OSError
	"argparse.py" -> "copy.copy"
	"lzma.py" -> "self._check_not_closed"
	"test_signals.py" -> "recorded.append"
	"typing.py" -> "parameters.append"
	"traceback.py" -> "output.append"
	"__init__.py" -> "self.data.partition"
	"statistics.py" -> defaultdict
	"feedparser.py" -> "self._cur.set_unixfrom"
	"subprocess.py" -> append
	"debughelpers.py" -> "key.startswith"
	"test_user_error_handler.py" -> NotFound
	"typing_extensions.py" -> "params.extend"
	"typing_extensions.py" -> "typing.get_type_hints"
	"app.py" -> "self.should_ignore_error"
	"pathlib.py" -> "os.unlink"
	"uuid.py" -> "socket.gethostbyname"
	"sessions.py" -> "s.loads"
	"test_views.py" -> "client.head"
	"_strptime.py" -> super
	"inspect.py" -> walktree
	"views.py" -> "result.ready"
	"locale.py" -> "__all__.append"
	"typing.py" -> "_cleanups.append"
	"subprocess.py" -> "self._stdin_write"
	"test_json.py" -> "datetime.date"
	"__init__.py" -> getinfo
	"blueprints.py" -> defaultdict
	"ssl.py" -> "cert_ipaddress.rstrip"
	"ssl.py" -> _simple_enum
	"warnings.py" -> "registry.get"
	"pickle.py" -> "parser.add_argument"
	"cli.py" -> "data.items"
	"threading.py" -> "lock.acquire"
	"app.py" -> ValueError
	"config.py" -> getattr
	"calendar.py" -> toordinal
	"pickle.py" -> whichmodule
	"__init__.py" -> "mp.current_process"
	"app.py" -> "self.url_map.bind"
	"views.py" -> "methods.update"
	"pickle.py" -> "self.save_pers"
	"scaffold.py" -> "package_path.is_relative_to"
	"functools.py" -> "found.append"
	"code.py" -> "self.compile"
	"gzip.py" -> "self._buffer.close"
	"fnmatch.py" -> "result.append"
	"operator.py" -> getattr
	"tempfile.py" -> "self.cleanup"
	"__init__.py" -> "self.data.isdigit"
	"tokenize.py" -> "re.compile"
	"dis.py" -> code_info
	"argparse.py" -> add_argument_group
	"shutil.py" -> TypeError
	"tarfile.py" -> "tarinfo.isfifo"
	"platform.py" -> "plistlib.load"
	"inspect.py" -> isinstance
	"hashlib.py" -> "algorithms_available.union"
	"_weakrefset.py" -> ref
	"rlcompleter.py" -> hasattr
	"__init__.py" -> _releaseLock
	"ast.py" -> "self.write"
	"enum.py" -> filter
	"test_reqctx.py" -> "test_client.post"
	"copyreg.py" -> "_extension_registry.get"
	"ipaddress.py" -> "IPv6Address.__eq__"
	"base64.py" -> translate
	"bz2.py" -> "_compression.DecompressReader"
	"test_json.py" -> "app.add_url_rule"
	"zipfile.py" -> close
	"getopt.py" -> "prog_args.append"
	"functools.py" -> enumerate
	"subprocess.py" -> "os.open"
	"ctx.py" -> "t.TypeVar"
	"tarfile.py" -> "pax_headers.get"
	"test_json.py" -> "flask.json.load"
	"copyreg.py" -> "name.startswith"
	"plistlib.py" -> "fp.seek"
	"tarfile.py" -> round
	"shutil.py" -> "path.insert"
	"conftest.py" -> open
	"sync.py" -> "asyncio.get_running_loop"
	"tag.py" -> "self.tag"
	"parser.py" -> "feedparser.feed"
	"cli.py" -> _called_with_wrong_args
	"tempfile.py" -> "self._file.close"
	"typing.py" -> "self.__getitem_inner__"
	"pathlib.py" -> rstrip
	"inspect.py" -> "int.__new__"
	"typing_extensions.py" -> _check_generic
	"blueprints.py" -> _endpoint_from_view_func
	"inspect.py" -> "unbound_names.add"
	"pathlib.py" -> bytes
	"zipfile.py" -> ZipExtFile
	"pathlib.py" -> "parent_path._make_child_relpath"
	"rlcompleter.py" -> "seen.add"
	"tokenize.py" -> "_itertools.permutations"
	"rlcompleter.py" -> eval
	"argparse.py" -> "self._parse_known_args"
	"views.py" -> "app.route"
	"ipaddress.py" -> v6_int_to_packed
	"socket.py" -> dup
	"pickle.py" -> write
	"tracemalloc.py" -> abs
	"shutil.py" -> getattr
	"test_blueprints.py" -> "child.route"
	"ssl.py" -> format
	"pathlib.py" -> "os.getcwd"
	"test_json.py" -> "decimal.Decimal"
	"__init__.py" -> "self.data.rindex"
	"operator.py" -> join
	"logging.py" -> "logger.addHandler"
	"__init__.py" -> "child.split"
	"sync.py" -> "call_result.result"
	"__init__.py" -> "self.data.removeprefix"
	"test_signals.py" -> "flask.template_rendered.connect"
	"tarfile.py" -> "fileobj.tell"
	"argparse.py" -> "self._whitespace_matcher.sub"
	"__init__.py" -> distribution
	"tracemalloc.py" -> Statistic
	"dataclasses.py" -> InitVar
	"statistics.py" -> isinstance
	"pathlib.py" -> "os.path.realpath"
	"pickle.py" -> "stack.pop"
	"random.py" -> stdev
	"string.py" -> "self.get_field"
	"pathlib.py" -> cls
	"test_blueprints.py" -> Rule
	"feedparser.py" -> len
	"gzip.py" -> "self._buffer.read"
	"typing_app_decorators.py" -> Response
	"zipfile.py" -> "self.read"
	"plistlib.py" -> "self.parser.ParseFile"
	"inspect.py" -> getouterframes
	"conftest.py" -> "monkeypatch.syspath_prepend"
	"plistlib.py" -> "enum.Enum"
	"tarfile.py" -> "self.add"
	"uuid.py" -> SafeUUID
	"inspect.py" -> "dis.Positions"
	"enum.py" -> "last_values.append"
	"argparse.py" -> "actions.index"
	"__init__.py" -> BytesParser
	"shutil.py" -> "os.fspath"
	"pickle.py" -> "_extension_cache.get"
	"__init__.py" -> JSONEncoder
	"traceback.py" -> FrameSummary
	"platform.py" -> "os.uname"
	"testing.py" -> "self._output.write"
	"bz2.py" -> "decomp.decompress"
	"glob.py" -> _isrecursive
	"testing.py" -> __init__
	"tokenize.py" -> "match.group"
	"plistlib.py" -> int
	"_strptime.py" -> "self.__calc_date_time"
	"inspect.py" -> "fname.endswith"
	"typing_extensions.py" -> _FinalForm
	"shutil.py" -> copyfileobj
	"locale.py" -> _format
	"test_user_error_handler.py" -> "client.get"
	"plistlib.py" -> "p.parse"
	"csv.py" -> "charFrequency.keys"
	"locale.py" -> _localeconv
	"dataclasses.py" -> "object.__setattr__"
	"__init__.py" -> dict_delitem
	"shutil.py" -> _get_gid
	"ipaddress.py" -> "self.__class__"
	"feedparser.py" -> "self._last.get_content_maintype"
	"datetime.py" -> "self.timetuple"
	"weakref.py" -> "_collections_abc.MutableSet.register"
	"inspect.py" -> convert
	"test_factory.py" -> "client.get"
	"socket.py" -> "os.get_handle_inheritable"
	"pickle.py" -> bytearray
	"selectors.py" -> "self._writers.discard"
	"tarfile.py" -> "self._proc_gnulong"
	"dataclasses.py" -> hasattr
	"ssl.py" -> "cls.__new__"
	"_strptime.py" -> datetime_timedelta
	"__init__.py" -> "dict.fromkeys"
	"__init__.py" -> "pathlib.Path"
	"test_basic.py" -> replace
	"test_signals.py" -> "flask.got_request_exception.connect"
	"ast.py" -> "expr.startswith"
	"py_compile.py" -> "importlib._bootstrap_external._code_to_hash_pyc"
	"parse.py" -> "string.encode"
	"parse.py" -> hasattr
	"shutil.py" -> "os.rmdir"
	"ast.py" -> chr
	"getopt.py" -> getopt
	"argparse.py" -> "self.format_help"
	"zipfile.py" -> "warnings.warn"
	"enum.py" -> "interesting.add"
	"inspect.py" -> "ast.Constant"
	"uuid.py" -> "os.fsencode"
	"shlex.py" -> "self.wordchars.translate"
	"typing_extensions.py" -> "Buffer.register"
	"testing.py" -> _NamedTextIOWrapper
	"textwrap.py" -> "self._split_chunks"
	"ssl.py" -> "verify_flags.__set__"
	"dataclasses.py" -> _asdict_inner
	"zipfile.py" -> "argparse.ArgumentParser"
	"hashlib.py" -> "fileobj.getbuffer"
	"calendar.py" -> dict
	"bz2.py" -> memoryview
	"plistlib.py" -> "self._write_object"
	"argparse.py" -> "self._Section"
	"textwrap.py" -> "indent.startswith"
	"shlex.py" -> "self.read_token"
	"app.py" -> processor
	"selectors.py" -> "self.unregister"
	"__init__.py" -> _dict
	"typing_extensions.py" -> "hint.items"
	"sessions.py" -> "self.should_set_cookie"
	"argparse.py" -> "self._read_args_from_files"
	"traceback.py" -> "self._format_syntax_error"
	"pathlib.py" -> "self.casefold"
	"test_basic.py" -> Rule
	"typing_extensions.py" -> _TypedDictMeta
	"test_cli.py" -> "output.splitlines"
	"__init__.py" -> "self.data.append"
	"config.py" -> len
	"test_regression.py" -> "app.test_client"
	"typing_extensions.py" -> "attrs.add"
	"test_testing.py" -> "appcontext_popped.connected_to"
	"feedparser.py" -> "self._cur.set_raw"
	"contextlib.py" -> next
	"test_async.py" -> "app.register_blueprint"
	"weakref.py" -> "atexit.register"
	"zipfile.py" -> "posixpath.join"
	"functools.py" -> items
	"operator.py" -> len
	"py_compile.py" -> "loader.source_to_code"
	"tarfile.py" -> StreamError
	"test_cli.py" -> "custom.cli.command"
	"shutil.py" -> SameFileError
	"enum.py" -> getattr
	"argparse.py" -> "self._get_handler"
	"calendar.py" -> a
	"zipfile.py" -> update_keys
	"cli.py" -> getattr
	"subprocess.py" -> "self.send_signal"
	"typing_extensions.py" -> "typing._type_check"
	"weakref.py" -> bool
	"traceback.py" -> "self.format_frame_summary"
	"shutil.py" -> "os.readlink"
	"__init__.py" -> "m.group"
	"ipaddress.py" -> "addrs.extend"
	"__init__.py" -> "functools.reduce"
	"enum.py" -> "value.bit_length"
	"base64.py" -> "encoded.translate"
	"inspect.py" -> str
	"ast.py" -> <unknown_function>
	"lzma.py" -> "self.readable"
	"__init__.py" -> "s.opengroup"
	"threading.py" -> "self._is_owned"
	"test_appctx.py" -> "flask.current_app._get_current_object"
	"plistlib.py" -> "self._flatten"
	"zipfile.py" -> join
	"lzma.py" -> "self._buffer.peek"
	"zipfile.py" -> "io.text_encoding"
	"hashlib.py" -> "ocpy.update"
	"test_appctx.py" -> "flask.url_for"
	"test_user_error_handler.py" -> Forbidden
	"cli.py" -> lower
	"__init__.py" -> "sys.modules.get"
	"zipfile.py" -> "stat.S_ISDIR"
	"argparse.py" -> parsers_class
	"tarfile.py" -> "self.makedev"
	"threading.py" -> sys_exc_info
	"inspect.py" -> _shadowed_dict
	"conftest.py" -> "app.config.update"
	"tarfile.py" -> "self.makefifo"
	"tokenize.py" -> group
	"threading.py" -> "lock.release"
	"ssl.py" -> map
	"typing_extensions.py" -> get_origin
	"test_async.py" -> "blueprint.route"
	"__init__.py" -> "io.StringIO"
	"base64.py" -> decodebytes
	"random.py" -> to_bytes
	"shutil.py" -> len
	"feedparser.py" -> attach
	"ipaddress.py" -> "self._check_packed_address"
	"tracemalloc.py" -> "exclude_filters.append"
	"sync.py" -> "executor.shutdown"
	"test_views.py" -> "flask.make_response"
	"calendar.py" -> "parser.add_argument"
	"pickle.py" -> "f.getbuffer"
	"typing_extensions.py" -> ValueError
	"tarfile.py" -> "tar.getmembers"
	"dataclasses.py" -> map
	"zipfile.py" -> "self._get_codename"
	"tarfile.py" -> "self.getmember"
	"shutil.py" -> callable
	"app.py" -> "self._find_error_handler"
	"dis.py" -> "argparse.ArgumentParser"
	"pathlib.py" -> "self._from_parsed_parts"
	"uuid.py" -> "line.lower"
	"_strptime.py" -> "locale_time.f_month.index"
	"plistlib.py" -> "s.encode"
	"fnmatch.py" -> _compile_pattern
	"sync.py" -> _restore_context
	"_strptime.py" -> "whitespace_replacement.sub"
	"test_db.py" -> str
	"app.py" -> "adapter.allowed_methods"
	"sync.py" -> "event_loop.is_running"
	"inspect.py" -> "param.replace"
	"enum.py" -> _proto_member
	"pickle.py" -> "self.memo.clear"
	"inspect.py" -> "ast.parse"
	"pathlib.py" -> "parsed.append"
	"blueprints.py" -> "self.url_defaults.update"
	"plistlib.py" -> "self._dict_type"
	"pathlib.py" -> IndexError
	"random.py" -> digest
	"__init__.py" -> "self.formatStack"
	"test_cli.py" -> "merged.cli.command"
	"__init__.py" -> Context
	"conftest.py" -> "rv.mkdir"
	"typing.py" -> _alias
	"test_regression.py" -> rpartition
	"pathlib.py" -> "os.utime"
	"ipaddress.py" -> isinstance
	"tarfile.py" -> "self._proc_gnusparse_01"
	"__init__.py" -> "self.pattern.match"
	"inspect.py" -> "os.path.normcase"
	"traceback.py" -> "StackSummary.extract"
	"test_cli.py" -> "click.group"
	"pathlib.py" -> "s.startswith"
	"ssl.py" -> _TLSContentType
	"locale.py" -> "code.replace"
	"datetime.py" -> "cls._create"
	"lzma.py" -> "mode.replace"
	"__init__.py" -> "_sys.intern"
	"__init__.py" -> "_parser.parse_template"
	"locale.py" -> "locale_alias.get"
	"tarfile.py" -> "buf.split"
	"tempfile.py" -> "file.getvalue"
	"weakref.py" -> "self._registry.pop"
	"tarfile.py" -> "self.chmod"
	"ast.py" -> ValueError
	"dataclasses.py" -> zip
	"typing.py" -> set
	"gzip.py" -> "f.close"
	"dataclasses.py" -> field
	"codeop.py" -> _maybe_compile
	"shutil.py" -> "os.path.islink"
	"argparse.py" -> "self._get_kwargs"
	"conftest.py" -> "tempfile.mkstemp"
	"argparse.py" -> __init__
	"locale.py" -> _print_locale
	"shutil.py" -> "sys.audit"
	"pickle.py" -> "_inverted_registry.get"
	"sync.py" -> "os.getpid"
	"ssl.py" -> "name.startswith"
	"helpers.py" -> "current_app.response_class"
	"csv.py" -> "self._guess_quote_and_delimiter"
	"zipfile.py" -> len
	"platform.py" -> int
	"signal.py" -> globals
	"tarfile.py" -> calc_chksums
	"zipfile.py" -> "self.__class__"
	"blueprints.py" -> update_wrapper
	"hashlib.py" -> bytearray
	"testing.py" -> ScriptInfo
	"ast.py" -> "self.generic_visit"
	"code.py" -> "argparse.ArgumentParser"
	"__init__.py" -> "threading.current_thread"
	"ssl.py" -> _nid2obj
	"test_config.py" -> "os.path.abspath"
	"config.py" -> isinstance
	"calendar.py" -> "self.yeardays2calendar"
	"tempfile.py" -> _candidate_tempdir_list
	"glob.py" -> glob_in_dir
	"test_json.py" -> "uuid.UUID"
	"dataclasses.py" -> id
	"ssl.py" -> "_ssl.get_default_verify_paths"
	"enum.py" -> type
	"templating.py" -> TemplateNotFound
	"__init__.py" -> "self.legacy_normalize"
	"typing.py" -> "self.__subclasscheck__"
	"argparse.py" -> ArgumentTypeError
	"string.py" -> "self.parse"
	"blog.py" -> execute
	"tempfile.py" -> "self._file.fileno"
	"warnings.py" -> _showwarnmsg_impl
	"__init__.py" -> "low.rpartition"
	"__init__.py" -> TypeError
	"zipfile.py" -> "self.close"
	"typing_extensions.py" -> _flatten_literal_params
	"test_appctx.py" -> "flask.g.pop"
	"textwrap.py" -> "reversed_chunks.pop"
	"cli.py" -> len
	"_strptime.py" -> "self.__calc_am_pm"
	"test_async.py" -> BlueprintError
	"helpers.py" -> "loader.get_filename"
	"ast.py" -> replace
	"linecache.py" -> lazycache
	"pathlib.py" -> "idx.indices"
	"traceback.py" -> range
	"shutil.py" -> _get_uid
	"pathlib.py" -> "object.__new__"
	"enum.py" -> callable
	"inspect.py" -> _is_wrapper
	"shutil.py" -> "os.listdir"
	"scaffold.py" -> "pathlib.PurePath"
	"functools.py" -> <unknown_function>
	"typing.py" -> _allow_reckless_class_checks
	"test_basic.py" -> list
	"enum.py" -> __delattr__
	"signals.py" -> Namespace
	"ssl.py" -> "hostname_remainder.lower"
	"typing_extensions.py" -> "type.__subclasscheck__"
	"functools.py" -> _CacheInfo
	"ast.py" -> "_const_types_not.get"
	"__init__.py" -> "c.update"
	"pickle.py" -> type
	"traceback.py" -> "self.indent"
	"shutil.py" -> "zip.infolist"
	"py_compile.py" -> "os.path.dirname"
	"tag.py" -> to_python
	"enum.py" -> reversed
	"__init__.py" -> iterencode
	"test_user_error_handler.py" -> "app.route"
	"threading.py" -> "self.is_set"
	"zipfile.py" -> "lzma._decode_filter_properties"
	"tarfile.py" -> GzipFile
	"test_config.py" -> "app.config.from_pyfile"
	"ipaddress.py" -> "ip_int.to_bytes"
	"__init__.py" -> "warnings.warn"
	"shutil.py" -> isinstance
	"__init__.py" -> "self.__missing__"
	"__init__.py" -> "email.message_from_string"
	"ast.py" -> "new_values.extend"
	"app.py" -> "t.TypeVar"
	"ssl.py" -> "self._set_npn_protocols"
	"db.py" -> "app.cli.add_command"
	"test_async.py" -> "AsyncView.as_view"
	"__init__.py" -> getattr
	"ssl.py" -> "verify_mode.__set__"
	"test_basic.py" -> NotFound
	"test_js_example.py" -> "response.get_json"
	"cli.py" -> "_env_file_option.handle_parse_result"
	"sync.py" -> "SyncToAsync.context_to_thread_executor.pop"
	"__init__.py" -> EntryPoint
	"uuid.py" -> getter
	"__init__.py" -> "_bootstrap._exec"
	"fnmatch.py" -> bytes
	"ipaddress.py" -> "nets.append"
	"platform.py" -> "winreg.OpenKeyEx"
	"test_auth.py" -> execute
	"test_request.py" -> "client.post"
	"app.py" -> "self.logger.exception"
	"__init__.py" -> "p.append"
	"test_converters.py" -> "app.route"
	"ssl.py" -> dict
	"warnings.py" -> "file.write"
	"contextlib.py" -> "_collections_abc._check_methods"
	"typing.py" -> "type.__new__"
	"test_templating.py" -> "app.test_client"
	"subprocess.py" -> "c2pread.Detach"
	"tempfile.py" -> "_io.BytesIO"
	"calendar.py" -> HTMLCalendar
	"pathlib.py" -> bool
	"calendar.py" -> "self.formatmonthname"
	"ipaddress.py" -> _find_address_range
	"argparse.py" -> get_lines
	"test_cli.py" -> Flask
	"subprocess.py" -> "os.path.join"
	"test_cli.py" -> "monkeypatch._setitem.append"
	"shutil.py" -> onerror
	"__init__.py" -> lower
	"__init__.py" -> "posixpath.join"
	"dataclasses.py" -> dict
	"pickle.py" -> read
	"pathlib.py" -> hash
	"glob.py" -> "contextlib.closing"
	"blueprints.py" -> AssertionError
	"feedparser.py" -> str
	"sync.py" -> Local
	"__init__.py" -> "self.__cast"
	"parse.py" -> dict
	"__init__.py" -> "traceback.print_exception"
	"__init__.py" -> "functools.partial"
	"test_appctx.py" -> "cleanup_stuff.append"
	"helpers.py" -> _prepare_send_file_kwargs
	"test_cli.py" -> "monkeypatch.chdir"
	"__init__.py" -> "os.fspath"
	"random.py" -> set
	"_weakrefset.py" -> "self.__ixor__"
	"app.py" -> "self.raise_routing_exception"
	"typing.py" -> "optional_keys.update"
	"textwrap.py" -> "lines.append"
	"tarfile.py" -> "self.__read"
	"calendar.py" -> formatmonthname
	"tarfile.py" -> "TarFile.open"
	"subprocess.py" -> "self.stderr_thread.join"
	"__init__.py" -> "self.filter"
	"string.py" -> set
	"typing.py" -> __setattr__
	"traceback.py" -> _Anchors
	"test_views.py" -> "app.add_url_rule"
	"functools.py" -> get_origin
	"ipaddress.py" -> "other.__class__"
	"argparse.py" -> "seen_non_default_actions.add"
	"tempfile.py" -> FileNotFoundError
	"ast.py" -> "self._write_constant"
	"typing_extensions.py" -> __init_subclass__
	"zipfile.py" -> "self.root.resolve_dir"
	"test_blueprints.py" -> "client.get"
	"sessions.py" -> "request.cookies.get"
	"__init__.py" -> join
	"test_json.py" -> FixedOffset
	"dataclasses.py" -> _frozen_get_del_attr
	"getopt.py" -> print
	"zipfile.py" -> "os.listdir"
	"__init__.py" -> "io.text_encoding"
	"__init__.py" -> critical
	"code.py" -> "sys.stderr.write"
	"ipaddress.py" -> str
	"tarfile.py" -> "pwd.getpwuid"
	"tarfile.py" -> int
	"__init__.py" -> "app.app_context"
	"functools.py" -> ValueError
	"test_helpers.py" -> "app.test_request_context"
	"__init__.py" -> always_iterable
	"glob.py" -> "magic_check.sub"
	"pathlib.py" -> "rest.encode"
	"tempfile.py" -> "_os.getcwd"
	"testing.py" -> "app.test_request_context"
	"test_json.py" -> "datetime.datetime"
	"pickle.py" -> "sys.audit"
	"parse.py" -> "hostname.startswith"
	"calendar.py" -> monthrange
	"tempfile.py" -> unlink
	"hashlib.py" -> __get_builtin_constructor
	"test_signals.py" -> "flask.appcontext_pushed.connect"
	"tarfile.py" -> "os.geteuid"
	"datetime.py" -> _ord2ymd
	"datetime.py" -> "self._tzinfo.dst"
	"weakref.py" -> "other.items"
	"ssl.py" -> "self._sendfile_use_send"
	"functools.py" -> "cache.get"
	"socket.py" -> "sock.setblocking"
	"shutil.py" -> "os.open"
	"tarfile.py" -> "os.read"
	"testing.py" -> "self._input.read"
	"typing.py" -> "functools.reduce"
	"__init__.py" -> "self.data.pop"
	"zipfile.py" -> "self.root._name_set"
	"test_blueprints.py" -> "blueprint.send_static_file"
	"hashlib.py" -> prf
	"cli.py" -> "rows.sort"
	"parse.py" -> "_asciire.split"
	"rlcompleter.py" -> get_class_members
	"_weakrefset.py" -> "self._commit_removals"
	"getopt.py" -> _
	"ctx.py" -> "ctx._after_request_functions.append"
	"statistics.py" -> "random.Random"
	"locale.py" -> "groups.reverse"
	"blueprints.py" -> any
	"statistics.py" -> StatisticsError
	"__init__.py" -> resolve
	"inspect.py" -> _signature_from_function
	"dis.py" -> "argparse.FileType"
	"argparse.py" -> super_init
	"conftest.py" -> "mp.setenv"
	"_strptime.py" -> "time.tzset"
	"tracemalloc.py" -> "pickle.load"
	"typing.py" -> "sys.modules.get"
	"inspect.py" -> "importlib.machinery.all_suffixes"
	"__init__.py" -> "d.update"
	"tag.py" -> getattr
	"__init__.py" -> getLevelName
	"datetime.py" -> "other.utcoffset"
	"lzma.py" -> LZMADecompressor
	"blueprints.py" -> "self.add_app_template_test"
	"test_cli.py" -> "pytest.mark.parametrize"
	"ctx.py" -> "self.__dict__.get"
	"enum.py" -> isinstance
	"cli.py" -> isinstance
	"inspect.py" -> "ast.literal_eval"
	"blueprints.py" -> RuntimeError
	"blueprints.py" -> "self._blueprints.append"
	"zipfile.py" -> "self.fp.seek"
	"bz2.py" -> "_compression.BaseStream.writelines"
	"test_basic.py" -> "flask.session.get"
	"calendar.py" -> join
	"app.py" -> "options.pop"
	"pathlib.py" -> iter
	"zipfile.py" -> "zinfo.FileHeader"
	"copyreg.py" -> "_inverted_registry.get"
	"traceback.py" -> _format_final_exc_line
	"types.py" -> resolve_bases
	"enum.py" -> _is_single_bit
	"traceback.py" -> "self._load_lines"
	"test_basic.py" -> "flask.session.clear"
	"blueprints.py" -> deferred
	"cli.py" -> get_debug_flag
	"subprocess.py" -> Handle
	"testing.py" -> _get_werkzeug_version
	"glob.py" -> iglob
	"code.py" -> "sys.exc_info"
	"test_basic.py" -> Submount
	"zipfile.py" -> "self._next"
	"tarfile.py" -> "next._apply_pax_info"
	"enum.py" -> append
	"app.py" -> "self.add_template_test"
	"pickle.py" -> isinstance
	"ast.py" -> Constant
	"threading.py" -> "_threading_atexits.append"
	"tempfile.py" -> _Random
	"lzma.py" -> hasattr
	"tokenize.py" -> print
	"_weakrefset.py" -> "self.weakcontainer"
	"app.py" -> is_running_from_reloader
	"uuid.py" -> get_word_index
	"__init__.py" -> findall
	"gzip.py" -> "parser.add_mutually_exclusive_group"
	"__init__.py" -> len
	"blueprints.py" -> open
	"test_reqctx.py" -> "flask.session.get"
	"shutil.py" -> "collections.namedtuple"
	"subprocess.py" -> "self.stderr.read"
	"__init__.py" -> "self.__class__"
	"parse.py" -> filter
	"bz2.py" -> "self._compressor.compress"
	"shutil.py" -> str
	"__init__.py" -> callable
	"threading.py" -> _time
	"contextlib.py" -> deque
	"ast.py" -> delattr
	"platform.py" -> "struct.calcsize"
	"calendar.py" -> "datetime.date.today"
	"csv.py" -> Error
	"sync.py" -> "task.cancelled"
	"__init__.py" -> Manager
	"__init__.py" -> "inspect.getmodulename"
	"tarfile.py" -> "self.fileobj.seek"
	"tempfile.py" -> "_once_lock.acquire"
	"copyreg.py" -> type
	"uuid.py" -> _simple_enum
	"config.py" -> "self.get_converter"
	"traceback.py" -> "str.encode"
	"getopt.py" -> list
	"test_cli.py" -> partial
	"threading.py" -> "self.notify"
	"pickle.py" -> append
	"selectors.py" -> max
	"helpers.py" -> generator
	"threading.py" -> "self._started.wait"
	"fractions.py" -> "math.isnan"
	"__init__.py" -> "functools.wraps"
	"tokenize.py" -> "blank_re.match"
	"zipfile.py" -> super
	"feedparser.py" -> "self._lines.extend"
	"test_basic.py" -> "app.json.response"
	"tracemalloc.py" -> hash
	"gzip.py" -> GzipFile
	"__init__.py" -> reversed
	"argparse.py" -> take_action
	"subprocess.py" -> CompletedProcess
	"tracemalloc.py" -> "new_group.items"
	"tag.py" -> KeyError
	"tarfile.py" -> "s.encode"
	"ipaddress.py" -> hex
	"test_async.py" -> "test_client.post"
	"argparse.py" -> vars
	"locale.py" -> atoi
	"socket.py" -> isinstance
	"ssl.py" -> "self.load_verify_locations"
	"feedparser.py" -> "self.policy.handle_defect"
	"csv.py" -> "self._guess_delimiter"
	"gzip.py" -> "self._fp.prepend"
	"gzip.py" -> "fname.encode"
	"blog.py" -> "db.commit"
	"weakref.py" -> set
	"inspect.py" -> "self._hash_basis"
	"blueprints.py" -> "value.items"
	"dataclasses.py" -> "keyword.iskeyword"
	"tarfile.py" -> "self.name.rstrip"
	"pickle.py" -> _getattribute
	"datetime.py" -> type
	"__init__.py" -> "_collections_abc.MutableSequence.register"
	"test_testing.py" -> "app.test_cli_runner"
	"gzip.py" -> "self.compress.flush"
	"_weakrefset.py" -> "self.data.issuperset"
	"textwrap.py" -> rstrip
	"calendar.py" -> len
	"uuid.py" -> "word.split"
	"shutil.py" -> "errors.append"
	"plistlib.py" -> "_dateParser.match"
	"test_basic.py" -> Forbidden
	"dis.py" -> _get_instructions_bytes
	"app.py" -> cls
	"parse.py" -> DefragResult
	"pathlib.py" -> "self._flavour.parse_parts"
	"inspect.py" -> "re.compile"
	"copy.py" -> _deepcopy_atomic
	"enum.py" -> _is_dunder
	"_strptime.py" -> TimeRE
	"__init__.py" -> PackagePath
	"fnmatch.py" -> "s.replace"
	"base64.py" -> "output.write"
	"parse.py" -> "qs.count"
	"statistics.py" -> enumerate
	"uuid.py" -> format
	"statistics.py" -> _convert
	"tempfile.py" -> func
	"argparse.py" -> warn
	"shutil.py" -> "os.path.normcase"
	"ipaddress.py" -> "cls._ip_int_from_prefix"
	"_strptime.py" -> "self.__calc_timezone"
	"__init__.py" -> "self.callHandlers"
	"feedparser.py" -> StringIO
	"debughelpers.py" -> join
	"fnmatch.py" -> match
	"ssl.py" -> "self._sslobj.compression"
	"ssl.py" -> TypeError
	"gzip.py" -> "fileobj.write"
	"signal.py" -> set
	"tarfile.py" -> "os.path.splitdrive"
	"tasks.py" -> "time.sleep"
	"functools.py" -> "result.append"
	"views.py" -> "tasks.process.delay"
	"tempfile.py" -> "_os.getpid"
	"typing_extensions.py" -> "typing._type_repr"
	"db.py" -> "f.read"
	"statistics.py" -> T
	"textwrap.py" -> sum
	"selectors.py" -> SelectorKey
	"test_basic.py" -> "warnings.catch_warnings"
	"contextlib.py" -> "self.thing.aclose"
	"rlcompleter.py" -> "inspect.signature"
	"_weakrefset.py" -> "self.update"
	"enum.py" -> "self.name.split"
	"threading.py" -> _DummyThread
	"dataclasses.py" -> TypeError
	"tarfile.py" -> "source.seek"
	"pathlib.py" -> "sys.intern"
	"app.py" -> "self.url_map.bind_to_environ"
	"tag.py" -> callable
	"weakref.py" -> callback
	"tokenize.py" -> list
	"ast.py" -> visitor
	"pickle.py" -> "self.current_frame.write"
	"argparse.py" -> "arg_string_pattern_parts.append"
	"__init__.py" -> "self.data.center"
	"threading.py" -> "self._lock.__enter__"
	"pathlib.py" -> "yielded.clear"
	"ast.py" -> "todo.popleft"
	"ssl.py" -> "self._sslobj.version"
	"tempfile.py" -> "self._file.readline"
	"__init__.py" -> "self.root.resolve_dir"
	"app.py" -> "self.log_exception"
	"argparse.py" -> "action_conflicts.get"
	"testing.py" -> "self.app.json.dumps"
	"cli.py" -> "importlib.metadata.version"
	"inspect.py" -> "dict_attr.__get__"
	"dis.py" -> "_specializations.items"
	"__init__.py" -> "os.listdir"
	"ast.py" -> "unparser.visit"
	"ssl.py" -> "warnings.warn"
	"logging.py" -> any
	"app.py" -> "self.preprocess_request"
	"sync.py" -> "self.thread_sensitive_context.get"
	"tarfile.py" -> "os.chmod"
	"enum.py" -> new_member
	"test_helpers.py" -> "f.read"
	"argparse.py" -> "self._optionals._add_action"
	"ctx.py" -> iter
	"statistics.py" -> "x.as_integer_ratio"
	"test_views.py" -> "client.open"
	"ssl.py" -> getattr
	"functools.py" -> "registry.keys"
	"platform.py" -> getwindowsversion
	"helpers.py" -> list
	"inspect.py" -> formatannotation
	"pathlib.py" -> is_dir
	"linecache.py" -> list
	"zipfile.py" -> "os.path.isfile"
	"views.py" -> set
	"textwrap.py" -> "self.wrap"
	"bz2.py" -> "self._buffer.tell"
	"base64.py" -> "binascii.a2b_base64"
	"inspect.py" -> "filename.endswith"
	"enum.py" -> "cls._member_map_.values"
	"test_blueprints.py" -> "app.route"
	"ast.py" -> "lines.insert"
	"app.py" -> "context.update"
	"blueprints.py" -> "s.app.before_request_funcs.setdefault"
	"tarfile.py" -> "os.mkdir"
	"tarfile.py" -> "zlib.crc32"
	"test_reqctx.py" -> "warnings.catch_warnings"
	"ast.py" -> walk
	"dataclasses.py" -> getattr
	"parse.py" -> "bpath.split"
	"uuid.py" -> "hex.replace"
	"threading.py" -> "self._lock.acquire"
	"ssl.py" -> "self._sslobj.pending"
	"enum.py" -> "data_types.pop"
	"typing_extensions.py" -> "type.__hash__"
	"shutil.py" -> "name.split"
	"argparse.py" -> "self._negative_number_matcher.match"
	"__init__.py" -> "self.root._name_set"
	"fractions.py" -> monomorphic_operator
	"shutil.py" -> "fn.stat"
	"functools.py" -> "self.func"
	"weakref.py" -> "self._registry.get"
	"socket.py" -> "C.isupper"
	"__init__.py" -> classmethod
	"traceback.py" -> ValueError
	"inspect.py" -> "msg.format"
	"hashlib.py" -> isinstance
	"datetime.py" -> _format_offset
	"typing.py" -> join
	"tarfile.py" -> "os.makedev"
	"config.py" -> RuntimeError
	"test_templating.py" -> "monkeypatch.setattr"
	"code.py" -> "self.push"
	"ctx.py" -> "_cv_app.get"
	"__init__.py" -> "self.copy"
	"provider.py" -> "kwargs.setdefault"
	"ast.py" -> _Unparser
	"app.py" -> "self.create_jinja_environment"
	"copyreg.py" -> isinstance
	"enum.py" -> "metacls.__new__"
	"scaffold.py" -> object
	"py_compile.py" -> "tbtext.replace"
	"typing_extensions.py" -> repr
	"typing_extensions.py" -> "typing.ParamSpec"
	"tag.py" -> loads
	"tracemalloc.py" -> StatisticDiff
	"fractions.py" -> type
	"test_basic.py" -> run_test
	"socket.py" -> "io.RawIOBase.__init__"
	"ssl.py" -> sendto
	"ssl.py" -> join
	"rlcompleter.py" -> type
	"tag.py" -> "self.order.insert"
	"py_compile.py" -> "importlib.util.source_hash"
	"__init__.py" -> "m.groupdict"
	"warnings.py" -> category
	"pathlib.py" -> "yielded.add"
	"random.py" -> "self._randbelow"
	"tempfile.py" -> "_os.access"
	"shutil.py" -> "src.stat"
	"enum.py" -> "enum_class._member_type_"
	"traceback.py" -> print_exception
	"socket.py" -> _intenum_converter
	"helpers.py" -> "current_app.redirect"
	"random.py" -> setstate
	"__init__.py" -> "stream.write"
	"tracemalloc.py" -> "self._match_frame_impl"
	"tarfile.py" -> "dst.write"
	"glob.py" -> getattr
	"tempfile.py" -> "self.rng.choices"
	"argparse.py" -> format
	"traceback.py" -> _extract_caret_anchors_from_line_segment
	"calendar.py" -> isinstance
	"ipaddress.py" -> frozenset
	"socket.py" -> "io.BufferedWriter"
	"code.py" -> "InteractiveInterpreter.__init__"
	"__init__.py" -> "self._next"
	"test_basic.py" -> "flask.jsonify"
	"dataclasses.py" -> "inspect.signature"
	"plistlib.py" -> groupdict
	"__init__.py" -> "self.log"
	"__init__.py" -> "self.namelist"
	"datetime.py" -> isinstance
	"ipaddress.py" -> "self._is_subnet_of"
	"__init__.py" -> decode
	"tarfile.py" -> AbsolutePathError
	"shutil.py" -> fsrc_readinto
	"inspect.py" -> "new_params.pop"
	"cli.py" -> find_app_by_string
	"traceback.py" -> TracebackException
	"calendar.py" -> different_locale
	"test_basic.py" -> "exc_info.value.get_description"
	"tokenize.py" -> "out.encode"
	"test_basic.py" -> "app.route"
	"__init__.py" -> __mul__
	"__init__.py" -> f
	"base64.py" -> _bytes_from_decode_data
	"argparse.py" -> "self._long_break_matcher.sub"
	"test_basic.py" -> "flask.abort"
	"__init__.py" -> _tuple
	"__init__.py" -> "text.splitlines"
	"shutil.py" -> "srcentry.stat"
	"ipaddress.py" -> "_address_fmt_re.fullmatch"
	"test_blueprints.py" -> "backend.route"
	"bz2.py" -> ValueError
	"dataclasses.py" -> dataclass
	"typing_extensions.py" -> __repr__
	"feedparser.py" -> enumerate
	"dataclasses.py" -> "body_lines.append"
	"__init__.py" -> "path.at.rstrip"
	"linecache.py" -> updatecache
	"textwrap.py" -> "w.wrap"
	"random.py" -> "int.from_bytes"
	"ast.py" -> repr
	"glob.py" -> "os.fspath"
	"pathlib.py" -> S_ISREG
	"test_basic.py" -> "client.delete"
	"subprocess.py" -> "self.stdout_thread.join"
	"shlex.py" -> isinstance
	"provider.py" -> "self.loads"
	"test_appctx.py" -> list
	"inspect.py" -> "self.stack.pop"
	"zipfile.py" -> memoryview
	"inspect.py" -> "new_params.values"
	"__init__.py" -> "hdlr.handle"
	"subprocess.py" -> "_winapi.TerminateProcess"
	"test_basic.py" -> View
	"parse.py" -> _splituser
	"threading.py" -> _count
	"threading.py" -> "_main_thread._stop"
	"shutil.py" -> PermissionError
	"zipfile.py" -> "arcname.replace"
	"tarfile.py" -> "self.pax_headers.copy"
	"__init__.py" -> "record.name.find"
	"tag.py" -> isinstance
	"subprocess.py" -> "selector.get_map"
	"__init__.py" -> "self.__getstate__"
	"__init__.py" -> "traceback.print_stack"
	"test_request.py" -> "client.get"
	"enum.py" -> _auto_null
	"ipaddress.py" -> enumerate
	"_strptime.py" -> "self.pattern"
	"inspect.py" -> "new_arguments.append"
	"argparse.py" -> "self._fill_text"
	"zipfile.py" -> ZipInfo
	"threading.py" -> "self._set_ident"
	"blueprints.py" -> "self.record_once"
	"tarfile.py" -> "os.utime"
	"copy.py" -> "y.append"
	"ssl.py" -> "_socket.inet_aton"
	"signals.py" -> "_signals.signal"
	"ast.py" -> "self._type_ignores.get"
	"csv.py" -> "items.sort"
	"typing.py" -> len
	"locale.py" -> hasattr
	"pickle.py" -> "io.BytesIO"
	"weakref.py" -> "ref.__eq__"
	"parser.py" -> "fp.read"
	"tarfile.py" -> "tarinfo.ischr"
	"dis.py" -> hasattr
	"typing.py" -> issubclass
	"calendar.py" -> f
	"testing.py" -> "os.chdir"
	"sync.py" -> "loop_executor.submit"
	"test_testing.py" -> Namespace
	"feedparser.py" -> endswith
	"app.py" -> "self.response_class"
	"ssl.py" -> len
	"typing.py" -> get_args
	"socket.py" -> "IntEnum._convert_"
	"__init__.py" -> "self._make"
	"__init__.py" -> "self.data.isspace"
	"app.py" -> "rv.globals.update"
	"enum.py" -> _is_sunder
	"typing_extensions.py" -> _is_unionable
	"dataclasses.py" -> type
	"parse.py" -> "self._encoded_counterpart"
	"selectors.py" -> int
	"ipaddress.py" -> "cls._report_invalid_netmask"
	"string.py" -> join
	"cli.py" -> "run_command.params.insert"
	"tempfile.py" -> getvalue
	"ssl.py" -> callable
	"subprocess.py" -> "selector.select"
	"ipaddress.py" -> AddressValueError
	"gzip.py" -> __init__
	"ssl.py" -> "base64.standard_b64encode"
	"_strptime.py" -> _calc_julian_from_U_or_W
	"zipfile.py" -> RuntimeError
	"__init__.py" -> "value.__html_format__"
	"platform.py" -> _platform
	"traceback.py" -> sorted
	"parse.py" -> "functools.lru_cache"
	"ast.py" -> "self.require_parens"
	"feedparser.py" -> "bolmo.group"
	"ipaddress.py" -> "re.compile"
	"test_json.py" -> "client.post"
	"ctx.py" -> "self.app.do_teardown_request"
	"__init__.py" -> exists
	"rlcompleter.py" -> "readline.set_completer"
	"uuid.py" -> "int_.from_bytes"
	"ipaddress.py" -> min
	"inspect.py" -> "dis.COMPILER_FLAG_NAMES.items"
	"tarfile.py" -> "self._proc_gnusparse_10"
	"ssl.py" -> title
	"config.py" -> compile
	"tag.py" -> decode
	"socket.py" -> "self._check_sendfile_params"
	"pathlib.py" -> "pattern_parts.append"
	"__init__.py" -> str
	"__init__.py" -> "self.data.isalpha"
	"typing.py" -> "own_annotations.items"
	"platform.py" -> func
	"__init__.py" -> "importlib.metadata.version"
	"operator.py" -> enumerate
	"_weakrefset.py" -> KeyError
	"typing.py" -> defaultdict
	"templating.py" -> "attempts.append"
	"ast.py" -> "_Precedence.CMP.next"
	"__init__.py" -> "pattern.translate"
	"ssl.py" -> "self.gettimeout"
	"test_signals.py" -> isinstance
	"typing_extensions.py" -> "self._getitem"
	"dataclasses.py" -> "functools.wraps"
	"testing.py" -> dict
	"datetime.py" -> "self.replace"
	"pickle.py" -> "self.dispatch.get"
	"dis.py" -> "COMPILER_FLAG_NAMES.get"
	"_strptime.py" -> type
	"weakref.py" -> "self.data.items"
	"ssl.py" -> "context.load_verify_locations"
	"gzip.py" -> "zlib.crc32"
	"datetime.py" -> getinitargs
	"contextlib.py" -> "self._push_cm_exit"
	"fractions.py" -> isinstance
	"argparse.py" -> map
	"warnings.py" -> rstrip
	"dataclasses.py" -> hash_action
	"zipfile.py" -> open
	"testing.py" -> "app.session_interface.is_null_session"
	"argparse.py" -> "self.convert_arg_line_to_args"
	"test_logging.py" -> has_level_handler
	"test_views.py" -> "Index3.as_view"
	"textwrap.py" -> ord
	"__init__.py" -> "cls.read"
	"helpers.py" -> next
	"ast.py" -> "self._write_fstring_inner"
	"platform.py" -> iter
	"tarfile.py" -> "os.mkfifo"
	"shutil.py" -> enumerate
	"dis.py" -> _ExceptionTableEntry
	"calendar.py" -> "s.rstrip"
	"cli.py" -> "metadata.entry_points"
	"__init__.py" -> "app.config.from_prefixed_env"
	"app.py" -> bool
	"parse.py" -> SplitResult
	"selectors.py" -> register
	"threading.py" -> "self._waiters.clear"
	"functools.py" -> register
	"base64.py" -> curr_clear
	"_strptime.py" -> re_escape
	"functools.py" -> _lru_cache_wrapper
	"__init__.py" -> "self.release"
	"blueprints.py" -> BlueprintSetupState
	"functools.py" -> repr
	"test_cli.py" -> ScriptInfo
	"fractions.py" -> "f.as_integer_ratio"
	"test_appctx.py" -> "client.get"
	"_strptime.py" -> "base.__setitem__"
	"shutil.py" -> "src.endswith"
	"ssl.py" -> "sock.gettimeout"
	"test_basic.py" -> "flask.get_flashed_messages"
	"threading.py" -> "self._started.is_set"
	"views.py" -> "methods.add"
	"random.py" -> len
	"factory.py" -> join
	"string.py" -> len
	"parse.py" -> "name_value.split"
	"types.py" -> prepare_class
	"threading.py" -> "self._wait"
	"test_cli.py" -> Exception
	"views.py" -> jsonify
	"inspect.py" -> "values.extend"
	"app.py" -> "weakref.ref"
	"test_templating.py" -> dict
	"tarfile.py" -> "os.path.commonpath"
	"argparse.py" -> zip
	"argparse.py" -> "result.extend"
	"typing_extensions.py" -> "_EXCLUDED_ATTRS.add"
	"blueprints.py" -> <unknown_function>
	"cli.py" -> "ast.literal_eval"
	"tarfile.py" -> "os.link"
	"argparse.py" -> "optionals.append"
	"copy.py" -> zip
	"subprocess.py" -> "f.close"
	"argparse.py" -> "self._defaults.get"
	"functools.py" -> __lt__
	"bz2.py" -> "self._check_can_read"
	"locale.py" -> _test
	"feedparser.py" -> "errors.NoBoundaryInMultipartDefect"
	"tag.py" -> str
	"__init__.py" -> "self._read_files_egginfo_sources"
	"sync.py" -> "call_result.set_result"
	"shutil.py" -> min
	"app.py" -> func
	"tracemalloc.py" -> _get_object_traceback
	"shutil.py" -> endswith
	"__init__.py" -> "m.end"
	"test_basic.py" -> "gc.enable"
	"__init__.py" -> "re.escape"
	"base64.py" -> join
	"typing_extensions.py" -> "types.items"
	"dataclasses.py" -> "ns.update"
	"functools.py" -> user_function
	"dis.py" -> _test
	"socket.py" -> has_dualstack_ipv6
	"test_basic.py" -> expect
	"feedparser.py" -> "preamble.append"
	"typing.py" -> __instancecheck__
	"typing.py" -> "_overload_registry.clear"
	"parse.py" -> _fix_result_transcoding
	"csv.py" -> join
	"conftest.py" -> "os.close"
	"inspect.py" -> "sys.getrecursionlimit"
	"copy.py" -> copier
	"socket.py" -> "os.set_handle_inheritable"
	"tarfile.py" -> "tarinfo.islnk"
	"argparse.py" -> "option_string.split"
	"dis.py" -> zip
	"cli.py" -> "current_app.make_shell_context"
	"cli.py" -> "current_app._get_current_object"
	"enum.py" -> etype
	"dataclasses.py" -> _hash_fn
	"dataclasses.py" -> _set_new_attribute
	"tarfile.py" -> is_tarfile
	"platform.py" -> mac_ver
	"__init__.py" -> make_condition
	"bz2.py" -> "results.append"
	"_strptime.py" -> _thread_allocate_lock
	"warnings.py" -> "arg.split"
	"__init__.py" -> "h.acquire"
	"tarfile.py" -> func
	"test_auth.py" -> "app.app_context"
	"locale.py" -> localeconv
	"argparse.py" -> "extras.append"
	"zipfile.py" -> "ZipInfo.from_file"
	"config.py" -> dir
	"locale.py" -> "decimal_point.join"
	"dataclasses.py" -> isinstance
	"shutil.py" -> "os.confstr"
	"pathlib.py" -> "f.write"
	"__init__.py" -> "seen.add"
	"__init__.py" -> eval
	"threading.py" -> "self._bootstrap_inner"
	"typing.py" -> "all_params.remove"
	"feedparser.py" -> "errors.MisplacedEnvelopeHeaderDefect"
	"parse.py" -> isinstance
	"codeop.py" -> getattr
	"tokenize.py" -> "cookie_re.match"
	"__init__.py" -> "_nameToLevel.copy"
	"__init__.py" -> "weakref.WeakSet"
	"inspect.py" -> "annotations.get"
	"dis.py" -> "name.startswith"
	"tempfile.py" -> "self._rmtree"
	"__init__.py" -> "name.rpartition"
	"zipfile.py" -> "self.at.rstrip"
	"platform.py" -> "os.path.normpath"
	"hashlib.py" -> "inner.copy"
	"test_testing.py" -> jsonify
	"test_async.py" -> "app.add_url_rule"
	"dataclasses.py" -> classmethod
	"__init__.py" -> "_chain.from_iterable"
	"typing.py" -> _strip_annotations
	"__init__.py" -> "kwargs.items"
	"subprocess.py" -> "msvcrt.open_osfhandle"
	"shutil.py" -> "os.getxattr"
	"zipfile.py" -> "io.BufferedIOBase.readline"
	"zipfile.py" -> _EndRecData
	"statistics.py" -> ValueError
	"shutil.py" -> _copyxattr
	"blueprints.py" -> "s.add_url_rule"
	"inspect.py" -> replace
	"dis.py" -> "labels.append"
	"parse.py" -> _splithost
	"cli.py" -> enumerate
	"ssl.py" -> "sslsock.getpeercert"
	"platform.py" -> "_WIN32_SERVER_RELEASES.get"
	"parse.py" -> "resolved_path.append"
	"ipaddress.py" -> "other.subnet_of"
	"cli.py" -> compile
	"base64.py" -> _input_type_check
	"__init__.py" -> "self.fmt_spec.match"
	"shutil.py" -> "filename.endswith"
	"enum.py" -> "failed.sort"
	"parse.py" -> append
	"socket.py" -> "selectors.PollSelector"
	"parse.py" -> _byte_quoter_factory
	"zipfile.py" -> range
	"inspect.py" -> strip
	"csv.py" -> _Dialect
	"ssl.py" -> "protos.append"
	"weakref.py" -> __init__
	"_strptime.py" -> isinstance
	"statistics.py" -> reduce
	"testing.py" -> ExitStack
	"blueprints.py" -> ValueError
	"test_config.py" -> "app.config.from_object"
	"app.py" -> response
	"config.py" -> "key.split"
	"pathlib.py" -> "fnmatch.translate"
	"argparse.py" -> "arg_strings.remove"
	"shlex.py" -> _find_unsafe
	"templating.py" -> "self._get_source_explained"
	"conftest.py" -> "os.unlink"
	"tempfile.py" -> "newfile.buffer.write"
	"ssl.py" -> decode
	"typing.py" -> "params.index"
	"threading.py" -> "self.finished.is_set"
	"platform.py" -> _norm_version
	"tarfile.py" -> "self._find_link_target"
	"logging.py" -> "logging.getLogger"
	"app.py" -> "_cv_app.get"
	"testing.py" -> "sys.stdout.write"
	"tarfile.py" -> "bz2.BZ2Compressor"
	"test_signals.py" -> "calls.append"
	"tag.py" -> "self.register"
	"enum.py" -> _is_internal_class
	"__init__.py" -> "self._keep_positive"
	"__init__.py" -> any
	"cli.py" -> "dotenv.dotenv_values"
	"calendar.py" -> "self.formatweekheader"
	"traceback.py" -> "exceptions.append"
	"app.py" -> handler
	"tarfile.py" -> "tarfile.fileobj.tell"
	"bz2.py" -> "size.__index__"
	"argparse.py" -> dict
	"functools.py" -> __get__
	"typing.py" -> super
	"__init__.py" -> PlaceHolder
	"sync.py" -> "loop.run_in_executor"
	"locale.py" -> _strip_padding
	"ssl.py" -> "self._check_connected"
	"typing.py" -> _CallableType
	"base64.py" -> len
	"tempfile.py" -> "file.writelines"
	"dataclasses.py" -> _init_fn
	"tarfile.py" -> "member.isdir"
	"pickle.py" -> "self.persistent_id"
	"weakref.py" -> pop
	"code.py" -> input
	"plistlib.py" -> encode
	"parse.py" -> "x.decode"
	"traceback.py" -> "operator_str.lstrip"
	"subprocess.py" -> "result.append"
	"provider.py" -> "o.__html__"
	"dis.py" -> "parser.parse_args"
	"ast.py" -> "new_values.append"
	"_weakrefset.py" -> isinstance
	"conftest.py" -> AuthActions
	"ctx.py" -> "_cv_app.set"
	"socket.py" -> "file.seek"
	"dataclasses.py" -> _cmp_fn
	"subprocess.py" -> "threading.Thread"
	"dis.py" -> dict
	"zipfile.py" -> "fpin.seek"
	"datetime.py" -> local
	"test_instance_config.py" -> "ns.mkdir"
	"selectors.py" -> "self._selector.close"
	"test_signals.py" -> "flask.before_render_template.disconnect"
	"fractions.py" -> _operator_fallbacks
	"uuid.py" -> "time.time_ns"
	"parse.py" -> "string.replace"
	"zipfile.py" -> "self.fp.truncate"
	"gzip.py" -> "time.time"
	"typing_extensions.py" -> _LiteralGenericAlias
	"tokenize.py" -> "first.startswith"
	"blog.py" -> render_template
	"tarfile.py" -> "self._proc_builtin"
	"__init__.py" -> "new.update"
	"_strptime.py" -> "found.end"
	"tarfile.py" -> "self.getmembers"
	"threading.py" -> "self._delete"
	"traceback.py" -> "klass._extract_from_extended_frame_gen"
	"statistics.py" -> erf
	"test_templating.py" -> CustomFlask
	"testing.py" -> TypeError
	"helpers.py" -> "gen.close"
	"tarfile.py" -> "name.encode"
	"types.py" -> len
	"socket.py" -> "b.detach"
	"warnings.py" -> sw
	"tempfile.py" -> "_io.text_encoding"
	"traceback.py" -> extract_tb
	"shutil.py" -> "tarobj.close"
	"__init__.py" -> open
	"inspect.py" -> "linecache.getlines"
	"tarfile.py" -> "member.replace"
	"test_blueprints.py" -> test_request_context
	"types.py" -> issubclass
	"enum.py" -> "self.fset"
	"pickle.py" -> "self.persistent_load"
	"db.py" -> "datetime.fromisoformat"
	"typing_extensions.py" -> bool
	"pathlib.py" -> "selector.select_from"
	"__init__.py" -> "app.register_blueprint"
	"__main__.py" -> main
	"zipfile.py" -> "self.write"
	"plistlib.py" -> "binascii.a2b_base64"
	"typing_extensions.py" -> hash
	"textwrap.py" -> "text.split"
	"tarfile.py" -> "os.path.normpath"
	"lzma.py" -> "self._compressor.flush"
	"textwrap.py" -> "re.sub"
	"tokenize.py" -> "enc.startswith"
	"weakref.py" -> "sys.exc_info"
	"traceback.py" -> walk_stack
	"_strptime.py" -> "found_dict.get"
	"tarfile.py" -> "next.name.removesuffix"
	"enum.py" -> "classdict.items"
	"test_templating.py" -> "logging.getLogger"
	"helpers.py" -> "session.get"
	"test_blueprints.py" -> "test.route"
	"test_blueprints.py" -> MyDecoratorException
	"tarfile.py" -> "tarfile.fileobj.read"
	"inspect.py" -> AttributeError
	"test_helpers.py" -> getattr
	"ssl.py" -> str
	"templating.py" -> "BaseEnvironment.__init__"
	"testing.py" -> _pause_echo
	"traceback.py" -> "_ctx.indent"
	"pickle.py" -> "m.tobytes"
	"inspect.py" -> "result.append"
	"selectors.py" -> "key._replace"
	"testing.py" -> getattr
	"plistlib.py" -> "self.data.append"
	"tarfile.py" -> "src.read"
	"datetime.py" -> utcoffset
	"__init__.py" -> "_py39compat.ep_matches"
	"datetime.py" -> _divide_and_round
	"gzip.py" -> "self._init_write"
	"threading.py" -> "self._break"
	"conftest.py" -> "self._client.post"
	"socket.py" -> "sys.platform.lower"
	"dis.py" -> "parser.add_argument"
	"ast.py" -> deque
	"zipfile.py" -> _check_zipfile
	"cli.py" -> "self.split_envvar_value"
	"code.py" -> "parser.parse_args"
	"subprocess.py" -> list
	"argparse.py" -> "formatter.end_section"
	"ssl.py" -> "dn.count"
	"dataclasses.py" -> str
	"testing.py" -> _find_binary_reader
	"test_blog.py" -> "db.commit"
	"parse.py" -> namedtuple
	"ipaddress.py" -> NotImplementedError
	"zipfile.py" -> "self._compressor.compress"
	"enum.py" -> "enum_class._flag_mask_.bit_length"
	"textwrap.py" -> "line.strip"
	"base64.py" -> "s.translate"
	"pathlib.py" -> _ignore_error
	"operator.py" -> <unknown_function>
	"uuid.py" -> TypeError
	"test_json.py" -> "x.strip"
	"selectors.py" -> "self._fileobj_lookup"
	"__init__.py" -> "warnings.formatwarning"
	"enum.py" -> "first_enum._generate_next_value_"
	"random.py" -> "a.encode"
	"inspect.py" -> isclass
	"test_appctx.py" -> "app.route"
	"glob.py" -> "magic_check.search"
	"parse.py" -> "r.append"
	"sync.py" -> "AsyncToSync.launch_map.get"
	"rlcompleter.py" -> "readline.insert_text"
	"random.py" -> super
	"traceback.py" -> repr
	"ssl.py" -> recvfrom
	"inspect.py" -> _check_instance
	"tarfile.py" -> "match.start"
	"__init__.py" -> "self.root.namelist"
	"string.py" -> super
	"statistics.py" -> "partials.items"
	"__init__.py" -> StrFormatter
	"types.py" -> "base.__mro_entries__"
	"functools.py" -> "method.__get__"
	"test_signals.py" -> "flask.request_started.disconnect"
	"subprocess.py" -> tuple
	"testing.py" -> "sys.stdout.flush"
	"test_json.py" -> "pytest.mark.parametrize"
	"test_db.py" -> "runner.invoke"
	"threading.py" -> set
	"plistlib.py" -> dump
	"testing.py" -> "self._context_stack.enter_context"
	"selectors.py" -> "self._readers.add"
	"zipfile.py" -> "self.getinfo"
	"tempfile.py" -> "cls._rmtree"
	"enum.py" -> gnv
	"statistics.py" -> "result.append"
	"tarfile.py" -> "name.tell"
	"app.py" -> "self._get_exc_class_and_code"
	"inspect.py" -> add
	"threading.py" -> "tlock.release"
	"subprocess.py" -> "inst._internal_poll"
	"__init__.py" -> enumerate
	"argparse.py" -> _get_action_name
	"argparse.py" -> "self._mutually_exclusive_groups.append"
	"__init__.py" -> "root.setLevel"
	"templating.py" -> list
	"platform.py" -> _follow_symlinks
	"ipaddress.py" -> "ips.append"
	"statistics.py" -> "root.next_minus"
	"enum.py" -> "self._last_values.append"
	"shlex.py" -> "os.path.join"
	"test_config.py" -> "app.config.get_namespace"
	"logging.py" -> "logger.getEffectiveLevel"
	"warnings.py" -> "traceback.format_list"
	"argparse.py" -> type_func
	"__init__.py" -> "self.at.rstrip"
	"subprocess.py" -> "_active.remove"
	"inspect.py" -> list
	"typing.py" -> hasattr
	"test_views.py" -> "client.post"
	"platform.py" -> _mac_ver_xml
	"helpers.py" -> _wz_redirect
	"socket.py" -> "lsock.close"
	"__init__.py" -> "EntryPoints._from_text_for"
	"zipfile.py" -> "self._decrypter"
	"test_basic.py" -> PrefixPathMiddleware
	"tarfile.py" -> "os.makedirs"
	"cli.py" -> "rows.append"
	"code.py" -> "parser.add_argument"
	"zipfile.py" -> chr
	"enum.py" -> "more_members.items"
	"enum.py" -> "str.__new__"
	"selectors.py" -> unregister
	"bz2.py" -> "io.TextIOWrapper"
	"locale.py" -> _append_modifier
	"calendar.py" -> "self.formatweek"
	"cli.py" -> "ctx.get_parameter_source"
	"pickle.py" -> "self.save_reduce"
	"ast.py" -> "self.interleave"
	"ipaddress.py" -> "self._check_int_address"
	"subprocess.py" -> "_winapi.CreatePipe"
	"test_json.py" -> "client.get"
	"threading.py" -> WeakSet
	"base64.py" -> "re.search"
	"ipaddress.py" -> replace
	"__init__.py" -> "_nameToLevel.get"
	"random.py" -> getrandbits
	"__init__.py" -> _acquireLock
	"tracemalloc.py" -> _get_traces
	"test_instance_config.py" -> "os.fspath"
	"__init__.py" -> "threading.get_ident"
	"plistlib.py" -> _encode_base64
	"typing.py" -> AssertionError
	"test_json.py" -> "flask.json.loads"
	"cli.py" -> "ctx.ensure_object"
	"operator.py" -> ValueError
	"statistics.py" -> _decimal_sqrt_of_frac
	"views.py" -> render_template
	"config.py" -> "k.startswith"
	"socket.py" -> "_socket.socket.__init__"
	"typing.py" -> eval
	"enum.py" -> "flag_mask.bit_length"
	"zipfile.py" -> "fpin.read"
	"uuid.py" -> join
	"inspect.py" -> tuple
	"sync.py" -> "self.awaitable"
	"pathlib.py" -> lstrip
	"shutil.py" -> NotImplementedError
	"cli.py" -> "sorts.index"
	"pickle.py" -> "self.stack.pop"
	"calendar.py" -> enumerate
	"zipfile.py" -> "fname.decode"
	"subprocess.py" -> _text_encoding
	"shutil.py" -> "tar.add"
	"cli.py" -> "click.command"
	"ast.py" -> iter
	"ast.py" -> visit
	"gzip.py" -> format
	"__init__.py" -> "app.config.update"
	"subprocess.py" -> int
	"_strptime.py" -> "base.__init__"
	"test_user_error_handler.py" -> "c.get"
	"test_user_error_handler.py" -> ForbiddenSubclassRegistered
	"traceback.py" -> cls
	"cli.py" -> NoAppException
	"__init__.py" -> _len
	"weakref.py" -> "L.sort"
	"__init__.py" -> "spec.partition"
	"tarfile.py" -> "self.makeunknown"
	"test_session_interface.py" -> get
	"tempfile.py" -> "self._finalizer.detach"
	"tokenize.py" -> readline
	"argparse.py" -> TypeError
	"inspect.py" -> FrameInfo
	"pathlib.py" -> S_ISSOCK
	"config.py" -> load
	"typing_extensions.py" -> "abc.ABCMeta.__subclasscheck__"
	"zipfile.py" -> "self.mkdir"
	"inspect.py" -> "self._parameters.values"
	"code.py" -> "self.runcode"
	"fnmatch.py" -> "pat.find"
	"shutil.py" -> ValueError
	"subprocess.py" -> "os.read"
	"ast.py" -> "self.delimit"
	"testing.py" -> "kwargs.get"
	"__init__.py" -> "rv.__dict__.update"
	"auth.py" -> generate_password_hash
	"shutil.py" -> "sys.__stdout__.fileno"
	"traceback.py" -> "locals.items"
	"datetime.py" -> "other.as_integer_ratio"
	"ssl.py" -> _dnsname_match
	"__init__.py" -> "other.joinpath"
	"sync.py" -> "asyncio.new_event_loop"
	"functools.py" -> __ge__
	"config.py" -> "mappings.update"
	"typing.py" -> any
	"test_cli.py" -> load_dotenv
	"functools.py" -> "kwds.items"
	"weakref.py" -> wr
	"weakref.py" -> ref
	"test_appctx.py" -> Exception
	"calendar.py" -> min
	"__init__.py" -> "StreamHandler.emit"
	"__init__.py" -> "self._name_from_stem"
	"textwrap.py" -> print
	"tarfile.py" -> "group.add_argument"
	"argparse.py" -> "self._get_nargs_pattern"
	"argparse.py" -> "warnings.warn"
	"ssl.py" -> "self.getpeername"
	"test_cli.py" -> MockCtx
	"dataclasses.py" -> _field_init
	"_strptime.py" -> re_compile
	"threading.py" -> "__all__.append"
	"random.py" -> "n.bit_length"
	"tempfile.py" -> mkdtemp
	"__init__.py" -> "_default_decoder.decode"
	"test_user_error_handler.py" -> getattr
	"argparse.py" -> getattr
	"zipfile.py" -> "self._comp.flush"
	"tag.py" -> Markup
	"copy.py" -> getattr
	"functools.py" -> hash
	"provider.py" -> "dump_args.setdefault"
	"weakref.py" -> super
	"__init__.py" -> "self.data.index"
	"tracemalloc.py" -> "self._match_frame"
	"inspect.py" -> "self._signature.parameters.items"
	"cli.py" -> locate_app
	"test_helpers.py" -> "pytest.raises"
	"tarfile.py" -> "obj.name.endswith"
	"__init__.py" -> "self.data.reverse"
	"typing.py" -> "attr.startswith"
	"copyreg.py" -> "object.__new__"
	"shlex.py" -> "re.compile"
	"app.py" -> "self.url_map_class"
	"enum.py" -> bin
	"test_basic.py" -> Path
	"datetime.py" -> "self._name_from_offset"
	"test_basic.py" -> "warnings.filterwarnings"
	"feedparser.py" -> "errors.MissingHeaderBodySeparatorDefect"
	"blueprints.py" -> "s.app.url_default_functions.setdefault"
	"test_user_error_handler.py" -> "app.errorhandler"
	"inspect.py" -> get_annotations
	"calendar.py" -> center
	"__init__.py" -> "self._read_files_egginfo_installed"
	"test_cli.py" -> zip
	"functools.py" -> "abstract_bases.append"
	"uuid.py" -> len
	"tag.py" -> b64decode
	"test_cli.py" -> dotenv_not_available
	"test_basic.py" -> "flask.Response"
	"plistlib.py" -> total_seconds
	"copyreg.py" -> constructor
	"shutil.py" -> RegistryError
	"__init__.py" -> "iterable.items"
	"datetime.py" -> "cls.fromtimestamp"
	"lzma.py" -> isinstance
	"__init__.py" -> distributions
	"argparse.py" -> "self._format_args"
	"__init__.py" -> "self.locate_file"
	"_strptime.py" -> "replacement_pairs.extend"
	"blueprints.py" -> "state.app.errorhandler"
	"feedparser.py" -> "self._partial.truncate"
	"lzma.py" -> "self._fp.close"
	"zipfile.py" -> ValueError
	"py_compile.py" -> "sys.stdin.readlines"
	"platform.py" -> uname
	"datetime.py" -> "object.__new__"
	"socket.py" -> "sock.sendmsg"
	"scaffold.py" -> "importlib.util.find_spec"
	"plistlib.py" -> "self._read_object"
	"csv.py" -> "columnTypes.items"
	"test_config.py" -> "os.path.dirname"
	"warnings.py" -> "globals.setdefault"
	"tempfile.py" -> "self._file.isatty"
	"test_testing.py" -> "app.test_client"
	"threading.py" -> "self._cond.notify_all"
	"blueprints.py" -> "t.TypeVar"
	"tarfile.py" -> encode
	"threading.py" -> "self._started._at_fork_reinit"
	"typing.py" -> _eval_type
	"app.py" -> "os.path.splitext"
	"tarfile.py" -> "self.extractfile"
	"platform.py" -> "_os_release_unescape.sub"
	"argparse.py" -> "self._parse_optional"
	"test_helpers.py" -> MyFlask
	"subprocess.py" -> "self._input.encode"
	"debughelpers.py" -> enumerate
	"socket.py" -> "selectors.SelectSelector"
	"__init__.py" -> "self.usesTime"
	"blog.py" -> redirect
	"test_converters.py" -> join
	"plistlib.py" -> join
	"tarfile.py" -> "pax_headers.copy"
	"inspect.py" -> _get_code_position
	"tempfile.py" -> "_os.mkdir"
	"ssl.py" -> SSLContext
	"dataclasses.py" -> "repr_running.discard"
	"tokenize.py" -> format
	"tarfile.py" -> "tf.extractall"
	"test_logging.py" -> "logging.StreamHandler"
	"subprocess.py" -> "sys._getframe"
	"threading.py" -> "thread._stop"
	"functools.py" -> iter
	"inspect.py" -> "global_ns.get"
	"pathlib.py" -> "name.rfind"
	"contextlib.py" -> "self._exit_callbacks.append"
	"statistics.py" -> _fail_neg
	"threading.py" -> ExceptHookArgs
	"dataclasses.py" -> _fields_in_init_order
	"enum.py" -> reduce
	"shutil.py" -> "os.setxattr"
	"test_logging.py" -> "client.get"
	"textwrap.py" -> split
	"test_basic.py" -> encode
	"test_cli.py" -> Blueprint
	"__init__.py" -> _MarkupEscapeHelper
	"views.py" -> super
	"ssl.py" -> "self.context._wrap_socket"
	"__init__.py" -> select
	"platform.py" -> "version.split"
	"inspect.py" -> getmodule
	"test_appctx.py" -> "app.test_request_context"
	"tarfile.py" -> "os.path.isabs"
	"sessions.py" -> "response.set_cookie"
	"linecache.py" -> "os.stat"
	"test_helpers.py" -> isinstance
	"textwrap.py" -> "_whitespace_only_re.sub"
	"functools.py" -> __gt__
	"tokenize.py" -> main
	"__init__.py" -> "_compiler.compile"
	"enum.py" -> global_enum
	"inspect.py" -> next
	"platform.py" -> "info.strip"
	"testing.py" -> "shutil.rmtree"
	"auth.py" -> get_db
	"typing_extensions.py" -> _TypeGuardForm
	"subprocess.py" -> "os.fsencode"
	"tarfile.py" -> "members.index"
	"__init__.py" -> _OrderedDictItemsView
	"codeop.py" -> str
	"inspect.py" -> istraceback
	"__init__.py" -> chr
	"statistics.py" -> bisect_right
	"pickle.py" -> reduce
	"ast.py" -> "node.value.replace"
	"sync.py" -> "cvar.get"
	"argparse.py" -> ngettext
	"ctx.py" -> len
	"contextlib.py" -> "self.__class__"
	"selectors.py" -> format
	"datetime.py" -> "cls.utcfromtimestamp"
	"random.py" -> "self.randrange"
	"tempfile.py" -> issubclass
	"test_templating.py" -> MyFlask
	"tarfile.py" -> "lzma.LZMACompressor"
	"copy.py" -> type
	"contextlib.py" -> issubclass
	"testing.py" -> "builder.get_request"
	"zipfile.py" -> "bz2.BZ2Decompressor"
	"glob.py" -> _isdir
	"rlcompleter.py" -> "matches.append"
	"__init__.py" -> detect_encoding
	"zipfile.py" -> "compressor_names.get"
	"pickle.py" -> get
	"zipfile.py" -> "os.path.isdir"
	"subprocess.py" -> _WaitForSingleObject
	"argparse.py" -> "kwargs.get"
	"inspect.py" -> "sys._getframe"
	"subprocess.py" -> getstatusoutput
	"tempfile.py" -> "self.close"
	"test_json.py" -> "app.route"
	"warnings.py" -> _next_external_frame
	"ipaddress.py" -> "cls._ip_int_from_string"
	"argparse.py" -> callable
	"__init__.py" -> "cls.discover"
	"contextlib.py" -> "self.thing.close"
	"random.py" -> _test
	"dis.py" -> type
	"zipfile.py" -> "self._decomp.decompress"
	"subprocess.py" -> "key.fileobj.close"
	"blueprints.py" -> "options.pop"
	"threading.py" -> "_active.clear"
	"pathlib.py" -> "name.endswith"
	"getopt.py" -> startswith
	"plistlib.py" -> "self.write_array"
	"test_blog.py" -> "app.app_context"
	"typing_extensions.py" -> print
	"zipfile.py" -> "self._close"
	"plistlib.py" -> len
	"typing_extensions.py" -> set
	"operator.py" -> "self._kwargs.items"
	"weakref.py" -> hasattr
	"gzip.py" -> "group.add_argument"
	"argparse.py" -> "self._check_value"
	"ssl.py" -> "protos.extend"
	"functools.py" -> dispatch
	"contextlib.py" -> "sys.exc_info"
	"__init__.py" -> "self.data.count"
	"tracemalloc.py" -> Trace
	"__init__.py" -> OrderedDict
	"test_blueprints.py" -> "values.pop"
	"ctx.py" -> "sys.exc_info"
	"__init__.py" -> <unknown_function>
	"shutil.py" -> "os.path.relpath"
	"tarfile.py" -> "obj.name.rstrip"
	"argparse.py" -> _ArgumentGroup
	"zipfile.py" -> sorted
	"test_templating.py" -> isinstance
	"inspect.py" -> "kwdefaults.get"
	"datetime.py" -> all
	"ssl.py" -> "sock.fileno"
	"ast.py" -> _pad_whitespace
	"calendar.py" -> weekday
	"testing.py" -> "EnvironBuilder.from_environ"
	"base64.py" -> memoryview
	"contextlib.py" -> "self._push_exit_callback"
	"plistlib.py" -> "values.append"
	"types.py" -> hasattr
	"typing_app_decorators.py" -> Flask
	"textwrap.py" -> TextWrapper
	"ast.py" -> "self._precedences.get"
	"enum.py" -> max
	"bz2.py" -> "comp.compress"
	"test_request.py" -> "app.get"
	"py_compile.py" -> main
	"test_user_error_handler.py" -> "pytest.raises"
	"__init__.py" -> "_STYLES.keys"
	"inspect.py" -> "types.MappingProxyType"
	"inspect.py" -> "sig.parameters.values"
	"sessions.py" -> super
	"functools.py" -> "self.dispatcher.register"
	"__init__.py" -> "warnings.simplefilter"
	"ast.py" -> "sep.join"
	"argparse.py" -> "formatter.add_arguments"
	"ssl.py" -> range
	"cli.py" -> "self.create_app"
	"pathlib.py" -> _is_wildcard_pattern
	"__init__.py" -> "self.data.rstrip"
	"parse.py" -> "url.lstrip"
	"tokenize.py" -> IndentationError
	"weakref.py" -> __call__
	"subprocess.py" -> "data.decode"
	"datetime.py" -> "self.utcoffset"
	"pathlib.py" -> _make_selector
	"gzip.py" -> "self._read_gzip_header"
	"ssl.py" -> endswith
	"conftest.py" -> "self._client.get"
	"__init__.py" -> _StderrHandler
	"test_json.py" -> "codecs.lookup"
	"ssl.py" -> "self.do_handshake"
	"tracemalloc.py" -> "old_snapshot._group_by"
	"__init__.py" -> _iskeyword
	"tokenize.py" -> map
	"rlcompleter.py" -> "atexit.register"
	"test_helpers.py" -> "called.append"
	"__init__.py" -> NullHandler
	"copy.py" -> _reconstruct
	"__init__.py" -> "self.data.rfind"
	"config.py" -> "dict.__repr__"
	"dataclasses.py" -> "re.compile"
	"__init__.py" -> "os.path.abspath"
	"app.py" -> "self.blueprints.values"
	"auth.py" -> check_password_hash
	"ast.py" -> set
	"parse.py" -> "re.compile"
	"datetime.py" -> OverflowError
	"pathlib.py" -> "self.with_name"
	"gzip.py" -> "output.write"
	"tag.py" -> "self.order.append"
	"__init__.py" -> NotImplementedError
	"pickle.py" -> _Unpickler
	"conftest.py" -> "os.path.dirname"
	"__init__.py" -> "self.stream.flush"
	"enum.py" -> "checked_dict.keys"
	"code.py" -> "self.showsyntaxerror"
	"signal.py" -> _int_to_enum
	"warnings.py" -> "filters.insert"
	"subprocess.py" -> "os.posix_spawn"
	"__init__.py" -> starmap
	"ipaddress.py" -> int
	"_strptime.py" -> "format.index"
	"_weakrefset.py" -> "self.data.issubset"
	"scaffold.py" -> TypeError
	"selectors.py" -> "self._fd_to_key.pop"
	"test_signals.py" -> "flask.request_finished.connect"
	"statistics.py" -> "plus.as_integer_ratio"
	"hashlib.py" -> "password.translate"
	"enum.py" -> "members.sort"
	"enum.py" -> AttributeError
	"subprocess.py" -> SubprocessError
	"__init__.py" -> proxy
	"csv.py" -> StringIO
	"test_subclassing.py" -> SuppressedFlask
	"test_reqctx.py" -> "flask.request.url.endswith"
	"platform.py" -> join
	"helpers.py" -> "message_flashed.send"
	"locale.py" -> "encoding.replace"
	"tokenize.py" -> startswith
	"threading.py" -> active_count
	"config.py" -> "t.TypeVar"
	"tarfile.py" -> _get_filtered_attrs
	"threading.py" -> "self._exit"
	"__init__.py" -> ValueError
	"views.py" -> hasattr
	"typing_extensions.py" -> "type.__new__"
	"tarfile.py" -> "self.cmp.decompress"
	"glob.py" -> _join
	"enum.py" -> setattr
	"tempfile.py" -> _gettempdir
	"testing.py" -> "self._add_cookies_to_wsgi"
	"test_basic.py" -> expect_exception
	"__init__.py" -> "slots.pop"
	"test_helpers.py" -> str
	"base64.py" -> "chunks.append"
	"app.py" -> "os.environ.get"
	"subprocess.py" -> run
	"subprocess.py" -> "bs_buf.append"
	"zipfile.py" -> append
	"ctx.py" -> "self._cv_tokens.append"
	"warnings.py" -> print
	"datetime.py" -> _parse_isoformat_time
	"ssl.py" -> "_socket.inet_ntoa"
	"testing.py" -> str
	"test_cli.py" -> CliRunner
	"__init__.py" -> "app.config.from_pyfile"
	"shutil.py" -> stat_func
	"tokenize.py" -> TokenError
	"testing.py" -> invoke
	"statistics.py" -> repeat
	"testing.py" -> "importlib.metadata.version"
	"tarfile.py" -> "self.read"
	"tarfile.py" -> nti
	"__init__.py" -> "value.split"
	"zipfile.py" -> "py_compile.compile"
	"zipfile.py" -> _difference
	"cli.py" -> "app.cli.get_command"
	"random.py" -> "self.seed"
	"shlex.py" -> "self.filestack.appendleft"
	"threading.py" -> predicate
	"inspect.py" -> Traceback
}
